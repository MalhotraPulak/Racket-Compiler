type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x #t])
   42)


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x #t])
   42)


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x #t])
   42)


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20651 #t])
   42)


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20651 #t])
   42)


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20651 #t])
   42)


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20651 #t])
   42)


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
start:
    x20651 = #t;
    return 42;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20651 : 'Boolean, 
start:
    x20651 = #t;
    return 42;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20651 : 'Boolean, 
start:
    movq $1, x20651
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20651 : 'Boolean, 
start:
    movq $1, x20651
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rax %rsp))
movq $1, x20651
movq $42, %rax
jmp conclusion




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rax %rsp))
movq $1, x20651
movq $42, %rax
jmp conclusion




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $1, x20651
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $1, x20651
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20651 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $1, %rcx
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20651 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $1, %rcx
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20651 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $1, %rcx
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20651 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $1, %rcx
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20651 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $1, %rcx
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20651 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20651 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $1, %rcx
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_01"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x #f])
   42)


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x #f])
   42)


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x #f])
   42)


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20666 #f])
   42)


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20666 #f])
   42)


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20666 #f])
   42)


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20666 #f])
   42)


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
start:
    x20666 = #f;
    return 42;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20666 : 'Boolean, 
start:
    x20666 = #f;
    return 42;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20666 : 'Boolean, 
start:
    movq $0, x20666
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20666 : 'Boolean, 
start:
    movq $0, x20666
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rax %rsp))
movq $0, x20666
movq $42, %rax
jmp conclusion




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rax %rsp))
movq $0, x20666
movq $42, %rax
jmp conclusion




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $0, x20666
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $0, x20666
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20666 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $0, %rcx
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20666 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $0, %rcx
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20666 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $0, %rcx
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20666 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $0, %rcx
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20666 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $0, %rcx
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20666 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20666 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $0, %rcx
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_02"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(if #t
   42
   0)



testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if #t
   42
   0)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if #t
   42
   0)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if #t
   42
   0)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if #t
   42
   0)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if #t
   42
   0)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if #t
   42
   0)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
start:
    return 42;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    
start:
    return 42;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    
start:
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    
start:
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_03"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x 2])
   (if (> (let ([x 1])
             x) x)
      24
      42)
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x 2])
   (if (> (let ([x 1])
             x) x)
      24
      42)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x 2])
   (if (> (let ([x 1])
             x) x)
      24
      42)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20695 2])
   (if (> (let ([x20696 1])
             x20696) x20695)
      24
      42)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20695 2])
   (if (> (let ([x20696 1])
             x20696) x20695)
      24
      42)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20695 2])
   (if (let ([x20696 1])
          (let ([temp20698 x20696])
             (> temp20698 x20695)))
      24
      42)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20695 2])
   (if (let ([x20696 1])
          (let ([temp20698 x20696])
             (> temp20698 x20695)))
      24
      42)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
start:
    x20695 = 2;
    x20696 = 1;
    temp20698 = x20696;
    if (> temp20698 x20695)
       goto label20699;
    else
       goto label20700;
label20700:
    return 42;
label20699:
    return 24;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
start:
    x20695 = 2;
    x20696 = 1;
    temp20698 = x20696;
    if (> temp20698 x20695)
       goto label20699;
    else
       goto label20700;
label20700:
    return 42;
label20699:
    return 24;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
start:
    movq $2, x20695
    movq $1, x20696
    movq x20696, temp20698
    cmpq x20695, temp20698
    jg label20699
    jmp label20700
    
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
start:
    movq $2, x20695
    movq $1, x20696
    movq x20696, temp20698
    cmpq x20695, temp20698
    jg label20699
    jmp label20700
    
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
label20700:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20699:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $24, %rax
jmp conclusion

start:
    liveness
:
(list
 (set %rsp)
 (set x20695 %rsp)
 (set x20695 x20696 %rsp)
 (set x20695 temp20698 %rsp)
 (set %rsp)
 (set %rsp))
movq $2, x20695
movq $1, x20696
movq x20696, temp20698
cmpq x20695, temp20698
jg label20699
jmp label20700




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
label20700:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20699:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $24, %rax
jmp conclusion

start:
    liveness
:
(list
 (set %rsp)
 (set x20695 %rsp)
 (set x20695 x20696 %rsp)
 (set x20695 temp20698 %rsp)
 (set %rsp)
 (set %rsp))
movq $2, x20695
movq $1, x20696
movq x20696, temp20698
cmpq x20695, temp20698
jg label20699
jmp label20700




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp20698 x20696) (list x20696 temp20698))
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    
start:
    movq $2, x20695
    movq $1, x20696
    movq x20696, temp20698
    cmpq x20695, temp20698
    jg label20699
    jmp label20700
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp20698 x20696) (list x20696 temp20698))
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    
start:
    movq $2, x20695
    movq $1, x20696
    movq x20696, temp20698
    cmpq x20695, temp20698
    jg label20699
    jmp label20700
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp20698 x20696) (list x20696 temp20698))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons x20696 0)
 (cons x20695 1)
 (cons temp20698 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    
start:
    movq $2, %rdx
    movq $1, %rcx
    movq %rcx, %rcx
    cmpq %rdx, %rcx
    jg label20699
    jmp label20700
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp20698 x20696) (list x20696 temp20698))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons x20696 0)
 (cons x20695 1)
 (cons temp20698 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    
start:
    movq $2, %rdx
    movq $1, %rcx
    movq %rcx, %rcx
    cmpq %rdx, %rcx
    jg label20699
    jmp label20700
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp20698 x20696) (list x20696 temp20698))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons x20696 0)
 (cons x20695 1)
 (cons temp20698 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    
start:
    movq $2, %rdx
    movq $1, %rcx
    cmpq %rdx, %rcx
    jg label20699
    jmp label20700
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp20698 x20696) (list x20696 temp20698))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons x20696 0)
 (cons x20695 1)
 (cons temp20698 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    
start:
    movq $2, %rdx
    movq $1, %rcx
    cmpq %rdx, %rcx
    jg label20699
    jmp label20700
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp20698 x20696) (list x20696 temp20698))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons x20696 0)
 (cons x20695 1)
 (cons temp20698 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    
start:
    movq $2, %rdx
    movq $1, %rcx
    cmpq %rdx, %rcx
    jg label20699
    jmp label20700
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20695 : 'Integer, temp20698 : 'Integer, x20696 : 'Integer, 
tsorted
:
'(label20700 label20699 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp20698 x20696) (list x20696 temp20698))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons x20696 0)
 (cons x20695 1)
 (cons temp20698 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20700:
    movq $42, %rax
    jmp conclusion
    
label20699:
    movq $24, %rax
    jmp conclusion
    
start:
    movq $2, %rdx
    movq $1, %rcx
    cmpq %rdx, %rcx
    jg label20699
    jmp label20700
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_04"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x 3])
   (if (and (> x 1) (< x 5))
      (if (eq? x 3)
         42
         91)
      
      59)
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x 3])
   (if (if (> x 1)
          (< x 5)
          #f)
       
      (if (eq? x 3)
         42
         91)
      
      59)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x 3])
   (if (if (> x 1)
          (< x 5)
          #f)
       
      (if (eq? x 3)
         42
         91)
      
      59)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20715 3])
   (if (if (> x20715 1)
          (< x20715 5)
          #f)
       
      (if (eq? x20715 3)
         42
         91)
      
      59)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20715 3])
   (if (if (> x20715 1)
          (< x20715 5)
          #f)
       
      (if (eq? x20715 3)
         42
         91)
      
      59)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20715 3])
   (if (if (> x20715 1)
          (< x20715 5)
          #f)
       
      (if (eq? x20715 3)
         42
         91)
      
      59)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20715 3])
   (if (if (> x20715 1)
          (< x20715 5)
          #f)
       
      (if (eq? x20715 3)
         42
         91)
      
      59)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
start:
    x20715 = 3;
    if (> x20715 1)
       goto label20723;
    else
       goto label20722;
label20719:
    return 42;
label20722:
    return 59;
label20723:
    if (< x20715 5)
       goto label20721;
    else
       goto label20722;
label20720:
    return 91;
label20721:
    if (eq? x20715 3)
       goto label20719;
    else
       goto label20720;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20715 : 'Integer, 
start:
    x20715 = 3;
    if (> x20715 1)
       goto label20723;
    else
       goto label20722;
label20719:
    return 42;
label20722:
    return 59;
label20723:
    if (< x20715 5)
       goto label20721;
    else
       goto label20722;
label20720:
    return 91;
label20721:
    if (eq? x20715 3)
       goto label20719;
    else
       goto label20720;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20715 : 'Integer, 
start:
    movq $3, x20715
    cmpq $1, x20715
    jg label20723
    jmp label20722
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20722:
    movq $59, %rax
    jmp conclusion
    
label20723:
    cmpq $5, x20715
    jl label20721
    jmp label20722
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20721:
    cmpq $3, x20715
    je label20719
    jmp label20720
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20715 : 'Integer, 
start:
    movq $3, x20715
    cmpq $1, x20715
    jg label20723
    jmp label20722
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20722:
    movq $59, %rax
    jmp conclusion
    
label20723:
    cmpq $5, x20715
    jl label20721
    jmp label20722
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20721:
    cmpq $3, x20715
    je label20719
    jmp label20720
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
label20722:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $59, %rax
jmp conclusion

label20720:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $91, %rax
jmp conclusion

label20719:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20721:
    liveness
:
(list (set x20715 %rsp) (set %rsp) (set %rsp))
cmpq $3, x20715
je label20719
jmp label20720

label20723:
    liveness
:
(list (set x20715 %rsp) (set x20715 %rsp) (set %rsp))
cmpq $5, x20715
jl label20721
jmp label20722

start:
    liveness
:
(list (set %rsp) (set x20715 %rsp) (set x20715 %rsp) (set %rsp))
movq $3, x20715
cmpq $1, x20715
jg label20723
jmp label20722




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
label20722:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $59, %rax
jmp conclusion

label20720:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $91, %rax
jmp conclusion

label20719:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20721:
    liveness
:
(list (set x20715 %rsp) (set %rsp) (set %rsp))
cmpq $3, x20715
je label20719
jmp label20720

label20723:
    liveness
:
(list (set x20715 %rsp) (set x20715 %rsp) (set %rsp))
cmpq $5, x20715
jl label20721
jmp label20722

start:
    liveness
:
(list (set %rsp) (set x20715 %rsp) (set x20715 %rsp) (set %rsp))
movq $3, x20715
cmpq $1, x20715
jg label20723
jmp label20722




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20722:
    movq $59, %rax
    jmp conclusion
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20721:
    cmpq $3, x20715
    je label20719
    jmp label20720
    
label20723:
    cmpq $5, x20715
    jl label20721
    jmp label20722
    
start:
    movq $3, x20715
    cmpq $1, x20715
    jg label20723
    jmp label20722
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20722:
    movq $59, %rax
    jmp conclusion
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20721:
    cmpq $3, x20715
    je label20719
    jmp label20720
    
label20723:
    cmpq $5, x20715
    jl label20721
    jmp label20722
    
start:
    movq $3, x20715
    cmpq $1, x20715
    jg label20723
    jmp label20722
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20715 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20722:
    movq $59, %rax
    jmp conclusion
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20721:
    cmpq $3, %rcx
    je label20719
    jmp label20720
    
label20723:
    cmpq $5, %rcx
    jl label20721
    jmp label20722
    
start:
    movq $3, %rcx
    cmpq $1, %rcx
    jg label20723
    jmp label20722
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20715 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20722:
    movq $59, %rax
    jmp conclusion
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20721:
    cmpq $3, %rcx
    je label20719
    jmp label20720
    
label20723:
    cmpq $5, %rcx
    jl label20721
    jmp label20722
    
start:
    movq $3, %rcx
    cmpq $1, %rcx
    jg label20723
    jmp label20722
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20715 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20722:
    movq $59, %rax
    jmp conclusion
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20721:
    cmpq $3, %rcx
    je label20719
    jmp label20720
    
label20723:
    cmpq $5, %rcx
    jl label20721
    jmp label20722
    
start:
    movq $3, %rcx
    cmpq $1, %rcx
    jg label20723
    jmp label20722
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20715 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20722:
    movq $59, %rax
    jmp conclusion
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20721:
    cmpq $3, %rcx
    je label20719
    jmp label20720
    
label20723:
    cmpq $5, %rcx
    jl label20721
    jmp label20722
    
start:
    movq $3, %rcx
    cmpq $1, %rcx
    jg label20723
    jmp label20722
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20715 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20722:
    movq $59, %rax
    jmp conclusion
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20721:
    cmpq $3, %rcx
    je label20719
    jmp label20720
    
label20723:
    cmpq $5, %rcx
    jl label20721
    jmp label20722
    
start:
    movq $3, %rcx
    cmpq $1, %rcx
    jg label20723
    jmp label20722
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20715 : 'Integer, 
tsorted
:
'(label20722 label20720 label20719 label20721 label20723 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20715 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20722:
    movq $59, %rax
    jmp conclusion
    
label20720:
    movq $91, %rax
    jmp conclusion
    
label20719:
    movq $42, %rax
    jmp conclusion
    
label20721:
    cmpq $3, %rcx
    je label20719
    jmp label20720
    
label20723:
    cmpq $5, %rcx
    jl label20721
    jmp label20722
    
start:
    movq $3, %rcx
    cmpq $1, %rcx
    jg label20723
    jmp label20722
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_05"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(if (and (eq? (read) 0) (eq? (read) 1))
   0
   42)



testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (if (eq? (read) 0)
       (eq? (read) 1)
       #f)
    
   0
   42)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (if (eq? (read) 0)
       (eq? (read) 1)
       #f)
    
   0
   42)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (if (eq? (read) 0)
       (eq? (read) 1)
       #f)
    
   0
   42)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (if (eq? (read) 0)
       (eq? (read) 1)
       #f)
    
   0
   42)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (if (let ([temp20739 (read)])
           (eq? temp20739 0))
       (let ([temp20741 (read)])
          (eq? temp20741 1))
       #f)
    
   0
   42)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (if (let ([temp20739 (read)])
           (eq? temp20739 0))
       (let ([temp20741 (read)])
          (eq? temp20741 1))
       #f)
    
   0
   42)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label20742:
    return 0;
start:
    temp20739 = (read);
    if (eq? temp20739 0)
       goto label20744;
    else
       goto label20743;
label20743:
    return 42;
label20744:
    temp20741 = (read);
    if (eq? temp20741 1)
       goto label20742;
    else
       goto label20743;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
label20742:
    return 0;
start:
    temp20739 = (read);
    if (eq? temp20739 0)
       goto label20744;
    else
       goto label20743;
label20743:
    return 42;
label20744:
    temp20741 = (read);
    if (eq? temp20741 1)
       goto label20742;
    else
       goto label20743;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
label20742:
    movq $0, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, temp20739
    cmpq $0, temp20739
    je label20744
    jmp label20743
    
label20743:
    movq $42, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, temp20741
    cmpq $1, temp20741
    je label20742
    jmp label20743
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
label20742:
    movq $0, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, temp20739
    cmpq $0, temp20739
    je label20744
    jmp label20743
    
label20743:
    movq $42, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, temp20741
    cmpq $1, temp20741
    je label20742
    jmp label20743
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
label20743:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20742:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $0, %rax
jmp conclusion

label20744:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp20741 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp20741
cmpq $1, temp20741
je label20742
jmp label20743

start:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp20739 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp20739
cmpq $0, temp20739
je label20744
jmp label20743




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
label20743:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20742:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $0, %rax
jmp conclusion

label20744:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp20741 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp20741
cmpq $1, temp20741
je label20742
jmp label20743

start:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp20739 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp20739
cmpq $0, temp20739
je label20744
jmp label20743




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20743:
    movq $42, %rax
    jmp conclusion
    
label20742:
    movq $0, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, temp20741
    cmpq $1, temp20741
    je label20742
    jmp label20743
    
start:
    callq read_int
    movq %rax, temp20739
    cmpq $0, temp20739
    je label20744
    jmp label20743
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20743:
    movq $42, %rax
    jmp conclusion
    
label20742:
    movq $0, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, temp20741
    cmpq $1, temp20741
    je label20742
    jmp label20743
    
start:
    callq read_int
    movq %rax, temp20739
    cmpq $0, temp20739
    je label20744
    jmp label20743
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20739 0)
 (cons temp20741 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20743:
    movq $42, %rax
    jmp conclusion
    
label20742:
    movq $0, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20742
    jmp label20743
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $0, %rcx
    je label20744
    jmp label20743
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20739 0)
 (cons temp20741 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20743:
    movq $42, %rax
    jmp conclusion
    
label20742:
    movq $0, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20742
    jmp label20743
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $0, %rcx
    je label20744
    jmp label20743
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20739 0)
 (cons temp20741 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20743:
    movq $42, %rax
    jmp conclusion
    
label20742:
    movq $0, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20742
    jmp label20743
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $0, %rcx
    je label20744
    jmp label20743
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20739 0)
 (cons temp20741 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20743:
    movq $42, %rax
    jmp conclusion
    
label20742:
    movq $0, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20742
    jmp label20743
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $0, %rcx
    je label20744
    jmp label20743
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20739 0)
 (cons temp20741 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20743:
    movq $42, %rax
    jmp conclusion
    
label20742:
    movq $0, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20742
    jmp label20743
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $0, %rcx
    je label20744
    jmp label20743
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20741 : 'Integer, temp20739 : 'Integer, 
tsorted
:
'(label20743 label20742 label20744 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20739 0)
 (cons temp20741 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20743:
    movq $42, %rax
    jmp conclusion
    
label20742:
    movq $0, %rax
    jmp conclusion
    
label20744:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20742
    jmp label20743
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $0, %rcx
    je label20744
    jmp label20743
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_06"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(if (eq? (read) 1)
   42
   0)



testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (eq? (read) 1)
   42
   0)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (eq? (read) 1)
   42
   0)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (eq? (read) 1)
   42
   0)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (eq? (read) 1)
   42
   0)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (let ([temp20760 (read)])
       (eq? temp20760 1))
   42
   0)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (let ([temp20760 (read)])
       (eq? temp20760 1))
   42
   0)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
start:
    temp20760 = (read);
    if (eq? temp20760 1)
       goto label20761;
    else
       goto label20762;
label20762:
    return 0;
label20761:
    return 42;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20760 : 'Integer, 
start:
    temp20760 = (read);
    if (eq? temp20760 1)
       goto label20761;
    else
       goto label20762;
label20762:
    return 0;
label20761:
    return 42;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20760 : 'Integer, 
start:
    callq read_int
    movq %rax, temp20760
    cmpq $1, temp20760
    je label20761
    jmp label20762
    
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20760 : 'Integer, 
start:
    callq read_int
    movq %rax, temp20760
    cmpq $1, temp20760
    je label20761
    jmp label20762
    
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
label20762:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $0, %rax
jmp conclusion

label20761:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

start:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp20760 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp20760
cmpq $1, temp20760
je label20761
jmp label20762




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
label20762:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $0, %rax
jmp conclusion

label20761:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

start:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp20760 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp20760
cmpq $1, temp20760
je label20761
jmp label20762




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, temp20760
    cmpq $1, temp20760
    je label20761
    jmp label20762
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, temp20760
    cmpq $1, temp20760
    je label20761
    jmp label20762
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20760 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20761
    jmp label20762
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20760 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20761
    jmp label20762
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20760 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20761
    jmp label20762
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20760 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20761
    jmp label20762
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20760 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20761
    jmp label20762
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20760 : 'Integer, 
tsorted
:
'(label20762 label20761 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20760 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label20762:
    movq $0, %rax
    jmp conclusion
    
label20761:
    movq $42, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label20761
    jmp label20762
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_07"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if x
                   1
                   2)
                )))



testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if x
                   1
                   2)
                )))



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if x
                   1
                   2)
                )))



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (eq? (read) (read))
   (let ([x20777 1])
      x20777)
   (let ([x20778 (if (>= 1 1)
                    (let ([x20779 (> 5 5)])
                       (not x20779))
                    (let ([x20780 (< 5 5)])
                       x20780))
                 ])
      (+ (read) (if x20778
                   1
                   2)
                )))



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (eq? (read) (read))
   (let ([x20777 1])
      x20777)
   (let ([x20778 (if (>= 1 1)
                    (let ([x20779 (> 5 5)])
                       (not x20779))
                    (let ([x20780 (< 5 5)])
                       x20780))
                 ])
      (+ (read) (if x20778
                   1
                   2)
                )))



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (let ([temp20782 (read)])
       (let ([temp20783 (read)])
          (eq? temp20782 temp20783)))
   (let ([x20777 1])
      x20777)
   (let ([x20778 (if (>= 1 1)
                    (let ([x20779 (> 5 5)])
                       (not x20779))
                    (let ([x20780 (< 5 5)])
                       x20780))
                 ])
      (let ([temp20789 (read)])
         (let ([temp20790 (if x20778
                             1
                             2)
                          ])
            (+ temp20789 temp20790)))))



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (let ([temp20782 (read)])
       (let ([temp20783 (read)])
          (eq? temp20782 temp20783)))
   (let ([x20777 1])
      x20777)
   (let ([x20778 (if (>= 1 1)
                    (let ([x20779 (> 5 5)])
                       (not x20779))
                    (let ([x20780 (< 5 5)])
                       x20780))
                 ])
      (let ([temp20789 (read)])
         (let ([temp20790 (if x20778
                             1
                             2)
                          ])
            (+ temp20789 temp20790)))))



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label20798:
    if (>= 1 1)
       goto label20795;
    else
       goto label20796;
label20796:
    x20780 = (< 5 5);
    x20778 = x20780;
    goto label20794;
label20797:
    x20777 = 1;
    return x20777;
label20791:
    return (+ temp20789 temp20790);
start:
    temp20782 = (read);
    temp20783 = (read);
    if (eq? temp20782 temp20783)
       goto label20797;
    else
       goto label20798;
label20794:
    temp20789 = (read);
    if (eq? x20778 #t)
       goto label20792;
    else
       goto label20793;
label20795:
    x20779 = (> 5 5);
    x20778 = (not x20779);
    goto label20794;
label20792:
    temp20790 = 1;
    goto label20791;
label20793:
    temp20790 = 2;
    goto label20791;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
label20798:
    if (>= 1 1)
       goto label20795;
    else
       goto label20796;
label20796:
    x20780 = (< 5 5);
    x20778 = x20780;
    goto label20794;
label20797:
    x20777 = 1;
    return x20777;
label20791:
    return (+ temp20789 temp20790);
start:
    temp20782 = (read);
    temp20783 = (read);
    if (eq? temp20782 temp20783)
       goto label20797;
    else
       goto label20798;
label20794:
    temp20789 = (read);
    if (eq? x20778 #t)
       goto label20792;
    else
       goto label20793;
label20795:
    x20779 = (> 5 5);
    x20778 = (not x20779);
    goto label20794;
label20792:
    temp20790 = 1;
    goto label20791;
label20793:
    temp20790 = 2;
    goto label20791;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
label20798:
    cmpq $1, $1
    jge label20795
    jmp label20796
    
label20796:
    cmpq $5, $5
    setl %al
    movzbq %al, x20780
    movq x20780, x20778
    jmp label20794
    
label20797:
    movq $1, x20777
    movq x20777, %rax
    jmp conclusion
    
label20791:
    movq temp20789, %rax
    addq temp20790, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, temp20782
    callq read_int
    movq %rax, temp20783
    cmpq temp20783, temp20782
    je label20797
    jmp label20798
    
label20794:
    callq read_int
    movq %rax, temp20789
    cmpq $1, x20778
    je label20792
    jmp label20793
    
label20795:
    cmpq $5, $5
    setg %al
    movzbq %al, x20779
    movq x20779, x20778
    xorq $1, x20778
    jmp label20794
    
label20792:
    movq $1, temp20790
    jmp label20791
    
label20793:
    movq $2, temp20790
    jmp label20791
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
label20798:
    cmpq $1, $1
    jge label20795
    jmp label20796
    
label20796:
    cmpq $5, $5
    setl %al
    movzbq %al, x20780
    movq x20780, x20778
    jmp label20794
    
label20797:
    movq $1, x20777
    movq x20777, %rax
    jmp conclusion
    
label20791:
    movq temp20789, %rax
    addq temp20790, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, temp20782
    callq read_int
    movq %rax, temp20783
    cmpq temp20783, temp20782
    je label20797
    jmp label20798
    
label20794:
    callq read_int
    movq %rax, temp20789
    cmpq $1, x20778
    je label20792
    jmp label20793
    
label20795:
    cmpq $5, $5
    setg %al
    movzbq %al, x20779
    movq x20779, x20778
    xorq $1, x20778
    jmp label20794
    
label20792:
    movq $1, temp20790
    jmp label20791
    
label20793:
    movq $2, temp20790
    jmp label20791
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
label20791:
    liveness
:
(list (set temp20789 temp20790 %rsp) (set %rax temp20790 %rsp) (set %rax %rsp))
movq temp20789, %rax
addq temp20790, %rax
jmp conclusion

label20792:
    liveness
:
(list (set temp20789 %rsp) (set temp20789 temp20790 %rsp))
movq $1, temp20790
jmp label20791

label20793:
    liveness
:
(list (set temp20789 %rsp) (set temp20789 temp20790 %rsp))
movq $2, temp20790
jmp label20791

label20794:
    liveness
:
(list
 (set x20778 %rsp)
 (set %rax x20778 %rsp)
 (set temp20789 x20778 %rsp)
 (set temp20789 %rsp)
 (set temp20789 %rsp))
callq read_int
movq %rax, temp20789
cmpq $1, x20778
je label20792
jmp label20793

label20795:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set x20779 %rsp)
 (set x20778 %rsp)
 (set x20778 %rsp))
cmpq $5, $5
setg %al
movzbq %al, x20779
movq x20779, x20778
xorq $1, x20778
jmp label20794

label20797:
    liveness
:
(list (set %rsp) (set x20777 %rsp) (set %rax %rsp))
movq $1, x20777
movq x20777, %rax
jmp conclusion

label20796:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set x20780 %rsp)
 (set x20778 %rsp))
cmpq $5, $5
setl %al
movzbq %al, x20780
movq x20780, x20778
jmp label20794

label20798:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp))
cmpq $1, $1
jge label20795
jmp label20796

start:
    liveness
:
(list
 (set %al %rsp)
 (set %rax %al %rsp)
 (set %al temp20782 %rsp)
 (set %rax %al temp20782 %rsp)
 (set %al temp20782 temp20783 %rsp)
 (set %al %rsp)
 (set %al %rsp))
callq read_int
movq %rax, temp20782
callq read_int
movq %rax, temp20783
cmpq temp20783, temp20782
je label20797
jmp label20798




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
label20791:
    liveness
:
(list (set temp20789 temp20790 %rsp) (set %rax temp20790 %rsp) (set %rax %rsp))
movq temp20789, %rax
addq temp20790, %rax
jmp conclusion

label20792:
    liveness
:
(list (set temp20789 %rsp) (set temp20789 temp20790 %rsp))
movq $1, temp20790
jmp label20791

label20793:
    liveness
:
(list (set temp20789 %rsp) (set temp20789 temp20790 %rsp))
movq $2, temp20790
jmp label20791

label20794:
    liveness
:
(list
 (set x20778 %rsp)
 (set %rax x20778 %rsp)
 (set temp20789 x20778 %rsp)
 (set temp20789 %rsp)
 (set temp20789 %rsp))
callq read_int
movq %rax, temp20789
cmpq $1, x20778
je label20792
jmp label20793

label20795:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set x20779 %rsp)
 (set x20778 %rsp)
 (set x20778 %rsp))
cmpq $5, $5
setg %al
movzbq %al, x20779
movq x20779, x20778
xorq $1, x20778
jmp label20794

label20797:
    liveness
:
(list (set %rsp) (set x20777 %rsp) (set %rax %rsp))
movq $1, x20777
movq x20777, %rax
jmp conclusion

label20796:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set x20780 %rsp)
 (set x20778 %rsp))
cmpq $5, $5
setl %al
movzbq %al, x20780
movq x20780, x20778
jmp label20794

label20798:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp))
cmpq $1, $1
jge label20795
jmp label20796

start:
    liveness
:
(list
 (set %al %rsp)
 (set %rax %al %rsp)
 (set %al temp20782 %rsp)
 (set %rax %al temp20782 %rsp)
 (set %al temp20782 temp20783 %rsp)
 (set %al %rsp)
 (set %al %rsp))
callq read_int
movq %rax, temp20782
callq read_int
movq %rax, temp20783
cmpq temp20783, temp20782
je label20797
jmp label20798




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20778 x20779)
 (list x20778 x20780)
 (list x20779 x20778)
 (list x20780 x20778))
label20791:
    movq temp20789, %rax
    addq temp20790, %rax
    jmp conclusion
    
label20792:
    movq $1, temp20790
    jmp label20791
    
label20793:
    movq $2, temp20790
    jmp label20791
    
label20794:
    callq read_int
    movq %rax, temp20789
    cmpq $1, x20778
    je label20792
    jmp label20793
    
label20795:
    cmpq $5, $5
    setg %al
    movzbq %al, x20779
    movq x20779, x20778
    xorq $1, x20778
    jmp label20794
    
label20797:
    movq $1, x20777
    movq x20777, %rax
    jmp conclusion
    
label20796:
    cmpq $5, $5
    setl %al
    movzbq %al, x20780
    movq x20780, x20778
    jmp label20794
    
label20798:
    cmpq $1, $1
    jge label20795
    jmp label20796
    
start:
    callq read_int
    movq %rax, temp20782
    callq read_int
    movq %rax, temp20783
    cmpq temp20783, temp20782
    je label20797
    jmp label20798
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20778 x20779)
 (list x20778 x20780)
 (list x20779 x20778)
 (list x20780 x20778))
label20791:
    movq temp20789, %rax
    addq temp20790, %rax
    jmp conclusion
    
label20792:
    movq $1, temp20790
    jmp label20791
    
label20793:
    movq $2, temp20790
    jmp label20791
    
label20794:
    callq read_int
    movq %rax, temp20789
    cmpq $1, x20778
    je label20792
    jmp label20793
    
label20795:
    cmpq $5, $5
    setg %al
    movzbq %al, x20779
    movq x20779, x20778
    xorq $1, x20778
    jmp label20794
    
label20797:
    movq $1, x20777
    movq x20777, %rax
    jmp conclusion
    
label20796:
    cmpq $5, $5
    setl %al
    movzbq %al, x20780
    movq x20780, x20778
    jmp label20794
    
label20798:
    cmpq $1, $1
    jge label20795
    jmp label20796
    
start:
    callq read_int
    movq %rax, temp20782
    callq read_int
    movq %rax, temp20783
    cmpq temp20783, temp20782
    je label20797
    jmp label20798
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20778 x20779)
 (list x20778 x20780)
 (list x20779 x20778)
 (list x20780 x20778))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x20778 7)
 (cons temp20782 7)
 (cons temp20783 0)
 (cons temp20790 0)
 (cons temp20789 1)
 (cons x20780 0)
 (cons x20779 0)
 (cons x20777 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20791:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20792:
    movq $1, %rcx
    jmp label20791
    
label20793:
    movq $2, %rcx
    jmp label20791
    
label20794:
    callq read_int
    movq %rax, %rdx
    cmpq $1, %rbx
    je label20792
    jmp label20793
    
label20795:
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    xorq $1, %rbx
    jmp label20794
    
label20797:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20796:
    cmpq $5, $5
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    jmp label20794
    
label20798:
    cmpq $1, $1
    jge label20795
    jmp label20796
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20797
    jmp label20798
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20778 x20779)
 (list x20778 x20780)
 (list x20779 x20778)
 (list x20780 x20778))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x20778 7)
 (cons temp20782 7)
 (cons temp20783 0)
 (cons temp20790 0)
 (cons temp20789 1)
 (cons x20780 0)
 (cons x20779 0)
 (cons x20777 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20791:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20792:
    movq $1, %rcx
    jmp label20791
    
label20793:
    movq $2, %rcx
    jmp label20791
    
label20794:
    callq read_int
    movq %rax, %rdx
    cmpq $1, %rbx
    je label20792
    jmp label20793
    
label20795:
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    xorq $1, %rbx
    jmp label20794
    
label20797:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20796:
    cmpq $5, $5
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    jmp label20794
    
label20798:
    cmpq $1, $1
    jge label20795
    jmp label20796
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20797
    jmp label20798
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20778 x20779)
 (list x20778 x20780)
 (list x20779 x20778)
 (list x20780 x20778))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x20778 7)
 (cons temp20782 7)
 (cons temp20783 0)
 (cons temp20790 0)
 (cons temp20789 1)
 (cons x20780 0)
 (cons x20779 0)
 (cons x20777 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20791:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20792:
    movq $1, %rcx
    jmp label20791
    
label20793:
    movq $2, %rcx
    jmp label20791
    
label20794:
    callq read_int
    movq %rax, %rdx
    cmpq $1, %rbx
    je label20792
    jmp label20793
    
label20795:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    xorq $1, %rbx
    jmp label20794
    
label20797:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20796:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    jmp label20794
    
label20798:
    movq $1, %rax
    cmpq $1, %rax
    jge label20795
    jmp label20796
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20797
    jmp label20798
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20778 x20779)
 (list x20778 x20780)
 (list x20779 x20778)
 (list x20780 x20778))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x20778 7)
 (cons temp20782 7)
 (cons temp20783 0)
 (cons temp20790 0)
 (cons temp20789 1)
 (cons x20780 0)
 (cons x20779 0)
 (cons x20777 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20791:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20792:
    movq $1, %rcx
    jmp label20791
    
label20793:
    movq $2, %rcx
    jmp label20791
    
label20794:
    callq read_int
    movq %rax, %rdx
    cmpq $1, %rbx
    je label20792
    jmp label20793
    
label20795:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    xorq $1, %rbx
    jmp label20794
    
label20797:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20796:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    jmp label20794
    
label20798:
    movq $1, %rax
    cmpq $1, %rax
    jge label20795
    jmp label20796
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20797
    jmp label20798
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20778 x20779)
 (list x20778 x20780)
 (list x20779 x20778)
 (list x20780 x20778))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x20778 7)
 (cons temp20782 7)
 (cons temp20783 0)
 (cons temp20790 0)
 (cons temp20789 1)
 (cons x20780 0)
 (cons x20779 0)
 (cons x20777 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20791:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20792:
    movq $1, %rcx
    jmp label20791
    
label20793:
    movq $2, %rcx
    jmp label20791
    
label20794:
    callq read_int
    movq %rax, %rdx
    cmpq $1, %rbx
    je label20792
    jmp label20793
    
label20795:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    xorq $1, %rbx
    jmp label20794
    
label20797:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20796:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    jmp label20794
    
label20798:
    movq $1, %rax
    cmpq $1, %rax
    jge label20795
    jmp label20796
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20797
    jmp label20798
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20790 : 'Integer, temp20782 : 'Integer, temp20783 : 'Integer, x20780 : 'Boolean, temp20789 : 'Integer, x20778 : 'Boolean, x20779 : 'Boolean, x20777 : 'Integer, 
tsorted
:
'(label20791
  label20792
  label20793
  label20794
  label20795
  label20797
  label20796
  label20798
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20778 x20779)
 (list x20778 x20780)
 (list x20779 x20778)
 (list x20780 x20778))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x20778 7)
 (cons temp20782 7)
 (cons temp20783 0)
 (cons temp20790 0)
 (cons temp20789 1)
 (cons x20780 0)
 (cons x20779 0)
 (cons x20777 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20791:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20792:
    movq $1, %rcx
    jmp label20791
    
label20793:
    movq $2, %rcx
    jmp label20791
    
label20794:
    callq read_int
    movq %rax, %rdx
    cmpq $1, %rbx
    je label20792
    jmp label20793
    
label20795:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    xorq $1, %rbx
    jmp label20794
    
label20797:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20796:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    jmp label20794
    
label20798:
    movq $1, %rax
    cmpq $1, %rax
    jge label20795
    jmp label20796
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20797
    jmp label20798
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_08"

expected-result:
42


type-check: Boolean != Integer
in (if (> 1 1)
   #f
   1)


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
#f


type-check: Integer != Boolean
in (if (+ 1 2)
   3
   4)


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
#f


type-check: Boolean != Integer
in (+ 5 #t)

type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
#f


type-check: Integer != Boolean
in (and #t 5)

type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
#f


type-check: Integer != Boolean
in (or (+ 1 2) (read))

type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
#f


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x (if (> (+ 1 2) (+ 2 3))
            (> 3 1)
            (< 1 2))
         ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x (if (> (+ 1 2) (+ 2 3))
            (> 3 1)
            (< 1 2))
         ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x (if (> (+ 1 2) (+ 2 3))
            (> 3 1)
            (< 1 2))
         ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20813 (if (> (+ 1 2) (+ 2 3))
                 (> 3 1)
                 (< 1 2))
              ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20813 (if (> (+ 1 2) (+ 2 3))
                 (> 3 1)
                 (< 1 2))
              ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20813 (if (let ([temp20815 (+ 1 2)])
                     (let ([temp20816 (+ 2 3)])
                        (> temp20815 temp20816)))
                 (> 3 1)
                 (< 1 2))
              ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20813 (if (let ([temp20815 (+ 1 2)])
                     (let ([temp20816 (+ 2 3)])
                        (> temp20815 temp20816)))
                 (> 3 1)
                 (< 1 2))
              ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label20822:
    return 1;
start:
    temp20815 = (+ 1 2);
    temp20816 = (+ 2 3);
    if (> temp20815 temp20816)
       goto label20824;
    else
       goto label20825;
label20823:
    if (> 3 2)
       goto label20821;
    else
       goto label20822;
label20821:
    return 42;
label20824:
    x20813 = (> 3 1);
    goto label20823;
label20825:
    x20813 = (< 1 2);
    goto label20823;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
label20822:
    return 1;
start:
    temp20815 = (+ 1 2);
    temp20816 = (+ 2 3);
    if (> temp20815 temp20816)
       goto label20824;
    else
       goto label20825;
label20823:
    if (> 3 2)
       goto label20821;
    else
       goto label20822;
label20821:
    return 42;
label20824:
    x20813 = (> 3 1);
    goto label20823;
label20825:
    x20813 = (< 1 2);
    goto label20823;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
label20822:
    movq $1, %rax
    jmp conclusion
    
start:
    movq $1, temp20815
    addq $2, temp20815
    movq $2, temp20816
    addq $3, temp20816
    cmpq temp20816, temp20815
    jg label20824
    jmp label20825
    
label20823:
    cmpq $2, $3
    jg label20821
    jmp label20822
    
label20821:
    movq $42, %rax
    jmp conclusion
    
label20824:
    cmpq $1, $3
    setg %al
    movzbq %al, x20813
    jmp label20823
    
label20825:
    cmpq $2, $1
    setl %al
    movzbq %al, x20813
    jmp label20823
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
label20822:
    movq $1, %rax
    jmp conclusion
    
start:
    movq $1, temp20815
    addq $2, temp20815
    movq $2, temp20816
    addq $3, temp20816
    cmpq temp20816, temp20815
    jg label20824
    jmp label20825
    
label20823:
    cmpq $2, $3
    jg label20821
    jmp label20822
    
label20821:
    movq $42, %rax
    jmp conclusion
    
label20824:
    cmpq $1, $3
    setg %al
    movzbq %al, x20813
    jmp label20823
    
label20825:
    cmpq $2, $1
    setl %al
    movzbq %al, x20813
    jmp label20823
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
label20821:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20822:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label20823:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $2, $3
jg label20821
jmp label20822

label20824:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp) (set %rsp))
cmpq $1, $3
setg %al
movzbq %al, x20813
jmp label20823

label20825:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp) (set %rsp))
cmpq $2, $1
setl %al
movzbq %al, x20813
jmp label20823

start:
    liveness
:
(list
 (set %al %rsp)
 (set %al temp20815 %rsp)
 (set %al temp20815 %rsp)
 (set %al temp20815 temp20816 %rsp)
 (set %al temp20815 temp20816 %rsp)
 (set %al %rsp)
 (set %al %rsp))
movq $1, temp20815
addq $2, temp20815
movq $2, temp20816
addq $3, temp20816
cmpq temp20816, temp20815
jg label20824
jmp label20825




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
label20821:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20822:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label20823:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $2, $3
jg label20821
jmp label20822

label20824:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp) (set %rsp))
cmpq $1, $3
setg %al
movzbq %al, x20813
jmp label20823

label20825:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp) (set %rsp))
cmpq $2, $1
setl %al
movzbq %al, x20813
jmp label20823

start:
    liveness
:
(list
 (set %al %rsp)
 (set %al temp20815 %rsp)
 (set %al temp20815 %rsp)
 (set %al temp20815 temp20816 %rsp)
 (set %al temp20815 temp20816 %rsp)
 (set %al %rsp)
 (set %al %rsp))
movq $1, temp20815
addq $2, temp20815
movq $2, temp20816
addq $3, temp20816
cmpq temp20816, temp20815
jg label20824
jmp label20825




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20821:
    movq $42, %rax
    jmp conclusion
    
label20822:
    movq $1, %rax
    jmp conclusion
    
label20823:
    cmpq $2, $3
    jg label20821
    jmp label20822
    
label20824:
    cmpq $1, $3
    setg %al
    movzbq %al, x20813
    jmp label20823
    
label20825:
    cmpq $2, $1
    setl %al
    movzbq %al, x20813
    jmp label20823
    
start:
    movq $1, temp20815
    addq $2, temp20815
    movq $2, temp20816
    addq $3, temp20816
    cmpq temp20816, temp20815
    jg label20824
    jmp label20825
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20821:
    movq $42, %rax
    jmp conclusion
    
label20822:
    movq $1, %rax
    jmp conclusion
    
label20823:
    cmpq $2, $3
    jg label20821
    jmp label20822
    
label20824:
    cmpq $1, $3
    setg %al
    movzbq %al, x20813
    jmp label20823
    
label20825:
    cmpq $2, $1
    setl %al
    movzbq %al, x20813
    jmp label20823
    
start:
    movq $1, temp20815
    addq $2, temp20815
    movq $2, temp20816
    addq $3, temp20816
    cmpq temp20816, temp20815
    jg label20824
    jmp label20825
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %al -1)
 (cons %rsp -2)
 (cons temp20816 0)
 (cons temp20815 1)
 (cons x20813 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20821:
    movq $42, %rax
    jmp conclusion
    
label20822:
    movq $1, %rax
    jmp conclusion
    
label20823:
    cmpq $2, $3
    jg label20821
    jmp label20822
    
label20824:
    cmpq $1, $3
    setg %al
    movzbq %al, %rcx
    jmp label20823
    
label20825:
    cmpq $2, $1
    setl %al
    movzbq %al, %rcx
    jmp label20823
    
start:
    movq $1, %rdx
    addq $2, %rdx
    movq $2, %rcx
    addq $3, %rcx
    cmpq %rcx, %rdx
    jg label20824
    jmp label20825
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %al -1)
 (cons %rsp -2)
 (cons temp20816 0)
 (cons temp20815 1)
 (cons x20813 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20821:
    movq $42, %rax
    jmp conclusion
    
label20822:
    movq $1, %rax
    jmp conclusion
    
label20823:
    cmpq $2, $3
    jg label20821
    jmp label20822
    
label20824:
    cmpq $1, $3
    setg %al
    movzbq %al, %rcx
    jmp label20823
    
label20825:
    cmpq $2, $1
    setl %al
    movzbq %al, %rcx
    jmp label20823
    
start:
    movq $1, %rdx
    addq $2, %rdx
    movq $2, %rcx
    addq $3, %rcx
    cmpq %rcx, %rdx
    jg label20824
    jmp label20825
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %al -1)
 (cons %rsp -2)
 (cons temp20816 0)
 (cons temp20815 1)
 (cons x20813 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20821:
    movq $42, %rax
    jmp conclusion
    
label20822:
    movq $1, %rax
    jmp conclusion
    
label20823:
    movq $3, %rax
    cmpq $2, %rax
    jg label20821
    jmp label20822
    
label20824:
    movq $3, %rax
    cmpq $1, %rax
    setg %al
    movzbq %al, %rcx
    jmp label20823
    
label20825:
    movq $1, %rax
    cmpq $2, %rax
    setl %al
    movzbq %al, %rcx
    jmp label20823
    
start:
    movq $1, %rdx
    addq $2, %rdx
    movq $2, %rcx
    addq $3, %rcx
    cmpq %rcx, %rdx
    jg label20824
    jmp label20825
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %al -1)
 (cons %rsp -2)
 (cons temp20816 0)
 (cons temp20815 1)
 (cons x20813 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20821:
    movq $42, %rax
    jmp conclusion
    
label20822:
    movq $1, %rax
    jmp conclusion
    
label20823:
    movq $3, %rax
    cmpq $2, %rax
    jg label20821
    jmp label20822
    
label20824:
    movq $3, %rax
    cmpq $1, %rax
    setg %al
    movzbq %al, %rcx
    jmp label20823
    
label20825:
    movq $1, %rax
    cmpq $2, %rax
    setl %al
    movzbq %al, %rcx
    jmp label20823
    
start:
    movq $1, %rdx
    addq $2, %rdx
    movq $2, %rcx
    addq $3, %rcx
    cmpq %rcx, %rdx
    jg label20824
    jmp label20825
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %al -1)
 (cons %rsp -2)
 (cons temp20816 0)
 (cons temp20815 1)
 (cons x20813 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20821:
    movq $42, %rax
    jmp conclusion
    
label20822:
    movq $1, %rax
    jmp conclusion
    
label20823:
    movq $3, %rax
    cmpq $2, %rax
    jg label20821
    jmp label20822
    
label20824:
    movq $3, %rax
    cmpq $1, %rax
    setg %al
    movzbq %al, %rcx
    jmp label20823
    
label20825:
    movq $1, %rax
    cmpq $2, %rax
    setl %al
    movzbq %al, %rcx
    jmp label20823
    
start:
    movq $1, %rdx
    addq $2, %rdx
    movq $2, %rcx
    addq $3, %rcx
    cmpq %rcx, %rdx
    jg label20824
    jmp label20825
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20815 : 'Integer, x20813 : 'Boolean, temp20816 : 'Integer, 
tsorted
:
'(label20821 label20822 label20823 label20824 label20825 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %al -1)
 (cons %rsp -2)
 (cons temp20816 0)
 (cons temp20815 1)
 (cons x20813 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20821:
    movq $42, %rax
    jmp conclusion
    
label20822:
    movq $1, %rax
    jmp conclusion
    
label20823:
    movq $3, %rax
    cmpq $2, %rax
    jg label20821
    jmp label20822
    
label20824:
    movq $3, %rax
    cmpq $1, %rax
    setg %al
    movzbq %al, %rcx
    jmp label20823
    
label20825:
    movq $1, %rax
    cmpq $2, %rax
    setl %al
    movzbq %al, %rcx
    jmp label20823
    
start:
    movq $1, %rdx
    addq $2, %rdx
    movq $2, %rcx
    addq $3, %rcx
    cmpq %rcx, %rdx
    jg label20824
    jmp label20825
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_14"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if (<= 1 2)
                   1
                   (let ([x (> 5 5)])
                      (if (not (let ([x (> 5 5)])
                                  (not (let ([x (> 5 5)])
                                          (not x)))))
                         1
                         2)
                      ))
                )))



testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if (<= 1 2)
                   1
                   (let ([x (> 5 5)])
                      (if (not (let ([x (> 5 5)])
                                  (not (let ([x (> 5 5)])
                                          (not x)))))
                         1
                         2)
                      ))
                )))



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if (<= 1 2)
                   1
                   (let ([x (> 5 5)])
                      (if (not (let ([x (> 5 5)])
                                  (not (let ([x (> 5 5)])
                                          (not x)))))
                         1
                         2)
                      ))
                )))



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (eq? (read) (read))
   (let ([x20840 1])
      x20840)
   (let ([x20841 (if (>= 1 1)
                    (let ([x20842 (> 5 5)])
                       (not x20842))
                    (let ([x20843 (< 5 5)])
                       x20843))
                 ])
      (+ (read) (if (<= 1 2)
                   1
                   (let ([x20844 (> 5 5)])
                      (if (not (let ([x20845 (> 5 5)])
                                  (not (let ([x20846 (> 5 5)])
                                          (not x20846)))))
                         1
                         2)
                      ))
                )))



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (eq? (read) (read))
   (let ([x20840 1])
      x20840)
   (let ([x20841 (if (>= 1 1)
                    (let ([x20842 (> 5 5)])
                       (not x20842))
                    (let ([x20843 (< 5 5)])
                       x20843))
                 ])
      (+ (read) (if (<= 1 2)
                   1
                   (let ([x20844 (> 5 5)])
                      (if (not (let ([x20845 (> 5 5)])
                                  (not (let ([x20846 (> 5 5)])
                                          (not x20846)))))
                         1
                         2)
                      ))
                )))



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (let ([temp20848 (read)])
       (let ([temp20849 (read)])
          (eq? temp20848 temp20849)))
   (let ([x20840 1])
      x20840)
   (let ([x20841 (if (>= 1 1)
                    (let ([x20842 (> 5 5)])
                       (not x20842))
                    (let ([x20843 (< 5 5)])
                       x20843))
                 ])
      (let ([temp20855 (read)])
         (let ([temp20856 (if (<= 1 2)
                             1
                             (let ([x20844 (> 5 5)])
                                (if (let ([x20845 (> 5 5)])
                                       (let ([temp20860 (let ([x20846 (> 5 5)])
                                                           (let ([temp20863 (not x20846)])
                                                              (not temp20863)))])
                                          (not temp20860)))
                                   1
                                   2)
                                ))
                          ])
            (+ temp20855 temp20856)))))



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (let ([temp20848 (read)])
       (let ([temp20849 (read)])
          (eq? temp20848 temp20849)))
   (let ([x20840 1])
      x20840)
   (let ([x20841 (if (>= 1 1)
                    (let ([x20842 (> 5 5)])
                       (not x20842))
                    (let ([x20843 (< 5 5)])
                       x20843))
                 ])
      (let ([temp20855 (read)])
         (let ([temp20856 (if (<= 1 2)
                             1
                             (let ([x20844 (> 5 5)])
                                (if (let ([x20845 (> 5 5)])
                                       (let ([temp20860 (let ([x20846 (> 5 5)])
                                                           (let ([temp20863 (not x20846)])
                                                              (not temp20863)))])
                                          (not temp20860)))
                                   1
                                   2)
                                ))
                          ])
            (+ temp20855 temp20856)))))



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label20866:
    return (+ temp20855 temp20856);
label20867:
    temp20856 = 1;
    goto label20866;
label20870:
    x20844 = (> 5 5);
    x20845 = (> 5 5);
    x20846 = (> 5 5);
    temp20863 = (not x20846);
    temp20860 = (not temp20863);
    if (eq? temp20860 #f)
       goto label20867;
    else
       goto label20868;
start:
    temp20848 = (read);
    temp20849 = (read);
    if (eq? temp20848 temp20849)
       goto label20874;
    else
       goto label20875;
label20871:
    temp20855 = (read);
    if (<= 1 2)
       goto label20869;
    else
       goto label20870;
label20868:
    temp20856 = 2;
    goto label20866;
label20869:
    temp20856 = 1;
    goto label20866;
label20874:
    x20840 = 1;
    return x20840;
label20875:
    if (>= 1 1)
       goto label20872;
    else
       goto label20873;
label20872:
    x20842 = (> 5 5);
    x20841 = (not x20842);
    goto label20871;
label20873:
    x20843 = (< 5 5);
    x20841 = x20843;
    goto label20871;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
label20866:
    return (+ temp20855 temp20856);
label20867:
    temp20856 = 1;
    goto label20866;
label20870:
    x20844 = (> 5 5);
    x20845 = (> 5 5);
    x20846 = (> 5 5);
    temp20863 = (not x20846);
    temp20860 = (not temp20863);
    if (eq? temp20860 #f)
       goto label20867;
    else
       goto label20868;
start:
    temp20848 = (read);
    temp20849 = (read);
    if (eq? temp20848 temp20849)
       goto label20874;
    else
       goto label20875;
label20871:
    temp20855 = (read);
    if (<= 1 2)
       goto label20869;
    else
       goto label20870;
label20868:
    temp20856 = 2;
    goto label20866;
label20869:
    temp20856 = 1;
    goto label20866;
label20874:
    x20840 = 1;
    return x20840;
label20875:
    if (>= 1 1)
       goto label20872;
    else
       goto label20873;
label20872:
    x20842 = (> 5 5);
    x20841 = (not x20842);
    goto label20871;
label20873:
    x20843 = (< 5 5);
    x20841 = x20843;
    goto label20871;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
label20866:
    movq temp20855, %rax
    addq temp20856, %rax
    jmp conclusion
    
label20867:
    movq $1, temp20856
    jmp label20866
    
label20870:
    cmpq $5, $5
    setg %al
    movzbq %al, x20844
    cmpq $5, $5
    setg %al
    movzbq %al, x20845
    cmpq $5, $5
    setg %al
    movzbq %al, x20846
    movq x20846, temp20863
    xorq $1, temp20863
    movq temp20863, temp20860
    xorq $1, temp20860
    cmpq $0, temp20860
    je label20867
    jmp label20868
    
start:
    callq read_int
    movq %rax, temp20848
    callq read_int
    movq %rax, temp20849
    cmpq temp20849, temp20848
    je label20874
    jmp label20875
    
label20871:
    callq read_int
    movq %rax, temp20855
    cmpq $2, $1
    jle label20869
    jmp label20870
    
label20868:
    movq $2, temp20856
    jmp label20866
    
label20869:
    movq $1, temp20856
    jmp label20866
    
label20874:
    movq $1, x20840
    movq x20840, %rax
    jmp conclusion
    
label20875:
    cmpq $1, $1
    jge label20872
    jmp label20873
    
label20872:
    cmpq $5, $5
    setg %al
    movzbq %al, x20842
    movq x20842, x20841
    xorq $1, x20841
    jmp label20871
    
label20873:
    cmpq $5, $5
    setl %al
    movzbq %al, x20843
    movq x20843, x20841
    jmp label20871
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
label20866:
    movq temp20855, %rax
    addq temp20856, %rax
    jmp conclusion
    
label20867:
    movq $1, temp20856
    jmp label20866
    
label20870:
    cmpq $5, $5
    setg %al
    movzbq %al, x20844
    cmpq $5, $5
    setg %al
    movzbq %al, x20845
    cmpq $5, $5
    setg %al
    movzbq %al, x20846
    movq x20846, temp20863
    xorq $1, temp20863
    movq temp20863, temp20860
    xorq $1, temp20860
    cmpq $0, temp20860
    je label20867
    jmp label20868
    
start:
    callq read_int
    movq %rax, temp20848
    callq read_int
    movq %rax, temp20849
    cmpq temp20849, temp20848
    je label20874
    jmp label20875
    
label20871:
    callq read_int
    movq %rax, temp20855
    cmpq $2, $1
    jle label20869
    jmp label20870
    
label20868:
    movq $2, temp20856
    jmp label20866
    
label20869:
    movq $1, temp20856
    jmp label20866
    
label20874:
    movq $1, x20840
    movq x20840, %rax
    jmp conclusion
    
label20875:
    cmpq $1, $1
    jge label20872
    jmp label20873
    
label20872:
    cmpq $5, $5
    setg %al
    movzbq %al, x20842
    movq x20842, x20841
    xorq $1, x20841
    jmp label20871
    
label20873:
    cmpq $5, $5
    setl %al
    movzbq %al, x20843
    movq x20843, x20841
    jmp label20871
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
label20874:
    liveness
:
(list (set %rsp) (set x20840 %rsp) (set %rax %rsp))
movq $1, x20840
movq x20840, %rax
jmp conclusion

label20866:
    liveness
:
(list (set temp20855 temp20856 %rsp) (set %rax temp20856 %rsp) (set %rax %rsp))
movq temp20855, %rax
addq temp20856, %rax
jmp conclusion

label20867:
    liveness
:
(list (set temp20855 %rsp) (set temp20855 temp20856 %rsp))
movq $1, temp20856
jmp label20866

label20868:
    liveness
:
(list (set temp20855 %rsp) (set temp20855 temp20856 %rsp))
movq $2, temp20856
jmp label20866

label20870:
    liveness
:
(list
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set temp20855 x20846 %rsp)
 (set temp20855 temp20863 %rsp)
 (set temp20855 temp20863 %rsp)
 (set temp20855 temp20860 %rsp)
 (set temp20855 temp20860 %rsp)
 (set temp20855 %rsp)
 (set temp20855 %rsp))
cmpq $5, $5
setg %al
movzbq %al, x20844
cmpq $5, $5
setg %al
movzbq %al, x20845
cmpq $5, $5
setg %al
movzbq %al, x20846
movq x20846, temp20863
xorq $1, temp20863
movq temp20863, temp20860
xorq $1, temp20860
cmpq $0, temp20860
je label20867
jmp label20868

label20869:
    liveness
:
(list (set temp20855 %rsp) (set temp20855 temp20856 %rsp))
movq $1, temp20856
jmp label20866

label20871:
    liveness
:
(list
 (set %al %rsp)
 (set %rax %al %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp))
callq read_int
movq %rax, temp20855
cmpq $2, $1
jle label20869
jmp label20870

label20872:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set %al x20842 %rsp)
 (set %al x20841 %rsp)
 (set %al %rsp))
cmpq $5, $5
setg %al
movzbq %al, x20842
movq x20842, x20841
xorq $1, x20841
jmp label20871

label20873:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set %al x20843 %rsp)
 (set %al %rsp))
cmpq $5, $5
setl %al
movzbq %al, x20843
movq x20843, x20841
jmp label20871

label20875:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp))
cmpq $1, $1
jge label20872
jmp label20873

start:
    liveness
:
(list
 (set %al %rsp)
 (set %rax %al %rsp)
 (set %al temp20848 %rsp)
 (set %rax %al temp20848 %rsp)
 (set %al temp20848 temp20849 %rsp)
 (set %al %rsp)
 (set %al %rsp))
callq read_int
movq %rax, temp20848
callq read_int
movq %rax, temp20849
cmpq temp20849, temp20848
je label20874
jmp label20875




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
label20874:
    liveness
:
(list (set %rsp) (set x20840 %rsp) (set %rax %rsp))
movq $1, x20840
movq x20840, %rax
jmp conclusion

label20866:
    liveness
:
(list (set temp20855 temp20856 %rsp) (set %rax temp20856 %rsp) (set %rax %rsp))
movq temp20855, %rax
addq temp20856, %rax
jmp conclusion

label20867:
    liveness
:
(list (set temp20855 %rsp) (set temp20855 temp20856 %rsp))
movq $1, temp20856
jmp label20866

label20868:
    liveness
:
(list (set temp20855 %rsp) (set temp20855 temp20856 %rsp))
movq $2, temp20856
jmp label20866

label20870:
    liveness
:
(list
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set temp20855 x20846 %rsp)
 (set temp20855 temp20863 %rsp)
 (set temp20855 temp20863 %rsp)
 (set temp20855 temp20860 %rsp)
 (set temp20855 temp20860 %rsp)
 (set temp20855 %rsp)
 (set temp20855 %rsp))
cmpq $5, $5
setg %al
movzbq %al, x20844
cmpq $5, $5
setg %al
movzbq %al, x20845
cmpq $5, $5
setg %al
movzbq %al, x20846
movq x20846, temp20863
xorq $1, temp20863
movq temp20863, temp20860
xorq $1, temp20860
cmpq $0, temp20860
je label20867
jmp label20868

label20869:
    liveness
:
(list (set temp20855 %rsp) (set temp20855 temp20856 %rsp))
movq $1, temp20856
jmp label20866

label20871:
    liveness
:
(list
 (set %al %rsp)
 (set %rax %al %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp)
 (set %al temp20855 %rsp))
callq read_int
movq %rax, temp20855
cmpq $2, $1
jle label20869
jmp label20870

label20872:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set %al x20842 %rsp)
 (set %al x20841 %rsp)
 (set %al %rsp))
cmpq $5, $5
setg %al
movzbq %al, x20842
movq x20842, x20841
xorq $1, x20841
jmp label20871

label20873:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set %al x20843 %rsp)
 (set %al %rsp))
cmpq $5, $5
setl %al
movzbq %al, x20843
movq x20843, x20841
jmp label20871

label20875:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp))
cmpq $1, $1
jge label20872
jmp label20873

start:
    liveness
:
(list
 (set %al %rsp)
 (set %rax %al %rsp)
 (set %al temp20848 %rsp)
 (set %rax %al temp20848 %rsp)
 (set %al temp20848 temp20849 %rsp)
 (set %al %rsp)
 (set %al %rsp))
callq read_int
movq %rax, temp20848
callq read_int
movq %rax, temp20849
cmpq temp20849, temp20848
je label20874
jmp label20875




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20842 x20841)
 (list x20843 x20841)
 (list x20841 x20842)
 (list x20841 x20843)
 (list x20846 temp20863)
 (list temp20863 temp20860)
 (list temp20863 x20846)
 (list temp20860 temp20863))
label20874:
    movq $1, x20840
    movq x20840, %rax
    jmp conclusion
    
label20866:
    movq temp20855, %rax
    addq temp20856, %rax
    jmp conclusion
    
label20867:
    movq $1, temp20856
    jmp label20866
    
label20868:
    movq $2, temp20856
    jmp label20866
    
label20870:
    cmpq $5, $5
    setg %al
    movzbq %al, x20844
    cmpq $5, $5
    setg %al
    movzbq %al, x20845
    cmpq $5, $5
    setg %al
    movzbq %al, x20846
    movq x20846, temp20863
    xorq $1, temp20863
    movq temp20863, temp20860
    xorq $1, temp20860
    cmpq $0, temp20860
    je label20867
    jmp label20868
    
label20869:
    movq $1, temp20856
    jmp label20866
    
label20871:
    callq read_int
    movq %rax, temp20855
    cmpq $2, $1
    jle label20869
    jmp label20870
    
label20872:
    cmpq $5, $5
    setg %al
    movzbq %al, x20842
    movq x20842, x20841
    xorq $1, x20841
    jmp label20871
    
label20873:
    cmpq $5, $5
    setl %al
    movzbq %al, x20843
    movq x20843, x20841
    jmp label20871
    
label20875:
    cmpq $1, $1
    jge label20872
    jmp label20873
    
start:
    callq read_int
    movq %rax, temp20848
    callq read_int
    movq %rax, temp20849
    cmpq temp20849, temp20848
    je label20874
    jmp label20875
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20842 x20841)
 (list x20843 x20841)
 (list x20841 x20842)
 (list x20841 x20843)
 (list x20846 temp20863)
 (list temp20863 temp20860)
 (list temp20863 x20846)
 (list temp20860 temp20863))
label20874:
    movq $1, x20840
    movq x20840, %rax
    jmp conclusion
    
label20866:
    movq temp20855, %rax
    addq temp20856, %rax
    jmp conclusion
    
label20867:
    movq $1, temp20856
    jmp label20866
    
label20868:
    movq $2, temp20856
    jmp label20866
    
label20870:
    cmpq $5, $5
    setg %al
    movzbq %al, x20844
    cmpq $5, $5
    setg %al
    movzbq %al, x20845
    cmpq $5, $5
    setg %al
    movzbq %al, x20846
    movq x20846, temp20863
    xorq $1, temp20863
    movq temp20863, temp20860
    xorq $1, temp20860
    cmpq $0, temp20860
    je label20867
    jmp label20868
    
label20869:
    movq $1, temp20856
    jmp label20866
    
label20871:
    callq read_int
    movq %rax, temp20855
    cmpq $2, $1
    jle label20869
    jmp label20870
    
label20872:
    cmpq $5, $5
    setg %al
    movzbq %al, x20842
    movq x20842, x20841
    xorq $1, x20841
    jmp label20871
    
label20873:
    cmpq $5, $5
    setl %al
    movzbq %al, x20843
    movq x20843, x20841
    jmp label20871
    
label20875:
    cmpq $1, $1
    jge label20872
    jmp label20873
    
start:
    callq read_int
    movq %rax, temp20848
    callq read_int
    movq %rax, temp20849
    cmpq temp20849, temp20848
    je label20874
    jmp label20875
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20842 x20841)
 (list x20843 x20841)
 (list x20841 x20842)
 (list x20841 x20843)
 (list x20846 temp20863)
 (list temp20863 temp20860)
 (list temp20863 x20846)
 (list temp20860 temp20863))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20848 7)
 (cons temp20849 0)
 (cons temp20856 0)
 (cons temp20855 1)
 (cons x20845 0)
 (cons x20841 0)
 (cons x20846 0)
 (cons temp20863 0)
 (cons x20844 0)
 (cons temp20860 0)
 (cons x20843 0)
 (cons x20840 0)
 (cons x20842 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20874:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20866:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20867:
    movq $1, %rcx
    jmp label20866
    
label20868:
    movq $2, %rcx
    jmp label20866
    
label20870:
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rcx
    xorq $1, %rcx
    movq %rcx, %rcx
    xorq $1, %rcx
    cmpq $0, %rcx
    je label20867
    jmp label20868
    
label20869:
    movq $1, %rcx
    jmp label20866
    
label20871:
    callq read_int
    movq %rax, %rdx
    cmpq $2, $1
    jle label20869
    jmp label20870
    
label20872:
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rcx
    xorq $1, %rcx
    jmp label20871
    
label20873:
    cmpq $5, $5
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rcx
    jmp label20871
    
label20875:
    cmpq $1, $1
    jge label20872
    jmp label20873
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20874
    jmp label20875
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20842 x20841)
 (list x20843 x20841)
 (list x20841 x20842)
 (list x20841 x20843)
 (list x20846 temp20863)
 (list temp20863 temp20860)
 (list temp20863 x20846)
 (list temp20860 temp20863))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20848 7)
 (cons temp20849 0)
 (cons temp20856 0)
 (cons temp20855 1)
 (cons x20845 0)
 (cons x20841 0)
 (cons x20846 0)
 (cons temp20863 0)
 (cons x20844 0)
 (cons temp20860 0)
 (cons x20843 0)
 (cons x20840 0)
 (cons x20842 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20874:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20866:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20867:
    movq $1, %rcx
    jmp label20866
    
label20868:
    movq $2, %rcx
    jmp label20866
    
label20870:
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rcx
    xorq $1, %rcx
    movq %rcx, %rcx
    xorq $1, %rcx
    cmpq $0, %rcx
    je label20867
    jmp label20868
    
label20869:
    movq $1, %rcx
    jmp label20866
    
label20871:
    callq read_int
    movq %rax, %rdx
    cmpq $2, $1
    jle label20869
    jmp label20870
    
label20872:
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rcx
    xorq $1, %rcx
    jmp label20871
    
label20873:
    cmpq $5, $5
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rcx
    jmp label20871
    
label20875:
    cmpq $1, $1
    jge label20872
    jmp label20873
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20874
    jmp label20875
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20842 x20841)
 (list x20843 x20841)
 (list x20841 x20842)
 (list x20841 x20843)
 (list x20846 temp20863)
 (list temp20863 temp20860)
 (list temp20863 x20846)
 (list temp20860 temp20863))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20848 7)
 (cons temp20849 0)
 (cons temp20856 0)
 (cons temp20855 1)
 (cons x20845 0)
 (cons x20841 0)
 (cons x20846 0)
 (cons temp20863 0)
 (cons x20844 0)
 (cons temp20860 0)
 (cons x20843 0)
 (cons x20840 0)
 (cons x20842 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20874:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20866:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20867:
    movq $1, %rcx
    jmp label20866
    
label20868:
    movq $2, %rcx
    jmp label20866
    
label20870:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    xorq $1, %rcx
    cmpq $0, %rcx
    je label20867
    jmp label20868
    
label20869:
    movq $1, %rcx
    jmp label20866
    
label20871:
    callq read_int
    movq %rax, %rdx
    movq $1, %rax
    cmpq $2, %rax
    jle label20869
    jmp label20870
    
label20872:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    jmp label20871
    
label20873:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    jmp label20871
    
label20875:
    movq $1, %rax
    cmpq $1, %rax
    jge label20872
    jmp label20873
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20874
    jmp label20875
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20842 x20841)
 (list x20843 x20841)
 (list x20841 x20842)
 (list x20841 x20843)
 (list x20846 temp20863)
 (list temp20863 temp20860)
 (list temp20863 x20846)
 (list temp20860 temp20863))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20848 7)
 (cons temp20849 0)
 (cons temp20856 0)
 (cons temp20855 1)
 (cons x20845 0)
 (cons x20841 0)
 (cons x20846 0)
 (cons temp20863 0)
 (cons x20844 0)
 (cons temp20860 0)
 (cons x20843 0)
 (cons x20840 0)
 (cons x20842 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20874:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20866:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20867:
    movq $1, %rcx
    jmp label20866
    
label20868:
    movq $2, %rcx
    jmp label20866
    
label20870:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    xorq $1, %rcx
    cmpq $0, %rcx
    je label20867
    jmp label20868
    
label20869:
    movq $1, %rcx
    jmp label20866
    
label20871:
    callq read_int
    movq %rax, %rdx
    movq $1, %rax
    cmpq $2, %rax
    jle label20869
    jmp label20870
    
label20872:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    jmp label20871
    
label20873:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    jmp label20871
    
label20875:
    movq $1, %rax
    cmpq $1, %rax
    jge label20872
    jmp label20873
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20874
    jmp label20875
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20842 x20841)
 (list x20843 x20841)
 (list x20841 x20842)
 (list x20841 x20843)
 (list x20846 temp20863)
 (list temp20863 temp20860)
 (list temp20863 x20846)
 (list temp20860 temp20863))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20848 7)
 (cons temp20849 0)
 (cons temp20856 0)
 (cons temp20855 1)
 (cons x20845 0)
 (cons x20841 0)
 (cons x20846 0)
 (cons temp20863 0)
 (cons x20844 0)
 (cons temp20860 0)
 (cons x20843 0)
 (cons x20840 0)
 (cons x20842 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20874:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20866:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20867:
    movq $1, %rcx
    jmp label20866
    
label20868:
    movq $2, %rcx
    jmp label20866
    
label20870:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    xorq $1, %rcx
    cmpq $0, %rcx
    je label20867
    jmp label20868
    
label20869:
    movq $1, %rcx
    jmp label20866
    
label20871:
    callq read_int
    movq %rax, %rdx
    movq $1, %rax
    cmpq $2, %rax
    jle label20869
    jmp label20870
    
label20872:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    jmp label20871
    
label20873:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    jmp label20871
    
label20875:
    movq $1, %rax
    cmpq $1, %rax
    jge label20872
    jmp label20873
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20874
    jmp label20875
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    x20846 : 'Boolean, temp20863 : 'Boolean, temp20860 : 'Boolean, x20844 : 'Boolean, x20845 : 'Boolean, temp20848 : 'Integer, temp20849 : 'Integer, temp20855 : 'Integer, x20842 : 'Boolean, x20843 : 'Boolean, x20840 : 'Integer, temp20856 : 'Integer, x20841 : 'Boolean, 
tsorted
:
'(label20874
  label20866
  label20867
  label20868
  label20870
  label20869
  label20871
  label20872
  label20873
  label20875
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x20842 x20841)
 (list x20843 x20841)
 (list x20841 x20842)
 (list x20841 x20843)
 (list x20846 temp20863)
 (list temp20863 temp20860)
 (list temp20863 x20846)
 (list temp20860 temp20863))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp20848 7)
 (cons temp20849 0)
 (cons temp20856 0)
 (cons temp20855 1)
 (cons x20845 0)
 (cons x20841 0)
 (cons x20846 0)
 (cons temp20863 0)
 (cons x20844 0)
 (cons temp20860 0)
 (cons x20843 0)
 (cons x20840 0)
 (cons x20842 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label20874:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20866:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label20867:
    movq $1, %rcx
    jmp label20866
    
label20868:
    movq $2, %rcx
    jmp label20866
    
label20870:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    xorq $1, %rcx
    cmpq $0, %rcx
    je label20867
    jmp label20868
    
label20869:
    movq $1, %rcx
    jmp label20866
    
label20871:
    callq read_int
    movq %rax, %rdx
    movq $1, %rax
    cmpq $2, %rax
    jle label20869
    jmp label20870
    
label20872:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    jmp label20871
    
label20873:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    jmp label20871
    
label20875:
    movq $1, %rax
    cmpq $1, %rax
    jge label20872
    jmp label20873
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label20874
    jmp label20875
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_15"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(if (> (- 3) (- 4))
   42
   5)



testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (> (- 3) (- 4))
   42
   5)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (> (- 3) (- 4))
   42
   5)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (> (- 3) (- 4))
   42
   5)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (> (- 3) (- 4))
   42
   5)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(if (let ([temp20891 (- 3)])
       (let ([temp20892 (- 4)])
          (> temp20891 temp20892)))
   42
   5)



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(if (let ([temp20891 (- 3)])
       (let ([temp20892 (- 4)])
          (> temp20891 temp20892)))
   42
   5)



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label20894:
    return 5;
start:
    temp20891 = (- 3);
    temp20892 = (- 4);
    if (> temp20891 temp20892)
       goto label20893;
    else
       goto label20894;
label20893:
    return 42;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
label20894:
    return 5;
start:
    temp20891 = (- 3);
    temp20892 = (- 4);
    if (> temp20891 temp20892)
       goto label20893;
    else
       goto label20894;
label20893:
    return 42;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, temp20891
    negq temp20891
    movq $4, temp20892
    negq temp20892
    cmpq temp20892, temp20891
    jg label20893
    jmp label20894
    
label20893:
    movq $42, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, temp20891
    negq temp20891
    movq $4, temp20892
    negq temp20892
    cmpq temp20892, temp20891
    jg label20893
    jmp label20894
    
label20893:
    movq $42, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
label20893:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20894:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $5, %rax
jmp conclusion

start:
    liveness
:
(list
 (set %rsp)
 (set temp20891 %rsp)
 (set temp20891 %rsp)
 (set temp20891 temp20892 %rsp)
 (set temp20891 temp20892 %rsp)
 (set %rsp)
 (set %rsp))
movq $3, temp20891
negq temp20891
movq $4, temp20892
negq temp20892
cmpq temp20892, temp20891
jg label20893
jmp label20894




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
label20893:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20894:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $5, %rax
jmp conclusion

start:
    liveness
:
(list
 (set %rsp)
 (set temp20891 %rsp)
 (set temp20891 %rsp)
 (set temp20891 temp20892 %rsp)
 (set temp20891 temp20892 %rsp)
 (set %rsp)
 (set %rsp))
movq $3, temp20891
negq temp20891
movq $4, temp20892
negq temp20892
cmpq temp20892, temp20891
jg label20893
jmp label20894




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20893:
    movq $42, %rax
    jmp conclusion
    
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, temp20891
    negq temp20891
    movq $4, temp20892
    negq temp20892
    cmpq temp20892, temp20891
    jg label20893
    jmp label20894
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20893:
    movq $42, %rax
    jmp conclusion
    
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, temp20891
    negq temp20891
    movq $4, temp20892
    negq temp20892
    cmpq temp20892, temp20891
    jg label20893
    jmp label20894
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp20891 0) (cons temp20892 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20893:
    movq $42, %rax
    jmp conclusion
    
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, %rcx
    negq %rcx
    movq $4, %rdx
    negq %rdx
    cmpq %rdx, %rcx
    jg label20893
    jmp label20894
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp20891 0) (cons temp20892 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20893:
    movq $42, %rax
    jmp conclusion
    
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, %rcx
    negq %rcx
    movq $4, %rdx
    negq %rdx
    cmpq %rdx, %rcx
    jg label20893
    jmp label20894
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp20891 0) (cons temp20892 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20893:
    movq $42, %rax
    jmp conclusion
    
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, %rcx
    negq %rcx
    movq $4, %rdx
    negq %rdx
    cmpq %rdx, %rcx
    jg label20893
    jmp label20894
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp20891 0) (cons temp20892 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20893:
    movq $42, %rax
    jmp conclusion
    
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, %rcx
    negq %rcx
    movq $4, %rdx
    negq %rdx
    cmpq %rdx, %rcx
    jg label20893
    jmp label20894
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp20891 0) (cons temp20892 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20893:
    movq $42, %rax
    jmp conclusion
    
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, %rcx
    negq %rcx
    movq $4, %rdx
    negq %rdx
    cmpq %rdx, %rcx
    jg label20893
    jmp label20894
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20892 : 'Integer, temp20891 : 'Integer, 
tsorted
:
'(label20893 label20894 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp20891 0) (cons temp20892 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label20893:
    movq $42, %rax
    jmp conclusion
    
label20894:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, %rcx
    negq %rcx
    movq $4, %rdx
    negq %rdx
    cmpq %rdx, %rcx
    jg label20893
    jmp label20894
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_16"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      42)
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      42)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      42)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20909 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x20909
      1
      42)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20909 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x20909
      1
      42)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20909 (if (let ([temp20911 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp20911 8))
                 #t
                 #f)
              ])
   (if x20909
      1
      42)
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20909 (if (let ([temp20911 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp20911 8))
                 #t
                 #f)
              ])
   (if x20909
      1
      42)
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label20914:
    return 42;
label20915:
    if (eq? x20909 #t)
       goto label20913;
    else
       goto label20914;
label20913:
    return 1;
label20918:
    if (> temp20911 8)
       goto label20916;
    else
       goto label20917;
label20919:
    temp20911 = 8;
    goto label20918;
start:
    if (>= 1 1)
       goto label20919;
    else
       goto label20920;
label20916:
    x20909 = #t;
    goto label20915;
label20917:
    x20909 = #f;
    goto label20915;
label20920:
    temp20911 = 9;
    goto label20918;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
label20914:
    return 42;
label20915:
    if (eq? x20909 #t)
       goto label20913;
    else
       goto label20914;
label20913:
    return 1;
label20918:
    if (> temp20911 8)
       goto label20916;
    else
       goto label20917;
label20919:
    temp20911 = 8;
    goto label20918;
start:
    if (>= 1 1)
       goto label20919;
    else
       goto label20920;
label20916:
    x20909 = #t;
    goto label20915;
label20917:
    x20909 = #f;
    goto label20915;
label20920:
    temp20911 = 9;
    goto label20918;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, x20909
    je label20913
    jmp label20914
    
label20913:
    movq $1, %rax
    jmp conclusion
    
label20918:
    cmpq $8, temp20911
    jg label20916
    jmp label20917
    
label20919:
    movq $8, temp20911
    jmp label20918
    
start:
    cmpq $1, $1
    jge label20919
    jmp label20920
    
label20916:
    movq $1, x20909
    jmp label20915
    
label20917:
    movq $0, x20909
    jmp label20915
    
label20920:
    movq $9, temp20911
    jmp label20918
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, x20909
    je label20913
    jmp label20914
    
label20913:
    movq $1, %rax
    jmp conclusion
    
label20918:
    cmpq $8, temp20911
    jg label20916
    jmp label20917
    
label20919:
    movq $8, temp20911
    jmp label20918
    
start:
    cmpq $1, $1
    jge label20919
    jmp label20920
    
label20916:
    movq $1, x20909
    jmp label20915
    
label20917:
    movq $0, x20909
    jmp label20915
    
label20920:
    movq $9, temp20911
    jmp label20918
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
label20913:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label20914:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20915:
    liveness
:
(list (set x20909 %rsp) (set %rsp) (set %rsp))
cmpq $1, x20909
je label20913
jmp label20914

label20916:
    liveness
:
(list (set %rsp) (set x20909 %rsp))
movq $1, x20909
jmp label20915

label20917:
    liveness
:
(list (set %rsp) (set x20909 %rsp))
movq $0, x20909
jmp label20915

label20918:
    liveness
:
(list (set temp20911 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp20911
jg label20916
jmp label20917

label20919:
    liveness
:
(list (set %rsp) (set temp20911 %rsp))
movq $8, temp20911
jmp label20918

label20920:
    liveness
:
(list (set %rsp) (set temp20911 %rsp))
movq $9, temp20911
jmp label20918

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label20919
jmp label20920




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
label20913:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label20914:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label20915:
    liveness
:
(list (set x20909 %rsp) (set %rsp) (set %rsp))
cmpq $1, x20909
je label20913
jmp label20914

label20916:
    liveness
:
(list (set %rsp) (set x20909 %rsp))
movq $1, x20909
jmp label20915

label20917:
    liveness
:
(list (set %rsp) (set x20909 %rsp))
movq $0, x20909
jmp label20915

label20918:
    liveness
:
(list (set temp20911 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp20911
jg label20916
jmp label20917

label20919:
    liveness
:
(list (set %rsp) (set temp20911 %rsp))
movq $8, temp20911
jmp label20918

label20920:
    liveness
:
(list (set %rsp) (set temp20911 %rsp))
movq $9, temp20911
jmp label20918

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label20919
jmp label20920




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20913:
    movq $1, %rax
    jmp conclusion
    
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, x20909
    je label20913
    jmp label20914
    
label20916:
    movq $1, x20909
    jmp label20915
    
label20917:
    movq $0, x20909
    jmp label20915
    
label20918:
    cmpq $8, temp20911
    jg label20916
    jmp label20917
    
label20919:
    movq $8, temp20911
    jmp label20918
    
label20920:
    movq $9, temp20911
    jmp label20918
    
start:
    cmpq $1, $1
    jge label20919
    jmp label20920
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20913:
    movq $1, %rax
    jmp conclusion
    
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, x20909
    je label20913
    jmp label20914
    
label20916:
    movq $1, x20909
    jmp label20915
    
label20917:
    movq $0, x20909
    jmp label20915
    
label20918:
    cmpq $8, temp20911
    jg label20916
    jmp label20917
    
label20919:
    movq $8, temp20911
    jmp label20918
    
label20920:
    movq $9, temp20911
    jmp label20918
    
start:
    cmpq $1, $1
    jge label20919
    jmp label20920
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20909 0) (cons temp20911 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20913:
    movq $1, %rax
    jmp conclusion
    
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, %rcx
    je label20913
    jmp label20914
    
label20916:
    movq $1, %rcx
    jmp label20915
    
label20917:
    movq $0, %rcx
    jmp label20915
    
label20918:
    cmpq $8, %rcx
    jg label20916
    jmp label20917
    
label20919:
    movq $8, %rcx
    jmp label20918
    
label20920:
    movq $9, %rcx
    jmp label20918
    
start:
    cmpq $1, $1
    jge label20919
    jmp label20920
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20909 0) (cons temp20911 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20913:
    movq $1, %rax
    jmp conclusion
    
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, %rcx
    je label20913
    jmp label20914
    
label20916:
    movq $1, %rcx
    jmp label20915
    
label20917:
    movq $0, %rcx
    jmp label20915
    
label20918:
    cmpq $8, %rcx
    jg label20916
    jmp label20917
    
label20919:
    movq $8, %rcx
    jmp label20918
    
label20920:
    movq $9, %rcx
    jmp label20918
    
start:
    cmpq $1, $1
    jge label20919
    jmp label20920
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20909 0) (cons temp20911 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20913:
    movq $1, %rax
    jmp conclusion
    
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, %rcx
    je label20913
    jmp label20914
    
label20916:
    movq $1, %rcx
    jmp label20915
    
label20917:
    movq $0, %rcx
    jmp label20915
    
label20918:
    cmpq $8, %rcx
    jg label20916
    jmp label20917
    
label20919:
    movq $8, %rcx
    jmp label20918
    
label20920:
    movq $9, %rcx
    jmp label20918
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label20919
    jmp label20920
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20909 0) (cons temp20911 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20913:
    movq $1, %rax
    jmp conclusion
    
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, %rcx
    je label20913
    jmp label20914
    
label20916:
    movq $1, %rcx
    jmp label20915
    
label20917:
    movq $0, %rcx
    jmp label20915
    
label20918:
    cmpq $8, %rcx
    jg label20916
    jmp label20917
    
label20919:
    movq $8, %rcx
    jmp label20918
    
label20920:
    movq $9, %rcx
    jmp label20918
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label20919
    jmp label20920
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20909 0) (cons temp20911 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20913:
    movq $1, %rax
    jmp conclusion
    
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, %rcx
    je label20913
    jmp label20914
    
label20916:
    movq $1, %rcx
    jmp label20915
    
label20917:
    movq $0, %rcx
    jmp label20915
    
label20918:
    cmpq $8, %rcx
    jg label20916
    jmp label20917
    
label20919:
    movq $8, %rcx
    jmp label20918
    
label20920:
    movq $9, %rcx
    jmp label20918
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label20919
    jmp label20920
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20911 : 'Integer, x20909 : 'Boolean, 
tsorted
:
'(label20913
  label20914
  label20915
  label20916
  label20917
  label20918
  label20919
  label20920
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x20909 0) (cons temp20911 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20913:
    movq $1, %rax
    jmp conclusion
    
label20914:
    movq $42, %rax
    jmp conclusion
    
label20915:
    cmpq $1, %rcx
    je label20913
    jmp label20914
    
label20916:
    movq $1, %rcx
    jmp label20915
    
label20917:
    movq $0, %rcx
    jmp label20915
    
label20918:
    cmpq $8, %rcx
    jg label20916
    jmp label20917
    
label20919:
    movq $8, %rcx
    jmp label20918
    
label20920:
    movq $9, %rcx
    jmp label20918
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label20919
    jmp label20920
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_17"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 42])
         (let ([a 42])
            (let ([a 42])
               (let ([a 42])
                  (let ([a 42])
                     (let ([a 42])
                        (let ([a 42])
                           (let ([a 42])
                              (let ([a 42])
                                 (let ([a 42])
                                    (let ([a 42])
                                       (let ([a 42])
                                          a)))))))))))))
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 42])
         (let ([a 42])
            (let ([a 42])
               (let ([a 42])
                  (let ([a 42])
                     (let ([a 42])
                        (let ([a 42])
                           (let ([a 42])
                              (let ([a 42])
                                 (let ([a 42])
                                    (let ([a 42])
                                       (let ([a 42])
                                          a)))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 42])
         (let ([a 42])
            (let ([a 42])
               (let ([a 42])
                  (let ([a 42])
                     (let ([a 42])
                        (let ([a 42])
                           (let ([a 42])
                              (let ([a 42])
                                 (let ([a 42])
                                    (let ([a 42])
                                       (let ([a 42])
                                          a)))))))))))))
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20935 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x20935
      1
      (let ([a20936 42])
         (let ([a20937 42])
            (let ([a20938 42])
               (let ([a20939 42])
                  (let ([a20940 42])
                     (let ([a20941 42])
                        (let ([a20942 42])
                           (let ([a20943 42])
                              (let ([a20944 42])
                                 (let ([a20945 42])
                                    (let ([a20946 42])
                                       (let ([a20947 42])
                                          a20947)))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20935 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x20935
      1
      (let ([a20936 42])
         (let ([a20937 42])
            (let ([a20938 42])
               (let ([a20939 42])
                  (let ([a20940 42])
                     (let ([a20941 42])
                        (let ([a20942 42])
                           (let ([a20943 42])
                              (let ([a20944 42])
                                 (let ([a20945 42])
                                    (let ([a20946 42])
                                       (let ([a20947 42])
                                          a20947)))))))))))))
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20935 (if (let ([temp20949 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp20949 8))
                 #t
                 #f)
              ])
   (if x20935
      1
      (let ([a20936 42])
         (let ([a20937 42])
            (let ([a20938 42])
               (let ([a20939 42])
                  (let ([a20940 42])
                     (let ([a20941 42])
                        (let ([a20942 42])
                           (let ([a20943 42])
                              (let ([a20944 42])
                                 (let ([a20945 42])
                                    (let ([a20946 42])
                                       (let ([a20947 42])
                                          a20947)))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20935 (if (let ([temp20949 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp20949 8))
                 #t
                 #f)
              ])
   (if x20935
      1
      (let ([a20936 42])
         (let ([a20937 42])
            (let ([a20938 42])
               (let ([a20939 42])
                  (let ([a20940 42])
                     (let ([a20941 42])
                        (let ([a20942 42])
                           (let ([a20943 42])
                              (let ([a20944 42])
                                 (let ([a20945 42])
                                    (let ([a20946 42])
                                       (let ([a20947 42])
                                          a20947)))))))))))))
   )


output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label20958:
    temp20949 = 9;
    goto label20956;
label20957:
    temp20949 = 8;
    goto label20956;
label20956:
    if (> temp20949 8)
       goto label20954;
    else
       goto label20955;
label20951:
    return 1;
start:
    if (>= 1 1)
       goto label20957;
    else
       goto label20958;
label20955:
    x20935 = #f;
    goto label20953;
label20954:
    x20935 = #t;
    goto label20953;
label20953:
    if (eq? x20935 #t)
       goto label20951;
    else
       goto label20952;
label20952:
    a20936 = 42;
    a20937 = 42;
    a20938 = 42;
    a20939 = 42;
    a20940 = 42;
    a20941 = 42;
    a20942 = 42;
    a20943 = 42;
    a20944 = 42;
    a20945 = 42;
    a20946 = 42;
    a20947 = 42;
    return a20947;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
label20958:
    temp20949 = 9;
    goto label20956;
label20957:
    temp20949 = 8;
    goto label20956;
label20956:
    if (> temp20949 8)
       goto label20954;
    else
       goto label20955;
label20951:
    return 1;
start:
    if (>= 1 1)
       goto label20957;
    else
       goto label20958;
label20955:
    x20935 = #f;
    goto label20953;
label20954:
    x20935 = #t;
    goto label20953;
label20953:
    if (eq? x20935 #t)
       goto label20951;
    else
       goto label20952;
label20952:
    a20936 = 42;
    a20937 = 42;
    a20938 = 42;
    a20939 = 42;
    a20940 = 42;
    a20941 = 42;
    a20942 = 42;
    a20943 = 42;
    a20944 = 42;
    a20945 = 42;
    a20946 = 42;
    a20947 = 42;
    return a20947;



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
label20958:
    movq $9, temp20949
    jmp label20956
    
label20957:
    movq $8, temp20949
    jmp label20956
    
label20956:
    cmpq $8, temp20949
    jg label20954
    jmp label20955
    
label20951:
    movq $1, %rax
    jmp conclusion
    
start:
    cmpq $1, $1
    jge label20957
    jmp label20958
    
label20955:
    movq $0, x20935
    jmp label20953
    
label20954:
    movq $1, x20935
    jmp label20953
    
label20953:
    cmpq $1, x20935
    je label20951
    jmp label20952
    
label20952:
    movq $42, a20936
    movq $42, a20937
    movq $42, a20938
    movq $42, a20939
    movq $42, a20940
    movq $42, a20941
    movq $42, a20942
    movq $42, a20943
    movq $42, a20944
    movq $42, a20945
    movq $42, a20946
    movq $42, a20947
    movq a20947, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
label20958:
    movq $9, temp20949
    jmp label20956
    
label20957:
    movq $8, temp20949
    jmp label20956
    
label20956:
    cmpq $8, temp20949
    jg label20954
    jmp label20955
    
label20951:
    movq $1, %rax
    jmp conclusion
    
start:
    cmpq $1, $1
    jge label20957
    jmp label20958
    
label20955:
    movq $0, x20935
    jmp label20953
    
label20954:
    movq $1, x20935
    jmp label20953
    
label20953:
    cmpq $1, x20935
    je label20951
    jmp label20952
    
label20952:
    movq $42, a20936
    movq $42, a20937
    movq $42, a20938
    movq $42, a20939
    movq $42, a20940
    movq $42, a20941
    movq $42, a20942
    movq $42, a20943
    movq $42, a20944
    movq $42, a20945
    movq $42, a20946
    movq $42, a20947
    movq a20947, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
label20952:
    liveness
:
(list
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set a20947 %rsp)
 (set %rax %rsp))
movq $42, a20936
movq $42, a20937
movq $42, a20938
movq $42, a20939
movq $42, a20940
movq $42, a20941
movq $42, a20942
movq $42, a20943
movq $42, a20944
movq $42, a20945
movq $42, a20946
movq $42, a20947
movq a20947, %rax
jmp conclusion

label20951:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label20953:
    liveness
:
(list (set x20935 %rsp) (set %rsp) (set %rsp))
cmpq $1, x20935
je label20951
jmp label20952

label20955:
    liveness
:
(list (set %rsp) (set x20935 %rsp))
movq $0, x20935
jmp label20953

label20954:
    liveness
:
(list (set %rsp) (set x20935 %rsp))
movq $1, x20935
jmp label20953

label20956:
    liveness
:
(list (set temp20949 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp20949
jg label20954
jmp label20955

label20957:
    liveness
:
(list (set %rsp) (set temp20949 %rsp))
movq $8, temp20949
jmp label20956

label20958:
    liveness
:
(list (set %rsp) (set temp20949 %rsp))
movq $9, temp20949
jmp label20956

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label20957
jmp label20958




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
label20952:
    liveness
:
(list
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set a20947 %rsp)
 (set %rax %rsp))
movq $42, a20936
movq $42, a20937
movq $42, a20938
movq $42, a20939
movq $42, a20940
movq $42, a20941
movq $42, a20942
movq $42, a20943
movq $42, a20944
movq $42, a20945
movq $42, a20946
movq $42, a20947
movq a20947, %rax
jmp conclusion

label20951:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label20953:
    liveness
:
(list (set x20935 %rsp) (set %rsp) (set %rsp))
cmpq $1, x20935
je label20951
jmp label20952

label20955:
    liveness
:
(list (set %rsp) (set x20935 %rsp))
movq $0, x20935
jmp label20953

label20954:
    liveness
:
(list (set %rsp) (set x20935 %rsp))
movq $1, x20935
jmp label20953

label20956:
    liveness
:
(list (set temp20949 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp20949
jg label20954
jmp label20955

label20957:
    liveness
:
(list (set %rsp) (set temp20949 %rsp))
movq $8, temp20949
jmp label20956

label20958:
    liveness
:
(list (set %rsp) (set temp20949 %rsp))
movq $9, temp20949
jmp label20956

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label20957
jmp label20958




output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20952:
    movq $42, a20936
    movq $42, a20937
    movq $42, a20938
    movq $42, a20939
    movq $42, a20940
    movq $42, a20941
    movq $42, a20942
    movq $42, a20943
    movq $42, a20944
    movq $42, a20945
    movq $42, a20946
    movq $42, a20947
    movq a20947, %rax
    jmp conclusion
    
label20951:
    movq $1, %rax
    jmp conclusion
    
label20953:
    cmpq $1, x20935
    je label20951
    jmp label20952
    
label20955:
    movq $0, x20935
    jmp label20953
    
label20954:
    movq $1, x20935
    jmp label20953
    
label20956:
    cmpq $8, temp20949
    jg label20954
    jmp label20955
    
label20957:
    movq $8, temp20949
    jmp label20956
    
label20958:
    movq $9, temp20949
    jmp label20956
    
start:
    cmpq $1, $1
    jge label20957
    jmp label20958
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label20952:
    movq $42, a20936
    movq $42, a20937
    movq $42, a20938
    movq $42, a20939
    movq $42, a20940
    movq $42, a20941
    movq $42, a20942
    movq $42, a20943
    movq $42, a20944
    movq $42, a20945
    movq $42, a20946
    movq $42, a20947
    movq a20947, %rax
    jmp conclusion
    
label20951:
    movq $1, %rax
    jmp conclusion
    
label20953:
    cmpq $1, x20935
    je label20951
    jmp label20952
    
label20955:
    movq $0, x20935
    jmp label20953
    
label20954:
    movq $1, x20935
    jmp label20953
    
label20956:
    cmpq $8, temp20949
    jg label20954
    jmp label20955
    
label20957:
    movq $8, temp20949
    jmp label20956
    
label20958:
    movq $9, temp20949
    jmp label20956
    
start:
    cmpq $1, $1
    jge label20957
    jmp label20958
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons a20937 0)
 (cons a20939 0)
 (cons temp20949 0)
 (cons a20942 0)
 (cons a20946 0)
 (cons a20941 0)
 (cons a20944 0)
 (cons a20947 0)
 (cons a20940 0)
 (cons a20938 0)
 (cons a20943 0)
 (cons x20935 0)
 (cons a20936 0)
 (cons a20945 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20952:
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20951:
    movq $1, %rax
    jmp conclusion
    
label20953:
    cmpq $1, %rcx
    je label20951
    jmp label20952
    
label20955:
    movq $0, %rcx
    jmp label20953
    
label20954:
    movq $1, %rcx
    jmp label20953
    
label20956:
    cmpq $8, %rcx
    jg label20954
    jmp label20955
    
label20957:
    movq $8, %rcx
    jmp label20956
    
label20958:
    movq $9, %rcx
    jmp label20956
    
start:
    cmpq $1, $1
    jge label20957
    jmp label20958
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons a20937 0)
 (cons a20939 0)
 (cons temp20949 0)
 (cons a20942 0)
 (cons a20946 0)
 (cons a20941 0)
 (cons a20944 0)
 (cons a20947 0)
 (cons a20940 0)
 (cons a20938 0)
 (cons a20943 0)
 (cons x20935 0)
 (cons a20936 0)
 (cons a20945 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20952:
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20951:
    movq $1, %rax
    jmp conclusion
    
label20953:
    cmpq $1, %rcx
    je label20951
    jmp label20952
    
label20955:
    movq $0, %rcx
    jmp label20953
    
label20954:
    movq $1, %rcx
    jmp label20953
    
label20956:
    cmpq $8, %rcx
    jg label20954
    jmp label20955
    
label20957:
    movq $8, %rcx
    jmp label20956
    
label20958:
    movq $9, %rcx
    jmp label20956
    
start:
    cmpq $1, $1
    jge label20957
    jmp label20958
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons a20937 0)
 (cons a20939 0)
 (cons temp20949 0)
 (cons a20942 0)
 (cons a20946 0)
 (cons a20941 0)
 (cons a20944 0)
 (cons a20947 0)
 (cons a20940 0)
 (cons a20938 0)
 (cons a20943 0)
 (cons x20935 0)
 (cons a20936 0)
 (cons a20945 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20952:
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20951:
    movq $1, %rax
    jmp conclusion
    
label20953:
    cmpq $1, %rcx
    je label20951
    jmp label20952
    
label20955:
    movq $0, %rcx
    jmp label20953
    
label20954:
    movq $1, %rcx
    jmp label20953
    
label20956:
    cmpq $8, %rcx
    jg label20954
    jmp label20955
    
label20957:
    movq $8, %rcx
    jmp label20956
    
label20958:
    movq $9, %rcx
    jmp label20956
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label20957
    jmp label20958
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons a20937 0)
 (cons a20939 0)
 (cons temp20949 0)
 (cons a20942 0)
 (cons a20946 0)
 (cons a20941 0)
 (cons a20944 0)
 (cons a20947 0)
 (cons a20940 0)
 (cons a20938 0)
 (cons a20943 0)
 (cons x20935 0)
 (cons a20936 0)
 (cons a20945 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20952:
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20951:
    movq $1, %rax
    jmp conclusion
    
label20953:
    cmpq $1, %rcx
    je label20951
    jmp label20952
    
label20955:
    movq $0, %rcx
    jmp label20953
    
label20954:
    movq $1, %rcx
    jmp label20953
    
label20956:
    cmpq $8, %rcx
    jg label20954
    jmp label20955
    
label20957:
    movq $8, %rcx
    jmp label20956
    
label20958:
    movq $9, %rcx
    jmp label20956
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label20957
    jmp label20958
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons a20937 0)
 (cons a20939 0)
 (cons temp20949 0)
 (cons a20942 0)
 (cons a20946 0)
 (cons a20941 0)
 (cons a20944 0)
 (cons a20947 0)
 (cons a20940 0)
 (cons a20938 0)
 (cons a20943 0)
 (cons x20935 0)
 (cons a20936 0)
 (cons a20945 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20952:
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20951:
    movq $1, %rax
    jmp conclusion
    
label20953:
    cmpq $1, %rcx
    je label20951
    jmp label20952
    
label20955:
    movq $0, %rcx
    jmp label20953
    
label20954:
    movq $1, %rcx
    jmp label20953
    
label20956:
    cmpq $8, %rcx
    jg label20954
    jmp label20955
    
label20957:
    movq $8, %rcx
    jmp label20956
    
label20958:
    movq $9, %rcx
    jmp label20956
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label20957
    jmp label20958
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    a20942 : 'Integer, a20943 : 'Integer, a20940 : 'Integer, a20941 : 'Integer, a20946 : 'Integer, a20947 : 'Integer, a20944 : 'Integer, a20945 : 'Integer, x20935 : 'Boolean, temp20949 : 'Integer, a20938 : 'Integer, a20939 : 'Integer, a20936 : 'Integer, a20937 : 'Integer, 
tsorted
:
'(label20952
  label20951
  label20953
  label20955
  label20954
  label20956
  label20957
  label20958
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons a20937 0)
 (cons a20939 0)
 (cons temp20949 0)
 (cons a20942 0)
 (cons a20946 0)
 (cons a20941 0)
 (cons a20944 0)
 (cons a20947 0)
 (cons a20940 0)
 (cons a20938 0)
 (cons a20943 0)
 (cons x20935 0)
 (cons a20936 0)
 (cons a20945 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label20952:
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label20951:
    movq $1, %rax
    jmp conclusion
    
label20953:
    cmpq $1, %rcx
    je label20951
    jmp label20952
    
label20955:
    movq $0, %rcx
    jmp label20953
    
label20954:
    movq $1, %rcx
    jmp label20953
    
label20956:
    cmpq $8, %rcx
    jg label20954
    jmp label20955
    
label20957:
    movq $8, %rcx
    jmp label20956
    
label20958:
    movq $9, %rcx
    jmp label20956
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label20957
    jmp label20958
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
42


testing @ utilities.rkt:2038
test-name:
"cond_test_18"

expected-result:
42


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 2])
         (+ a (let ([a 2])
                 (+ a (let ([a 2])
                         (+ a (let ([a 2])
                                 (+ a (let ([a 2])
                                         (+ a (let ([a 2])
                                                 (+ a (let ([a 2])
                                                         (+ a (let ([a 2])
                                                                 (+ a (let ([a 2])
                                                                         (+ a (let ([a 2])
                                                                                 (+ a (let ([a 2])
                                                                                         (+ a (let ([a 2])
                                                                                                 a))))))))))))))))))))))))
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 2])
         (+ a (let ([a 2])
                 (+ a (let ([a 2])
                         (+ a (let ([a 2])
                                 (+ a (let ([a 2])
                                         (+ a (let ([a 2])
                                                 (+ a (let ([a 2])
                                                         (+ a (let ([a 2])
                                                                 (+ a (let ([a 2])
                                                                         (+ a (let ([a 2])
                                                                                 (+ a (let ([a 2])
                                                                                         (+ a (let ([a 2])
                                                                                                 a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 2])
         (+ a (let ([a 2])
                 (+ a (let ([a 2])
                         (+ a (let ([a 2])
                                 (+ a (let ([a 2])
                                         (+ a (let ([a 2])
                                                 (+ a (let ([a 2])
                                                         (+ a (let ([a 2])
                                                                 (+ a (let ([a 2])
                                                                         (+ a (let ([a 2])
                                                                                 (+ a (let ([a 2])
                                                                                         (+ a (let ([a 2])
                                                                                                 a))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20973 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x20973
      1
      (let ([a20974 2])
         (+ a20974 (let ([a20975 2])
                      (+ a20975 (let ([a20976 2])
                                   (+ a20976 (let ([a20977 2])
                                                (+ a20977 (let ([a20978 2])
                                                             (+ a20978 (let ([a20979 2])
                                                                          (+ a20979 (let ([a20980 2])
                                                                                       (+ a20980 (let ([a20981 2])
                                                                                                    (+ a20981 (let ([a20982 2])
                                                                                                                 (+ a20982 (let ([a20983 2])
                                                                                                                              (+ a20983 (let ([a20984 2])
                                                                                                                                           (+ a20984 (let ([a20985 2])
                                                                                                                                                        a20985))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20973 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x20973
      1
      (let ([a20974 2])
         (+ a20974 (let ([a20975 2])
                      (+ a20975 (let ([a20976 2])
                                   (+ a20976 (let ([a20977 2])
                                                (+ a20977 (let ([a20978 2])
                                                             (+ a20978 (let ([a20979 2])
                                                                          (+ a20979 (let ([a20980 2])
                                                                                       (+ a20980 (let ([a20981 2])
                                                                                                    (+ a20981 (let ([a20982 2])
                                                                                                                 (+ a20982 (let ([a20983 2])
                                                                                                                              (+ a20983 (let ([a20984 2])
                                                                                                                                           (+ a20984 (let ([a20985 2])
                                                                                                                                                        a20985))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x20973 (if (let ([temp20987 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp20987 8))
                 #t
                 #f)
              ])
   (if x20973
      1
      (let ([a20974 2])
         (let ([a20975 2])
            (let ([temp20990 (let ([a20976 2])
                                (let ([temp20992 (let ([a20977 2])
                                                    (let ([temp20994 (let ([a20978 2])
                                                                        (let ([temp20996 (let ([a20979 2])
                                                                                            (let ([temp20998 (let ([a20980 2])
                                                                                                                (let ([temp21000 (let ([a20981 2])
                                                                                                                                    (let ([temp21002 (let ([a20982 2])
                                                                                                                                                        (let ([temp21004 (let ([a20983 2])
                                                                                                                                                                            (let ([temp21006 (let ([a20984 2])
                                                                                                                                                                                                (let ([temp21008 (let ([a20985 2])
                                                                                                                                                                                                                    (let ([temp21010 a20985])
                                                                                                                                                                                                                       (+ a20984 temp21010)))])
                                                                                                                                                                                                   (+ a20983 temp21008)))])
                                                                                                                                                                               (+ a20982 temp21006)))])
                                                                                                                                                           (+ a20981 temp21004)))])
                                                                                                                                       (+ a20980 temp21002)))])
                                                                                                                   (+ a20979 temp21000)))])
                                                                                               (+ a20978 temp20998)))])
                                                                           (+ a20977 temp20996)))])
                                                       (+ a20976 temp20994)))])
                                   (+ a20975 temp20992)))])
               (+ a20974 temp20990)))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x20973 (if (let ([temp20987 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp20987 8))
                 #t
                 #f)
              ])
   (if x20973
      1
      (let ([a20974 2])
         (let ([a20975 2])
            (let ([temp20990 (let ([a20976 2])
                                (let ([temp20992 (let ([a20977 2])
                                                    (let ([temp20994 (let ([a20978 2])
                                                                        (let ([temp20996 (let ([a20979 2])
                                                                                            (let ([temp20998 (let ([a20980 2])
                                                                                                                (let ([temp21000 (let ([a20981 2])
                                                                                                                                    (let ([temp21002 (let ([a20982 2])
                                                                                                                                                        (let ([temp21004 (let ([a20983 2])
                                                                                                                                                                            (let ([temp21006 (let ([a20984 2])
                                                                                                                                                                                                (let ([temp21008 (let ([a20985 2])
                                                                                                                                                                                                                    (let ([temp21010 a20985])
                                                                                                                                                                                                                       (+ a20984 temp21010)))])
                                                                                                                                                                                                   (+ a20983 temp21008)))])
                                                                                                                                                                               (+ a20982 temp21006)))])
                                                                                                                                                           (+ a20981 temp21004)))])
                                                                                                                                       (+ a20980 temp21002)))])
                                                                                                                   (+ a20979 temp21000)))])
                                                                                               (+ a20978 temp20998)))])
                                                                           (+ a20977 temp20996)))])
                                                       (+ a20976 temp20994)))])
                                   (+ a20975 temp20992)))])
               (+ a20974 temp20990)))))
   )


output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label21011:
    return 1;
label21015:
    x20973 = #f;
    goto label21013;
label21014:
    x20973 = #t;
    goto label21013;
start:
    if (>= 1 1)
       goto label21017;
    else
       goto label21018;
label21013:
    if (eq? x20973 #t)
       goto label21011;
    else
       goto label21012;
label21012:
    a20974 = 2;
    a20975 = 2;
    a20976 = 2;
    a20977 = 2;
    a20978 = 2;
    a20979 = 2;
    a20980 = 2;
    a20981 = 2;
    a20982 = 2;
    a20983 = 2;
    a20984 = 2;
    a20985 = 2;
    temp21010 = a20985;
    temp21008 = (+ a20984 temp21010);
    temp21006 = (+ a20983 temp21008);
    temp21004 = (+ a20982 temp21006);
    temp21002 = (+ a20981 temp21004);
    temp21000 = (+ a20980 temp21002);
    temp20998 = (+ a20979 temp21000);
    temp20996 = (+ a20978 temp20998);
    temp20994 = (+ a20977 temp20996);
    temp20992 = (+ a20976 temp20994);
    temp20990 = (+ a20975 temp20992);
    return (+ a20974 temp20990);
label21018:
    temp20987 = 9;
    goto label21016;
label21017:
    temp20987 = 8;
    goto label21016;
label21016:
    if (> temp20987 8)
       goto label21014;
    else
       goto label21015;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
label21011:
    return 1;
label21015:
    x20973 = #f;
    goto label21013;
label21014:
    x20973 = #t;
    goto label21013;
start:
    if (>= 1 1)
       goto label21017;
    else
       goto label21018;
label21013:
    if (eq? x20973 #t)
       goto label21011;
    else
       goto label21012;
label21012:
    a20974 = 2;
    a20975 = 2;
    a20976 = 2;
    a20977 = 2;
    a20978 = 2;
    a20979 = 2;
    a20980 = 2;
    a20981 = 2;
    a20982 = 2;
    a20983 = 2;
    a20984 = 2;
    a20985 = 2;
    temp21010 = a20985;
    temp21008 = (+ a20984 temp21010);
    temp21006 = (+ a20983 temp21008);
    temp21004 = (+ a20982 temp21006);
    temp21002 = (+ a20981 temp21004);
    temp21000 = (+ a20980 temp21002);
    temp20998 = (+ a20979 temp21000);
    temp20996 = (+ a20978 temp20998);
    temp20994 = (+ a20977 temp20996);
    temp20992 = (+ a20976 temp20994);
    temp20990 = (+ a20975 temp20992);
    return (+ a20974 temp20990);
label21018:
    temp20987 = 9;
    goto label21016;
label21017:
    temp20987 = 8;
    goto label21016;
label21016:
    if (> temp20987 8)
       goto label21014;
    else
       goto label21015;



output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
label21011:
    movq $1, %rax
    jmp conclusion
    
label21015:
    movq $0, x20973
    jmp label21013
    
label21014:
    movq $1, x20973
    jmp label21013
    
start:
    cmpq $1, $1
    jge label21017
    jmp label21018
    
label21013:
    cmpq $1, x20973
    je label21011
    jmp label21012
    
label21012:
    movq $2, a20974
    movq $2, a20975
    movq $2, a20976
    movq $2, a20977
    movq $2, a20978
    movq $2, a20979
    movq $2, a20980
    movq $2, a20981
    movq $2, a20982
    movq $2, a20983
    movq $2, a20984
    movq $2, a20985
    movq a20985, temp21010
    movq a20984, temp21008
    addq temp21010, temp21008
    movq a20983, temp21006
    addq temp21008, temp21006
    movq a20982, temp21004
    addq temp21006, temp21004
    movq a20981, temp21002
    addq temp21004, temp21002
    movq a20980, temp21000
    addq temp21002, temp21000
    movq a20979, temp20998
    addq temp21000, temp20998
    movq a20978, temp20996
    addq temp20998, temp20996
    movq a20977, temp20994
    addq temp20996, temp20994
    movq a20976, temp20992
    addq temp20994, temp20992
    movq a20975, temp20990
    addq temp20992, temp20990
    movq a20974, %rax
    addq temp20990, %rax
    jmp conclusion
    
label21018:
    movq $9, temp20987
    jmp label21016
    
label21017:
    movq $8, temp20987
    jmp label21016
    
label21016:
    cmpq $8, temp20987
    jg label21014
    jmp label21015
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
label21011:
    movq $1, %rax
    jmp conclusion
    
label21015:
    movq $0, x20973
    jmp label21013
    
label21014:
    movq $1, x20973
    jmp label21013
    
start:
    cmpq $1, $1
    jge label21017
    jmp label21018
    
label21013:
    cmpq $1, x20973
    je label21011
    jmp label21012
    
label21012:
    movq $2, a20974
    movq $2, a20975
    movq $2, a20976
    movq $2, a20977
    movq $2, a20978
    movq $2, a20979
    movq $2, a20980
    movq $2, a20981
    movq $2, a20982
    movq $2, a20983
    movq $2, a20984
    movq $2, a20985
    movq a20985, temp21010
    movq a20984, temp21008
    addq temp21010, temp21008
    movq a20983, temp21006
    addq temp21008, temp21006
    movq a20982, temp21004
    addq temp21006, temp21004
    movq a20981, temp21002
    addq temp21004, temp21002
    movq a20980, temp21000
    addq temp21002, temp21000
    movq a20979, temp20998
    addq temp21000, temp20998
    movq a20978, temp20996
    addq temp20998, temp20996
    movq a20977, temp20994
    addq temp20996, temp20994
    movq a20976, temp20992
    addq temp20994, temp20992
    movq a20975, temp20990
    addq temp20992, temp20990
    movq a20974, %rax
    addq temp20990, %rax
    jmp conclusion
    
label21018:
    movq $9, temp20987
    jmp label21016
    
label21017:
    movq $8, temp20987
    jmp label21016
    
label21016:
    cmpq $8, temp20987
    jg label21014
    jmp label21015
    



output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
label21012:
    liveness
:
(list
 (set %rsp)
 (set a20974 %rsp)
 (set a20974 a20975 %rsp)
 (set a20974 a20975 a20976 %rsp)
 (set a20974 a20975 a20976 a20977 %rsp)
 (set a20974 a20975 a20976 a20977 a20978 %rsp)
 (set a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set a20980 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set a20980 a20981 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set a20980 a20981 a20982 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20974
  a20975
  a20976
  a20977
  a20978
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20984
  a20974
  a20975
  a20976
  a20977
  a20978
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20984
  a20985
  a20974
  a20975
  a20976
  a20977
  a20978
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20984
  a20974
  a20975
  a20976
  a20977
  a20978
  temp21010
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20974
  a20975
  a20977
  a20976
  temp21008
  a20978
  temp21010
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20974
  a20975
  a20977
  a20978
  a20976
  temp21008
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20975
  a20977
  a20978
  a20974
  temp21006
  a20976
  temp21008
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20975
  a20976
  a20977
  a20978
  a20974
  temp21006
  a20979
  %rsp)
 (set
  a20980
  a20981
  temp21004
  a20975
  a20976
  a20977
  a20978
  a20974
  temp21006
  a20979
  %rsp)
 (set a20980 a20981 temp21004 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set
  a20980
  temp21002
  temp21004
  a20974
  a20975
  a20976
  a20977
  a20978
  a20979
  %rsp)
 (set a20980 temp21002 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set temp21000 temp21002 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set temp21000 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set temp20998 temp21000 a20974 a20975 a20976 a20977 a20978 %rsp)
 (set temp20998 a20974 a20975 a20976 a20977 a20978 %rsp)
 (set temp20996 temp20998 a20974 a20975 a20976 a20977 %rsp)
 (set temp20996 a20974 a20975 a20976 a20977 %rsp)
 (set temp20996 a20974 a20975 a20976 temp20994 %rsp)
 (set a20974 a20975 a20976 temp20994 %rsp)
 (set a20974 a20975 temp20992 temp20994 %rsp)
 (set a20974 a20975 temp20992 %rsp)
 (set temp20992 %rsp a20974 temp20990)
 (set %rsp a20974 temp20990)
 (set %rax temp20990 %rsp)
 (set %rax %rsp))
movq $2, a20974
movq $2, a20975
movq $2, a20976
movq $2, a20977
movq $2, a20978
movq $2, a20979
movq $2, a20980
movq $2, a20981
movq $2, a20982
movq $2, a20983
movq $2, a20984
movq $2, a20985
movq a20985, temp21010
movq a20984, temp21008
addq temp21010, temp21008
movq a20983, temp21006
addq temp21008, temp21006
movq a20982, temp21004
addq temp21006, temp21004
movq a20981, temp21002
addq temp21004, temp21002
movq a20980, temp21000
addq temp21002, temp21000
movq a20979, temp20998
addq temp21000, temp20998
movq a20978, temp20996
addq temp20998, temp20996
movq a20977, temp20994
addq temp20996, temp20994
movq a20976, temp20992
addq temp20994, temp20992
movq a20975, temp20990
addq temp20992, temp20990
movq a20974, %rax
addq temp20990, %rax
jmp conclusion

label21011:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label21013:
    liveness
:
(list (set x20973 %rsp) (set %rsp) (set %rsp))
cmpq $1, x20973
je label21011
jmp label21012

label21015:
    liveness
:
(list (set %rsp) (set x20973 %rsp))
movq $0, x20973
jmp label21013

label21014:
    liveness
:
(list (set %rsp) (set x20973 %rsp))
movq $1, x20973
jmp label21013

label21016:
    liveness
:
(list (set temp20987 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp20987
jg label21014
jmp label21015

label21018:
    liveness
:
(list (set %rsp) (set temp20987 %rsp))
movq $9, temp20987
jmp label21016

label21017:
    liveness
:
(list (set %rsp) (set temp20987 %rsp))
movq $8, temp20987
jmp label21016

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label21017
jmp label21018




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
label21012:
    liveness
:
(list
 (set %rsp)
 (set a20974 %rsp)
 (set a20974 a20975 %rsp)
 (set a20974 a20975 a20976 %rsp)
 (set a20974 a20975 a20976 a20977 %rsp)
 (set a20974 a20975 a20976 a20977 a20978 %rsp)
 (set a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set a20980 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set a20980 a20981 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set a20980 a20981 a20982 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20974
  a20975
  a20976
  a20977
  a20978
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20984
  a20974
  a20975
  a20976
  a20977
  a20978
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20984
  a20985
  a20974
  a20975
  a20976
  a20977
  a20978
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20984
  a20974
  a20975
  a20976
  a20977
  a20978
  temp21010
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20974
  a20975
  a20977
  a20976
  temp21008
  a20978
  temp21010
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20983
  a20974
  a20975
  a20977
  a20978
  a20976
  temp21008
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20975
  a20977
  a20978
  a20974
  temp21006
  a20976
  temp21008
  a20979
  %rsp)
 (set
  a20980
  a20981
  a20982
  a20975
  a20976
  a20977
  a20978
  a20974
  temp21006
  a20979
  %rsp)
 (set
  a20980
  a20981
  temp21004
  a20975
  a20976
  a20977
  a20978
  a20974
  temp21006
  a20979
  %rsp)
 (set a20980 a20981 temp21004 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set
  a20980
  temp21002
  temp21004
  a20974
  a20975
  a20976
  a20977
  a20978
  a20979
  %rsp)
 (set a20980 temp21002 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set temp21000 temp21002 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set temp21000 a20974 a20975 a20976 a20977 a20978 a20979 %rsp)
 (set temp20998 temp21000 a20974 a20975 a20976 a20977 a20978 %rsp)
 (set temp20998 a20974 a20975 a20976 a20977 a20978 %rsp)
 (set temp20996 temp20998 a20974 a20975 a20976 a20977 %rsp)
 (set temp20996 a20974 a20975 a20976 a20977 %rsp)
 (set temp20996 a20974 a20975 a20976 temp20994 %rsp)
 (set a20974 a20975 a20976 temp20994 %rsp)
 (set a20974 a20975 temp20992 temp20994 %rsp)
 (set a20974 a20975 temp20992 %rsp)
 (set temp20992 %rsp a20974 temp20990)
 (set %rsp a20974 temp20990)
 (set %rax temp20990 %rsp)
 (set %rax %rsp))
movq $2, a20974
movq $2, a20975
movq $2, a20976
movq $2, a20977
movq $2, a20978
movq $2, a20979
movq $2, a20980
movq $2, a20981
movq $2, a20982
movq $2, a20983
movq $2, a20984
movq $2, a20985
movq a20985, temp21010
movq a20984, temp21008
addq temp21010, temp21008
movq a20983, temp21006
addq temp21008, temp21006
movq a20982, temp21004
addq temp21006, temp21004
movq a20981, temp21002
addq temp21004, temp21002
movq a20980, temp21000
addq temp21002, temp21000
movq a20979, temp20998
addq temp21000, temp20998
movq a20978, temp20996
addq temp20998, temp20996
movq a20977, temp20994
addq temp20996, temp20994
movq a20976, temp20992
addq temp20994, temp20992
movq a20975, temp20990
addq temp20992, temp20990
movq a20974, %rax
addq temp20990, %rax
jmp conclusion

label21011:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label21013:
    liveness
:
(list (set x20973 %rsp) (set %rsp) (set %rsp))
cmpq $1, x20973
je label21011
jmp label21012

label21015:
    liveness
:
(list (set %rsp) (set x20973 %rsp))
movq $0, x20973
jmp label21013

label21014:
    liveness
:
(list (set %rsp) (set x20973 %rsp))
movq $1, x20973
jmp label21013

label21016:
    liveness
:
(list (set temp20987 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp20987
jg label21014
jmp label21015

label21018:
    liveness
:
(list (set %rsp) (set temp20987 %rsp))
movq $9, temp20987
jmp label21016

label21017:
    liveness
:
(list (set %rsp) (set temp20987 %rsp))
movq $8, temp20987
jmp label21016

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label21017
jmp label21018




output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a20979 temp20998)
 (list temp21010 a20985)
 (list a20978 temp20996)
 (list a20977 temp20994)
 (list a20976 temp20992)
 (list temp21008 a20984)
 (list a20975 temp20990)
 (list temp21006 a20983)
 (list temp21004 a20982)
 (list temp21002 a20981)
 (list temp21000 a20980)
 (list temp20998 a20979)
 (list temp20996 a20978)
 (list temp20994 a20977)
 (list temp20992 a20976)
 (list temp20990 a20975)
 (list a20985 temp21010)
 (list a20984 temp21008)
 (list a20983 temp21006)
 (list a20982 temp21004)
 (list a20981 temp21002)
 (list a20980 temp21000))
label21012:
    movq $2, a20974
    movq $2, a20975
    movq $2, a20976
    movq $2, a20977
    movq $2, a20978
    movq $2, a20979
    movq $2, a20980
    movq $2, a20981
    movq $2, a20982
    movq $2, a20983
    movq $2, a20984
    movq $2, a20985
    movq a20985, temp21010
    movq a20984, temp21008
    addq temp21010, temp21008
    movq a20983, temp21006
    addq temp21008, temp21006
    movq a20982, temp21004
    addq temp21006, temp21004
    movq a20981, temp21002
    addq temp21004, temp21002
    movq a20980, temp21000
    addq temp21002, temp21000
    movq a20979, temp20998
    addq temp21000, temp20998
    movq a20978, temp20996
    addq temp20998, temp20996
    movq a20977, temp20994
    addq temp20996, temp20994
    movq a20976, temp20992
    addq temp20994, temp20992
    movq a20975, temp20990
    addq temp20992, temp20990
    movq a20974, %rax
    addq temp20990, %rax
    jmp conclusion
    
label21011:
    movq $1, %rax
    jmp conclusion
    
label21013:
    cmpq $1, x20973
    je label21011
    jmp label21012
    
label21015:
    movq $0, x20973
    jmp label21013
    
label21014:
    movq $1, x20973
    jmp label21013
    
label21016:
    cmpq $8, temp20987
    jg label21014
    jmp label21015
    
label21018:
    movq $9, temp20987
    jmp label21016
    
label21017:
    movq $8, temp20987
    jmp label21016
    
start:
    cmpq $1, $1
    jge label21017
    jmp label21018
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a20979 temp20998)
 (list temp21010 a20985)
 (list a20978 temp20996)
 (list a20977 temp20994)
 (list a20976 temp20992)
 (list temp21008 a20984)
 (list a20975 temp20990)
 (list temp21006 a20983)
 (list temp21004 a20982)
 (list temp21002 a20981)
 (list temp21000 a20980)
 (list temp20998 a20979)
 (list temp20996 a20978)
 (list temp20994 a20977)
 (list temp20992 a20976)
 (list temp20990 a20975)
 (list a20985 temp21010)
 (list a20984 temp21008)
 (list a20983 temp21006)
 (list a20982 temp21004)
 (list a20981 temp21002)
 (list a20980 temp21000))
label21012:
    movq $2, a20974
    movq $2, a20975
    movq $2, a20976
    movq $2, a20977
    movq $2, a20978
    movq $2, a20979
    movq $2, a20980
    movq $2, a20981
    movq $2, a20982
    movq $2, a20983
    movq $2, a20984
    movq $2, a20985
    movq a20985, temp21010
    movq a20984, temp21008
    addq temp21010, temp21008
    movq a20983, temp21006
    addq temp21008, temp21006
    movq a20982, temp21004
    addq temp21006, temp21004
    movq a20981, temp21002
    addq temp21004, temp21002
    movq a20980, temp21000
    addq temp21002, temp21000
    movq a20979, temp20998
    addq temp21000, temp20998
    movq a20978, temp20996
    addq temp20998, temp20996
    movq a20977, temp20994
    addq temp20996, temp20994
    movq a20976, temp20992
    addq temp20994, temp20992
    movq a20975, temp20990
    addq temp20992, temp20990
    movq a20974, %rax
    addq temp20990, %rax
    jmp conclusion
    
label21011:
    movq $1, %rax
    jmp conclusion
    
label21013:
    cmpq $1, x20973
    je label21011
    jmp label21012
    
label21015:
    movq $0, x20973
    jmp label21013
    
label21014:
    movq $1, x20973
    jmp label21013
    
label21016:
    cmpq $8, temp20987
    jg label21014
    jmp label21015
    
label21018:
    movq $9, temp20987
    jmp label21016
    
label21017:
    movq $8, temp20987
    jmp label21016
    
start:
    cmpq $1, $1
    jge label21017
    jmp label21018
    



output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a20979 temp20998)
 (list temp21010 a20985)
 (list a20978 temp20996)
 (list a20977 temp20994)
 (list a20976 temp20992)
 (list temp21008 a20984)
 (list a20975 temp20990)
 (list temp21006 a20983)
 (list temp21004 a20982)
 (list temp21002 a20981)
 (list temp21000 a20980)
 (list temp20998 a20979)
 (list temp20996 a20978)
 (list temp20994 a20977)
 (list temp20992 a20976)
 (list temp20990 a20975)
 (list a20985 temp21010)
 (list a20984 temp21008)
 (list a20983 temp21006)
 (list a20982 temp21004)
 (list a20981 temp21002)
 (list a20980 temp21000))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp20990 0)
 (cons a20974 1)
 (cons temp20992 2)
 (cons a20975 0)
 (cons temp20994 3)
 (cons temp20996 2)
 (cons a20976 4)
 (cons temp20998 3)
 (cons a20977 5)
 (cons temp21000 2)
 (cons a20978 6)
 (cons temp21002 3)
 (cons a20979 7)
 (cons temp21004 2)
 (cons a20980 8)
 (cons temp21006 3)
 (cons a20981 9)
 (cons temp21008 2)
 (cons a20982 10)
 (cons temp21010 3)
 (cons a20983 11)
 (cons a20984 2)
 (cons a20985 3)
 (cons temp20987 0)
 (cons x20973 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
1
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp)))
label21012:
    movq $2, %rdx
    movq $2, %rcx
    movq $2, %r8
    movq $2, %r9
    movq $2, %r10
    movq $2, %rbx
    movq $2, %r12
    movq $2, %r13
    movq $2, %r14
    movq $2, -48(%rbp)
    movq $2, %rsi
    movq $2, %rdi
    movq %rdi, %rdi
    movq %rsi, %rsi
    addq %rdi, %rsi
    movq -48(%rbp), %rdi
    addq %rsi, %rdi
    movq %r14, %rsi
    addq %rdi, %rsi
    movq %r13, %rdi
    addq %rsi, %rdi
    movq %r12, %rsi
    addq %rdi, %rsi
    movq %rbx, %rdi
    addq %rsi, %rdi
    movq %r10, %rsi
    addq %rdi, %rsi
    movq %r9, %rdi
    addq %rsi, %rdi
    movq %r8, %rsi
    addq %rdi, %rsi
    movq %rcx, %rcx
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21011:
    movq $1, %rax
    jmp conclusion
    
label21013:
    cmpq $1, %rcx
    je label21011
    jmp label21012
    
label21015:
    movq $0, %rcx
    jmp label21013
    
label21014:
    movq $1, %rcx
    jmp label21013
    
label21016:
    cmpq $8, %rcx
    jg label21014
    jmp label21015
    
label21018:
    movq $9, %rcx
    jmp label21016
    
label21017:
    movq $8, %rcx
    jmp label21016
    
start:
    cmpq $1, $1
    jge label21017
    jmp label21018
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a20979 temp20998)
 (list temp21010 a20985)
 (list a20978 temp20996)
 (list a20977 temp20994)
 (list a20976 temp20992)
 (list temp21008 a20984)
 (list a20975 temp20990)
 (list temp21006 a20983)
 (list temp21004 a20982)
 (list temp21002 a20981)
 (list temp21000 a20980)
 (list temp20998 a20979)
 (list temp20996 a20978)
 (list temp20994 a20977)
 (list temp20992 a20976)
 (list temp20990 a20975)
 (list a20985 temp21010)
 (list a20984 temp21008)
 (list a20983 temp21006)
 (list a20982 temp21004)
 (list a20981 temp21002)
 (list a20980 temp21000))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp20990 0)
 (cons a20974 1)
 (cons temp20992 2)
 (cons a20975 0)
 (cons temp20994 3)
 (cons temp20996 2)
 (cons a20976 4)
 (cons temp20998 3)
 (cons a20977 5)
 (cons temp21000 2)
 (cons a20978 6)
 (cons temp21002 3)
 (cons a20979 7)
 (cons temp21004 2)
 (cons a20980 8)
 (cons temp21006 3)
 (cons a20981 9)
 (cons temp21008 2)
 (cons a20982 10)
 (cons temp21010 3)
 (cons a20983 11)
 (cons a20984 2)
 (cons a20985 3)
 (cons temp20987 0)
 (cons x20973 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
1
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp)))
label21012:
    movq $2, %rdx
    movq $2, %rcx
    movq $2, %r8
    movq $2, %r9
    movq $2, %r10
    movq $2, %rbx
    movq $2, %r12
    movq $2, %r13
    movq $2, %r14
    movq $2, -48(%rbp)
    movq $2, %rsi
    movq $2, %rdi
    movq %rdi, %rdi
    movq %rsi, %rsi
    addq %rdi, %rsi
    movq -48(%rbp), %rdi
    addq %rsi, %rdi
    movq %r14, %rsi
    addq %rdi, %rsi
    movq %r13, %rdi
    addq %rsi, %rdi
    movq %r12, %rsi
    addq %rdi, %rsi
    movq %rbx, %rdi
    addq %rsi, %rdi
    movq %r10, %rsi
    addq %rdi, %rsi
    movq %r9, %rdi
    addq %rsi, %rdi
    movq %r8, %rsi
    addq %rdi, %rsi
    movq %rcx, %rcx
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21011:
    movq $1, %rax
    jmp conclusion
    
label21013:
    cmpq $1, %rcx
    je label21011
    jmp label21012
    
label21015:
    movq $0, %rcx
    jmp label21013
    
label21014:
    movq $1, %rcx
    jmp label21013
    
label21016:
    cmpq $8, %rcx
    jg label21014
    jmp label21015
    
label21018:
    movq $9, %rcx
    jmp label21016
    
label21017:
    movq $8, %rcx
    jmp label21016
    
start:
    cmpq $1, $1
    jge label21017
    jmp label21018
    



output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a20979 temp20998)
 (list temp21010 a20985)
 (list a20978 temp20996)
 (list a20977 temp20994)
 (list a20976 temp20992)
 (list temp21008 a20984)
 (list a20975 temp20990)
 (list temp21006 a20983)
 (list temp21004 a20982)
 (list temp21002 a20981)
 (list temp21000 a20980)
 (list temp20998 a20979)
 (list temp20996 a20978)
 (list temp20994 a20977)
 (list temp20992 a20976)
 (list temp20990 a20975)
 (list a20985 temp21010)
 (list a20984 temp21008)
 (list a20983 temp21006)
 (list a20982 temp21004)
 (list a20981 temp21002)
 (list a20980 temp21000))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp20990 0)
 (cons a20974 1)
 (cons temp20992 2)
 (cons a20975 0)
 (cons temp20994 3)
 (cons temp20996 2)
 (cons a20976 4)
 (cons temp20998 3)
 (cons a20977 5)
 (cons temp21000 2)
 (cons a20978 6)
 (cons temp21002 3)
 (cons a20979 7)
 (cons temp21004 2)
 (cons a20980 8)
 (cons temp21006 3)
 (cons a20981 9)
 (cons temp21008 2)
 (cons a20982 10)
 (cons temp21010 3)
 (cons a20983 11)
 (cons a20984 2)
 (cons a20985 3)
 (cons temp20987 0)
 (cons x20973 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
1
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp)))
label21012:
    movq $2, %rdx
    movq $2, %rcx
    movq $2, %r8
    movq $2, %r9
    movq $2, %r10
    movq $2, %rbx
    movq $2, %r12
    movq $2, %r13
    movq $2, %r14
    movq $2, -48(%rbp)
    movq $2, %rsi
    movq $2, %rdi
    addq %rdi, %rsi
    movq -48(%rbp), %rdi
    addq %rsi, %rdi
    movq %r14, %rsi
    addq %rdi, %rsi
    movq %r13, %rdi
    addq %rsi, %rdi
    movq %r12, %rsi
    addq %rdi, %rsi
    movq %rbx, %rdi
    addq %rsi, %rdi
    movq %r10, %rsi
    addq %rdi, %rsi
    movq %r9, %rdi
    addq %rsi, %rdi
    movq %r8, %rsi
    addq %rdi, %rsi
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21011:
    movq $1, %rax
    jmp conclusion
    
label21013:
    cmpq $1, %rcx
    je label21011
    jmp label21012
    
label21015:
    movq $0, %rcx
    jmp label21013
    
label21014:
    movq $1, %rcx
    jmp label21013
    
label21016:
    cmpq $8, %rcx
    jg label21014
    jmp label21015
    
label21018:
    movq $9, %rcx
    jmp label21016
    
label21017:
    movq $8, %rcx
    jmp label21016
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21017
    jmp label21018
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a20979 temp20998)
 (list temp21010 a20985)
 (list a20978 temp20996)
 (list a20977 temp20994)
 (list a20976 temp20992)
 (list temp21008 a20984)
 (list a20975 temp20990)
 (list temp21006 a20983)
 (list temp21004 a20982)
 (list temp21002 a20981)
 (list temp21000 a20980)
 (list temp20998 a20979)
 (list temp20996 a20978)
 (list temp20994 a20977)
 (list temp20992 a20976)
 (list temp20990 a20975)
 (list a20985 temp21010)
 (list a20984 temp21008)
 (list a20983 temp21006)
 (list a20982 temp21004)
 (list a20981 temp21002)
 (list a20980 temp21000))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp20990 0)
 (cons a20974 1)
 (cons temp20992 2)
 (cons a20975 0)
 (cons temp20994 3)
 (cons temp20996 2)
 (cons a20976 4)
 (cons temp20998 3)
 (cons a20977 5)
 (cons temp21000 2)
 (cons a20978 6)
 (cons temp21002 3)
 (cons a20979 7)
 (cons temp21004 2)
 (cons a20980 8)
 (cons temp21006 3)
 (cons a20981 9)
 (cons temp21008 2)
 (cons a20982 10)
 (cons temp21010 3)
 (cons a20983 11)
 (cons a20984 2)
 (cons a20985 3)
 (cons temp20987 0)
 (cons x20973 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
1
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp)))
label21012:
    movq $2, %rdx
    movq $2, %rcx
    movq $2, %r8
    movq $2, %r9
    movq $2, %r10
    movq $2, %rbx
    movq $2, %r12
    movq $2, %r13
    movq $2, %r14
    movq $2, -48(%rbp)
    movq $2, %rsi
    movq $2, %rdi
    addq %rdi, %rsi
    movq -48(%rbp), %rdi
    addq %rsi, %rdi
    movq %r14, %rsi
    addq %rdi, %rsi
    movq %r13, %rdi
    addq %rsi, %rdi
    movq %r12, %rsi
    addq %rdi, %rsi
    movq %rbx, %rdi
    addq %rsi, %rdi
    movq %r10, %rsi
    addq %rdi, %rsi
    movq %r9, %rdi
    addq %rsi, %rdi
    movq %r8, %rsi
    addq %rdi, %rsi
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21011:
    movq $1, %rax
    jmp conclusion
    
label21013:
    cmpq $1, %rcx
    je label21011
    jmp label21012
    
label21015:
    movq $0, %rcx
    jmp label21013
    
label21014:
    movq $1, %rcx
    jmp label21013
    
label21016:
    cmpq $8, %rcx
    jg label21014
    jmp label21015
    
label21018:
    movq $9, %rcx
    jmp label21016
    
label21017:
    movq $8, %rcx
    jmp label21016
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21017
    jmp label21018
    



output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a20979 temp20998)
 (list temp21010 a20985)
 (list a20978 temp20996)
 (list a20977 temp20994)
 (list a20976 temp20992)
 (list temp21008 a20984)
 (list a20975 temp20990)
 (list temp21006 a20983)
 (list temp21004 a20982)
 (list temp21002 a20981)
 (list temp21000 a20980)
 (list temp20998 a20979)
 (list temp20996 a20978)
 (list temp20994 a20977)
 (list temp20992 a20976)
 (list temp20990 a20975)
 (list a20985 temp21010)
 (list a20984 temp21008)
 (list a20983 temp21006)
 (list a20982 temp21004)
 (list a20981 temp21002)
 (list a20980 temp21000))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp20990 0)
 (cons a20974 1)
 (cons temp20992 2)
 (cons a20975 0)
 (cons temp20994 3)
 (cons temp20996 2)
 (cons a20976 4)
 (cons temp20998 3)
 (cons a20977 5)
 (cons temp21000 2)
 (cons a20978 6)
 (cons temp21002 3)
 (cons a20979 7)
 (cons temp21004 2)
 (cons a20980 8)
 (cons temp21006 3)
 (cons a20981 9)
 (cons temp21008 2)
 (cons a20982 10)
 (cons temp21010 3)
 (cons a20983 11)
 (cons a20984 2)
 (cons a20985 3)
 (cons temp20987 0)
 (cons x20973 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
1
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp)))
label21012:
    movq $2, %rdx
    movq $2, %rcx
    movq $2, %r8
    movq $2, %r9
    movq $2, %r10
    movq $2, %rbx
    movq $2, %r12
    movq $2, %r13
    movq $2, %r14
    movq $2, -48(%rbp)
    movq $2, %rsi
    movq $2, %rdi
    addq %rdi, %rsi
    movq -48(%rbp), %rdi
    addq %rsi, %rdi
    movq %r14, %rsi
    addq %rdi, %rsi
    movq %r13, %rdi
    addq %rsi, %rdi
    movq %r12, %rsi
    addq %rdi, %rsi
    movq %rbx, %rdi
    addq %rsi, %rdi
    movq %r10, %rsi
    addq %rdi, %rsi
    movq %r9, %rdi
    addq %rsi, %rdi
    movq %r8, %rsi
    addq %rdi, %rsi
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21011:
    movq $1, %rax
    jmp conclusion
    
label21013:
    cmpq $1, %rcx
    je label21011
    jmp label21012
    
label21015:
    movq $0, %rcx
    jmp label21013
    
label21014:
    movq $1, %rcx
    jmp label21013
    
label21016:
    cmpq $8, %rcx
    jg label21014
    jmp label21015
    
label21018:
    movq $9, %rcx
    jmp label21016
    
label21017:
    movq $8, %rcx
    jmp label21016
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21017
    jmp label21018
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp20990 : 'Integer, temp20994 : 'Integer, temp20992 : 'Integer, a20983 : 'Integer, a20982 : 'Integer, a20981 : 'Integer, a20980 : 'Integer, temp20987 : 'Integer, a20985 : 'Integer, a20984 : 'Integer, a20975 : 'Integer, a20974 : 'Integer, temp21006 : 'Integer, x20973 : 'Boolean, temp21004 : 'Integer, a20979 : 'Integer, a20978 : 'Integer, temp21010 : 'Integer, a20977 : 'Integer, a20976 : 'Integer, temp21008 : 'Integer, temp20998 : 'Integer, temp20996 : 'Integer, temp21002 : 'Integer, temp21000 : 'Integer, 
tsorted
:
'(label21012
  label21011
  label21013
  label21015
  label21014
  label21016
  label21018
  label21017
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a20979 temp20998)
 (list temp21010 a20985)
 (list a20978 temp20996)
 (list a20977 temp20994)
 (list a20976 temp20992)
 (list temp21008 a20984)
 (list a20975 temp20990)
 (list temp21006 a20983)
 (list temp21004 a20982)
 (list temp21002 a20981)
 (list temp21000 a20980)
 (list temp20998 a20979)
 (list temp20996 a20978)
 (list temp20994 a20977)
 (list temp20992 a20976)
 (list temp20990 a20975)
 (list a20985 temp21010)
 (list a20984 temp21008)
 (list a20983 temp21006)
 (list a20982 temp21004)
 (list a20981 temp21002)
 (list a20980 temp21000))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp20990 0)
 (cons a20974 1)
 (cons temp20992 2)
 (cons a20975 0)
 (cons temp20994 3)
 (cons temp20996 2)
 (cons a20976 4)
 (cons temp20998 3)
 (cons a20977 5)
 (cons temp21000 2)
 (cons a20978 6)
 (cons temp21002 3)
 (cons a20979 7)
 (cons temp21004 2)
 (cons a20980 8)
 (cons temp21006 3)
 (cons a20981 9)
 (cons temp21008 2)
 (cons a20982 10)
 (cons temp21010 3)
 (cons a20983 11)
 (cons a20984 2)
 (cons a20985 3)
 (cons temp20987 0)
 (cons x20973 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
1
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp)))
label21012:
    movq $2, %rdx
    movq $2, %rcx
    movq $2, %r8
    movq $2, %r9
    movq $2, %r10
    movq $2, %rbx
    movq $2, %r12
    movq $2, %r13
    movq $2, %r14
    movq $2, -48(%rbp)
    movq $2, %rsi
    movq $2, %rdi
    addq %rdi, %rsi
    movq -48(%rbp), %rdi
    addq %rsi, %rdi
    movq %r14, %rsi
    addq %rdi, %rsi
    movq %r13, %rdi
    addq %rsi, %rdi
    movq %r12, %rsi
    addq %rdi, %rsi
    movq %rbx, %rdi
    addq %rsi, %rdi
    movq %r10, %rsi
    addq %rdi, %rsi
    movq %r9, %rdi
    addq %rsi, %rdi
    movq %r8, %rsi
    addq %rdi, %rsi
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21011:
    movq $1, %rax
    jmp conclusion
    
label21013:
    cmpq $1, %rcx
    je label21011
    jmp label21012
    
label21015:
    movq $0, %rcx
    jmp label21013
    
label21014:
    movq $1, %rcx
    jmp label21013
    
label21016:
    cmpq $8, %rcx
    jg label21014
    jmp label21015
    
label21018:
    movq $9, %rcx
    jmp label21016
    
label21017:
    movq $8, %rcx
    jmp label21016
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21017
    jmp label21018
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
24


testing @ utilities.rkt:2038
test-name:
"cond_test_19"

expected-result:
24


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (> (read) 1)
                  1
                  2)
               ])
         (+ a (let ([a (if (> (read) 1)
                          1
                          2)
                       ])
                 (+ a (let ([a (if (> (read) 1)
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (> (read) 1)
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (> (read) 1)
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (> (read) 1)
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (> (read) 1)
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (> (read) 1)
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (> (read) 1)
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (> (read) 1)
                  1
                  2)
               ])
         (+ a (let ([a (if (> (read) 1)
                          1
                          2)
                       ])
                 (+ a (let ([a (if (> (read) 1)
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (> (read) 1)
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (> (read) 1)
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (> (read) 1)
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (> (read) 1)
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (> (read) 1)
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (> (read) 1)
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (> (read) 1)
                  1
                  2)
               ])
         (+ a (let ([a (if (> (read) 1)
                          1
                          2)
                       ])
                 (+ a (let ([a (if (> (read) 1)
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (> (read) 1)
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (> (read) 1)
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (> (read) 1)
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (> (read) 1)
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (> (read) 1)
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (> (read) 1)
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x21033 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x21033
      1
      (let ([a21034 (if (> (read) 1)
                       1
                       2)
                    ])
         (+ a21034 (let ([a21035 (if (> (read) 1)
                                    1
                                    2)
                                 ])
                      (+ a21035 (let ([a21036 (if (> (read) 1)
                                                 1
                                                 2)
                                              ])
                                   (+ a21036 (let ([a21037 (if (> (read) 1)
                                                              1
                                                              2)
                                                           ])
                                                (+ a21037 (let ([a21038 (if (> (read) 1)
                                                                           1
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a21039 (if (> (read) 1)
                                                                                        1
                                                                                        2)
                                                                                     ])
                                                                          (+ a21039 (let ([a21040 (if (> (read) 1)
                                                                                                     1
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a21040 (let ([a21041 (if (> (read) 1)
                                                                                                                  1
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a21041 (let ([a21042 (if (> (read) 1)
                                                                                                                               1
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a21042 (let ([a21043 (read)])
                                                                                                                              (+ a21043 (let ([a21044 (if (> (read) 1)
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a21044 (let ([a21045 (if (> (read) 1)
                                                                                                                                                                      1
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a21045))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x21033 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x21033
      1
      (let ([a21034 (if (> (read) 1)
                       1
                       2)
                    ])
         (+ a21034 (let ([a21035 (if (> (read) 1)
                                    1
                                    2)
                                 ])
                      (+ a21035 (let ([a21036 (if (> (read) 1)
                                                 1
                                                 2)
                                              ])
                                   (+ a21036 (let ([a21037 (if (> (read) 1)
                                                              1
                                                              2)
                                                           ])
                                                (+ a21037 (let ([a21038 (if (> (read) 1)
                                                                           1
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a21039 (if (> (read) 1)
                                                                                        1
                                                                                        2)
                                                                                     ])
                                                                          (+ a21039 (let ([a21040 (if (> (read) 1)
                                                                                                     1
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a21040 (let ([a21041 (if (> (read) 1)
                                                                                                                  1
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a21041 (let ([a21042 (if (> (read) 1)
                                                                                                                               1
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a21042 (let ([a21043 (read)])
                                                                                                                              (+ a21043 (let ([a21044 (if (> (read) 1)
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a21044 (let ([a21045 (if (> (read) 1)
                                                                                                                                                                      1
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a21045))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x21033 (if (let ([temp21047 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp21047 8))
                 #t
                 #f)
              ])
   (if x21033
      1
      (let ([a21034 (if (let ([temp21050 (read)])
                           (> temp21050 1))
                       1
                       2)
                    ])
         (let ([a21035 (if (let ([temp21054 (read)])
                              (> temp21054 1))
                          1
                          2)
                       ])
            (let ([temp21052 (let ([a21036 (if (let ([temp21058 (read)])
                                                  (> temp21058 1))
                                              1
                                              2)
                                           ])
                                (let ([temp21056 (let ([a21037 (if (let ([temp21062 (read)])
                                                                      (> temp21062 1))
                                                                  1
                                                                  2)
                                                               ])
                                                    (let ([temp21060 (let ([a21038 (if (let ([temp21066 (read)])
                                                                                          (> temp21066 1))
                                                                                      1
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp21064 (let ([temp21068 (read)])
                                                                                            (let ([a21039 (if (let ([temp21071 (read)])
                                                                                                                 (> temp21071 1))
                                                                                                             1
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp21069 (let ([a21040 (if (let ([temp21075 (read)])
                                                                                                                                     (> temp21075 1))
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp21073 (let ([a21041 (if (let ([temp21079 (read)])
                                                                                                                                                         (> temp21079 1))
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp21077 (let ([a21042 (if (let ([temp21083 (read)])
                                                                                                                                                                             (> temp21083 1))
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp21081 (let ([a21043 (read)])
                                                                                                                                                                               (let ([temp21085 (let ([a21044 (if (let ([temp21090 (read)])
                                                                                                                                                                                                                     (> temp21090 1))
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp21088 (let ([a21045 (if (let ([temp21094 (read)])
                                                                                                                                                                                                                                         (> temp21094 1))
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp21092 a21045])
                                                                                                                                                                                                                          (+ a21044 temp21092)))])
                                                                                                                                                                                                      (+ a21043 temp21088)))])
                                                                                                                                                                                  (+ a21042 temp21085)))])
                                                                                                                                                              (+ a21041 temp21081)))])
                                                                                                                                          (+ a21040 temp21077)))])
                                                                                                                      (+ a21039 temp21073)))])
                                                                                                  (+ temp21068 temp21069))))])
                                                                           (+ a21037 temp21064)))])
                                                       (+ a21036 temp21060)))])
                                   (+ a21035 temp21056)))])
               (+ a21034 temp21052)))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x21033 (if (let ([temp21047 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp21047 8))
                 #t
                 #f)
              ])
   (if x21033
      1
      (let ([a21034 (if (let ([temp21050 (read)])
                           (> temp21050 1))
                       1
                       2)
                    ])
         (let ([a21035 (if (let ([temp21054 (read)])
                              (> temp21054 1))
                          1
                          2)
                       ])
            (let ([temp21052 (let ([a21036 (if (let ([temp21058 (read)])
                                                  (> temp21058 1))
                                              1
                                              2)
                                           ])
                                (let ([temp21056 (let ([a21037 (if (let ([temp21062 (read)])
                                                                      (> temp21062 1))
                                                                  1
                                                                  2)
                                                               ])
                                                    (let ([temp21060 (let ([a21038 (if (let ([temp21066 (read)])
                                                                                          (> temp21066 1))
                                                                                      1
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp21064 (let ([temp21068 (read)])
                                                                                            (let ([a21039 (if (let ([temp21071 (read)])
                                                                                                                 (> temp21071 1))
                                                                                                             1
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp21069 (let ([a21040 (if (let ([temp21075 (read)])
                                                                                                                                     (> temp21075 1))
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp21073 (let ([a21041 (if (let ([temp21079 (read)])
                                                                                                                                                         (> temp21079 1))
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp21077 (let ([a21042 (if (let ([temp21083 (read)])
                                                                                                                                                                             (> temp21083 1))
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp21081 (let ([a21043 (read)])
                                                                                                                                                                               (let ([temp21085 (let ([a21044 (if (let ([temp21090 (read)])
                                                                                                                                                                                                                     (> temp21090 1))
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp21088 (let ([a21045 (if (let ([temp21094 (read)])
                                                                                                                                                                                                                                         (> temp21094 1))
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp21092 a21045])
                                                                                                                                                                                                                          (+ a21044 temp21092)))])
                                                                                                                                                                                                      (+ a21043 temp21088)))])
                                                                                                                                                                                  (+ a21042 temp21085)))])
                                                                                                                                                              (+ a21041 temp21081)))])
                                                                                                                                          (+ a21040 temp21077)))])
                                                                                                                      (+ a21039 temp21073)))])
                                                                                                  (+ temp21068 temp21069))))])
                                                                           (+ a21037 temp21064)))])
                                                       (+ a21036 temp21060)))])
                                   (+ a21035 temp21056)))])
               (+ a21034 temp21052)))))
   )


output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label21103:
    a21042 = 2;
    goto label21101;
label21102:
    a21042 = 1;
    goto label21101;
label21101:
    a21043 = (read);
    temp21090 = (read);
    if (> temp21090 1)
       goto label21099;
    else
       goto label21100;
label21100:
    a21044 = 2;
    goto label21098;
label21107:
    temp21079 = (read);
    if (> temp21079 1)
       goto label21105;
    else
       goto label21106;
label21106:
    a21041 = 2;
    goto label21104;
label21105:
    a21041 = 1;
    goto label21104;
label21104:
    temp21083 = (read);
    if (> temp21083 1)
       goto label21102;
    else
       goto label21103;
label21095:
    temp21092 = a21045;
    temp21088 = (+ a21044 temp21092);
    temp21085 = (+ a21043 temp21088);
    temp21081 = (+ a21042 temp21085);
    temp21077 = (+ a21041 temp21081);
    temp21073 = (+ a21040 temp21077);
    temp21069 = (+ a21039 temp21073);
    temp21064 = (+ temp21068 temp21069);
    temp21060 = (+ a21037 temp21064);
    temp21056 = (+ a21036 temp21060);
    temp21052 = (+ a21035 temp21056);
    return (+ a21034 temp21052);
label21099:
    a21044 = 1;
    goto label21098;
label21098:
    temp21094 = (read);
    if (> temp21094 1)
       goto label21096;
    else
       goto label21097;
label21097:
    a21045 = 2;
    goto label21095;
label21096:
    a21045 = 1;
    goto label21095;
label21119:
    temp21062 = (read);
    if (> temp21062 1)
       goto label21117;
    else
       goto label21118;
label21118:
    a21037 = 2;
    goto label21116;
label21117:
    a21037 = 1;
    goto label21116;
label21116:
    temp21066 = (read);
    if (> temp21066 1)
       goto label21114;
    else
       goto label21115;
label21123:
    a21035 = 1;
    goto label21122;
label21122:
    temp21058 = (read);
    if (> temp21058 1)
       goto label21120;
    else
       goto label21121;
label21121:
    a21036 = 2;
    goto label21119;
label21120:
    a21036 = 1;
    goto label21119;
label21111:
    a21039 = 1;
    goto label21110;
label21110:
    temp21075 = (read);
    if (> temp21075 1)
       goto label21108;
    else
       goto label21109;
label21109:
    a21040 = 2;
    goto label21107;
label21108:
    a21040 = 1;
    goto label21107;
label21115:
    a21038 = 2;
    goto label21113;
label21114:
    a21038 = 1;
    goto label21113;
label21113:
    temp21068 = (read);
    temp21071 = (read);
    if (> temp21071 1)
       goto label21111;
    else
       goto label21112;
label21112:
    a21039 = 2;
    goto label21110;
label21135:
    temp21047 = 9;
    goto label21133;
label21134:
    temp21047 = 8;
    goto label21133;
label21133:
    if (> temp21047 8)
       goto label21131;
    else
       goto label21132;
label21132:
    x21033 = #f;
    goto label21130;
label21127:
    a21034 = 2;
    goto label21125;
start:
    if (>= 1 1)
       goto label21134;
    else
       goto label21135;
label21126:
    a21034 = 1;
    goto label21125;
label21125:
    temp21054 = (read);
    if (> temp21054 1)
       goto label21123;
    else
       goto label21124;
label21124:
    a21035 = 2;
    goto label21122;
label21131:
    x21033 = #t;
    goto label21130;
label21130:
    if (eq? x21033 #t)
       goto label21128;
    else
       goto label21129;
label21129:
    temp21050 = (read);
    if (> temp21050 1)
       goto label21126;
    else
       goto label21127;
label21128:
    return 1;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
label21103:
    a21042 = 2;
    goto label21101;
label21102:
    a21042 = 1;
    goto label21101;
label21101:
    a21043 = (read);
    temp21090 = (read);
    if (> temp21090 1)
       goto label21099;
    else
       goto label21100;
label21100:
    a21044 = 2;
    goto label21098;
label21107:
    temp21079 = (read);
    if (> temp21079 1)
       goto label21105;
    else
       goto label21106;
label21106:
    a21041 = 2;
    goto label21104;
label21105:
    a21041 = 1;
    goto label21104;
label21104:
    temp21083 = (read);
    if (> temp21083 1)
       goto label21102;
    else
       goto label21103;
label21095:
    temp21092 = a21045;
    temp21088 = (+ a21044 temp21092);
    temp21085 = (+ a21043 temp21088);
    temp21081 = (+ a21042 temp21085);
    temp21077 = (+ a21041 temp21081);
    temp21073 = (+ a21040 temp21077);
    temp21069 = (+ a21039 temp21073);
    temp21064 = (+ temp21068 temp21069);
    temp21060 = (+ a21037 temp21064);
    temp21056 = (+ a21036 temp21060);
    temp21052 = (+ a21035 temp21056);
    return (+ a21034 temp21052);
label21099:
    a21044 = 1;
    goto label21098;
label21098:
    temp21094 = (read);
    if (> temp21094 1)
       goto label21096;
    else
       goto label21097;
label21097:
    a21045 = 2;
    goto label21095;
label21096:
    a21045 = 1;
    goto label21095;
label21119:
    temp21062 = (read);
    if (> temp21062 1)
       goto label21117;
    else
       goto label21118;
label21118:
    a21037 = 2;
    goto label21116;
label21117:
    a21037 = 1;
    goto label21116;
label21116:
    temp21066 = (read);
    if (> temp21066 1)
       goto label21114;
    else
       goto label21115;
label21123:
    a21035 = 1;
    goto label21122;
label21122:
    temp21058 = (read);
    if (> temp21058 1)
       goto label21120;
    else
       goto label21121;
label21121:
    a21036 = 2;
    goto label21119;
label21120:
    a21036 = 1;
    goto label21119;
label21111:
    a21039 = 1;
    goto label21110;
label21110:
    temp21075 = (read);
    if (> temp21075 1)
       goto label21108;
    else
       goto label21109;
label21109:
    a21040 = 2;
    goto label21107;
label21108:
    a21040 = 1;
    goto label21107;
label21115:
    a21038 = 2;
    goto label21113;
label21114:
    a21038 = 1;
    goto label21113;
label21113:
    temp21068 = (read);
    temp21071 = (read);
    if (> temp21071 1)
       goto label21111;
    else
       goto label21112;
label21112:
    a21039 = 2;
    goto label21110;
label21135:
    temp21047 = 9;
    goto label21133;
label21134:
    temp21047 = 8;
    goto label21133;
label21133:
    if (> temp21047 8)
       goto label21131;
    else
       goto label21132;
label21132:
    x21033 = #f;
    goto label21130;
label21127:
    a21034 = 2;
    goto label21125;
start:
    if (>= 1 1)
       goto label21134;
    else
       goto label21135;
label21126:
    a21034 = 1;
    goto label21125;
label21125:
    temp21054 = (read);
    if (> temp21054 1)
       goto label21123;
    else
       goto label21124;
label21124:
    a21035 = 2;
    goto label21122;
label21131:
    x21033 = #t;
    goto label21130;
label21130:
    if (eq? x21033 #t)
       goto label21128;
    else
       goto label21129;
label21129:
    temp21050 = (read);
    if (> temp21050 1)
       goto label21126;
    else
       goto label21127;
label21128:
    return 1;



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
label21103:
    movq $2, a21042
    jmp label21101
    
label21102:
    movq $1, a21042
    jmp label21101
    
label21101:
    callq read_int
    movq %rax, a21043
    callq read_int
    movq %rax, temp21090
    cmpq $1, temp21090
    jg label21099
    jmp label21100
    
label21100:
    movq $2, a21044
    jmp label21098
    
label21107:
    callq read_int
    movq %rax, temp21079
    cmpq $1, temp21079
    jg label21105
    jmp label21106
    
label21106:
    movq $2, a21041
    jmp label21104
    
label21105:
    movq $1, a21041
    jmp label21104
    
label21104:
    callq read_int
    movq %rax, temp21083
    cmpq $1, temp21083
    jg label21102
    jmp label21103
    
label21095:
    movq a21045, temp21092
    movq a21044, temp21088
    addq temp21092, temp21088
    movq a21043, temp21085
    addq temp21088, temp21085
    movq a21042, temp21081
    addq temp21085, temp21081
    movq a21041, temp21077
    addq temp21081, temp21077
    movq a21040, temp21073
    addq temp21077, temp21073
    movq a21039, temp21069
    addq temp21073, temp21069
    movq temp21068, temp21064
    addq temp21069, temp21064
    movq a21037, temp21060
    addq temp21064, temp21060
    movq a21036, temp21056
    addq temp21060, temp21056
    movq a21035, temp21052
    addq temp21056, temp21052
    movq a21034, %rax
    addq temp21052, %rax
    jmp conclusion
    
label21099:
    movq $1, a21044
    jmp label21098
    
label21098:
    callq read_int
    movq %rax, temp21094
    cmpq $1, temp21094
    jg label21096
    jmp label21097
    
label21097:
    movq $2, a21045
    jmp label21095
    
label21096:
    movq $1, a21045
    jmp label21095
    
label21119:
    callq read_int
    movq %rax, temp21062
    cmpq $1, temp21062
    jg label21117
    jmp label21118
    
label21118:
    movq $2, a21037
    jmp label21116
    
label21117:
    movq $1, a21037
    jmp label21116
    
label21116:
    callq read_int
    movq %rax, temp21066
    cmpq $1, temp21066
    jg label21114
    jmp label21115
    
label21123:
    movq $1, a21035
    jmp label21122
    
label21122:
    callq read_int
    movq %rax, temp21058
    cmpq $1, temp21058
    jg label21120
    jmp label21121
    
label21121:
    movq $2, a21036
    jmp label21119
    
label21120:
    movq $1, a21036
    jmp label21119
    
label21111:
    movq $1, a21039
    jmp label21110
    
label21110:
    callq read_int
    movq %rax, temp21075
    cmpq $1, temp21075
    jg label21108
    jmp label21109
    
label21109:
    movq $2, a21040
    jmp label21107
    
label21108:
    movq $1, a21040
    jmp label21107
    
label21115:
    movq $2, a21038
    jmp label21113
    
label21114:
    movq $1, a21038
    jmp label21113
    
label21113:
    callq read_int
    movq %rax, temp21068
    callq read_int
    movq %rax, temp21071
    cmpq $1, temp21071
    jg label21111
    jmp label21112
    
label21112:
    movq $2, a21039
    jmp label21110
    
label21135:
    movq $9, temp21047
    jmp label21133
    
label21134:
    movq $8, temp21047
    jmp label21133
    
label21133:
    cmpq $8, temp21047
    jg label21131
    jmp label21132
    
label21132:
    movq $0, x21033
    jmp label21130
    
label21127:
    movq $2, a21034
    jmp label21125
    
start:
    cmpq $1, $1
    jge label21134
    jmp label21135
    
label21126:
    movq $1, a21034
    jmp label21125
    
label21125:
    callq read_int
    movq %rax, temp21054
    cmpq $1, temp21054
    jg label21123
    jmp label21124
    
label21124:
    movq $2, a21035
    jmp label21122
    
label21131:
    movq $1, x21033
    jmp label21130
    
label21130:
    cmpq $1, x21033
    je label21128
    jmp label21129
    
label21129:
    callq read_int
    movq %rax, temp21050
    cmpq $1, temp21050
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
label21103:
    movq $2, a21042
    jmp label21101
    
label21102:
    movq $1, a21042
    jmp label21101
    
label21101:
    callq read_int
    movq %rax, a21043
    callq read_int
    movq %rax, temp21090
    cmpq $1, temp21090
    jg label21099
    jmp label21100
    
label21100:
    movq $2, a21044
    jmp label21098
    
label21107:
    callq read_int
    movq %rax, temp21079
    cmpq $1, temp21079
    jg label21105
    jmp label21106
    
label21106:
    movq $2, a21041
    jmp label21104
    
label21105:
    movq $1, a21041
    jmp label21104
    
label21104:
    callq read_int
    movq %rax, temp21083
    cmpq $1, temp21083
    jg label21102
    jmp label21103
    
label21095:
    movq a21045, temp21092
    movq a21044, temp21088
    addq temp21092, temp21088
    movq a21043, temp21085
    addq temp21088, temp21085
    movq a21042, temp21081
    addq temp21085, temp21081
    movq a21041, temp21077
    addq temp21081, temp21077
    movq a21040, temp21073
    addq temp21077, temp21073
    movq a21039, temp21069
    addq temp21073, temp21069
    movq temp21068, temp21064
    addq temp21069, temp21064
    movq a21037, temp21060
    addq temp21064, temp21060
    movq a21036, temp21056
    addq temp21060, temp21056
    movq a21035, temp21052
    addq temp21056, temp21052
    movq a21034, %rax
    addq temp21052, %rax
    jmp conclusion
    
label21099:
    movq $1, a21044
    jmp label21098
    
label21098:
    callq read_int
    movq %rax, temp21094
    cmpq $1, temp21094
    jg label21096
    jmp label21097
    
label21097:
    movq $2, a21045
    jmp label21095
    
label21096:
    movq $1, a21045
    jmp label21095
    
label21119:
    callq read_int
    movq %rax, temp21062
    cmpq $1, temp21062
    jg label21117
    jmp label21118
    
label21118:
    movq $2, a21037
    jmp label21116
    
label21117:
    movq $1, a21037
    jmp label21116
    
label21116:
    callq read_int
    movq %rax, temp21066
    cmpq $1, temp21066
    jg label21114
    jmp label21115
    
label21123:
    movq $1, a21035
    jmp label21122
    
label21122:
    callq read_int
    movq %rax, temp21058
    cmpq $1, temp21058
    jg label21120
    jmp label21121
    
label21121:
    movq $2, a21036
    jmp label21119
    
label21120:
    movq $1, a21036
    jmp label21119
    
label21111:
    movq $1, a21039
    jmp label21110
    
label21110:
    callq read_int
    movq %rax, temp21075
    cmpq $1, temp21075
    jg label21108
    jmp label21109
    
label21109:
    movq $2, a21040
    jmp label21107
    
label21108:
    movq $1, a21040
    jmp label21107
    
label21115:
    movq $2, a21038
    jmp label21113
    
label21114:
    movq $1, a21038
    jmp label21113
    
label21113:
    callq read_int
    movq %rax, temp21068
    callq read_int
    movq %rax, temp21071
    cmpq $1, temp21071
    jg label21111
    jmp label21112
    
label21112:
    movq $2, a21039
    jmp label21110
    
label21135:
    movq $9, temp21047
    jmp label21133
    
label21134:
    movq $8, temp21047
    jmp label21133
    
label21133:
    cmpq $8, temp21047
    jg label21131
    jmp label21132
    
label21132:
    movq $0, x21033
    jmp label21130
    
label21127:
    movq $2, a21034
    jmp label21125
    
start:
    cmpq $1, $1
    jge label21134
    jmp label21135
    
label21126:
    movq $1, a21034
    jmp label21125
    
label21125:
    callq read_int
    movq %rax, temp21054
    cmpq $1, temp21054
    jg label21123
    jmp label21124
    
label21124:
    movq $2, a21035
    jmp label21122
    
label21131:
    movq $1, x21033
    jmp label21130
    
label21130:
    cmpq $1, x21033
    je label21128
    jmp label21129
    
label21129:
    callq read_int
    movq %rax, temp21050
    cmpq $1, temp21050
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
label21095:
    liveness
:
(list
 (set
  a21044
  a21045
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21044
  temp21092
  a21036
  temp21068
  a21043
  %rsp)
 (set
  temp21092
  a21034
  a21035
  a21037
  a21039
  a21041
  a21042
  a21036
  temp21068
  a21040
  temp21088
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21041
  a21042
  a21036
  temp21068
  a21040
  temp21088
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21039
  a21041
  a21042
  %rsp
  a21036
  temp21068
  a21037
  temp21085
  a21040
  temp21088)
 (set
  a21034
  a21035
  a21039
  a21040
  a21041
  a21042
  %rsp
  a21036
  temp21068
  a21037
  temp21085)
 (set
  temp21081
  a21034
  a21035
  a21039
  a21040
  a21041
  %rsp
  a21036
  temp21068
  a21037
  temp21085)
 (set
  temp21081
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  %rsp
  a21036
  temp21068)
 (set
  temp21077
  temp21081
  a21034
  a21035
  a21037
  a21039
  a21040
  %rsp
  a21036
  temp21068)
 (set temp21077 a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set temp21077 a21034 a21035 a21037 a21039 temp21073 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 temp21073 %rsp a21036 temp21068)
 (set a21034 a21035 temp21073 %rsp a21036 temp21068 a21037 temp21069)
 (set a21034 a21035 %rsp a21036 temp21068 a21037 temp21069)
 (set temp21064 a21034 a21035 a21036 %rsp a21037 temp21069)
 (set temp21064 a21034 a21035 a21036 a21037 %rsp)
 (set temp21060 temp21064 a21034 a21035 a21036 %rsp)
 (set temp21060 a21034 a21035 a21036 %rsp)
 (set temp21060 a21034 a21035 temp21056 %rsp)
 (set a21034 a21035 temp21056 %rsp)
 (set a21034 temp21052 temp21056 %rsp)
 (set a21034 temp21052 %rsp)
 (set %rax temp21052 %rsp)
 (set %rax %rsp))
movq a21045, temp21092
movq a21044, temp21088
addq temp21092, temp21088
movq a21043, temp21085
addq temp21088, temp21085
movq a21042, temp21081
addq temp21085, temp21081
movq a21041, temp21077
addq temp21081, temp21077
movq a21040, temp21073
addq temp21077, temp21073
movq a21039, temp21069
addq temp21073, temp21069
movq temp21068, temp21064
addq temp21069, temp21064
movq a21037, temp21060
addq temp21064, temp21060
movq a21036, temp21056
addq temp21060, temp21056
movq a21035, temp21052
addq temp21056, temp21052
movq a21034, %rax
addq temp21052, %rax
jmp conclusion

label21097:
    liveness
:
(list
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21045
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
movq $2, a21045
jmp label21095

label21096:
    liveness
:
(list
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21045
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
movq $1, a21045
jmp label21095

label21098:
    liveness
:
(list
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21044
  %rax
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  temp21094
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
callq read_int
movq %rax, temp21094
cmpq $1, temp21094
jg label21096
jmp label21097

label21100:
    liveness
:
(list
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
movq $2, a21044
jmp label21098

label21099:
    liveness
:
(list
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
movq $1, a21044
jmp label21098

label21101:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 a21041 a21042 %rsp a21036 temp21068)
 (set
  %rax
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  %rsp
  a21036
  temp21068)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  %rax
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21036
  temp21068
  a21042
  temp21090
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
callq read_int
movq %rax, a21043
callq read_int
movq %rax, temp21090
cmpq $1, temp21090
jg label21099
jmp label21100

label21103:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 a21042 %rsp a21036 temp21068))
movq $2, a21042
jmp label21101

label21102:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 a21042 %rsp a21036 temp21068))
movq $1, a21042
jmp label21101

label21104:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set %rax a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set
  a21034
  a21037
  a21039
  a21040
  a21041
  %rsp
  a21035
  temp21083
  a21036
  temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068))
callq read_int
movq %rax, temp21083
cmpq $1, temp21083
jg label21102
jmp label21103

label21106:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068))
movq $2, a21041
jmp label21104

label21105:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068))
movq $1, a21041
jmp label21104

label21107:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set %rax a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set temp21079 a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068))
callq read_int
movq %rax, temp21079
cmpq $1, temp21079
jg label21105
jmp label21106

label21109:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068))
movq $2, a21040
jmp label21107

label21108:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068))
movq $1, a21040
jmp label21107

label21110:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set %rax a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21036 temp21068 temp21075 %rsp)
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068))
callq read_int
movq %rax, temp21075
cmpq $1, temp21075
jg label21108
jmp label21109

label21111:
    liveness
:
(list
 (set a21034 a21035 a21037 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068))
movq $1, a21039
jmp label21110

label21112:
    liveness
:
(list
 (set a21034 a21035 a21037 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068))
movq $2, a21039
jmp label21110

label21113:
    liveness
:
(list
 (set a21034 a21035 a21036 a21037 %rsp)
 (set %rax a21034 a21035 a21036 a21037 %rsp)
 (set a21034 a21035 a21037 %rsp a21036 temp21068)
 (set %rax a21034 a21035 a21037 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 temp21071 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 %rsp a21036 temp21068))
callq read_int
movq %rax, temp21068
callq read_int
movq %rax, temp21071
cmpq $1, temp21071
jg label21111
jmp label21112

label21115:
    liveness
:
(list
 (set a21034 a21035 a21036 a21037 %rsp)
 (set a21034 a21035 a21036 a21037 %rsp))
movq $2, a21038
jmp label21113

label21114:
    liveness
:
(list
 (set a21034 a21035 a21036 a21037 %rsp)
 (set a21034 a21035 a21036 a21037 %rsp))
movq $1, a21038
jmp label21113

label21116:
    liveness
:
(list
 (set a21034 a21035 a21036 a21037 %rsp)
 (set %rax a21034 a21035 a21036 a21037 %rsp)
 (set a21035 a21036 a21037 %rsp a21034 temp21066)
 (set a21034 a21035 a21036 a21037 %rsp)
 (set a21034 a21035 a21036 a21037 %rsp))
callq read_int
movq %rax, temp21066
cmpq $1, temp21066
jg label21114
jmp label21115

label21118:
    liveness
:
(list (set a21034 a21035 a21036 %rsp) (set a21034 a21035 a21036 a21037 %rsp))
movq $2, a21037
jmp label21116

label21117:
    liveness
:
(list (set a21034 a21035 a21036 %rsp) (set a21034 a21035 a21036 a21037 %rsp))
movq $1, a21037
jmp label21116

label21119:
    liveness
:
(list
 (set a21034 a21035 a21036 %rsp)
 (set %rax a21034 a21035 a21036 %rsp)
 (set temp21062 a21034 a21035 a21036 %rsp)
 (set a21034 a21035 a21036 %rsp)
 (set a21034 a21035 a21036 %rsp))
callq read_int
movq %rax, temp21062
cmpq $1, temp21062
jg label21117
jmp label21118

label21121:
    liveness
:
(list (set a21034 a21035 %rsp) (set a21034 a21035 a21036 %rsp))
movq $2, a21036
jmp label21119

label21120:
    liveness
:
(list (set a21034 a21035 %rsp) (set a21034 a21035 a21036 %rsp))
movq $1, a21036
jmp label21119

label21122:
    liveness
:
(list
 (set a21034 a21035 %rsp)
 (set %rax a21034 a21035 %rsp)
 (set a21034 a21035 temp21058 %rsp)
 (set a21034 a21035 %rsp)
 (set a21034 a21035 %rsp))
callq read_int
movq %rax, temp21058
cmpq $1, temp21058
jg label21120
jmp label21121

label21123:
    liveness
:
(list (set a21034 %rsp) (set a21034 a21035 %rsp))
movq $1, a21035
jmp label21122

label21124:
    liveness
:
(list (set a21034 %rsp) (set a21034 a21035 %rsp))
movq $2, a21035
jmp label21122

label21125:
    liveness
:
(list
 (set a21034 %rsp)
 (set %rax a21034 %rsp)
 (set a21034 temp21054 %rsp)
 (set a21034 %rsp)
 (set a21034 %rsp))
callq read_int
movq %rax, temp21054
cmpq $1, temp21054
jg label21123
jmp label21124

label21127:
    liveness
:
(list (set %rsp) (set a21034 %rsp))
movq $2, a21034
jmp label21125

label21126:
    liveness
:
(list (set %rsp) (set a21034 %rsp))
movq $1, a21034
jmp label21125

label21129:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp21050 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp21050
cmpq $1, temp21050
jg label21126
jmp label21127

label21128:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label21130:
    liveness
:
(list (set x21033 %rsp) (set %rsp) (set %rsp))
cmpq $1, x21033
je label21128
jmp label21129

label21132:
    liveness
:
(list (set %rsp) (set x21033 %rsp))
movq $0, x21033
jmp label21130

label21131:
    liveness
:
(list (set %rsp) (set x21033 %rsp))
movq $1, x21033
jmp label21130

label21133:
    liveness
:
(list (set temp21047 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp21047
jg label21131
jmp label21132

label21135:
    liveness
:
(list (set %rsp) (set temp21047 %rsp))
movq $9, temp21047
jmp label21133

label21134:
    liveness
:
(list (set %rsp) (set temp21047 %rsp))
movq $8, temp21047
jmp label21133

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label21134
jmp label21135




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
label21095:
    liveness
:
(list
 (set
  a21044
  a21045
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21044
  temp21092
  a21036
  temp21068
  a21043
  %rsp)
 (set
  temp21092
  a21034
  a21035
  a21037
  a21039
  a21041
  a21042
  a21036
  temp21068
  a21040
  temp21088
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21041
  a21042
  a21036
  temp21068
  a21040
  temp21088
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21039
  a21041
  a21042
  %rsp
  a21036
  temp21068
  a21037
  temp21085
  a21040
  temp21088)
 (set
  a21034
  a21035
  a21039
  a21040
  a21041
  a21042
  %rsp
  a21036
  temp21068
  a21037
  temp21085)
 (set
  temp21081
  a21034
  a21035
  a21039
  a21040
  a21041
  %rsp
  a21036
  temp21068
  a21037
  temp21085)
 (set
  temp21081
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  %rsp
  a21036
  temp21068)
 (set
  temp21077
  temp21081
  a21034
  a21035
  a21037
  a21039
  a21040
  %rsp
  a21036
  temp21068)
 (set temp21077 a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set temp21077 a21034 a21035 a21037 a21039 temp21073 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 temp21073 %rsp a21036 temp21068)
 (set a21034 a21035 temp21073 %rsp a21036 temp21068 a21037 temp21069)
 (set a21034 a21035 %rsp a21036 temp21068 a21037 temp21069)
 (set temp21064 a21034 a21035 a21036 %rsp a21037 temp21069)
 (set temp21064 a21034 a21035 a21036 a21037 %rsp)
 (set temp21060 temp21064 a21034 a21035 a21036 %rsp)
 (set temp21060 a21034 a21035 a21036 %rsp)
 (set temp21060 a21034 a21035 temp21056 %rsp)
 (set a21034 a21035 temp21056 %rsp)
 (set a21034 temp21052 temp21056 %rsp)
 (set a21034 temp21052 %rsp)
 (set %rax temp21052 %rsp)
 (set %rax %rsp))
movq a21045, temp21092
movq a21044, temp21088
addq temp21092, temp21088
movq a21043, temp21085
addq temp21088, temp21085
movq a21042, temp21081
addq temp21085, temp21081
movq a21041, temp21077
addq temp21081, temp21077
movq a21040, temp21073
addq temp21077, temp21073
movq a21039, temp21069
addq temp21073, temp21069
movq temp21068, temp21064
addq temp21069, temp21064
movq a21037, temp21060
addq temp21064, temp21060
movq a21036, temp21056
addq temp21060, temp21056
movq a21035, temp21052
addq temp21056, temp21052
movq a21034, %rax
addq temp21052, %rax
jmp conclusion

label21097:
    liveness
:
(list
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21045
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
movq $2, a21045
jmp label21095

label21096:
    liveness
:
(list
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21045
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
movq $1, a21045
jmp label21095

label21098:
    liveness
:
(list
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21044
  %rax
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  temp21094
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
callq read_int
movq %rax, temp21094
cmpq $1, temp21094
jg label21096
jmp label21097

label21100:
    liveness
:
(list
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
movq $2, a21044
jmp label21098

label21099:
    liveness
:
(list
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21044
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
movq $1, a21044
jmp label21098

label21101:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 a21041 a21042 %rsp a21036 temp21068)
 (set
  %rax
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  %rsp
  a21036
  temp21068)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  %rax
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21036
  temp21068
  a21042
  temp21090
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp)
 (set
  a21034
  a21035
  a21037
  a21039
  a21040
  a21041
  a21042
  a21036
  temp21068
  a21043
  %rsp))
callq read_int
movq %rax, a21043
callq read_int
movq %rax, temp21090
cmpq $1, temp21090
jg label21099
jmp label21100

label21103:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 a21042 %rsp a21036 temp21068))
movq $2, a21042
jmp label21101

label21102:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 a21042 %rsp a21036 temp21068))
movq $1, a21042
jmp label21101

label21104:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set %rax a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set
  a21034
  a21037
  a21039
  a21040
  a21041
  %rsp
  a21035
  temp21083
  a21036
  temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068))
callq read_int
movq %rax, temp21083
cmpq $1, temp21083
jg label21102
jmp label21103

label21106:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068))
movq $2, a21041
jmp label21104

label21105:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 a21041 %rsp a21036 temp21068))
movq $1, a21041
jmp label21104

label21107:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set %rax a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set temp21079 a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068))
callq read_int
movq %rax, temp21079
cmpq $1, temp21079
jg label21105
jmp label21106

label21109:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068))
movq $2, a21040
jmp label21107

label21108:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21040 %rsp a21036 temp21068))
movq $1, a21040
jmp label21107

label21110:
    liveness
:
(list
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set %rax a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 a21036 temp21068 temp21075 %rsp)
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068))
callq read_int
movq %rax, temp21075
cmpq $1, temp21075
jg label21108
jmp label21109

label21111:
    liveness
:
(list
 (set a21034 a21035 a21037 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068))
movq $1, a21039
jmp label21110

label21112:
    liveness
:
(list
 (set a21034 a21035 a21037 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 a21039 %rsp a21036 temp21068))
movq $2, a21039
jmp label21110

label21113:
    liveness
:
(list
 (set a21034 a21035 a21036 a21037 %rsp)
 (set %rax a21034 a21035 a21036 a21037 %rsp)
 (set a21034 a21035 a21037 %rsp a21036 temp21068)
 (set %rax a21034 a21035 a21037 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 temp21071 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 %rsp a21036 temp21068)
 (set a21034 a21035 a21037 %rsp a21036 temp21068))
callq read_int
movq %rax, temp21068
callq read_int
movq %rax, temp21071
cmpq $1, temp21071
jg label21111
jmp label21112

label21115:
    liveness
:
(list
 (set a21034 a21035 a21036 a21037 %rsp)
 (set a21034 a21035 a21036 a21037 %rsp))
movq $2, a21038
jmp label21113

label21114:
    liveness
:
(list
 (set a21034 a21035 a21036 a21037 %rsp)
 (set a21034 a21035 a21036 a21037 %rsp))
movq $1, a21038
jmp label21113

label21116:
    liveness
:
(list
 (set a21034 a21035 a21036 a21037 %rsp)
 (set %rax a21034 a21035 a21036 a21037 %rsp)
 (set a21035 a21036 a21037 %rsp a21034 temp21066)
 (set a21034 a21035 a21036 a21037 %rsp)
 (set a21034 a21035 a21036 a21037 %rsp))
callq read_int
movq %rax, temp21066
cmpq $1, temp21066
jg label21114
jmp label21115

label21118:
    liveness
:
(list (set a21034 a21035 a21036 %rsp) (set a21034 a21035 a21036 a21037 %rsp))
movq $2, a21037
jmp label21116

label21117:
    liveness
:
(list (set a21034 a21035 a21036 %rsp) (set a21034 a21035 a21036 a21037 %rsp))
movq $1, a21037
jmp label21116

label21119:
    liveness
:
(list
 (set a21034 a21035 a21036 %rsp)
 (set %rax a21034 a21035 a21036 %rsp)
 (set temp21062 a21034 a21035 a21036 %rsp)
 (set a21034 a21035 a21036 %rsp)
 (set a21034 a21035 a21036 %rsp))
callq read_int
movq %rax, temp21062
cmpq $1, temp21062
jg label21117
jmp label21118

label21121:
    liveness
:
(list (set a21034 a21035 %rsp) (set a21034 a21035 a21036 %rsp))
movq $2, a21036
jmp label21119

label21120:
    liveness
:
(list (set a21034 a21035 %rsp) (set a21034 a21035 a21036 %rsp))
movq $1, a21036
jmp label21119

label21122:
    liveness
:
(list
 (set a21034 a21035 %rsp)
 (set %rax a21034 a21035 %rsp)
 (set a21034 a21035 temp21058 %rsp)
 (set a21034 a21035 %rsp)
 (set a21034 a21035 %rsp))
callq read_int
movq %rax, temp21058
cmpq $1, temp21058
jg label21120
jmp label21121

label21123:
    liveness
:
(list (set a21034 %rsp) (set a21034 a21035 %rsp))
movq $1, a21035
jmp label21122

label21124:
    liveness
:
(list (set a21034 %rsp) (set a21034 a21035 %rsp))
movq $2, a21035
jmp label21122

label21125:
    liveness
:
(list
 (set a21034 %rsp)
 (set %rax a21034 %rsp)
 (set a21034 temp21054 %rsp)
 (set a21034 %rsp)
 (set a21034 %rsp))
callq read_int
movq %rax, temp21054
cmpq $1, temp21054
jg label21123
jmp label21124

label21127:
    liveness
:
(list (set %rsp) (set a21034 %rsp))
movq $2, a21034
jmp label21125

label21126:
    liveness
:
(list (set %rsp) (set a21034 %rsp))
movq $1, a21034
jmp label21125

label21129:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp21050 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp21050
cmpq $1, temp21050
jg label21126
jmp label21127

label21128:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label21130:
    liveness
:
(list (set x21033 %rsp) (set %rsp) (set %rsp))
cmpq $1, x21033
je label21128
jmp label21129

label21132:
    liveness
:
(list (set %rsp) (set x21033 %rsp))
movq $0, x21033
jmp label21130

label21131:
    liveness
:
(list (set %rsp) (set x21033 %rsp))
movq $1, x21033
jmp label21130

label21133:
    liveness
:
(list (set temp21047 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp21047
jg label21131
jmp label21132

label21135:
    liveness
:
(list (set %rsp) (set temp21047 %rsp))
movq $9, temp21047
jmp label21133

label21134:
    liveness
:
(list (set %rsp) (set temp21047 %rsp))
movq $8, temp21047
jmp label21133

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label21134
jmp label21135




output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21043 temp21085)
 (list a21042 temp21081)
 (list a21041 temp21077)
 (list temp21073 a21040)
 (list a21040 temp21073)
 (list a21039 temp21069)
 (list temp21069 a21039)
 (list a21037 temp21060)
 (list a21036 temp21056)
 (list temp21068 temp21064)
 (list a21035 temp21052)
 (list temp21064 temp21068)
 (list temp21060 a21037)
 (list temp21092 a21045)
 (list temp21056 a21036)
 (list temp21088 a21044)
 (list temp21085 a21043)
 (list temp21052 a21035)
 (list temp21081 a21042)
 (list a21045 temp21092)
 (list temp21077 a21041)
 (list a21044 temp21088))
label21095:
    movq a21045, temp21092
    movq a21044, temp21088
    addq temp21092, temp21088
    movq a21043, temp21085
    addq temp21088, temp21085
    movq a21042, temp21081
    addq temp21085, temp21081
    movq a21041, temp21077
    addq temp21081, temp21077
    movq a21040, temp21073
    addq temp21077, temp21073
    movq a21039, temp21069
    addq temp21073, temp21069
    movq temp21068, temp21064
    addq temp21069, temp21064
    movq a21037, temp21060
    addq temp21064, temp21060
    movq a21036, temp21056
    addq temp21060, temp21056
    movq a21035, temp21052
    addq temp21056, temp21052
    movq a21034, %rax
    addq temp21052, %rax
    jmp conclusion
    
label21097:
    movq $2, a21045
    jmp label21095
    
label21096:
    movq $1, a21045
    jmp label21095
    
label21098:
    callq read_int
    movq %rax, temp21094
    cmpq $1, temp21094
    jg label21096
    jmp label21097
    
label21100:
    movq $2, a21044
    jmp label21098
    
label21099:
    movq $1, a21044
    jmp label21098
    
label21101:
    callq read_int
    movq %rax, a21043
    callq read_int
    movq %rax, temp21090
    cmpq $1, temp21090
    jg label21099
    jmp label21100
    
label21103:
    movq $2, a21042
    jmp label21101
    
label21102:
    movq $1, a21042
    jmp label21101
    
label21104:
    callq read_int
    movq %rax, temp21083
    cmpq $1, temp21083
    jg label21102
    jmp label21103
    
label21106:
    movq $2, a21041
    jmp label21104
    
label21105:
    movq $1, a21041
    jmp label21104
    
label21107:
    callq read_int
    movq %rax, temp21079
    cmpq $1, temp21079
    jg label21105
    jmp label21106
    
label21109:
    movq $2, a21040
    jmp label21107
    
label21108:
    movq $1, a21040
    jmp label21107
    
label21110:
    callq read_int
    movq %rax, temp21075
    cmpq $1, temp21075
    jg label21108
    jmp label21109
    
label21111:
    movq $1, a21039
    jmp label21110
    
label21112:
    movq $2, a21039
    jmp label21110
    
label21113:
    callq read_int
    movq %rax, temp21068
    callq read_int
    movq %rax, temp21071
    cmpq $1, temp21071
    jg label21111
    jmp label21112
    
label21115:
    movq $2, a21038
    jmp label21113
    
label21114:
    movq $1, a21038
    jmp label21113
    
label21116:
    callq read_int
    movq %rax, temp21066
    cmpq $1, temp21066
    jg label21114
    jmp label21115
    
label21118:
    movq $2, a21037
    jmp label21116
    
label21117:
    movq $1, a21037
    jmp label21116
    
label21119:
    callq read_int
    movq %rax, temp21062
    cmpq $1, temp21062
    jg label21117
    jmp label21118
    
label21121:
    movq $2, a21036
    jmp label21119
    
label21120:
    movq $1, a21036
    jmp label21119
    
label21122:
    callq read_int
    movq %rax, temp21058
    cmpq $1, temp21058
    jg label21120
    jmp label21121
    
label21123:
    movq $1, a21035
    jmp label21122
    
label21124:
    movq $2, a21035
    jmp label21122
    
label21125:
    callq read_int
    movq %rax, temp21054
    cmpq $1, temp21054
    jg label21123
    jmp label21124
    
label21127:
    movq $2, a21034
    jmp label21125
    
label21126:
    movq $1, a21034
    jmp label21125
    
label21129:
    callq read_int
    movq %rax, temp21050
    cmpq $1, temp21050
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    
label21130:
    cmpq $1, x21033
    je label21128
    jmp label21129
    
label21132:
    movq $0, x21033
    jmp label21130
    
label21131:
    movq $1, x21033
    jmp label21130
    
label21133:
    cmpq $8, temp21047
    jg label21131
    jmp label21132
    
label21135:
    movq $9, temp21047
    jmp label21133
    
label21134:
    movq $8, temp21047
    jmp label21133
    
start:
    cmpq $1, $1
    jge label21134
    jmp label21135
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21043 temp21085)
 (list a21042 temp21081)
 (list a21041 temp21077)
 (list temp21073 a21040)
 (list a21040 temp21073)
 (list a21039 temp21069)
 (list temp21069 a21039)
 (list a21037 temp21060)
 (list a21036 temp21056)
 (list temp21068 temp21064)
 (list a21035 temp21052)
 (list temp21064 temp21068)
 (list temp21060 a21037)
 (list temp21092 a21045)
 (list temp21056 a21036)
 (list temp21088 a21044)
 (list temp21085 a21043)
 (list temp21052 a21035)
 (list temp21081 a21042)
 (list a21045 temp21092)
 (list temp21077 a21041)
 (list a21044 temp21088))
label21095:
    movq a21045, temp21092
    movq a21044, temp21088
    addq temp21092, temp21088
    movq a21043, temp21085
    addq temp21088, temp21085
    movq a21042, temp21081
    addq temp21085, temp21081
    movq a21041, temp21077
    addq temp21081, temp21077
    movq a21040, temp21073
    addq temp21077, temp21073
    movq a21039, temp21069
    addq temp21073, temp21069
    movq temp21068, temp21064
    addq temp21069, temp21064
    movq a21037, temp21060
    addq temp21064, temp21060
    movq a21036, temp21056
    addq temp21060, temp21056
    movq a21035, temp21052
    addq temp21056, temp21052
    movq a21034, %rax
    addq temp21052, %rax
    jmp conclusion
    
label21097:
    movq $2, a21045
    jmp label21095
    
label21096:
    movq $1, a21045
    jmp label21095
    
label21098:
    callq read_int
    movq %rax, temp21094
    cmpq $1, temp21094
    jg label21096
    jmp label21097
    
label21100:
    movq $2, a21044
    jmp label21098
    
label21099:
    movq $1, a21044
    jmp label21098
    
label21101:
    callq read_int
    movq %rax, a21043
    callq read_int
    movq %rax, temp21090
    cmpq $1, temp21090
    jg label21099
    jmp label21100
    
label21103:
    movq $2, a21042
    jmp label21101
    
label21102:
    movq $1, a21042
    jmp label21101
    
label21104:
    callq read_int
    movq %rax, temp21083
    cmpq $1, temp21083
    jg label21102
    jmp label21103
    
label21106:
    movq $2, a21041
    jmp label21104
    
label21105:
    movq $1, a21041
    jmp label21104
    
label21107:
    callq read_int
    movq %rax, temp21079
    cmpq $1, temp21079
    jg label21105
    jmp label21106
    
label21109:
    movq $2, a21040
    jmp label21107
    
label21108:
    movq $1, a21040
    jmp label21107
    
label21110:
    callq read_int
    movq %rax, temp21075
    cmpq $1, temp21075
    jg label21108
    jmp label21109
    
label21111:
    movq $1, a21039
    jmp label21110
    
label21112:
    movq $2, a21039
    jmp label21110
    
label21113:
    callq read_int
    movq %rax, temp21068
    callq read_int
    movq %rax, temp21071
    cmpq $1, temp21071
    jg label21111
    jmp label21112
    
label21115:
    movq $2, a21038
    jmp label21113
    
label21114:
    movq $1, a21038
    jmp label21113
    
label21116:
    callq read_int
    movq %rax, temp21066
    cmpq $1, temp21066
    jg label21114
    jmp label21115
    
label21118:
    movq $2, a21037
    jmp label21116
    
label21117:
    movq $1, a21037
    jmp label21116
    
label21119:
    callq read_int
    movq %rax, temp21062
    cmpq $1, temp21062
    jg label21117
    jmp label21118
    
label21121:
    movq $2, a21036
    jmp label21119
    
label21120:
    movq $1, a21036
    jmp label21119
    
label21122:
    callq read_int
    movq %rax, temp21058
    cmpq $1, temp21058
    jg label21120
    jmp label21121
    
label21123:
    movq $1, a21035
    jmp label21122
    
label21124:
    movq $2, a21035
    jmp label21122
    
label21125:
    callq read_int
    movq %rax, temp21054
    cmpq $1, temp21054
    jg label21123
    jmp label21124
    
label21127:
    movq $2, a21034
    jmp label21125
    
label21126:
    movq $1, a21034
    jmp label21125
    
label21129:
    callq read_int
    movq %rax, temp21050
    cmpq $1, temp21050
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    
label21130:
    cmpq $1, x21033
    je label21128
    jmp label21129
    
label21132:
    movq $0, x21033
    jmp label21130
    
label21131:
    movq $1, x21033
    jmp label21130
    
label21133:
    cmpq $8, temp21047
    jg label21131
    jmp label21132
    
label21135:
    movq $9, temp21047
    jmp label21133
    
label21134:
    movq $8, temp21047
    jmp label21133
    
start:
    cmpq $1, $1
    jge label21134
    jmp label21135
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21043 temp21085)
 (list a21042 temp21081)
 (list a21041 temp21077)
 (list temp21073 a21040)
 (list a21040 temp21073)
 (list a21039 temp21069)
 (list temp21069 a21039)
 (list a21037 temp21060)
 (list a21036 temp21056)
 (list temp21068 temp21064)
 (list a21035 temp21052)
 (list temp21064 temp21068)
 (list temp21060 a21037)
 (list temp21092 a21045)
 (list temp21056 a21036)
 (list temp21088 a21044)
 (list temp21085 a21043)
 (list temp21052 a21035)
 (list temp21081 a21042)
 (list a21045 temp21092)
 (list temp21077 a21041)
 (list a21044 temp21088))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp21068 7)
 (cons a21044 8)
 (cons a21034 9)
 (cons a21035 10)
 (cons a21040 11)
 (cons a21041 12)
 (cons a21042 13)
 (cons a21043 14)
 (cons a21036 15)
 (cons a21037 16)
 (cons a21039 17)
 (cons a21045 0)
 (cons temp21092 0)
 (cons temp21088 1)
 (cons temp21094 0)
 (cons temp21085 0)
 (cons temp21090 0)
 (cons temp21081 1)
 (cons temp21077 0)
 (cons temp21083 0)
 (cons temp21073 1)
 (cons temp21079 0)
 (cons temp21069 0)
 (cons temp21075 0)
 (cons temp21071 0)
 (cons temp21064 1)
 (cons temp21060 0)
 (cons a21038 0)
 (cons temp21066 0)
 (cons temp21056 1)
 (cons temp21052 0)
 (cons temp21062 0)
 (cons temp21058 0)
 (cons temp21054 0)
 (cons temp21047 0)
 (cons x21033 0)
 (cons temp21050 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21095:
    movq %rcx, %rcx
    movq %r12, %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %r13, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21097:
    movq $2, %rcx
    jmp label21095
    
label21096:
    movq $1, %rcx
    jmp label21095
    
label21098:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21096
    jmp label21097
    
label21100:
    movq $2, %r12
    jmp label21098
    
label21099:
    movq $1, %r12
    jmp label21098
    
label21101:
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21099
    jmp label21100
    
label21103:
    movq $2, -64(%rbp)
    jmp label21101
    
label21102:
    movq $1, -64(%rbp)
    jmp label21101
    
label21104:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21102
    jmp label21103
    
label21106:
    movq $2, -56(%rbp)
    jmp label21104
    
label21105:
    movq $1, -56(%rbp)
    jmp label21104
    
label21107:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21105
    jmp label21106
    
label21109:
    movq $2, -48(%rbp)
    jmp label21107
    
label21108:
    movq $1, -48(%rbp)
    jmp label21107
    
label21110:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21108
    jmp label21109
    
label21111:
    movq $1, -96(%rbp)
    jmp label21110
    
label21112:
    movq $2, -96(%rbp)
    jmp label21110
    
label21113:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21111
    jmp label21112
    
label21115:
    movq $2, %rcx
    jmp label21113
    
label21114:
    movq $1, %rcx
    jmp label21113
    
label21116:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21114
    jmp label21115
    
label21118:
    movq $2, -88(%rbp)
    jmp label21116
    
label21117:
    movq $1, -88(%rbp)
    jmp label21116
    
label21119:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21117
    jmp label21118
    
label21121:
    movq $2, -80(%rbp)
    jmp label21119
    
label21120:
    movq $1, -80(%rbp)
    jmp label21119
    
label21122:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21120
    jmp label21121
    
label21123:
    movq $1, %r14
    jmp label21122
    
label21124:
    movq $2, %r14
    jmp label21122
    
label21125:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21123
    jmp label21124
    
label21127:
    movq $2, %r13
    jmp label21125
    
label21126:
    movq $1, %r13
    jmp label21125
    
label21129:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    
label21130:
    cmpq $1, %rcx
    je label21128
    jmp label21129
    
label21132:
    movq $0, %rcx
    jmp label21130
    
label21131:
    movq $1, %rcx
    jmp label21130
    
label21133:
    cmpq $8, %rcx
    jg label21131
    jmp label21132
    
label21135:
    movq $9, %rcx
    jmp label21133
    
label21134:
    movq $8, %rcx
    jmp label21133
    
start:
    cmpq $1, $1
    jge label21134
    jmp label21135
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21043 temp21085)
 (list a21042 temp21081)
 (list a21041 temp21077)
 (list temp21073 a21040)
 (list a21040 temp21073)
 (list a21039 temp21069)
 (list temp21069 a21039)
 (list a21037 temp21060)
 (list a21036 temp21056)
 (list temp21068 temp21064)
 (list a21035 temp21052)
 (list temp21064 temp21068)
 (list temp21060 a21037)
 (list temp21092 a21045)
 (list temp21056 a21036)
 (list temp21088 a21044)
 (list temp21085 a21043)
 (list temp21052 a21035)
 (list temp21081 a21042)
 (list a21045 temp21092)
 (list temp21077 a21041)
 (list a21044 temp21088))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp21068 7)
 (cons a21044 8)
 (cons a21034 9)
 (cons a21035 10)
 (cons a21040 11)
 (cons a21041 12)
 (cons a21042 13)
 (cons a21043 14)
 (cons a21036 15)
 (cons a21037 16)
 (cons a21039 17)
 (cons a21045 0)
 (cons temp21092 0)
 (cons temp21088 1)
 (cons temp21094 0)
 (cons temp21085 0)
 (cons temp21090 0)
 (cons temp21081 1)
 (cons temp21077 0)
 (cons temp21083 0)
 (cons temp21073 1)
 (cons temp21079 0)
 (cons temp21069 0)
 (cons temp21075 0)
 (cons temp21071 0)
 (cons temp21064 1)
 (cons temp21060 0)
 (cons a21038 0)
 (cons temp21066 0)
 (cons temp21056 1)
 (cons temp21052 0)
 (cons temp21062 0)
 (cons temp21058 0)
 (cons temp21054 0)
 (cons temp21047 0)
 (cons x21033 0)
 (cons temp21050 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21095:
    movq %rcx, %rcx
    movq %r12, %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %r13, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21097:
    movq $2, %rcx
    jmp label21095
    
label21096:
    movq $1, %rcx
    jmp label21095
    
label21098:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21096
    jmp label21097
    
label21100:
    movq $2, %r12
    jmp label21098
    
label21099:
    movq $1, %r12
    jmp label21098
    
label21101:
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21099
    jmp label21100
    
label21103:
    movq $2, -64(%rbp)
    jmp label21101
    
label21102:
    movq $1, -64(%rbp)
    jmp label21101
    
label21104:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21102
    jmp label21103
    
label21106:
    movq $2, -56(%rbp)
    jmp label21104
    
label21105:
    movq $1, -56(%rbp)
    jmp label21104
    
label21107:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21105
    jmp label21106
    
label21109:
    movq $2, -48(%rbp)
    jmp label21107
    
label21108:
    movq $1, -48(%rbp)
    jmp label21107
    
label21110:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21108
    jmp label21109
    
label21111:
    movq $1, -96(%rbp)
    jmp label21110
    
label21112:
    movq $2, -96(%rbp)
    jmp label21110
    
label21113:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21111
    jmp label21112
    
label21115:
    movq $2, %rcx
    jmp label21113
    
label21114:
    movq $1, %rcx
    jmp label21113
    
label21116:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21114
    jmp label21115
    
label21118:
    movq $2, -88(%rbp)
    jmp label21116
    
label21117:
    movq $1, -88(%rbp)
    jmp label21116
    
label21119:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21117
    jmp label21118
    
label21121:
    movq $2, -80(%rbp)
    jmp label21119
    
label21120:
    movq $1, -80(%rbp)
    jmp label21119
    
label21122:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21120
    jmp label21121
    
label21123:
    movq $1, %r14
    jmp label21122
    
label21124:
    movq $2, %r14
    jmp label21122
    
label21125:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21123
    jmp label21124
    
label21127:
    movq $2, %r13
    jmp label21125
    
label21126:
    movq $1, %r13
    jmp label21125
    
label21129:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    
label21130:
    cmpq $1, %rcx
    je label21128
    jmp label21129
    
label21132:
    movq $0, %rcx
    jmp label21130
    
label21131:
    movq $1, %rcx
    jmp label21130
    
label21133:
    cmpq $8, %rcx
    jg label21131
    jmp label21132
    
label21135:
    movq $9, %rcx
    jmp label21133
    
label21134:
    movq $8, %rcx
    jmp label21133
    
start:
    cmpq $1, $1
    jge label21134
    jmp label21135
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21043 temp21085)
 (list a21042 temp21081)
 (list a21041 temp21077)
 (list temp21073 a21040)
 (list a21040 temp21073)
 (list a21039 temp21069)
 (list temp21069 a21039)
 (list a21037 temp21060)
 (list a21036 temp21056)
 (list temp21068 temp21064)
 (list a21035 temp21052)
 (list temp21064 temp21068)
 (list temp21060 a21037)
 (list temp21092 a21045)
 (list temp21056 a21036)
 (list temp21088 a21044)
 (list temp21085 a21043)
 (list temp21052 a21035)
 (list temp21081 a21042)
 (list a21045 temp21092)
 (list temp21077 a21041)
 (list a21044 temp21088))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp21068 7)
 (cons a21044 8)
 (cons a21034 9)
 (cons a21035 10)
 (cons a21040 11)
 (cons a21041 12)
 (cons a21042 13)
 (cons a21043 14)
 (cons a21036 15)
 (cons a21037 16)
 (cons a21039 17)
 (cons a21045 0)
 (cons temp21092 0)
 (cons temp21088 1)
 (cons temp21094 0)
 (cons temp21085 0)
 (cons temp21090 0)
 (cons temp21081 1)
 (cons temp21077 0)
 (cons temp21083 0)
 (cons temp21073 1)
 (cons temp21079 0)
 (cons temp21069 0)
 (cons temp21075 0)
 (cons temp21071 0)
 (cons temp21064 1)
 (cons temp21060 0)
 (cons a21038 0)
 (cons temp21066 0)
 (cons temp21056 1)
 (cons temp21052 0)
 (cons temp21062 0)
 (cons temp21058 0)
 (cons temp21054 0)
 (cons temp21047 0)
 (cons x21033 0)
 (cons temp21050 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21095:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %r13, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21097:
    movq $2, %rcx
    jmp label21095
    
label21096:
    movq $1, %rcx
    jmp label21095
    
label21098:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21096
    jmp label21097
    
label21100:
    movq $2, %r12
    jmp label21098
    
label21099:
    movq $1, %r12
    jmp label21098
    
label21101:
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21099
    jmp label21100
    
label21103:
    movq $2, -64(%rbp)
    jmp label21101
    
label21102:
    movq $1, -64(%rbp)
    jmp label21101
    
label21104:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21102
    jmp label21103
    
label21106:
    movq $2, -56(%rbp)
    jmp label21104
    
label21105:
    movq $1, -56(%rbp)
    jmp label21104
    
label21107:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21105
    jmp label21106
    
label21109:
    movq $2, -48(%rbp)
    jmp label21107
    
label21108:
    movq $1, -48(%rbp)
    jmp label21107
    
label21110:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21108
    jmp label21109
    
label21111:
    movq $1, -96(%rbp)
    jmp label21110
    
label21112:
    movq $2, -96(%rbp)
    jmp label21110
    
label21113:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21111
    jmp label21112
    
label21115:
    movq $2, %rcx
    jmp label21113
    
label21114:
    movq $1, %rcx
    jmp label21113
    
label21116:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21114
    jmp label21115
    
label21118:
    movq $2, -88(%rbp)
    jmp label21116
    
label21117:
    movq $1, -88(%rbp)
    jmp label21116
    
label21119:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21117
    jmp label21118
    
label21121:
    movq $2, -80(%rbp)
    jmp label21119
    
label21120:
    movq $1, -80(%rbp)
    jmp label21119
    
label21122:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21120
    jmp label21121
    
label21123:
    movq $1, %r14
    jmp label21122
    
label21124:
    movq $2, %r14
    jmp label21122
    
label21125:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21123
    jmp label21124
    
label21127:
    movq $2, %r13
    jmp label21125
    
label21126:
    movq $1, %r13
    jmp label21125
    
label21129:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    
label21130:
    cmpq $1, %rcx
    je label21128
    jmp label21129
    
label21132:
    movq $0, %rcx
    jmp label21130
    
label21131:
    movq $1, %rcx
    jmp label21130
    
label21133:
    cmpq $8, %rcx
    jg label21131
    jmp label21132
    
label21135:
    movq $9, %rcx
    jmp label21133
    
label21134:
    movq $8, %rcx
    jmp label21133
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21134
    jmp label21135
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21043 temp21085)
 (list a21042 temp21081)
 (list a21041 temp21077)
 (list temp21073 a21040)
 (list a21040 temp21073)
 (list a21039 temp21069)
 (list temp21069 a21039)
 (list a21037 temp21060)
 (list a21036 temp21056)
 (list temp21068 temp21064)
 (list a21035 temp21052)
 (list temp21064 temp21068)
 (list temp21060 a21037)
 (list temp21092 a21045)
 (list temp21056 a21036)
 (list temp21088 a21044)
 (list temp21085 a21043)
 (list temp21052 a21035)
 (list temp21081 a21042)
 (list a21045 temp21092)
 (list temp21077 a21041)
 (list a21044 temp21088))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp21068 7)
 (cons a21044 8)
 (cons a21034 9)
 (cons a21035 10)
 (cons a21040 11)
 (cons a21041 12)
 (cons a21042 13)
 (cons a21043 14)
 (cons a21036 15)
 (cons a21037 16)
 (cons a21039 17)
 (cons a21045 0)
 (cons temp21092 0)
 (cons temp21088 1)
 (cons temp21094 0)
 (cons temp21085 0)
 (cons temp21090 0)
 (cons temp21081 1)
 (cons temp21077 0)
 (cons temp21083 0)
 (cons temp21073 1)
 (cons temp21079 0)
 (cons temp21069 0)
 (cons temp21075 0)
 (cons temp21071 0)
 (cons temp21064 1)
 (cons temp21060 0)
 (cons a21038 0)
 (cons temp21066 0)
 (cons temp21056 1)
 (cons temp21052 0)
 (cons temp21062 0)
 (cons temp21058 0)
 (cons temp21054 0)
 (cons temp21047 0)
 (cons x21033 0)
 (cons temp21050 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21095:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %r13, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21097:
    movq $2, %rcx
    jmp label21095
    
label21096:
    movq $1, %rcx
    jmp label21095
    
label21098:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21096
    jmp label21097
    
label21100:
    movq $2, %r12
    jmp label21098
    
label21099:
    movq $1, %r12
    jmp label21098
    
label21101:
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21099
    jmp label21100
    
label21103:
    movq $2, -64(%rbp)
    jmp label21101
    
label21102:
    movq $1, -64(%rbp)
    jmp label21101
    
label21104:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21102
    jmp label21103
    
label21106:
    movq $2, -56(%rbp)
    jmp label21104
    
label21105:
    movq $1, -56(%rbp)
    jmp label21104
    
label21107:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21105
    jmp label21106
    
label21109:
    movq $2, -48(%rbp)
    jmp label21107
    
label21108:
    movq $1, -48(%rbp)
    jmp label21107
    
label21110:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21108
    jmp label21109
    
label21111:
    movq $1, -96(%rbp)
    jmp label21110
    
label21112:
    movq $2, -96(%rbp)
    jmp label21110
    
label21113:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21111
    jmp label21112
    
label21115:
    movq $2, %rcx
    jmp label21113
    
label21114:
    movq $1, %rcx
    jmp label21113
    
label21116:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21114
    jmp label21115
    
label21118:
    movq $2, -88(%rbp)
    jmp label21116
    
label21117:
    movq $1, -88(%rbp)
    jmp label21116
    
label21119:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21117
    jmp label21118
    
label21121:
    movq $2, -80(%rbp)
    jmp label21119
    
label21120:
    movq $1, -80(%rbp)
    jmp label21119
    
label21122:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21120
    jmp label21121
    
label21123:
    movq $1, %r14
    jmp label21122
    
label21124:
    movq $2, %r14
    jmp label21122
    
label21125:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21123
    jmp label21124
    
label21127:
    movq $2, %r13
    jmp label21125
    
label21126:
    movq $1, %r13
    jmp label21125
    
label21129:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    
label21130:
    cmpq $1, %rcx
    je label21128
    jmp label21129
    
label21132:
    movq $0, %rcx
    jmp label21130
    
label21131:
    movq $1, %rcx
    jmp label21130
    
label21133:
    cmpq $8, %rcx
    jg label21131
    jmp label21132
    
label21135:
    movq $9, %rcx
    jmp label21133
    
label21134:
    movq $8, %rcx
    jmp label21133
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21134
    jmp label21135
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21043 temp21085)
 (list a21042 temp21081)
 (list a21041 temp21077)
 (list temp21073 a21040)
 (list a21040 temp21073)
 (list a21039 temp21069)
 (list temp21069 a21039)
 (list a21037 temp21060)
 (list a21036 temp21056)
 (list temp21068 temp21064)
 (list a21035 temp21052)
 (list temp21064 temp21068)
 (list temp21060 a21037)
 (list temp21092 a21045)
 (list temp21056 a21036)
 (list temp21088 a21044)
 (list temp21085 a21043)
 (list temp21052 a21035)
 (list temp21081 a21042)
 (list a21045 temp21092)
 (list temp21077 a21041)
 (list a21044 temp21088))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp21068 7)
 (cons a21044 8)
 (cons a21034 9)
 (cons a21035 10)
 (cons a21040 11)
 (cons a21041 12)
 (cons a21042 13)
 (cons a21043 14)
 (cons a21036 15)
 (cons a21037 16)
 (cons a21039 17)
 (cons a21045 0)
 (cons temp21092 0)
 (cons temp21088 1)
 (cons temp21094 0)
 (cons temp21085 0)
 (cons temp21090 0)
 (cons temp21081 1)
 (cons temp21077 0)
 (cons temp21083 0)
 (cons temp21073 1)
 (cons temp21079 0)
 (cons temp21069 0)
 (cons temp21075 0)
 (cons temp21071 0)
 (cons temp21064 1)
 (cons temp21060 0)
 (cons a21038 0)
 (cons temp21066 0)
 (cons temp21056 1)
 (cons temp21052 0)
 (cons temp21062 0)
 (cons temp21058 0)
 (cons temp21054 0)
 (cons temp21047 0)
 (cons x21033 0)
 (cons temp21050 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21095:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %r13, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21097:
    movq $2, %rcx
    jmp label21095
    
label21096:
    movq $1, %rcx
    jmp label21095
    
label21098:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21096
    jmp label21097
    
label21100:
    movq $2, %r12
    jmp label21098
    
label21099:
    movq $1, %r12
    jmp label21098
    
label21101:
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21099
    jmp label21100
    
label21103:
    movq $2, -64(%rbp)
    jmp label21101
    
label21102:
    movq $1, -64(%rbp)
    jmp label21101
    
label21104:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21102
    jmp label21103
    
label21106:
    movq $2, -56(%rbp)
    jmp label21104
    
label21105:
    movq $1, -56(%rbp)
    jmp label21104
    
label21107:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21105
    jmp label21106
    
label21109:
    movq $2, -48(%rbp)
    jmp label21107
    
label21108:
    movq $1, -48(%rbp)
    jmp label21107
    
label21110:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21108
    jmp label21109
    
label21111:
    movq $1, -96(%rbp)
    jmp label21110
    
label21112:
    movq $2, -96(%rbp)
    jmp label21110
    
label21113:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21111
    jmp label21112
    
label21115:
    movq $2, %rcx
    jmp label21113
    
label21114:
    movq $1, %rcx
    jmp label21113
    
label21116:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21114
    jmp label21115
    
label21118:
    movq $2, -88(%rbp)
    jmp label21116
    
label21117:
    movq $1, -88(%rbp)
    jmp label21116
    
label21119:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21117
    jmp label21118
    
label21121:
    movq $2, -80(%rbp)
    jmp label21119
    
label21120:
    movq $1, -80(%rbp)
    jmp label21119
    
label21122:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21120
    jmp label21121
    
label21123:
    movq $1, %r14
    jmp label21122
    
label21124:
    movq $2, %r14
    jmp label21122
    
label21125:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21123
    jmp label21124
    
label21127:
    movq $2, %r13
    jmp label21125
    
label21126:
    movq $1, %r13
    jmp label21125
    
label21129:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    
label21130:
    cmpq $1, %rcx
    je label21128
    jmp label21129
    
label21132:
    movq $0, %rcx
    jmp label21130
    
label21131:
    movq $1, %rcx
    jmp label21130
    
label21133:
    cmpq $8, %rcx
    jg label21131
    jmp label21132
    
label21135:
    movq $9, %rcx
    jmp label21133
    
label21134:
    movq $8, %rcx
    jmp label21133
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21134
    jmp label21135
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21085 : 'Integer, temp21090 : 'Integer, temp21088 : 'Integer, temp21079 : 'Integer, temp21077 : 'Integer, temp21083 : 'Integer, temp21081 : 'Integer, a21039 : 'Integer, a21038 : 'Integer, a21037 : 'Integer, a21036 : 'Integer, a21043 : 'Integer, a21042 : 'Integer, a21041 : 'Integer, a21040 : 'Integer, temp21094 : 'Integer, temp21092 : 'Integer, a21035 : 'Integer, a21034 : 'Integer, x21033 : 'Boolean, temp21054 : 'Integer, temp21052 : 'Integer, temp21058 : 'Integer, temp21056 : 'Integer, temp21047 : 'Integer, a21045 : 'Integer, a21044 : 'Integer, temp21050 : 'Integer, temp21071 : 'Integer, temp21069 : 'Integer, temp21068 : 'Integer, temp21075 : 'Integer, temp21073 : 'Integer, temp21062 : 'Integer, temp21060 : 'Integer, temp21066 : 'Integer, temp21064 : 'Integer, 
tsorted
:
'(label21095
  label21097
  label21096
  label21098
  label21100
  label21099
  label21101
  label21103
  label21102
  label21104
  label21106
  label21105
  label21107
  label21109
  label21108
  label21110
  label21111
  label21112
  label21113
  label21115
  label21114
  label21116
  label21118
  label21117
  label21119
  label21121
  label21120
  label21122
  label21123
  label21124
  label21125
  label21127
  label21126
  label21129
  label21128
  label21130
  label21132
  label21131
  label21133
  label21135
  label21134
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21043 temp21085)
 (list a21042 temp21081)
 (list a21041 temp21077)
 (list temp21073 a21040)
 (list a21040 temp21073)
 (list a21039 temp21069)
 (list temp21069 a21039)
 (list a21037 temp21060)
 (list a21036 temp21056)
 (list temp21068 temp21064)
 (list a21035 temp21052)
 (list temp21064 temp21068)
 (list temp21060 a21037)
 (list temp21092 a21045)
 (list temp21056 a21036)
 (list temp21088 a21044)
 (list temp21085 a21043)
 (list temp21052 a21035)
 (list temp21081 a21042)
 (list a21045 temp21092)
 (list temp21077 a21041)
 (list a21044 temp21088))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp21068 7)
 (cons a21044 8)
 (cons a21034 9)
 (cons a21035 10)
 (cons a21040 11)
 (cons a21041 12)
 (cons a21042 13)
 (cons a21043 14)
 (cons a21036 15)
 (cons a21037 16)
 (cons a21039 17)
 (cons a21045 0)
 (cons temp21092 0)
 (cons temp21088 1)
 (cons temp21094 0)
 (cons temp21085 0)
 (cons temp21090 0)
 (cons temp21081 1)
 (cons temp21077 0)
 (cons temp21083 0)
 (cons temp21073 1)
 (cons temp21079 0)
 (cons temp21069 0)
 (cons temp21075 0)
 (cons temp21071 0)
 (cons temp21064 1)
 (cons temp21060 0)
 (cons a21038 0)
 (cons temp21066 0)
 (cons temp21056 1)
 (cons temp21052 0)
 (cons temp21062 0)
 (cons temp21058 0)
 (cons temp21054 0)
 (cons temp21047 0)
 (cons x21033 0)
 (cons temp21050 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21095:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %r13, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21097:
    movq $2, %rcx
    jmp label21095
    
label21096:
    movq $1, %rcx
    jmp label21095
    
label21098:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21096
    jmp label21097
    
label21100:
    movq $2, %r12
    jmp label21098
    
label21099:
    movq $1, %r12
    jmp label21098
    
label21101:
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21099
    jmp label21100
    
label21103:
    movq $2, -64(%rbp)
    jmp label21101
    
label21102:
    movq $1, -64(%rbp)
    jmp label21101
    
label21104:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21102
    jmp label21103
    
label21106:
    movq $2, -56(%rbp)
    jmp label21104
    
label21105:
    movq $1, -56(%rbp)
    jmp label21104
    
label21107:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21105
    jmp label21106
    
label21109:
    movq $2, -48(%rbp)
    jmp label21107
    
label21108:
    movq $1, -48(%rbp)
    jmp label21107
    
label21110:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21108
    jmp label21109
    
label21111:
    movq $1, -96(%rbp)
    jmp label21110
    
label21112:
    movq $2, -96(%rbp)
    jmp label21110
    
label21113:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21111
    jmp label21112
    
label21115:
    movq $2, %rcx
    jmp label21113
    
label21114:
    movq $1, %rcx
    jmp label21113
    
label21116:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21114
    jmp label21115
    
label21118:
    movq $2, -88(%rbp)
    jmp label21116
    
label21117:
    movq $1, -88(%rbp)
    jmp label21116
    
label21119:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21117
    jmp label21118
    
label21121:
    movq $2, -80(%rbp)
    jmp label21119
    
label21120:
    movq $1, -80(%rbp)
    jmp label21119
    
label21122:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21120
    jmp label21121
    
label21123:
    movq $1, %r14
    jmp label21122
    
label21124:
    movq $2, %r14
    jmp label21122
    
label21125:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21123
    jmp label21124
    
label21127:
    movq $2, %r13
    jmp label21125
    
label21126:
    movq $1, %r13
    jmp label21125
    
label21129:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21126
    jmp label21127
    
label21128:
    movq $1, %rax
    jmp conclusion
    
label21130:
    cmpq $1, %rcx
    je label21128
    jmp label21129
    
label21132:
    movq $0, %rcx
    jmp label21130
    
label21131:
    movq $1, %rcx
    jmp label21130
    
label21133:
    cmpq $8, %rcx
    jg label21131
    jmp label21132
    
label21135:
    movq $9, %rcx
    jmp label21133
    
label21134:
    movq $8, %rcx
    jmp label21133
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21134
    jmp label21135
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_20"

expected-result:
22


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (> (read) 1)
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (> (read) 1)
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (> (read) 1)
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (> (read) 1)
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (> (read) 1)
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (> (read) 1)
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (> (read) 1)
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (> (read) 1)
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (> (read) 1)
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x21150 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x21150
      1
      (let ([a21151 (if (if (if (> (read) 1)
                               (let ([a21152 #t])
                                  a21152)
                               (let ([a21153 #f])
                                  a21153))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (+ a21151 (let ([a21154 (if (if (> (read) 1)
                                        (let ([a21155 #t])
                                           a21155)
                                        (let ([a21156 #f])
                                           a21156))
                                     
                                    1
                                    2)
                                 ])
                      (+ a21154 (let ([a21157 (if (if (> (read) 1)
                                                     (let ([a21158 #t])
                                                        a21158)
                                                     (let ([a21159 #f])
                                                        a21159))
                                                  
                                                 1
                                                 2)
                                              ])
                                   (+ a21157 (let ([a21160 (if (if (> (read) 1)
                                                                  (let ([a21161 #t])
                                                                     a21161)
                                                                  (let ([a21162 #f])
                                                                     a21162))
                                                               
                                                              1
                                                              2)
                                                           ])
                                                (+ a21160 (let ([a21163 (if (if (> (read) 1)
                                                                               (let ([a21164 #t])
                                                                                  a21164)
                                                                               (let ([a21165 #f])
                                                                                  a21165))
                                                                            
                                                                           1
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a21166 (if (if (> (read) 1)
                                                                                            (let ([a21167 #t])
                                                                                               a21167)
                                                                                            (let ([a21168 #f])
                                                                                               a21168))
                                                                                         
                                                                                        1
                                                                                        2)
                                                                                     ])
                                                                          (+ a21166 (let ([a21169 (if (if (> (read) 1)
                                                                                                         (let ([a21170 #t])
                                                                                                            a21170)
                                                                                                         (let ([a21171 #f])
                                                                                                            a21171))
                                                                                                      
                                                                                                     1
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a21169 (let ([a21172 (if (if (> (read) 1)
                                                                                                                      (let ([a21173 #t])
                                                                                                                         a21173)
                                                                                                                      (let ([a21174 #f])
                                                                                                                         a21174))
                                                                                                                   
                                                                                                                  1
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a21172 (let ([a21175 (if (if (> (read) 1)
                                                                                                                                   (let ([a21176 #t])
                                                                                                                                      a21176)
                                                                                                                                   (let ([a21177 #f])
                                                                                                                                      a21177))
                                                                                                                                
                                                                                                                               1
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a21175 (let ([a21178 (read)])
                                                                                                                              (+ a21178 (let ([a21179 (if (if (> (read) 1)
                                                                                                                                                             (let ([a21180 #t])
                                                                                                                                                                a21180)
                                                                                                                                                             (let ([a21181 #f])
                                                                                                                                                                a21181))
                                                                                                                                                          
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a21179 (let ([a21182 (if (if (> (read) 1)
                                                                                                                                                                          (let ([a21183 #t])
                                                                                                                                                                             a21183)
                                                                                                                                                                          (let ([a21184 #f])
                                                                                                                                                                             a21184))
                                                                                                                                                                       
                                                                                                                                                                      1
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a21182))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x21150 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x21150
      1
      (let ([a21151 (if (if (if (> (read) 1)
                               (let ([a21152 #t])
                                  a21152)
                               (let ([a21153 #f])
                                  a21153))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (+ a21151 (let ([a21154 (if (if (> (read) 1)
                                        (let ([a21155 #t])
                                           a21155)
                                        (let ([a21156 #f])
                                           a21156))
                                     
                                    1
                                    2)
                                 ])
                      (+ a21154 (let ([a21157 (if (if (> (read) 1)
                                                     (let ([a21158 #t])
                                                        a21158)
                                                     (let ([a21159 #f])
                                                        a21159))
                                                  
                                                 1
                                                 2)
                                              ])
                                   (+ a21157 (let ([a21160 (if (if (> (read) 1)
                                                                  (let ([a21161 #t])
                                                                     a21161)
                                                                  (let ([a21162 #f])
                                                                     a21162))
                                                               
                                                              1
                                                              2)
                                                           ])
                                                (+ a21160 (let ([a21163 (if (if (> (read) 1)
                                                                               (let ([a21164 #t])
                                                                                  a21164)
                                                                               (let ([a21165 #f])
                                                                                  a21165))
                                                                            
                                                                           1
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a21166 (if (if (> (read) 1)
                                                                                            (let ([a21167 #t])
                                                                                               a21167)
                                                                                            (let ([a21168 #f])
                                                                                               a21168))
                                                                                         
                                                                                        1
                                                                                        2)
                                                                                     ])
                                                                          (+ a21166 (let ([a21169 (if (if (> (read) 1)
                                                                                                         (let ([a21170 #t])
                                                                                                            a21170)
                                                                                                         (let ([a21171 #f])
                                                                                                            a21171))
                                                                                                      
                                                                                                     1
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a21169 (let ([a21172 (if (if (> (read) 1)
                                                                                                                      (let ([a21173 #t])
                                                                                                                         a21173)
                                                                                                                      (let ([a21174 #f])
                                                                                                                         a21174))
                                                                                                                   
                                                                                                                  1
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a21172 (let ([a21175 (if (if (> (read) 1)
                                                                                                                                   (let ([a21176 #t])
                                                                                                                                      a21176)
                                                                                                                                   (let ([a21177 #f])
                                                                                                                                      a21177))
                                                                                                                                
                                                                                                                               1
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a21175 (let ([a21178 (read)])
                                                                                                                              (+ a21178 (let ([a21179 (if (if (> (read) 1)
                                                                                                                                                             (let ([a21180 #t])
                                                                                                                                                                a21180)
                                                                                                                                                             (let ([a21181 #f])
                                                                                                                                                                a21181))
                                                                                                                                                          
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a21179 (let ([a21182 (if (if (> (read) 1)
                                                                                                                                                                          (let ([a21183 #t])
                                                                                                                                                                             a21183)
                                                                                                                                                                          (let ([a21184 #f])
                                                                                                                                                                             a21184))
                                                                                                                                                                       
                                                                                                                                                                      1
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a21182))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x21150 (if (let ([temp21186 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp21186 8))
                 #t
                 #f)
              ])
   (if x21150
      1
      (let ([a21151 (if (if (if (let ([temp21189 (read)])
                                   (> temp21189 1))
                               (let ([a21152 #t])
                                  a21152)
                               (let ([a21153 #f])
                                  a21153))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (let ([a21154 (if (if (let ([temp21193 (read)])
                                  (> temp21193 1))
                              (let ([a21155 #t])
                                 a21155)
                              (let ([a21156 #f])
                                 a21156))
                           
                          1
                          2)
                       ])
            (let ([temp21191 (let ([a21157 (if (if (let ([temp21197 (read)])
                                                      (> temp21197 1))
                                                  (let ([a21158 #t])
                                                     a21158)
                                                  (let ([a21159 #f])
                                                     a21159))
                                               
                                              1
                                              2)
                                           ])
                                (let ([temp21195 (let ([a21160 (if (if (let ([temp21201 (read)])
                                                                          (> temp21201 1))
                                                                      (let ([a21161 #t])
                                                                         a21161)
                                                                      (let ([a21162 #f])
                                                                         a21162))
                                                                   
                                                                  1
                                                                  2)
                                                               ])
                                                    (let ([temp21199 (let ([a21163 (if (if (let ([temp21205 (read)])
                                                                                              (> temp21205 1))
                                                                                          (let ([a21164 #t])
                                                                                             a21164)
                                                                                          (let ([a21165 #f])
                                                                                             a21165))
                                                                                       
                                                                                      1
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp21203 (let ([temp21207 (read)])
                                                                                            (let ([a21166 (if (if (let ([temp21210 (read)])
                                                                                                                     (> temp21210 1))
                                                                                                                 (let ([a21167 #t])
                                                                                                                    a21167)
                                                                                                                 (let ([a21168 #f])
                                                                                                                    a21168))
                                                                                                              
                                                                                                             1
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp21208 (let ([a21169 (if (if (let ([temp21214 (read)])
                                                                                                                                         (> temp21214 1))
                                                                                                                                     (let ([a21170 #t])
                                                                                                                                        a21170)
                                                                                                                                     (let ([a21171 #f])
                                                                                                                                        a21171))
                                                                                                                                  
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp21212 (let ([a21172 (if (if (let ([temp21218 (read)])
                                                                                                                                                             (> temp21218 1))
                                                                                                                                                         (let ([a21173 #t])
                                                                                                                                                            a21173)
                                                                                                                                                         (let ([a21174 #f])
                                                                                                                                                            a21174))
                                                                                                                                                      
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp21216 (let ([a21175 (if (if (let ([temp21222 (read)])
                                                                                                                                                                                 (> temp21222 1))
                                                                                                                                                                             (let ([a21176 #t])
                                                                                                                                                                                a21176)
                                                                                                                                                                             (let ([a21177 #f])
                                                                                                                                                                                a21177))
                                                                                                                                                                          
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp21220 (let ([a21178 (read)])
                                                                                                                                                                               (let ([temp21224 (let ([a21179 (if (if (let ([temp21229 (read)])
                                                                                                                                                                                                                         (> temp21229 1))
                                                                                                                                                                                                                     (let ([a21180 #t])
                                                                                                                                                                                                                        a21180)
                                                                                                                                                                                                                     (let ([a21181 #f])
                                                                                                                                                                                                                        a21181))
                                                                                                                                                                                                                  
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp21227 (let ([a21182 (if (if (let ([temp21233 (read)])
                                                                                                                                                                                                                                             (> temp21233 1))
                                                                                                                                                                                                                                         (let ([a21183 #t])
                                                                                                                                                                                                                                            a21183)
                                                                                                                                                                                                                                         (let ([a21184 #f])
                                                                                                                                                                                                                                            a21184))
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp21231 a21182])
                                                                                                                                                                                                                          (+ a21179 temp21231)))])
                                                                                                                                                                                                      (+ a21178 temp21227)))])
                                                                                                                                                                                  (+ a21175 temp21224)))])
                                                                                                                                                              (+ a21172 temp21220)))])
                                                                                                                                          (+ a21169 temp21216)))])
                                                                                                                      (+ a21166 temp21212)))])
                                                                                                  (+ temp21207 temp21208))))])
                                                                           (+ a21160 temp21203)))])
                                                       (+ a21157 temp21199)))])
                                   (+ a21154 temp21195)))])
               (+ a21151 temp21191)))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x21150 (if (let ([temp21186 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp21186 8))
                 #t
                 #f)
              ])
   (if x21150
      1
      (let ([a21151 (if (if (if (let ([temp21189 (read)])
                                   (> temp21189 1))
                               (let ([a21152 #t])
                                  a21152)
                               (let ([a21153 #f])
                                  a21153))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (let ([a21154 (if (if (let ([temp21193 (read)])
                                  (> temp21193 1))
                              (let ([a21155 #t])
                                 a21155)
                              (let ([a21156 #f])
                                 a21156))
                           
                          1
                          2)
                       ])
            (let ([temp21191 (let ([a21157 (if (if (let ([temp21197 (read)])
                                                      (> temp21197 1))
                                                  (let ([a21158 #t])
                                                     a21158)
                                                  (let ([a21159 #f])
                                                     a21159))
                                               
                                              1
                                              2)
                                           ])
                                (let ([temp21195 (let ([a21160 (if (if (let ([temp21201 (read)])
                                                                          (> temp21201 1))
                                                                      (let ([a21161 #t])
                                                                         a21161)
                                                                      (let ([a21162 #f])
                                                                         a21162))
                                                                   
                                                                  1
                                                                  2)
                                                               ])
                                                    (let ([temp21199 (let ([a21163 (if (if (let ([temp21205 (read)])
                                                                                              (> temp21205 1))
                                                                                          (let ([a21164 #t])
                                                                                             a21164)
                                                                                          (let ([a21165 #f])
                                                                                             a21165))
                                                                                       
                                                                                      1
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp21203 (let ([temp21207 (read)])
                                                                                            (let ([a21166 (if (if (let ([temp21210 (read)])
                                                                                                                     (> temp21210 1))
                                                                                                                 (let ([a21167 #t])
                                                                                                                    a21167)
                                                                                                                 (let ([a21168 #f])
                                                                                                                    a21168))
                                                                                                              
                                                                                                             1
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp21208 (let ([a21169 (if (if (let ([temp21214 (read)])
                                                                                                                                         (> temp21214 1))
                                                                                                                                     (let ([a21170 #t])
                                                                                                                                        a21170)
                                                                                                                                     (let ([a21171 #f])
                                                                                                                                        a21171))
                                                                                                                                  
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp21212 (let ([a21172 (if (if (let ([temp21218 (read)])
                                                                                                                                                             (> temp21218 1))
                                                                                                                                                         (let ([a21173 #t])
                                                                                                                                                            a21173)
                                                                                                                                                         (let ([a21174 #f])
                                                                                                                                                            a21174))
                                                                                                                                                      
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp21216 (let ([a21175 (if (if (let ([temp21222 (read)])
                                                                                                                                                                                 (> temp21222 1))
                                                                                                                                                                             (let ([a21176 #t])
                                                                                                                                                                                a21176)
                                                                                                                                                                             (let ([a21177 #f])
                                                                                                                                                                                a21177))
                                                                                                                                                                          
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp21220 (let ([a21178 (read)])
                                                                                                                                                                               (let ([temp21224 (let ([a21179 (if (if (let ([temp21229 (read)])
                                                                                                                                                                                                                         (> temp21229 1))
                                                                                                                                                                                                                     (let ([a21180 #t])
                                                                                                                                                                                                                        a21180)
                                                                                                                                                                                                                     (let ([a21181 #f])
                                                                                                                                                                                                                        a21181))
                                                                                                                                                                                                                  
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp21227 (let ([a21182 (if (if (let ([temp21233 (read)])
                                                                                                                                                                                                                                             (> temp21233 1))
                                                                                                                                                                                                                                         (let ([a21183 #t])
                                                                                                                                                                                                                                            a21183)
                                                                                                                                                                                                                                         (let ([a21184 #f])
                                                                                                                                                                                                                                            a21184))
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp21231 a21182])
                                                                                                                                                                                                                          (+ a21179 temp21231)))])
                                                                                                                                                                                                      (+ a21178 temp21227)))])
                                                                                                                                                                                  (+ a21175 temp21224)))])
                                                                                                                                                              (+ a21172 temp21220)))])
                                                                                                                                          (+ a21169 temp21216)))])
                                                                                                                      (+ a21166 temp21212)))])
                                                                                                  (+ temp21207 temp21208))))])
                                                                           (+ a21160 temp21203)))])
                                                       (+ a21157 temp21199)))])
                                   (+ a21154 temp21195)))])
               (+ a21151 temp21191)))))
   )


output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label21280:
    a21154 = 1;
    goto label21279;
label21281:
    a21154 = 2;
    goto label21279;
label21282:
    a21155 = #t;
    if (eq? a21155 #t)
       goto label21280;
    else
       goto label21281;
label21283:
    a21156 = #f;
    if (eq? a21156 #t)
       goto label21280;
    else
       goto label21281;
label21276:
    a21157 = 2;
    goto label21274;
label21277:
    a21158 = #t;
    if (eq? a21158 #t)
       goto label21275;
    else
       goto label21276;
label21278:
    a21159 = #f;
    if (eq? a21159 #t)
       goto label21275;
    else
       goto label21276;
label21279:
    temp21197 = (read);
    if (> temp21197 1)
       goto label21277;
    else
       goto label21278;
label21272:
    a21161 = #t;
    if (eq? a21161 #t)
       goto label21270;
    else
       goto label21271;
label21273:
    a21162 = #f;
    if (eq? a21162 #t)
       goto label21270;
    else
       goto label21271;
label21274:
    temp21201 = (read);
    if (> temp21201 1)
       goto label21272;
    else
       goto label21273;
label21275:
    a21157 = 1;
    goto label21274;
label21268:
    a21165 = #f;
    if (eq? a21165 #t)
       goto label21265;
    else
       goto label21266;
label21269:
    temp21205 = (read);
    if (> temp21205 1)
       goto label21267;
    else
       goto label21268;
label21270:
    a21160 = 1;
    goto label21269;
label21271:
    a21160 = 2;
    goto label21269;
label21296:
    temp21186 = 9;
    goto label21294;
label21234:
    temp21231 = a21182;
    temp21227 = (+ a21179 temp21231);
    temp21224 = (+ a21178 temp21227);
    temp21220 = (+ a21175 temp21224);
    temp21216 = (+ a21172 temp21220);
    temp21212 = (+ a21169 temp21216);
    temp21208 = (+ a21166 temp21212);
    temp21203 = (+ temp21207 temp21208);
    temp21199 = (+ a21160 temp21203);
    temp21195 = (+ a21157 temp21199);
    temp21191 = (+ a21154 temp21195);
    return (+ a21151 temp21191);
label21235:
    a21182 = 1;
    goto label21234;
label21292:
    x21150 = #t;
    goto label21291;
label21293:
    x21150 = #f;
    goto label21291;
label21294:
    if (> temp21186 8)
       goto label21292;
    else
       goto label21293;
label21295:
    temp21186 = 8;
    goto label21294;
label21288:
    a21153 = #f;
    if (eq? a21153 #t)
       goto label21285;
    else
       goto label21286;
label21289:
    return 1;
label21290:
    temp21189 = (read);
    if (> temp21189 1)
       goto label21287;
    else
       goto label21288;
label21291:
    if (eq? x21150 #t)
       goto label21289;
    else
       goto label21290;
label21284:
    temp21193 = (read);
    if (> temp21193 1)
       goto label21282;
    else
       goto label21283;
label21285:
    a21151 = 1;
    goto label21284;
label21286:
    a21151 = 2;
    goto label21284;
label21287:
    a21152 = #t;
    if (eq? a21152 #t)
       goto label21285;
    else
       goto label21286;
label21248:
    a21177 = #f;
    if (eq? a21177 #t)
       goto label21245;
    else
       goto label21246;
label21249:
    temp21222 = (read);
    if (> temp21222 1)
       goto label21247;
    else
       goto label21248;
label21250:
    a21172 = 1;
    goto label21249;
label21251:
    a21172 = 2;
    goto label21249;
label21244:
    a21178 = (read);
    temp21229 = (read);
    if (> temp21229 1)
       goto label21242;
    else
       goto label21243;
label21245:
    a21175 = 1;
    goto label21244;
label21246:
    a21175 = 2;
    goto label21244;
label21247:
    a21176 = #t;
    if (eq? a21176 #t)
       goto label21245;
    else
       goto label21246;
label21240:
    a21179 = 1;
    goto label21239;
label21241:
    a21179 = 2;
    goto label21239;
label21242:
    a21180 = #t;
    if (eq? a21180 #t)
       goto label21240;
    else
       goto label21241;
label21243:
    a21181 = #f;
    if (eq? a21181 #t)
       goto label21240;
    else
       goto label21241;
label21236:
    a21182 = 2;
    goto label21234;
label21237:
    a21183 = #t;
    if (eq? a21183 #t)
       goto label21235;
    else
       goto label21236;
label21238:
    a21184 = #f;
    if (eq? a21184 #t)
       goto label21235;
    else
       goto label21236;
label21239:
    temp21233 = (read);
    if (> temp21233 1)
       goto label21237;
    else
       goto label21238;
label21264:
    temp21207 = (read);
    temp21210 = (read);
    if (> temp21210 1)
       goto label21262;
    else
       goto label21263;
label21265:
    a21163 = 1;
    goto label21264;
label21266:
    a21163 = 2;
    goto label21264;
label21267:
    a21164 = #t;
    if (eq? a21164 #t)
       goto label21265;
    else
       goto label21266;
label21260:
    a21166 = 1;
    goto label21259;
label21261:
    a21166 = 2;
    goto label21259;
label21262:
    a21167 = #t;
    if (eq? a21167 #t)
       goto label21260;
    else
       goto label21261;
label21263:
    a21168 = #f;
    if (eq? a21168 #t)
       goto label21260;
    else
       goto label21261;
label21256:
    a21169 = 2;
    goto label21254;
start:
    if (>= 1 1)
       goto label21295;
    else
       goto label21296;
label21257:
    a21170 = #t;
    if (eq? a21170 #t)
       goto label21255;
    else
       goto label21256;
label21258:
    a21171 = #f;
    if (eq? a21171 #t)
       goto label21255;
    else
       goto label21256;
label21259:
    temp21214 = (read);
    if (> temp21214 1)
       goto label21257;
    else
       goto label21258;
label21252:
    a21173 = #t;
    if (eq? a21173 #t)
       goto label21250;
    else
       goto label21251;
label21253:
    a21174 = #f;
    if (eq? a21174 #t)
       goto label21250;
    else
       goto label21251;
label21254:
    temp21218 = (read);
    if (> temp21218 1)
       goto label21252;
    else
       goto label21253;
label21255:
    a21169 = 1;
    goto label21254;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
label21280:
    a21154 = 1;
    goto label21279;
label21281:
    a21154 = 2;
    goto label21279;
label21282:
    a21155 = #t;
    if (eq? a21155 #t)
       goto label21280;
    else
       goto label21281;
label21283:
    a21156 = #f;
    if (eq? a21156 #t)
       goto label21280;
    else
       goto label21281;
label21276:
    a21157 = 2;
    goto label21274;
label21277:
    a21158 = #t;
    if (eq? a21158 #t)
       goto label21275;
    else
       goto label21276;
label21278:
    a21159 = #f;
    if (eq? a21159 #t)
       goto label21275;
    else
       goto label21276;
label21279:
    temp21197 = (read);
    if (> temp21197 1)
       goto label21277;
    else
       goto label21278;
label21272:
    a21161 = #t;
    if (eq? a21161 #t)
       goto label21270;
    else
       goto label21271;
label21273:
    a21162 = #f;
    if (eq? a21162 #t)
       goto label21270;
    else
       goto label21271;
label21274:
    temp21201 = (read);
    if (> temp21201 1)
       goto label21272;
    else
       goto label21273;
label21275:
    a21157 = 1;
    goto label21274;
label21268:
    a21165 = #f;
    if (eq? a21165 #t)
       goto label21265;
    else
       goto label21266;
label21269:
    temp21205 = (read);
    if (> temp21205 1)
       goto label21267;
    else
       goto label21268;
label21270:
    a21160 = 1;
    goto label21269;
label21271:
    a21160 = 2;
    goto label21269;
label21296:
    temp21186 = 9;
    goto label21294;
label21234:
    temp21231 = a21182;
    temp21227 = (+ a21179 temp21231);
    temp21224 = (+ a21178 temp21227);
    temp21220 = (+ a21175 temp21224);
    temp21216 = (+ a21172 temp21220);
    temp21212 = (+ a21169 temp21216);
    temp21208 = (+ a21166 temp21212);
    temp21203 = (+ temp21207 temp21208);
    temp21199 = (+ a21160 temp21203);
    temp21195 = (+ a21157 temp21199);
    temp21191 = (+ a21154 temp21195);
    return (+ a21151 temp21191);
label21235:
    a21182 = 1;
    goto label21234;
label21292:
    x21150 = #t;
    goto label21291;
label21293:
    x21150 = #f;
    goto label21291;
label21294:
    if (> temp21186 8)
       goto label21292;
    else
       goto label21293;
label21295:
    temp21186 = 8;
    goto label21294;
label21288:
    a21153 = #f;
    if (eq? a21153 #t)
       goto label21285;
    else
       goto label21286;
label21289:
    return 1;
label21290:
    temp21189 = (read);
    if (> temp21189 1)
       goto label21287;
    else
       goto label21288;
label21291:
    if (eq? x21150 #t)
       goto label21289;
    else
       goto label21290;
label21284:
    temp21193 = (read);
    if (> temp21193 1)
       goto label21282;
    else
       goto label21283;
label21285:
    a21151 = 1;
    goto label21284;
label21286:
    a21151 = 2;
    goto label21284;
label21287:
    a21152 = #t;
    if (eq? a21152 #t)
       goto label21285;
    else
       goto label21286;
label21248:
    a21177 = #f;
    if (eq? a21177 #t)
       goto label21245;
    else
       goto label21246;
label21249:
    temp21222 = (read);
    if (> temp21222 1)
       goto label21247;
    else
       goto label21248;
label21250:
    a21172 = 1;
    goto label21249;
label21251:
    a21172 = 2;
    goto label21249;
label21244:
    a21178 = (read);
    temp21229 = (read);
    if (> temp21229 1)
       goto label21242;
    else
       goto label21243;
label21245:
    a21175 = 1;
    goto label21244;
label21246:
    a21175 = 2;
    goto label21244;
label21247:
    a21176 = #t;
    if (eq? a21176 #t)
       goto label21245;
    else
       goto label21246;
label21240:
    a21179 = 1;
    goto label21239;
label21241:
    a21179 = 2;
    goto label21239;
label21242:
    a21180 = #t;
    if (eq? a21180 #t)
       goto label21240;
    else
       goto label21241;
label21243:
    a21181 = #f;
    if (eq? a21181 #t)
       goto label21240;
    else
       goto label21241;
label21236:
    a21182 = 2;
    goto label21234;
label21237:
    a21183 = #t;
    if (eq? a21183 #t)
       goto label21235;
    else
       goto label21236;
label21238:
    a21184 = #f;
    if (eq? a21184 #t)
       goto label21235;
    else
       goto label21236;
label21239:
    temp21233 = (read);
    if (> temp21233 1)
       goto label21237;
    else
       goto label21238;
label21264:
    temp21207 = (read);
    temp21210 = (read);
    if (> temp21210 1)
       goto label21262;
    else
       goto label21263;
label21265:
    a21163 = 1;
    goto label21264;
label21266:
    a21163 = 2;
    goto label21264;
label21267:
    a21164 = #t;
    if (eq? a21164 #t)
       goto label21265;
    else
       goto label21266;
label21260:
    a21166 = 1;
    goto label21259;
label21261:
    a21166 = 2;
    goto label21259;
label21262:
    a21167 = #t;
    if (eq? a21167 #t)
       goto label21260;
    else
       goto label21261;
label21263:
    a21168 = #f;
    if (eq? a21168 #t)
       goto label21260;
    else
       goto label21261;
label21256:
    a21169 = 2;
    goto label21254;
start:
    if (>= 1 1)
       goto label21295;
    else
       goto label21296;
label21257:
    a21170 = #t;
    if (eq? a21170 #t)
       goto label21255;
    else
       goto label21256;
label21258:
    a21171 = #f;
    if (eq? a21171 #t)
       goto label21255;
    else
       goto label21256;
label21259:
    temp21214 = (read);
    if (> temp21214 1)
       goto label21257;
    else
       goto label21258;
label21252:
    a21173 = #t;
    if (eq? a21173 #t)
       goto label21250;
    else
       goto label21251;
label21253:
    a21174 = #f;
    if (eq? a21174 #t)
       goto label21250;
    else
       goto label21251;
label21254:
    temp21218 = (read);
    if (> temp21218 1)
       goto label21252;
    else
       goto label21253;
label21255:
    a21169 = 1;
    goto label21254;



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
label21280:
    movq $1, a21154
    jmp label21279
    
label21281:
    movq $2, a21154
    jmp label21279
    
label21282:
    movq $1, a21155
    cmpq $1, a21155
    je label21280
    jmp label21281
    
label21283:
    movq $0, a21156
    cmpq $1, a21156
    je label21280
    jmp label21281
    
label21276:
    movq $2, a21157
    jmp label21274
    
label21277:
    movq $1, a21158
    cmpq $1, a21158
    je label21275
    jmp label21276
    
label21278:
    movq $0, a21159
    cmpq $1, a21159
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, temp21197
    cmpq $1, temp21197
    jg label21277
    jmp label21278
    
label21272:
    movq $1, a21161
    cmpq $1, a21161
    je label21270
    jmp label21271
    
label21273:
    movq $0, a21162
    cmpq $1, a21162
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, temp21201
    cmpq $1, temp21201
    jg label21272
    jmp label21273
    
label21275:
    movq $1, a21157
    jmp label21274
    
label21268:
    movq $0, a21165
    cmpq $1, a21165
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, temp21205
    cmpq $1, temp21205
    jg label21267
    jmp label21268
    
label21270:
    movq $1, a21160
    jmp label21269
    
label21271:
    movq $2, a21160
    jmp label21269
    
label21296:
    movq $9, temp21186
    jmp label21294
    
label21234:
    movq a21182, temp21231
    movq a21179, temp21227
    addq temp21231, temp21227
    movq a21178, temp21224
    addq temp21227, temp21224
    movq a21175, temp21220
    addq temp21224, temp21220
    movq a21172, temp21216
    addq temp21220, temp21216
    movq a21169, temp21212
    addq temp21216, temp21212
    movq a21166, temp21208
    addq temp21212, temp21208
    movq temp21207, temp21203
    addq temp21208, temp21203
    movq a21160, temp21199
    addq temp21203, temp21199
    movq a21157, temp21195
    addq temp21199, temp21195
    movq a21154, temp21191
    addq temp21195, temp21191
    movq a21151, %rax
    addq temp21191, %rax
    jmp conclusion
    
label21235:
    movq $1, a21182
    jmp label21234
    
label21292:
    movq $1, x21150
    jmp label21291
    
label21293:
    movq $0, x21150
    jmp label21291
    
label21294:
    cmpq $8, temp21186
    jg label21292
    jmp label21293
    
label21295:
    movq $8, temp21186
    jmp label21294
    
label21288:
    movq $0, a21153
    cmpq $1, a21153
    je label21285
    jmp label21286
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21290:
    callq read_int
    movq %rax, temp21189
    cmpq $1, temp21189
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, x21150
    je label21289
    jmp label21290
    
label21284:
    callq read_int
    movq %rax, temp21193
    cmpq $1, temp21193
    jg label21282
    jmp label21283
    
label21285:
    movq $1, a21151
    jmp label21284
    
label21286:
    movq $2, a21151
    jmp label21284
    
label21287:
    movq $1, a21152
    cmpq $1, a21152
    je label21285
    jmp label21286
    
label21248:
    movq $0, a21177
    cmpq $1, a21177
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, temp21222
    cmpq $1, temp21222
    jg label21247
    jmp label21248
    
label21250:
    movq $1, a21172
    jmp label21249
    
label21251:
    movq $2, a21172
    jmp label21249
    
label21244:
    callq read_int
    movq %rax, a21178
    callq read_int
    movq %rax, temp21229
    cmpq $1, temp21229
    jg label21242
    jmp label21243
    
label21245:
    movq $1, a21175
    jmp label21244
    
label21246:
    movq $2, a21175
    jmp label21244
    
label21247:
    movq $1, a21176
    cmpq $1, a21176
    je label21245
    jmp label21246
    
label21240:
    movq $1, a21179
    jmp label21239
    
label21241:
    movq $2, a21179
    jmp label21239
    
label21242:
    movq $1, a21180
    cmpq $1, a21180
    je label21240
    jmp label21241
    
label21243:
    movq $0, a21181
    cmpq $1, a21181
    je label21240
    jmp label21241
    
label21236:
    movq $2, a21182
    jmp label21234
    
label21237:
    movq $1, a21183
    cmpq $1, a21183
    je label21235
    jmp label21236
    
label21238:
    movq $0, a21184
    cmpq $1, a21184
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, temp21233
    cmpq $1, temp21233
    jg label21237
    jmp label21238
    
label21264:
    callq read_int
    movq %rax, temp21207
    callq read_int
    movq %rax, temp21210
    cmpq $1, temp21210
    jg label21262
    jmp label21263
    
label21265:
    movq $1, a21163
    jmp label21264
    
label21266:
    movq $2, a21163
    jmp label21264
    
label21267:
    movq $1, a21164
    cmpq $1, a21164
    je label21265
    jmp label21266
    
label21260:
    movq $1, a21166
    jmp label21259
    
label21261:
    movq $2, a21166
    jmp label21259
    
label21262:
    movq $1, a21167
    cmpq $1, a21167
    je label21260
    jmp label21261
    
label21263:
    movq $0, a21168
    cmpq $1, a21168
    je label21260
    jmp label21261
    
label21256:
    movq $2, a21169
    jmp label21254
    
start:
    cmpq $1, $1
    jge label21295
    jmp label21296
    
label21257:
    movq $1, a21170
    cmpq $1, a21170
    je label21255
    jmp label21256
    
label21258:
    movq $0, a21171
    cmpq $1, a21171
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, temp21214
    cmpq $1, temp21214
    jg label21257
    jmp label21258
    
label21252:
    movq $1, a21173
    cmpq $1, a21173
    je label21250
    jmp label21251
    
label21253:
    movq $0, a21174
    cmpq $1, a21174
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, temp21218
    cmpq $1, temp21218
    jg label21252
    jmp label21253
    
label21255:
    movq $1, a21169
    jmp label21254
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
label21280:
    movq $1, a21154
    jmp label21279
    
label21281:
    movq $2, a21154
    jmp label21279
    
label21282:
    movq $1, a21155
    cmpq $1, a21155
    je label21280
    jmp label21281
    
label21283:
    movq $0, a21156
    cmpq $1, a21156
    je label21280
    jmp label21281
    
label21276:
    movq $2, a21157
    jmp label21274
    
label21277:
    movq $1, a21158
    cmpq $1, a21158
    je label21275
    jmp label21276
    
label21278:
    movq $0, a21159
    cmpq $1, a21159
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, temp21197
    cmpq $1, temp21197
    jg label21277
    jmp label21278
    
label21272:
    movq $1, a21161
    cmpq $1, a21161
    je label21270
    jmp label21271
    
label21273:
    movq $0, a21162
    cmpq $1, a21162
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, temp21201
    cmpq $1, temp21201
    jg label21272
    jmp label21273
    
label21275:
    movq $1, a21157
    jmp label21274
    
label21268:
    movq $0, a21165
    cmpq $1, a21165
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, temp21205
    cmpq $1, temp21205
    jg label21267
    jmp label21268
    
label21270:
    movq $1, a21160
    jmp label21269
    
label21271:
    movq $2, a21160
    jmp label21269
    
label21296:
    movq $9, temp21186
    jmp label21294
    
label21234:
    movq a21182, temp21231
    movq a21179, temp21227
    addq temp21231, temp21227
    movq a21178, temp21224
    addq temp21227, temp21224
    movq a21175, temp21220
    addq temp21224, temp21220
    movq a21172, temp21216
    addq temp21220, temp21216
    movq a21169, temp21212
    addq temp21216, temp21212
    movq a21166, temp21208
    addq temp21212, temp21208
    movq temp21207, temp21203
    addq temp21208, temp21203
    movq a21160, temp21199
    addq temp21203, temp21199
    movq a21157, temp21195
    addq temp21199, temp21195
    movq a21154, temp21191
    addq temp21195, temp21191
    movq a21151, %rax
    addq temp21191, %rax
    jmp conclusion
    
label21235:
    movq $1, a21182
    jmp label21234
    
label21292:
    movq $1, x21150
    jmp label21291
    
label21293:
    movq $0, x21150
    jmp label21291
    
label21294:
    cmpq $8, temp21186
    jg label21292
    jmp label21293
    
label21295:
    movq $8, temp21186
    jmp label21294
    
label21288:
    movq $0, a21153
    cmpq $1, a21153
    je label21285
    jmp label21286
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21290:
    callq read_int
    movq %rax, temp21189
    cmpq $1, temp21189
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, x21150
    je label21289
    jmp label21290
    
label21284:
    callq read_int
    movq %rax, temp21193
    cmpq $1, temp21193
    jg label21282
    jmp label21283
    
label21285:
    movq $1, a21151
    jmp label21284
    
label21286:
    movq $2, a21151
    jmp label21284
    
label21287:
    movq $1, a21152
    cmpq $1, a21152
    je label21285
    jmp label21286
    
label21248:
    movq $0, a21177
    cmpq $1, a21177
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, temp21222
    cmpq $1, temp21222
    jg label21247
    jmp label21248
    
label21250:
    movq $1, a21172
    jmp label21249
    
label21251:
    movq $2, a21172
    jmp label21249
    
label21244:
    callq read_int
    movq %rax, a21178
    callq read_int
    movq %rax, temp21229
    cmpq $1, temp21229
    jg label21242
    jmp label21243
    
label21245:
    movq $1, a21175
    jmp label21244
    
label21246:
    movq $2, a21175
    jmp label21244
    
label21247:
    movq $1, a21176
    cmpq $1, a21176
    je label21245
    jmp label21246
    
label21240:
    movq $1, a21179
    jmp label21239
    
label21241:
    movq $2, a21179
    jmp label21239
    
label21242:
    movq $1, a21180
    cmpq $1, a21180
    je label21240
    jmp label21241
    
label21243:
    movq $0, a21181
    cmpq $1, a21181
    je label21240
    jmp label21241
    
label21236:
    movq $2, a21182
    jmp label21234
    
label21237:
    movq $1, a21183
    cmpq $1, a21183
    je label21235
    jmp label21236
    
label21238:
    movq $0, a21184
    cmpq $1, a21184
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, temp21233
    cmpq $1, temp21233
    jg label21237
    jmp label21238
    
label21264:
    callq read_int
    movq %rax, temp21207
    callq read_int
    movq %rax, temp21210
    cmpq $1, temp21210
    jg label21262
    jmp label21263
    
label21265:
    movq $1, a21163
    jmp label21264
    
label21266:
    movq $2, a21163
    jmp label21264
    
label21267:
    movq $1, a21164
    cmpq $1, a21164
    je label21265
    jmp label21266
    
label21260:
    movq $1, a21166
    jmp label21259
    
label21261:
    movq $2, a21166
    jmp label21259
    
label21262:
    movq $1, a21167
    cmpq $1, a21167
    je label21260
    jmp label21261
    
label21263:
    movq $0, a21168
    cmpq $1, a21168
    je label21260
    jmp label21261
    
label21256:
    movq $2, a21169
    jmp label21254
    
start:
    cmpq $1, $1
    jge label21295
    jmp label21296
    
label21257:
    movq $1, a21170
    cmpq $1, a21170
    je label21255
    jmp label21256
    
label21258:
    movq $0, a21171
    cmpq $1, a21171
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, temp21214
    cmpq $1, temp21214
    jg label21257
    jmp label21258
    
label21252:
    movq $1, a21173
    cmpq $1, a21173
    je label21250
    jmp label21251
    
label21253:
    movq $0, a21174
    cmpq $1, a21174
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, temp21218
    cmpq $1, temp21218
    jg label21252
    jmp label21253
    
label21255:
    movq $1, a21169
    jmp label21254
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
label21234:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  a21166
  a21182)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21169
  a21154
  %rsp
  temp21207
  a21175
  temp21231
  a21151)
 (set
  a21172
  a21157
  a21160
  a21178
  temp21227
  a21166
  a21169
  a21154
  %rsp
  temp21207
  a21175
  temp21231
  a21151)
 (set
  a21172
  a21157
  a21160
  a21178
  temp21227
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  temp21227
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  temp21224
  a21160)
 (set
  a21172
  a21157
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  temp21224
  a21160)
 (set
  a21157
  temp21207
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21220
  a21172
  temp21224
  a21160)
 (set
  a21157
  temp21207
  a21160
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21220
  a21172)
 (set
  temp21220
  a21157
  temp21207
  a21160
  a21166
  a21151
  temp21216
  a21169
  a21154
  %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 temp21216 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 temp21212 a21166 a21151 temp21216 a21154 %rsp)
 (set a21157 temp21207 a21160 temp21212 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 temp21212 a21151 a21154 %rsp temp21208 a21160)
 (set a21157 temp21207 a21151 a21154 %rsp temp21208 a21160)
 (set a21157 a21151 a21154 temp21208 a21160 temp21203 %rsp)
 (set a21157 a21160 a21151 a21154 temp21203 %rsp)
 (set a21157 a21154 temp21199 a21151 temp21203 %rsp)
 (set a21157 a21154 %rsp temp21199 a21151)
 (set temp21195 a21154 %rsp temp21199 a21151)
 (set temp21195 a21151 a21154 %rsp)
 (set temp21191 temp21195 a21151 %rsp)
 (set temp21191 a21151 %rsp)
 (set %rax temp21191 %rsp)
 (set %rax %rsp))
movq a21182, temp21231
movq a21179, temp21227
addq temp21231, temp21227
movq a21178, temp21224
addq temp21227, temp21224
movq a21175, temp21220
addq temp21224, temp21220
movq a21172, temp21216
addq temp21220, temp21216
movq a21169, temp21212
addq temp21216, temp21212
movq a21166, temp21208
addq temp21212, temp21208
movq temp21207, temp21203
addq temp21208, temp21203
movq a21160, temp21199
addq temp21203, temp21199
movq a21157, temp21195
addq temp21199, temp21195
movq a21154, temp21191
addq temp21195, temp21191
movq a21151, %rax
addq temp21191, %rax
jmp conclusion

label21235:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  a21166
  a21182))
movq $1, a21182
jmp label21234

label21236:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  a21166
  a21182))
movq $2, a21182
jmp label21234

label21237:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21169
  a21154
  %rsp
  temp21207
  a21175
  a21151
  a21183)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $1, a21183
cmpq $1, a21183
je label21235
jmp label21236

label21238:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21184
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $0, a21184
cmpq $1, a21184
je label21235
jmp label21236

label21239:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  %rax
  a21172
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21154
  %rsp
  temp21207
  a21175
  temp21233
  a21169)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
callq read_int
movq %rax, temp21233
cmpq $1, temp21233
jg label21237
jmp label21238

label21240:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $1, a21179
jmp label21239

label21241:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $2, a21179
jmp label21239

label21242:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21180
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $1, a21180
cmpq $1, a21180
je label21240
jmp label21241

label21243:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21181
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $0, a21181
cmpq $1, a21181
je label21240
jmp label21241

label21244:
    liveness
:
(list
 (set a21172 a21157 a21160 a21166 a21151 a21169 a21154 %rsp temp21207 a21175)
 (set
  a21157
  a21160
  a21166
  a21151
  a21169
  a21154
  %rsp
  %rax
  a21172
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  %rax
  a21172
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  temp21229
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
callq read_int
movq %rax, a21178
callq read_int
movq %rax, temp21229
cmpq $1, temp21229
jg label21242
jmp label21243

label21245:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 a21160 a21166 a21151 a21169 a21154 %rsp temp21207 a21175))
movq $1, a21175
jmp label21244

label21246:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 a21160 a21166 a21151 a21169 a21154 %rsp temp21207 a21175))
movq $2, a21175
jmp label21244

label21248:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21177 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $0, a21177
cmpq $1, a21177
je label21245
jmp label21246

label21247:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21166 a21151 a21169 a21154 %rsp a21160 a21176)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $1, a21176
cmpq $1, a21176
je label21245
jmp label21246

label21249:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp %rax a21172)
 (set
  a21172
  a21157
  temp21222
  temp21207
  a21160
  a21166
  a21151
  a21169
  a21154
  %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
callq read_int
movq %rax, temp21222
cmpq $1, temp21222
jg label21247
jmp label21248

label21250:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $1, a21172
jmp label21249

label21251:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $2, a21172
jmp label21249

label21252:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set temp21207 a21160 a21166 a21151 a21169 a21154 %rsp a21157 a21173)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $1, a21173
cmpq $1, a21173
je label21250
jmp label21251

label21253:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 a21174 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $0, a21174
cmpq $1, a21174
je label21250
jmp label21251

label21254:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set %rax a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 %rsp temp21218 a21154)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
callq read_int
movq %rax, temp21218
cmpq $1, temp21218
jg label21252
jmp label21253

label21256:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $2, a21169
jmp label21254

label21255:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $1, a21169
jmp label21254

label21257:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 %rsp a21154 a21170)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
movq $1, a21170
cmpq $1, a21170
je label21255
jmp label21256

label21258:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp a21171)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
movq $0, a21171
cmpq $1, a21171
je label21255
jmp label21256

label21259:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set %rax a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp temp21214 a21166)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
callq read_int
movq %rax, temp21214
cmpq $1, temp21214
jg label21257
jmp label21258

label21260:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
movq $1, a21166
jmp label21259

label21261:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
movq $2, a21166
jmp label21259

label21262:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21154 %rsp a21151 a21167)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp))
movq $1, a21167
cmpq $1, a21167
je label21260
jmp label21261

label21263:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21168 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp))
movq $0, a21168
cmpq $1, a21168
je label21260
jmp label21261

label21264:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set %rax a21157 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set %rax a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 temp21210 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp))
callq read_int
movq %rax, temp21207
callq read_int
movq %rax, temp21210
cmpq $1, temp21210
jg label21262
jmp label21263

label21265:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
movq $1, a21163
jmp label21264

label21266:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
movq $2, a21163
jmp label21264

label21267:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21164 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
movq $1, a21164
cmpq $1, a21164
je label21265
jmp label21266

label21289:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label21268:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21165 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
movq $0, a21165
cmpq $1, a21165
je label21265
jmp label21266

label21269:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set %rax a21157 a21160 a21151 a21154 %rsp)
 (set a21160 a21151 a21154 %rsp temp21205 a21157)
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
callq read_int
movq %rax, temp21205
cmpq $1, temp21205
jg label21267
jmp label21268

label21270:
    liveness
:
(list (set a21157 a21151 a21154 %rsp) (set a21157 a21160 a21151 a21154 %rsp))
movq $1, a21160
jmp label21269

label21271:
    liveness
:
(list (set a21157 a21151 a21154 %rsp) (set a21157 a21160 a21151 a21154 %rsp))
movq $2, a21160
jmp label21269

label21273:
    liveness
:
(list
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21162 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp))
movq $0, a21162
cmpq $1, a21162
je label21270
jmp label21271

label21272:
    liveness
:
(list
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21161 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp))
movq $1, a21161
cmpq $1, a21161
je label21270
jmp label21271

label21274:
    liveness
:
(list
 (set a21157 a21151 a21154 %rsp)
 (set %rax a21157 a21151 a21154 %rsp)
 (set a21157 a21151 temp21201 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp))
callq read_int
movq %rax, temp21201
cmpq $1, temp21201
jg label21272
jmp label21273

label21275:
    liveness
:
(list (set a21151 a21154 %rsp) (set a21157 a21151 a21154 %rsp))
movq $1, a21157
jmp label21274

label21276:
    liveness
:
(list (set a21151 a21154 %rsp) (set a21157 a21151 a21154 %rsp))
movq $2, a21157
jmp label21274

label21277:
    liveness
:
(list
 (set a21151 a21154 %rsp)
 (set a21158 a21151 a21154 %rsp)
 (set a21151 a21154 %rsp)
 (set a21151 a21154 %rsp))
movq $1, a21158
cmpq $1, a21158
je label21275
jmp label21276

label21278:
    liveness
:
(list
 (set a21151 a21154 %rsp)
 (set a21159 a21151 a21154 %rsp)
 (set a21151 a21154 %rsp)
 (set a21151 a21154 %rsp))
movq $0, a21159
cmpq $1, a21159
je label21275
jmp label21276

label21279:
    liveness
:
(list
 (set a21151 a21154 %rsp)
 (set %rax a21151 a21154 %rsp)
 (set temp21197 a21151 a21154 %rsp)
 (set a21151 a21154 %rsp)
 (set a21151 a21154 %rsp))
callq read_int
movq %rax, temp21197
cmpq $1, temp21197
jg label21277
jmp label21278

label21281:
    liveness
:
(list (set a21151 %rsp) (set a21151 a21154 %rsp))
movq $2, a21154
jmp label21279

label21280:
    liveness
:
(list (set a21151 %rsp) (set a21151 a21154 %rsp))
movq $1, a21154
jmp label21279

label21282:
    liveness
:
(list
 (set a21151 %rsp)
 (set a21151 %rsp a21155)
 (set a21151 %rsp)
 (set a21151 %rsp))
movq $1, a21155
cmpq $1, a21155
je label21280
jmp label21281

label21283:
    liveness
:
(list
 (set a21151 %rsp)
 (set a21156 a21151 %rsp)
 (set a21151 %rsp)
 (set a21151 %rsp))
movq $0, a21156
cmpq $1, a21156
je label21280
jmp label21281

label21284:
    liveness
:
(list
 (set a21151 %rsp)
 (set %rax a21151 %rsp)
 (set temp21193 a21151 %rsp)
 (set a21151 %rsp)
 (set a21151 %rsp))
callq read_int
movq %rax, temp21193
cmpq $1, temp21193
jg label21282
jmp label21283

label21285:
    liveness
:
(list (set %rsp) (set a21151 %rsp))
movq $1, a21151
jmp label21284

label21286:
    liveness
:
(list (set %rsp) (set a21151 %rsp))
movq $2, a21151
jmp label21284

label21288:
    liveness
:
(list (set %rsp) (set a21153 %rsp) (set %rsp) (set %rsp))
movq $0, a21153
cmpq $1, a21153
je label21285
jmp label21286

label21287:
    liveness
:
(list (set %rsp) (set a21152 %rsp) (set %rsp) (set %rsp))
movq $1, a21152
cmpq $1, a21152
je label21285
jmp label21286

label21290:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp21189 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp21189
cmpq $1, temp21189
jg label21287
jmp label21288

label21291:
    liveness
:
(list (set x21150 %rsp) (set %rsp) (set %rsp))
cmpq $1, x21150
je label21289
jmp label21290

label21292:
    liveness
:
(list (set %rsp) (set x21150 %rsp))
movq $1, x21150
jmp label21291

label21293:
    liveness
:
(list (set %rsp) (set x21150 %rsp))
movq $0, x21150
jmp label21291

label21294:
    liveness
:
(list (set temp21186 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp21186
jg label21292
jmp label21293

label21296:
    liveness
:
(list (set %rsp) (set temp21186 %rsp))
movq $9, temp21186
jmp label21294

label21295:
    liveness
:
(list (set %rsp) (set temp21186 %rsp))
movq $8, temp21186
jmp label21294

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label21295
jmp label21296




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
label21234:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  a21166
  a21182)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21169
  a21154
  %rsp
  temp21207
  a21175
  temp21231
  a21151)
 (set
  a21172
  a21157
  a21160
  a21178
  temp21227
  a21166
  a21169
  a21154
  %rsp
  temp21207
  a21175
  temp21231
  a21151)
 (set
  a21172
  a21157
  a21160
  a21178
  temp21227
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  temp21227
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  temp21224
  a21160)
 (set
  a21172
  a21157
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  temp21224
  a21160)
 (set
  a21157
  temp21207
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21220
  a21172
  temp21224
  a21160)
 (set
  a21157
  temp21207
  a21160
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21220
  a21172)
 (set
  temp21220
  a21157
  temp21207
  a21160
  a21166
  a21151
  temp21216
  a21169
  a21154
  %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 temp21216 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 temp21212 a21166 a21151 temp21216 a21154 %rsp)
 (set a21157 temp21207 a21160 temp21212 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 temp21212 a21151 a21154 %rsp temp21208 a21160)
 (set a21157 temp21207 a21151 a21154 %rsp temp21208 a21160)
 (set a21157 a21151 a21154 temp21208 a21160 temp21203 %rsp)
 (set a21157 a21160 a21151 a21154 temp21203 %rsp)
 (set a21157 a21154 temp21199 a21151 temp21203 %rsp)
 (set a21157 a21154 %rsp temp21199 a21151)
 (set temp21195 a21154 %rsp temp21199 a21151)
 (set temp21195 a21151 a21154 %rsp)
 (set temp21191 temp21195 a21151 %rsp)
 (set temp21191 a21151 %rsp)
 (set %rax temp21191 %rsp)
 (set %rax %rsp))
movq a21182, temp21231
movq a21179, temp21227
addq temp21231, temp21227
movq a21178, temp21224
addq temp21227, temp21224
movq a21175, temp21220
addq temp21224, temp21220
movq a21172, temp21216
addq temp21220, temp21216
movq a21169, temp21212
addq temp21216, temp21212
movq a21166, temp21208
addq temp21212, temp21208
movq temp21207, temp21203
addq temp21208, temp21203
movq a21160, temp21199
addq temp21203, temp21199
movq a21157, temp21195
addq temp21199, temp21195
movq a21154, temp21191
addq temp21195, temp21191
movq a21151, %rax
addq temp21191, %rax
jmp conclusion

label21235:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  a21166
  a21182))
movq $1, a21182
jmp label21234

label21236:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175
  a21166
  a21182))
movq $2, a21182
jmp label21234

label21237:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21169
  a21154
  %rsp
  temp21207
  a21175
  a21151
  a21183)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $1, a21183
cmpq $1, a21183
je label21235
jmp label21236

label21238:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21184
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $0, a21184
cmpq $1, a21184
je label21235
jmp label21236

label21239:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  %rax
  a21172
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21154
  %rsp
  temp21207
  a21175
  temp21233
  a21169)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
callq read_int
movq %rax, temp21233
cmpq $1, temp21233
jg label21237
jmp label21238

label21240:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $1, a21179
jmp label21239

label21241:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21179
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $2, a21179
jmp label21239

label21242:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21180
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $1, a21180
cmpq $1, a21180
je label21240
jmp label21241

label21243:
    liveness
:
(list
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21181
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
movq $0, a21181
cmpq $1, a21181
je label21240
jmp label21241

label21244:
    liveness
:
(list
 (set a21172 a21157 a21160 a21166 a21151 a21169 a21154 %rsp temp21207 a21175)
 (set
  a21157
  a21160
  a21166
  a21151
  a21169
  a21154
  %rsp
  %rax
  a21172
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  %rax
  a21172
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  temp21229
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175)
 (set
  a21172
  a21157
  a21160
  a21178
  a21166
  a21151
  a21169
  a21154
  %rsp
  temp21207
  a21175))
callq read_int
movq %rax, a21178
callq read_int
movq %rax, temp21229
cmpq $1, temp21229
jg label21242
jmp label21243

label21245:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 a21160 a21166 a21151 a21169 a21154 %rsp temp21207 a21175))
movq $1, a21175
jmp label21244

label21246:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 a21160 a21166 a21151 a21169 a21154 %rsp temp21207 a21175))
movq $2, a21175
jmp label21244

label21248:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21177 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $0, a21177
cmpq $1, a21177
je label21245
jmp label21246

label21247:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21166 a21151 a21169 a21154 %rsp a21160 a21176)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $1, a21176
cmpq $1, a21176
je label21245
jmp label21246

label21249:
    liveness
:
(list
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp %rax a21172)
 (set
  a21172
  a21157
  temp21222
  temp21207
  a21160
  a21166
  a21151
  a21169
  a21154
  %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
callq read_int
movq %rax, temp21222
cmpq $1, temp21222
jg label21247
jmp label21248

label21250:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $1, a21172
jmp label21249

label21251:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21172 a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $2, a21172
jmp label21249

label21252:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set temp21207 a21160 a21166 a21151 a21169 a21154 %rsp a21157 a21173)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $1, a21173
cmpq $1, a21173
je label21250
jmp label21251

label21253:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 a21174 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $0, a21174
cmpq $1, a21174
je label21250
jmp label21251

label21254:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set %rax a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 %rsp temp21218 a21154)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
callq read_int
movq %rax, temp21218
cmpq $1, temp21218
jg label21252
jmp label21253

label21256:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $2, a21169
jmp label21254

label21255:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21169 a21154 %rsp))
movq $1, a21169
jmp label21254

label21257:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 %rsp a21154 a21170)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
movq $1, a21170
cmpq $1, a21170
je label21255
jmp label21256

label21258:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp a21171)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
movq $0, a21171
cmpq $1, a21171
je label21255
jmp label21256

label21259:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set %rax a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp temp21214 a21166)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
callq read_int
movq %rax, temp21214
cmpq $1, temp21214
jg label21257
jmp label21258

label21260:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
movq $1, a21166
jmp label21259

label21261:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21166 a21151 a21154 %rsp))
movq $2, a21166
jmp label21259

label21262:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21154 %rsp a21151 a21167)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp))
movq $1, a21167
cmpq $1, a21167
je label21260
jmp label21261

label21263:
    liveness
:
(list
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21168 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp))
movq $0, a21168
cmpq $1, a21168
je label21260
jmp label21261

label21264:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set %rax a21157 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set %rax a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 temp21210 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp)
 (set a21157 temp21207 a21160 a21151 a21154 %rsp))
callq read_int
movq %rax, temp21207
callq read_int
movq %rax, temp21210
cmpq $1, temp21210
jg label21262
jmp label21263

label21265:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
movq $1, a21163
jmp label21264

label21266:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
movq $2, a21163
jmp label21264

label21267:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21164 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
movq $1, a21164
cmpq $1, a21164
je label21265
jmp label21266

label21289:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label21268:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21165 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
movq $0, a21165
cmpq $1, a21165
je label21265
jmp label21266

label21269:
    liveness
:
(list
 (set a21157 a21160 a21151 a21154 %rsp)
 (set %rax a21157 a21160 a21151 a21154 %rsp)
 (set a21160 a21151 a21154 %rsp temp21205 a21157)
 (set a21157 a21160 a21151 a21154 %rsp)
 (set a21157 a21160 a21151 a21154 %rsp))
callq read_int
movq %rax, temp21205
cmpq $1, temp21205
jg label21267
jmp label21268

label21270:
    liveness
:
(list (set a21157 a21151 a21154 %rsp) (set a21157 a21160 a21151 a21154 %rsp))
movq $1, a21160
jmp label21269

label21271:
    liveness
:
(list (set a21157 a21151 a21154 %rsp) (set a21157 a21160 a21151 a21154 %rsp))
movq $2, a21160
jmp label21269

label21273:
    liveness
:
(list
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21162 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp))
movq $0, a21162
cmpq $1, a21162
je label21270
jmp label21271

label21272:
    liveness
:
(list
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21161 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp))
movq $1, a21161
cmpq $1, a21161
je label21270
jmp label21271

label21274:
    liveness
:
(list
 (set a21157 a21151 a21154 %rsp)
 (set %rax a21157 a21151 a21154 %rsp)
 (set a21157 a21151 temp21201 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp)
 (set a21157 a21151 a21154 %rsp))
callq read_int
movq %rax, temp21201
cmpq $1, temp21201
jg label21272
jmp label21273

label21275:
    liveness
:
(list (set a21151 a21154 %rsp) (set a21157 a21151 a21154 %rsp))
movq $1, a21157
jmp label21274

label21276:
    liveness
:
(list (set a21151 a21154 %rsp) (set a21157 a21151 a21154 %rsp))
movq $2, a21157
jmp label21274

label21277:
    liveness
:
(list
 (set a21151 a21154 %rsp)
 (set a21158 a21151 a21154 %rsp)
 (set a21151 a21154 %rsp)
 (set a21151 a21154 %rsp))
movq $1, a21158
cmpq $1, a21158
je label21275
jmp label21276

label21278:
    liveness
:
(list
 (set a21151 a21154 %rsp)
 (set a21159 a21151 a21154 %rsp)
 (set a21151 a21154 %rsp)
 (set a21151 a21154 %rsp))
movq $0, a21159
cmpq $1, a21159
je label21275
jmp label21276

label21279:
    liveness
:
(list
 (set a21151 a21154 %rsp)
 (set %rax a21151 a21154 %rsp)
 (set temp21197 a21151 a21154 %rsp)
 (set a21151 a21154 %rsp)
 (set a21151 a21154 %rsp))
callq read_int
movq %rax, temp21197
cmpq $1, temp21197
jg label21277
jmp label21278

label21281:
    liveness
:
(list (set a21151 %rsp) (set a21151 a21154 %rsp))
movq $2, a21154
jmp label21279

label21280:
    liveness
:
(list (set a21151 %rsp) (set a21151 a21154 %rsp))
movq $1, a21154
jmp label21279

label21282:
    liveness
:
(list
 (set a21151 %rsp)
 (set a21151 %rsp a21155)
 (set a21151 %rsp)
 (set a21151 %rsp))
movq $1, a21155
cmpq $1, a21155
je label21280
jmp label21281

label21283:
    liveness
:
(list
 (set a21151 %rsp)
 (set a21156 a21151 %rsp)
 (set a21151 %rsp)
 (set a21151 %rsp))
movq $0, a21156
cmpq $1, a21156
je label21280
jmp label21281

label21284:
    liveness
:
(list
 (set a21151 %rsp)
 (set %rax a21151 %rsp)
 (set temp21193 a21151 %rsp)
 (set a21151 %rsp)
 (set a21151 %rsp))
callq read_int
movq %rax, temp21193
cmpq $1, temp21193
jg label21282
jmp label21283

label21285:
    liveness
:
(list (set %rsp) (set a21151 %rsp))
movq $1, a21151
jmp label21284

label21286:
    liveness
:
(list (set %rsp) (set a21151 %rsp))
movq $2, a21151
jmp label21284

label21288:
    liveness
:
(list (set %rsp) (set a21153 %rsp) (set %rsp) (set %rsp))
movq $0, a21153
cmpq $1, a21153
je label21285
jmp label21286

label21287:
    liveness
:
(list (set %rsp) (set a21152 %rsp) (set %rsp) (set %rsp))
movq $1, a21152
cmpq $1, a21152
je label21285
jmp label21286

label21290:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp21189 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp21189
cmpq $1, temp21189
jg label21287
jmp label21288

label21291:
    liveness
:
(list (set x21150 %rsp) (set %rsp) (set %rsp))
cmpq $1, x21150
je label21289
jmp label21290

label21292:
    liveness
:
(list (set %rsp) (set x21150 %rsp))
movq $1, x21150
jmp label21291

label21293:
    liveness
:
(list (set %rsp) (set x21150 %rsp))
movq $0, x21150
jmp label21291

label21294:
    liveness
:
(list (set temp21186 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp21186
jg label21292
jmp label21293

label21296:
    liveness
:
(list (set %rsp) (set temp21186 %rsp))
movq $9, temp21186
jmp label21294

label21295:
    liveness
:
(list (set %rsp) (set temp21186 %rsp))
movq $8, temp21186
jmp label21294

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label21295
jmp label21296




output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21169 temp21212)
 (list temp21207 temp21203)
 (list temp21208 a21166)
 (list a21166 temp21208)
 (list temp21212 a21169)
 (list a21160 temp21199)
 (list temp21216 a21172)
 (list a21157 temp21195)
 (list temp21220 a21175)
 (list a21154 temp21191)
 (list temp21191 a21154)
 (list temp21224 a21178)
 (list a21182 temp21231)
 (list temp21195 a21157)
 (list temp21227 a21179)
 (list a21179 temp21227)
 (list a21178 temp21224)
 (list temp21199 a21160)
 (list temp21231 a21182)
 (list a21175 temp21220)
 (list a21172 temp21216)
 (list temp21203 temp21207))
label21234:
    movq a21182, temp21231
    movq a21179, temp21227
    addq temp21231, temp21227
    movq a21178, temp21224
    addq temp21227, temp21224
    movq a21175, temp21220
    addq temp21224, temp21220
    movq a21172, temp21216
    addq temp21220, temp21216
    movq a21169, temp21212
    addq temp21216, temp21212
    movq a21166, temp21208
    addq temp21212, temp21208
    movq temp21207, temp21203
    addq temp21208, temp21203
    movq a21160, temp21199
    addq temp21203, temp21199
    movq a21157, temp21195
    addq temp21199, temp21195
    movq a21154, temp21191
    addq temp21195, temp21191
    movq a21151, %rax
    addq temp21191, %rax
    jmp conclusion
    
label21235:
    movq $1, a21182
    jmp label21234
    
label21236:
    movq $2, a21182
    jmp label21234
    
label21237:
    movq $1, a21183
    cmpq $1, a21183
    je label21235
    jmp label21236
    
label21238:
    movq $0, a21184
    cmpq $1, a21184
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, temp21233
    cmpq $1, temp21233
    jg label21237
    jmp label21238
    
label21240:
    movq $1, a21179
    jmp label21239
    
label21241:
    movq $2, a21179
    jmp label21239
    
label21242:
    movq $1, a21180
    cmpq $1, a21180
    je label21240
    jmp label21241
    
label21243:
    movq $0, a21181
    cmpq $1, a21181
    je label21240
    jmp label21241
    
label21244:
    callq read_int
    movq %rax, a21178
    callq read_int
    movq %rax, temp21229
    cmpq $1, temp21229
    jg label21242
    jmp label21243
    
label21245:
    movq $1, a21175
    jmp label21244
    
label21246:
    movq $2, a21175
    jmp label21244
    
label21248:
    movq $0, a21177
    cmpq $1, a21177
    je label21245
    jmp label21246
    
label21247:
    movq $1, a21176
    cmpq $1, a21176
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, temp21222
    cmpq $1, temp21222
    jg label21247
    jmp label21248
    
label21250:
    movq $1, a21172
    jmp label21249
    
label21251:
    movq $2, a21172
    jmp label21249
    
label21252:
    movq $1, a21173
    cmpq $1, a21173
    je label21250
    jmp label21251
    
label21253:
    movq $0, a21174
    cmpq $1, a21174
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, temp21218
    cmpq $1, temp21218
    jg label21252
    jmp label21253
    
label21256:
    movq $2, a21169
    jmp label21254
    
label21255:
    movq $1, a21169
    jmp label21254
    
label21257:
    movq $1, a21170
    cmpq $1, a21170
    je label21255
    jmp label21256
    
label21258:
    movq $0, a21171
    cmpq $1, a21171
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, temp21214
    cmpq $1, temp21214
    jg label21257
    jmp label21258
    
label21260:
    movq $1, a21166
    jmp label21259
    
label21261:
    movq $2, a21166
    jmp label21259
    
label21262:
    movq $1, a21167
    cmpq $1, a21167
    je label21260
    jmp label21261
    
label21263:
    movq $0, a21168
    cmpq $1, a21168
    je label21260
    jmp label21261
    
label21264:
    callq read_int
    movq %rax, temp21207
    callq read_int
    movq %rax, temp21210
    cmpq $1, temp21210
    jg label21262
    jmp label21263
    
label21265:
    movq $1, a21163
    jmp label21264
    
label21266:
    movq $2, a21163
    jmp label21264
    
label21267:
    movq $1, a21164
    cmpq $1, a21164
    je label21265
    jmp label21266
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21268:
    movq $0, a21165
    cmpq $1, a21165
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, temp21205
    cmpq $1, temp21205
    jg label21267
    jmp label21268
    
label21270:
    movq $1, a21160
    jmp label21269
    
label21271:
    movq $2, a21160
    jmp label21269
    
label21273:
    movq $0, a21162
    cmpq $1, a21162
    je label21270
    jmp label21271
    
label21272:
    movq $1, a21161
    cmpq $1, a21161
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, temp21201
    cmpq $1, temp21201
    jg label21272
    jmp label21273
    
label21275:
    movq $1, a21157
    jmp label21274
    
label21276:
    movq $2, a21157
    jmp label21274
    
label21277:
    movq $1, a21158
    cmpq $1, a21158
    je label21275
    jmp label21276
    
label21278:
    movq $0, a21159
    cmpq $1, a21159
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, temp21197
    cmpq $1, temp21197
    jg label21277
    jmp label21278
    
label21281:
    movq $2, a21154
    jmp label21279
    
label21280:
    movq $1, a21154
    jmp label21279
    
label21282:
    movq $1, a21155
    cmpq $1, a21155
    je label21280
    jmp label21281
    
label21283:
    movq $0, a21156
    cmpq $1, a21156
    je label21280
    jmp label21281
    
label21284:
    callq read_int
    movq %rax, temp21193
    cmpq $1, temp21193
    jg label21282
    jmp label21283
    
label21285:
    movq $1, a21151
    jmp label21284
    
label21286:
    movq $2, a21151
    jmp label21284
    
label21288:
    movq $0, a21153
    cmpq $1, a21153
    je label21285
    jmp label21286
    
label21287:
    movq $1, a21152
    cmpq $1, a21152
    je label21285
    jmp label21286
    
label21290:
    callq read_int
    movq %rax, temp21189
    cmpq $1, temp21189
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, x21150
    je label21289
    jmp label21290
    
label21292:
    movq $1, x21150
    jmp label21291
    
label21293:
    movq $0, x21150
    jmp label21291
    
label21294:
    cmpq $8, temp21186
    jg label21292
    jmp label21293
    
label21296:
    movq $9, temp21186
    jmp label21294
    
label21295:
    movq $8, temp21186
    jmp label21294
    
start:
    cmpq $1, $1
    jge label21295
    jmp label21296
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21169 temp21212)
 (list temp21207 temp21203)
 (list temp21208 a21166)
 (list a21166 temp21208)
 (list temp21212 a21169)
 (list a21160 temp21199)
 (list temp21216 a21172)
 (list a21157 temp21195)
 (list temp21220 a21175)
 (list a21154 temp21191)
 (list temp21191 a21154)
 (list temp21224 a21178)
 (list a21182 temp21231)
 (list temp21195 a21157)
 (list temp21227 a21179)
 (list a21179 temp21227)
 (list a21178 temp21224)
 (list temp21199 a21160)
 (list temp21231 a21182)
 (list a21175 temp21220)
 (list a21172 temp21216)
 (list temp21203 temp21207))
label21234:
    movq a21182, temp21231
    movq a21179, temp21227
    addq temp21231, temp21227
    movq a21178, temp21224
    addq temp21227, temp21224
    movq a21175, temp21220
    addq temp21224, temp21220
    movq a21172, temp21216
    addq temp21220, temp21216
    movq a21169, temp21212
    addq temp21216, temp21212
    movq a21166, temp21208
    addq temp21212, temp21208
    movq temp21207, temp21203
    addq temp21208, temp21203
    movq a21160, temp21199
    addq temp21203, temp21199
    movq a21157, temp21195
    addq temp21199, temp21195
    movq a21154, temp21191
    addq temp21195, temp21191
    movq a21151, %rax
    addq temp21191, %rax
    jmp conclusion
    
label21235:
    movq $1, a21182
    jmp label21234
    
label21236:
    movq $2, a21182
    jmp label21234
    
label21237:
    movq $1, a21183
    cmpq $1, a21183
    je label21235
    jmp label21236
    
label21238:
    movq $0, a21184
    cmpq $1, a21184
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, temp21233
    cmpq $1, temp21233
    jg label21237
    jmp label21238
    
label21240:
    movq $1, a21179
    jmp label21239
    
label21241:
    movq $2, a21179
    jmp label21239
    
label21242:
    movq $1, a21180
    cmpq $1, a21180
    je label21240
    jmp label21241
    
label21243:
    movq $0, a21181
    cmpq $1, a21181
    je label21240
    jmp label21241
    
label21244:
    callq read_int
    movq %rax, a21178
    callq read_int
    movq %rax, temp21229
    cmpq $1, temp21229
    jg label21242
    jmp label21243
    
label21245:
    movq $1, a21175
    jmp label21244
    
label21246:
    movq $2, a21175
    jmp label21244
    
label21248:
    movq $0, a21177
    cmpq $1, a21177
    je label21245
    jmp label21246
    
label21247:
    movq $1, a21176
    cmpq $1, a21176
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, temp21222
    cmpq $1, temp21222
    jg label21247
    jmp label21248
    
label21250:
    movq $1, a21172
    jmp label21249
    
label21251:
    movq $2, a21172
    jmp label21249
    
label21252:
    movq $1, a21173
    cmpq $1, a21173
    je label21250
    jmp label21251
    
label21253:
    movq $0, a21174
    cmpq $1, a21174
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, temp21218
    cmpq $1, temp21218
    jg label21252
    jmp label21253
    
label21256:
    movq $2, a21169
    jmp label21254
    
label21255:
    movq $1, a21169
    jmp label21254
    
label21257:
    movq $1, a21170
    cmpq $1, a21170
    je label21255
    jmp label21256
    
label21258:
    movq $0, a21171
    cmpq $1, a21171
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, temp21214
    cmpq $1, temp21214
    jg label21257
    jmp label21258
    
label21260:
    movq $1, a21166
    jmp label21259
    
label21261:
    movq $2, a21166
    jmp label21259
    
label21262:
    movq $1, a21167
    cmpq $1, a21167
    je label21260
    jmp label21261
    
label21263:
    movq $0, a21168
    cmpq $1, a21168
    je label21260
    jmp label21261
    
label21264:
    callq read_int
    movq %rax, temp21207
    callq read_int
    movq %rax, temp21210
    cmpq $1, temp21210
    jg label21262
    jmp label21263
    
label21265:
    movq $1, a21163
    jmp label21264
    
label21266:
    movq $2, a21163
    jmp label21264
    
label21267:
    movq $1, a21164
    cmpq $1, a21164
    je label21265
    jmp label21266
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21268:
    movq $0, a21165
    cmpq $1, a21165
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, temp21205
    cmpq $1, temp21205
    jg label21267
    jmp label21268
    
label21270:
    movq $1, a21160
    jmp label21269
    
label21271:
    movq $2, a21160
    jmp label21269
    
label21273:
    movq $0, a21162
    cmpq $1, a21162
    je label21270
    jmp label21271
    
label21272:
    movq $1, a21161
    cmpq $1, a21161
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, temp21201
    cmpq $1, temp21201
    jg label21272
    jmp label21273
    
label21275:
    movq $1, a21157
    jmp label21274
    
label21276:
    movq $2, a21157
    jmp label21274
    
label21277:
    movq $1, a21158
    cmpq $1, a21158
    je label21275
    jmp label21276
    
label21278:
    movq $0, a21159
    cmpq $1, a21159
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, temp21197
    cmpq $1, temp21197
    jg label21277
    jmp label21278
    
label21281:
    movq $2, a21154
    jmp label21279
    
label21280:
    movq $1, a21154
    jmp label21279
    
label21282:
    movq $1, a21155
    cmpq $1, a21155
    je label21280
    jmp label21281
    
label21283:
    movq $0, a21156
    cmpq $1, a21156
    je label21280
    jmp label21281
    
label21284:
    callq read_int
    movq %rax, temp21193
    cmpq $1, temp21193
    jg label21282
    jmp label21283
    
label21285:
    movq $1, a21151
    jmp label21284
    
label21286:
    movq $2, a21151
    jmp label21284
    
label21288:
    movq $0, a21153
    cmpq $1, a21153
    je label21285
    jmp label21286
    
label21287:
    movq $1, a21152
    cmpq $1, a21152
    je label21285
    jmp label21286
    
label21290:
    callq read_int
    movq %rax, temp21189
    cmpq $1, temp21189
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, x21150
    je label21289
    jmp label21290
    
label21292:
    movq $1, x21150
    jmp label21291
    
label21293:
    movq $0, x21150
    jmp label21291
    
label21294:
    cmpq $8, temp21186
    jg label21292
    jmp label21293
    
label21296:
    movq $9, temp21186
    jmp label21294
    
label21295:
    movq $8, temp21186
    jmp label21294
    
start:
    cmpq $1, $1
    jge label21295
    jmp label21296
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21169 temp21212)
 (list temp21207 temp21203)
 (list temp21208 a21166)
 (list a21166 temp21208)
 (list temp21212 a21169)
 (list a21160 temp21199)
 (list temp21216 a21172)
 (list a21157 temp21195)
 (list temp21220 a21175)
 (list a21154 temp21191)
 (list temp21191 a21154)
 (list temp21224 a21178)
 (list a21182 temp21231)
 (list temp21195 a21157)
 (list temp21227 a21179)
 (list a21179 temp21227)
 (list a21178 temp21224)
 (list temp21199 a21160)
 (list temp21231 a21182)
 (list a21175 temp21220)
 (list a21172 temp21216)
 (list temp21203 temp21207))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21178 7)
 (cons a21179 8)
 (cons a21172 9)
 (cons a21175 10)
 (cons a21160 11)
 (cons a21157 12)
 (cons a21169 13)
 (cons a21166 14)
 (cons temp21207 15)
 (cons a21154 16)
 (cons a21151 17)
 (cons a21184 0)
 (cons a21182 0)
 (cons a21183 0)
 (cons temp21231 0)
 (cons temp21227 1)
 (cons temp21233 0)
 (cons temp21224 0)
 (cons temp21229 0)
 (cons a21180 0)
 (cons a21181 0)
 (cons temp21220 1)
 (cons temp21216 0)
 (cons a21176 0)
 (cons a21177 0)
 (cons temp21222 0)
 (cons temp21212 1)
 (cons temp21218 0)
 (cons a21174 0)
 (cons a21173 0)
 (cons temp21208 0)
 (cons temp21214 0)
 (cons a21170 0)
 (cons a21171 0)
 (cons temp21203 1)
 (cons a21168 0)
 (cons temp21210 0)
 (cons a21167 0)
 (cons temp21199 0)
 (cons temp21205 0)
 (cons a21165 0)
 (cons a21164 0)
 (cons a21163 0)
 (cons temp21195 1)
 (cons temp21191 0)
 (cons a21162 0)
 (cons a21161 0)
 (cons temp21201 0)
 (cons a21158 0)
 (cons a21159 0)
 (cons temp21197 0)
 (cons a21156 0)
 (cons a21155 0)
 (cons temp21193 0)
 (cons x21150 0)
 (cons a21153 0)
 (cons temp21186 0)
 (cons temp21189 0)
 (cons a21152 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21234:
    movq %rcx, %rcx
    movq %r12, %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21235:
    movq $1, %rcx
    jmp label21234
    
label21236:
    movq $2, %rcx
    jmp label21234
    
label21237:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21238:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21237
    jmp label21238
    
label21240:
    movq $1, %r12
    jmp label21239
    
label21241:
    movq $2, %r12
    jmp label21239
    
label21242:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21243:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21244:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21242
    jmp label21243
    
label21245:
    movq $1, %r14
    jmp label21244
    
label21246:
    movq $2, %r14
    jmp label21244
    
label21248:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21247:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21247
    jmp label21248
    
label21250:
    movq $1, %r13
    jmp label21249
    
label21251:
    movq $2, %r13
    jmp label21249
    
label21252:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21253:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21252
    jmp label21253
    
label21256:
    movq $2, -64(%rbp)
    jmp label21254
    
label21255:
    movq $1, -64(%rbp)
    jmp label21254
    
label21257:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21258:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21257
    jmp label21258
    
label21260:
    movq $1, -72(%rbp)
    jmp label21259
    
label21261:
    movq $2, -72(%rbp)
    jmp label21259
    
label21262:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21263:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21264:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21262
    jmp label21263
    
label21265:
    movq $1, %rcx
    jmp label21264
    
label21266:
    movq $2, %rcx
    jmp label21264
    
label21267:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21268:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21267
    jmp label21268
    
label21270:
    movq $1, -48(%rbp)
    jmp label21269
    
label21271:
    movq $2, -48(%rbp)
    jmp label21269
    
label21273:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21272:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21272
    jmp label21273
    
label21275:
    movq $1, -56(%rbp)
    jmp label21274
    
label21276:
    movq $2, -56(%rbp)
    jmp label21274
    
label21277:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21278:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21277
    jmp label21278
    
label21281:
    movq $2, -88(%rbp)
    jmp label21279
    
label21280:
    movq $1, -88(%rbp)
    jmp label21279
    
label21282:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21283:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21284:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21282
    jmp label21283
    
label21285:
    movq $1, -96(%rbp)
    jmp label21284
    
label21286:
    movq $2, -96(%rbp)
    jmp label21284
    
label21288:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21287:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21290:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, %rcx
    je label21289
    jmp label21290
    
label21292:
    movq $1, %rcx
    jmp label21291
    
label21293:
    movq $0, %rcx
    jmp label21291
    
label21294:
    cmpq $8, %rcx
    jg label21292
    jmp label21293
    
label21296:
    movq $9, %rcx
    jmp label21294
    
label21295:
    movq $8, %rcx
    jmp label21294
    
start:
    cmpq $1, $1
    jge label21295
    jmp label21296
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21169 temp21212)
 (list temp21207 temp21203)
 (list temp21208 a21166)
 (list a21166 temp21208)
 (list temp21212 a21169)
 (list a21160 temp21199)
 (list temp21216 a21172)
 (list a21157 temp21195)
 (list temp21220 a21175)
 (list a21154 temp21191)
 (list temp21191 a21154)
 (list temp21224 a21178)
 (list a21182 temp21231)
 (list temp21195 a21157)
 (list temp21227 a21179)
 (list a21179 temp21227)
 (list a21178 temp21224)
 (list temp21199 a21160)
 (list temp21231 a21182)
 (list a21175 temp21220)
 (list a21172 temp21216)
 (list temp21203 temp21207))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21178 7)
 (cons a21179 8)
 (cons a21172 9)
 (cons a21175 10)
 (cons a21160 11)
 (cons a21157 12)
 (cons a21169 13)
 (cons a21166 14)
 (cons temp21207 15)
 (cons a21154 16)
 (cons a21151 17)
 (cons a21184 0)
 (cons a21182 0)
 (cons a21183 0)
 (cons temp21231 0)
 (cons temp21227 1)
 (cons temp21233 0)
 (cons temp21224 0)
 (cons temp21229 0)
 (cons a21180 0)
 (cons a21181 0)
 (cons temp21220 1)
 (cons temp21216 0)
 (cons a21176 0)
 (cons a21177 0)
 (cons temp21222 0)
 (cons temp21212 1)
 (cons temp21218 0)
 (cons a21174 0)
 (cons a21173 0)
 (cons temp21208 0)
 (cons temp21214 0)
 (cons a21170 0)
 (cons a21171 0)
 (cons temp21203 1)
 (cons a21168 0)
 (cons temp21210 0)
 (cons a21167 0)
 (cons temp21199 0)
 (cons temp21205 0)
 (cons a21165 0)
 (cons a21164 0)
 (cons a21163 0)
 (cons temp21195 1)
 (cons temp21191 0)
 (cons a21162 0)
 (cons a21161 0)
 (cons temp21201 0)
 (cons a21158 0)
 (cons a21159 0)
 (cons temp21197 0)
 (cons a21156 0)
 (cons a21155 0)
 (cons temp21193 0)
 (cons x21150 0)
 (cons a21153 0)
 (cons temp21186 0)
 (cons temp21189 0)
 (cons a21152 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21234:
    movq %rcx, %rcx
    movq %r12, %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21235:
    movq $1, %rcx
    jmp label21234
    
label21236:
    movq $2, %rcx
    jmp label21234
    
label21237:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21238:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21237
    jmp label21238
    
label21240:
    movq $1, %r12
    jmp label21239
    
label21241:
    movq $2, %r12
    jmp label21239
    
label21242:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21243:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21244:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21242
    jmp label21243
    
label21245:
    movq $1, %r14
    jmp label21244
    
label21246:
    movq $2, %r14
    jmp label21244
    
label21248:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21247:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21247
    jmp label21248
    
label21250:
    movq $1, %r13
    jmp label21249
    
label21251:
    movq $2, %r13
    jmp label21249
    
label21252:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21253:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21252
    jmp label21253
    
label21256:
    movq $2, -64(%rbp)
    jmp label21254
    
label21255:
    movq $1, -64(%rbp)
    jmp label21254
    
label21257:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21258:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21257
    jmp label21258
    
label21260:
    movq $1, -72(%rbp)
    jmp label21259
    
label21261:
    movq $2, -72(%rbp)
    jmp label21259
    
label21262:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21263:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21264:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21262
    jmp label21263
    
label21265:
    movq $1, %rcx
    jmp label21264
    
label21266:
    movq $2, %rcx
    jmp label21264
    
label21267:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21268:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21267
    jmp label21268
    
label21270:
    movq $1, -48(%rbp)
    jmp label21269
    
label21271:
    movq $2, -48(%rbp)
    jmp label21269
    
label21273:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21272:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21272
    jmp label21273
    
label21275:
    movq $1, -56(%rbp)
    jmp label21274
    
label21276:
    movq $2, -56(%rbp)
    jmp label21274
    
label21277:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21278:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21277
    jmp label21278
    
label21281:
    movq $2, -88(%rbp)
    jmp label21279
    
label21280:
    movq $1, -88(%rbp)
    jmp label21279
    
label21282:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21283:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21284:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21282
    jmp label21283
    
label21285:
    movq $1, -96(%rbp)
    jmp label21284
    
label21286:
    movq $2, -96(%rbp)
    jmp label21284
    
label21288:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21287:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21290:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, %rcx
    je label21289
    jmp label21290
    
label21292:
    movq $1, %rcx
    jmp label21291
    
label21293:
    movq $0, %rcx
    jmp label21291
    
label21294:
    cmpq $8, %rcx
    jg label21292
    jmp label21293
    
label21296:
    movq $9, %rcx
    jmp label21294
    
label21295:
    movq $8, %rcx
    jmp label21294
    
start:
    cmpq $1, $1
    jge label21295
    jmp label21296
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21169 temp21212)
 (list temp21207 temp21203)
 (list temp21208 a21166)
 (list a21166 temp21208)
 (list temp21212 a21169)
 (list a21160 temp21199)
 (list temp21216 a21172)
 (list a21157 temp21195)
 (list temp21220 a21175)
 (list a21154 temp21191)
 (list temp21191 a21154)
 (list temp21224 a21178)
 (list a21182 temp21231)
 (list temp21195 a21157)
 (list temp21227 a21179)
 (list a21179 temp21227)
 (list a21178 temp21224)
 (list temp21199 a21160)
 (list temp21231 a21182)
 (list a21175 temp21220)
 (list a21172 temp21216)
 (list temp21203 temp21207))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21178 7)
 (cons a21179 8)
 (cons a21172 9)
 (cons a21175 10)
 (cons a21160 11)
 (cons a21157 12)
 (cons a21169 13)
 (cons a21166 14)
 (cons temp21207 15)
 (cons a21154 16)
 (cons a21151 17)
 (cons a21184 0)
 (cons a21182 0)
 (cons a21183 0)
 (cons temp21231 0)
 (cons temp21227 1)
 (cons temp21233 0)
 (cons temp21224 0)
 (cons temp21229 0)
 (cons a21180 0)
 (cons a21181 0)
 (cons temp21220 1)
 (cons temp21216 0)
 (cons a21176 0)
 (cons a21177 0)
 (cons temp21222 0)
 (cons temp21212 1)
 (cons temp21218 0)
 (cons a21174 0)
 (cons a21173 0)
 (cons temp21208 0)
 (cons temp21214 0)
 (cons a21170 0)
 (cons a21171 0)
 (cons temp21203 1)
 (cons a21168 0)
 (cons temp21210 0)
 (cons a21167 0)
 (cons temp21199 0)
 (cons temp21205 0)
 (cons a21165 0)
 (cons a21164 0)
 (cons a21163 0)
 (cons temp21195 1)
 (cons temp21191 0)
 (cons a21162 0)
 (cons a21161 0)
 (cons temp21201 0)
 (cons a21158 0)
 (cons a21159 0)
 (cons temp21197 0)
 (cons a21156 0)
 (cons a21155 0)
 (cons temp21193 0)
 (cons x21150 0)
 (cons a21153 0)
 (cons temp21186 0)
 (cons temp21189 0)
 (cons a21152 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21234:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21235:
    movq $1, %rcx
    jmp label21234
    
label21236:
    movq $2, %rcx
    jmp label21234
    
label21237:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21238:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21237
    jmp label21238
    
label21240:
    movq $1, %r12
    jmp label21239
    
label21241:
    movq $2, %r12
    jmp label21239
    
label21242:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21243:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21244:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21242
    jmp label21243
    
label21245:
    movq $1, %r14
    jmp label21244
    
label21246:
    movq $2, %r14
    jmp label21244
    
label21248:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21247:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21247
    jmp label21248
    
label21250:
    movq $1, %r13
    jmp label21249
    
label21251:
    movq $2, %r13
    jmp label21249
    
label21252:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21253:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21252
    jmp label21253
    
label21256:
    movq $2, -64(%rbp)
    jmp label21254
    
label21255:
    movq $1, -64(%rbp)
    jmp label21254
    
label21257:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21258:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21257
    jmp label21258
    
label21260:
    movq $1, -72(%rbp)
    jmp label21259
    
label21261:
    movq $2, -72(%rbp)
    jmp label21259
    
label21262:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21263:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21264:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21262
    jmp label21263
    
label21265:
    movq $1, %rcx
    jmp label21264
    
label21266:
    movq $2, %rcx
    jmp label21264
    
label21267:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21268:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21267
    jmp label21268
    
label21270:
    movq $1, -48(%rbp)
    jmp label21269
    
label21271:
    movq $2, -48(%rbp)
    jmp label21269
    
label21273:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21272:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21272
    jmp label21273
    
label21275:
    movq $1, -56(%rbp)
    jmp label21274
    
label21276:
    movq $2, -56(%rbp)
    jmp label21274
    
label21277:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21278:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21277
    jmp label21278
    
label21281:
    movq $2, -88(%rbp)
    jmp label21279
    
label21280:
    movq $1, -88(%rbp)
    jmp label21279
    
label21282:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21283:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21284:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21282
    jmp label21283
    
label21285:
    movq $1, -96(%rbp)
    jmp label21284
    
label21286:
    movq $2, -96(%rbp)
    jmp label21284
    
label21288:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21287:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21290:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, %rcx
    je label21289
    jmp label21290
    
label21292:
    movq $1, %rcx
    jmp label21291
    
label21293:
    movq $0, %rcx
    jmp label21291
    
label21294:
    cmpq $8, %rcx
    jg label21292
    jmp label21293
    
label21296:
    movq $9, %rcx
    jmp label21294
    
label21295:
    movq $8, %rcx
    jmp label21294
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21295
    jmp label21296
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21169 temp21212)
 (list temp21207 temp21203)
 (list temp21208 a21166)
 (list a21166 temp21208)
 (list temp21212 a21169)
 (list a21160 temp21199)
 (list temp21216 a21172)
 (list a21157 temp21195)
 (list temp21220 a21175)
 (list a21154 temp21191)
 (list temp21191 a21154)
 (list temp21224 a21178)
 (list a21182 temp21231)
 (list temp21195 a21157)
 (list temp21227 a21179)
 (list a21179 temp21227)
 (list a21178 temp21224)
 (list temp21199 a21160)
 (list temp21231 a21182)
 (list a21175 temp21220)
 (list a21172 temp21216)
 (list temp21203 temp21207))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21178 7)
 (cons a21179 8)
 (cons a21172 9)
 (cons a21175 10)
 (cons a21160 11)
 (cons a21157 12)
 (cons a21169 13)
 (cons a21166 14)
 (cons temp21207 15)
 (cons a21154 16)
 (cons a21151 17)
 (cons a21184 0)
 (cons a21182 0)
 (cons a21183 0)
 (cons temp21231 0)
 (cons temp21227 1)
 (cons temp21233 0)
 (cons temp21224 0)
 (cons temp21229 0)
 (cons a21180 0)
 (cons a21181 0)
 (cons temp21220 1)
 (cons temp21216 0)
 (cons a21176 0)
 (cons a21177 0)
 (cons temp21222 0)
 (cons temp21212 1)
 (cons temp21218 0)
 (cons a21174 0)
 (cons a21173 0)
 (cons temp21208 0)
 (cons temp21214 0)
 (cons a21170 0)
 (cons a21171 0)
 (cons temp21203 1)
 (cons a21168 0)
 (cons temp21210 0)
 (cons a21167 0)
 (cons temp21199 0)
 (cons temp21205 0)
 (cons a21165 0)
 (cons a21164 0)
 (cons a21163 0)
 (cons temp21195 1)
 (cons temp21191 0)
 (cons a21162 0)
 (cons a21161 0)
 (cons temp21201 0)
 (cons a21158 0)
 (cons a21159 0)
 (cons temp21197 0)
 (cons a21156 0)
 (cons a21155 0)
 (cons temp21193 0)
 (cons x21150 0)
 (cons a21153 0)
 (cons temp21186 0)
 (cons temp21189 0)
 (cons a21152 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21234:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21235:
    movq $1, %rcx
    jmp label21234
    
label21236:
    movq $2, %rcx
    jmp label21234
    
label21237:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21238:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21237
    jmp label21238
    
label21240:
    movq $1, %r12
    jmp label21239
    
label21241:
    movq $2, %r12
    jmp label21239
    
label21242:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21243:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21244:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21242
    jmp label21243
    
label21245:
    movq $1, %r14
    jmp label21244
    
label21246:
    movq $2, %r14
    jmp label21244
    
label21248:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21247:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21247
    jmp label21248
    
label21250:
    movq $1, %r13
    jmp label21249
    
label21251:
    movq $2, %r13
    jmp label21249
    
label21252:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21253:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21252
    jmp label21253
    
label21256:
    movq $2, -64(%rbp)
    jmp label21254
    
label21255:
    movq $1, -64(%rbp)
    jmp label21254
    
label21257:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21258:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21257
    jmp label21258
    
label21260:
    movq $1, -72(%rbp)
    jmp label21259
    
label21261:
    movq $2, -72(%rbp)
    jmp label21259
    
label21262:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21263:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21264:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21262
    jmp label21263
    
label21265:
    movq $1, %rcx
    jmp label21264
    
label21266:
    movq $2, %rcx
    jmp label21264
    
label21267:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21268:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21267
    jmp label21268
    
label21270:
    movq $1, -48(%rbp)
    jmp label21269
    
label21271:
    movq $2, -48(%rbp)
    jmp label21269
    
label21273:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21272:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21272
    jmp label21273
    
label21275:
    movq $1, -56(%rbp)
    jmp label21274
    
label21276:
    movq $2, -56(%rbp)
    jmp label21274
    
label21277:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21278:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21277
    jmp label21278
    
label21281:
    movq $2, -88(%rbp)
    jmp label21279
    
label21280:
    movq $1, -88(%rbp)
    jmp label21279
    
label21282:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21283:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21284:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21282
    jmp label21283
    
label21285:
    movq $1, -96(%rbp)
    jmp label21284
    
label21286:
    movq $2, -96(%rbp)
    jmp label21284
    
label21288:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21287:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21290:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, %rcx
    je label21289
    jmp label21290
    
label21292:
    movq $1, %rcx
    jmp label21291
    
label21293:
    movq $0, %rcx
    jmp label21291
    
label21294:
    cmpq $8, %rcx
    jg label21292
    jmp label21293
    
label21296:
    movq $9, %rcx
    jmp label21294
    
label21295:
    movq $8, %rcx
    jmp label21294
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21295
    jmp label21296
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21169 temp21212)
 (list temp21207 temp21203)
 (list temp21208 a21166)
 (list a21166 temp21208)
 (list temp21212 a21169)
 (list a21160 temp21199)
 (list temp21216 a21172)
 (list a21157 temp21195)
 (list temp21220 a21175)
 (list a21154 temp21191)
 (list temp21191 a21154)
 (list temp21224 a21178)
 (list a21182 temp21231)
 (list temp21195 a21157)
 (list temp21227 a21179)
 (list a21179 temp21227)
 (list a21178 temp21224)
 (list temp21199 a21160)
 (list temp21231 a21182)
 (list a21175 temp21220)
 (list a21172 temp21216)
 (list temp21203 temp21207))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21178 7)
 (cons a21179 8)
 (cons a21172 9)
 (cons a21175 10)
 (cons a21160 11)
 (cons a21157 12)
 (cons a21169 13)
 (cons a21166 14)
 (cons temp21207 15)
 (cons a21154 16)
 (cons a21151 17)
 (cons a21184 0)
 (cons a21182 0)
 (cons a21183 0)
 (cons temp21231 0)
 (cons temp21227 1)
 (cons temp21233 0)
 (cons temp21224 0)
 (cons temp21229 0)
 (cons a21180 0)
 (cons a21181 0)
 (cons temp21220 1)
 (cons temp21216 0)
 (cons a21176 0)
 (cons a21177 0)
 (cons temp21222 0)
 (cons temp21212 1)
 (cons temp21218 0)
 (cons a21174 0)
 (cons a21173 0)
 (cons temp21208 0)
 (cons temp21214 0)
 (cons a21170 0)
 (cons a21171 0)
 (cons temp21203 1)
 (cons a21168 0)
 (cons temp21210 0)
 (cons a21167 0)
 (cons temp21199 0)
 (cons temp21205 0)
 (cons a21165 0)
 (cons a21164 0)
 (cons a21163 0)
 (cons temp21195 1)
 (cons temp21191 0)
 (cons a21162 0)
 (cons a21161 0)
 (cons temp21201 0)
 (cons a21158 0)
 (cons a21159 0)
 (cons temp21197 0)
 (cons a21156 0)
 (cons a21155 0)
 (cons temp21193 0)
 (cons x21150 0)
 (cons a21153 0)
 (cons temp21186 0)
 (cons temp21189 0)
 (cons a21152 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21234:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21235:
    movq $1, %rcx
    jmp label21234
    
label21236:
    movq $2, %rcx
    jmp label21234
    
label21237:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21238:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21237
    jmp label21238
    
label21240:
    movq $1, %r12
    jmp label21239
    
label21241:
    movq $2, %r12
    jmp label21239
    
label21242:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21243:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21244:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21242
    jmp label21243
    
label21245:
    movq $1, %r14
    jmp label21244
    
label21246:
    movq $2, %r14
    jmp label21244
    
label21248:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21247:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21247
    jmp label21248
    
label21250:
    movq $1, %r13
    jmp label21249
    
label21251:
    movq $2, %r13
    jmp label21249
    
label21252:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21253:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21252
    jmp label21253
    
label21256:
    movq $2, -64(%rbp)
    jmp label21254
    
label21255:
    movq $1, -64(%rbp)
    jmp label21254
    
label21257:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21258:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21257
    jmp label21258
    
label21260:
    movq $1, -72(%rbp)
    jmp label21259
    
label21261:
    movq $2, -72(%rbp)
    jmp label21259
    
label21262:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21263:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21264:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21262
    jmp label21263
    
label21265:
    movq $1, %rcx
    jmp label21264
    
label21266:
    movq $2, %rcx
    jmp label21264
    
label21267:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21268:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21267
    jmp label21268
    
label21270:
    movq $1, -48(%rbp)
    jmp label21269
    
label21271:
    movq $2, -48(%rbp)
    jmp label21269
    
label21273:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21272:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21272
    jmp label21273
    
label21275:
    movq $1, -56(%rbp)
    jmp label21274
    
label21276:
    movq $2, -56(%rbp)
    jmp label21274
    
label21277:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21278:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21277
    jmp label21278
    
label21281:
    movq $2, -88(%rbp)
    jmp label21279
    
label21280:
    movq $1, -88(%rbp)
    jmp label21279
    
label21282:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21283:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21284:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21282
    jmp label21283
    
label21285:
    movq $1, -96(%rbp)
    jmp label21284
    
label21286:
    movq $2, -96(%rbp)
    jmp label21284
    
label21288:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21287:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21290:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, %rcx
    je label21289
    jmp label21290
    
label21292:
    movq $1, %rcx
    jmp label21291
    
label21293:
    movq $0, %rcx
    jmp label21291
    
label21294:
    cmpq $8, %rcx
    jg label21292
    jmp label21293
    
label21296:
    movq $9, %rcx
    jmp label21294
    
label21295:
    movq $8, %rcx
    jmp label21294
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21295
    jmp label21296
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21216 : 'Integer, a21151 : 'Integer, x21150 : 'Boolean, temp21218 : 'Integer, temp21212 : 'Integer, a21155 : 'Boolean, a21154 : 'Integer, a21153 : 'Boolean, temp21214 : 'Integer, a21152 : 'Boolean, temp21208 : 'Integer, temp21210 : 'Integer, temp21205 : 'Integer, temp21207 : 'Integer, a21167 : 'Boolean, temp21233 : 'Integer, a21166 : 'Integer, a21165 : 'Boolean, a21164 : 'Boolean, a21171 : 'Boolean, a21170 : 'Boolean, temp21229 : 'Integer, a21169 : 'Integer, a21168 : 'Boolean, temp21231 : 'Integer, a21159 : 'Boolean, temp21224 : 'Integer, a21158 : 'Boolean, a21157 : 'Integer, a21156 : 'Boolean, temp21227 : 'Integer, temp21220 : 'Integer, a21163 : 'Integer, a21162 : 'Boolean, a21161 : 'Boolean, temp21222 : 'Integer, a21160 : 'Integer, a21183 : 'Boolean, a21182 : 'Integer, a21181 : 'Boolean, a21180 : 'Boolean, temp21186 : 'Integer, a21184 : 'Boolean, a21175 : 'Integer, a21174 : 'Boolean, a21173 : 'Boolean, a21172 : 'Integer, a21179 : 'Integer, a21178 : 'Integer, a21177 : 'Boolean, a21176 : 'Boolean, temp21199 : 'Integer, temp21197 : 'Integer, temp21203 : 'Integer, temp21201 : 'Integer, temp21191 : 'Integer, temp21189 : 'Integer, temp21195 : 'Integer, temp21193 : 'Integer, 
tsorted
:
'(label21234
  label21235
  label21236
  label21237
  label21238
  label21239
  label21240
  label21241
  label21242
  label21243
  label21244
  label21245
  label21246
  label21248
  label21247
  label21249
  label21250
  label21251
  label21252
  label21253
  label21254
  label21256
  label21255
  label21257
  label21258
  label21259
  label21260
  label21261
  label21262
  label21263
  label21264
  label21265
  label21266
  label21267
  label21289
  label21268
  label21269
  label21270
  label21271
  label21273
  label21272
  label21274
  label21275
  label21276
  label21277
  label21278
  label21279
  label21281
  label21280
  label21282
  label21283
  label21284
  label21285
  label21286
  label21288
  label21287
  label21290
  label21291
  label21292
  label21293
  label21294
  label21296
  label21295
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21169 temp21212)
 (list temp21207 temp21203)
 (list temp21208 a21166)
 (list a21166 temp21208)
 (list temp21212 a21169)
 (list a21160 temp21199)
 (list temp21216 a21172)
 (list a21157 temp21195)
 (list temp21220 a21175)
 (list a21154 temp21191)
 (list temp21191 a21154)
 (list temp21224 a21178)
 (list a21182 temp21231)
 (list temp21195 a21157)
 (list temp21227 a21179)
 (list a21179 temp21227)
 (list a21178 temp21224)
 (list temp21199 a21160)
 (list temp21231 a21182)
 (list a21175 temp21220)
 (list a21172 temp21216)
 (list temp21203 temp21207))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21178 7)
 (cons a21179 8)
 (cons a21172 9)
 (cons a21175 10)
 (cons a21160 11)
 (cons a21157 12)
 (cons a21169 13)
 (cons a21166 14)
 (cons temp21207 15)
 (cons a21154 16)
 (cons a21151 17)
 (cons a21184 0)
 (cons a21182 0)
 (cons a21183 0)
 (cons temp21231 0)
 (cons temp21227 1)
 (cons temp21233 0)
 (cons temp21224 0)
 (cons temp21229 0)
 (cons a21180 0)
 (cons a21181 0)
 (cons temp21220 1)
 (cons temp21216 0)
 (cons a21176 0)
 (cons a21177 0)
 (cons temp21222 0)
 (cons temp21212 1)
 (cons temp21218 0)
 (cons a21174 0)
 (cons a21173 0)
 (cons temp21208 0)
 (cons temp21214 0)
 (cons a21170 0)
 (cons a21171 0)
 (cons temp21203 1)
 (cons a21168 0)
 (cons temp21210 0)
 (cons a21167 0)
 (cons temp21199 0)
 (cons temp21205 0)
 (cons a21165 0)
 (cons a21164 0)
 (cons a21163 0)
 (cons temp21195 1)
 (cons temp21191 0)
 (cons a21162 0)
 (cons a21161 0)
 (cons temp21201 0)
 (cons a21158 0)
 (cons a21159 0)
 (cons temp21197 0)
 (cons a21156 0)
 (cons a21155 0)
 (cons temp21193 0)
 (cons x21150 0)
 (cons a21153 0)
 (cons temp21186 0)
 (cons temp21189 0)
 (cons a21152 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21234:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21235:
    movq $1, %rcx
    jmp label21234
    
label21236:
    movq $2, %rcx
    jmp label21234
    
label21237:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21238:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21235
    jmp label21236
    
label21239:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21237
    jmp label21238
    
label21240:
    movq $1, %r12
    jmp label21239
    
label21241:
    movq $2, %r12
    jmp label21239
    
label21242:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21243:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21240
    jmp label21241
    
label21244:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21242
    jmp label21243
    
label21245:
    movq $1, %r14
    jmp label21244
    
label21246:
    movq $2, %r14
    jmp label21244
    
label21248:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21247:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21245
    jmp label21246
    
label21249:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21247
    jmp label21248
    
label21250:
    movq $1, %r13
    jmp label21249
    
label21251:
    movq $2, %r13
    jmp label21249
    
label21252:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21253:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21250
    jmp label21251
    
label21254:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21252
    jmp label21253
    
label21256:
    movq $2, -64(%rbp)
    jmp label21254
    
label21255:
    movq $1, -64(%rbp)
    jmp label21254
    
label21257:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21258:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21255
    jmp label21256
    
label21259:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21257
    jmp label21258
    
label21260:
    movq $1, -72(%rbp)
    jmp label21259
    
label21261:
    movq $2, -72(%rbp)
    jmp label21259
    
label21262:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21263:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21260
    jmp label21261
    
label21264:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21262
    jmp label21263
    
label21265:
    movq $1, %rcx
    jmp label21264
    
label21266:
    movq $2, %rcx
    jmp label21264
    
label21267:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21289:
    movq $1, %rax
    jmp conclusion
    
label21268:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21265
    jmp label21266
    
label21269:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21267
    jmp label21268
    
label21270:
    movq $1, -48(%rbp)
    jmp label21269
    
label21271:
    movq $2, -48(%rbp)
    jmp label21269
    
label21273:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21272:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21270
    jmp label21271
    
label21274:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21272
    jmp label21273
    
label21275:
    movq $1, -56(%rbp)
    jmp label21274
    
label21276:
    movq $2, -56(%rbp)
    jmp label21274
    
label21277:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21278:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21275
    jmp label21276
    
label21279:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21277
    jmp label21278
    
label21281:
    movq $2, -88(%rbp)
    jmp label21279
    
label21280:
    movq $1, -88(%rbp)
    jmp label21279
    
label21282:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21283:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21280
    jmp label21281
    
label21284:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21282
    jmp label21283
    
label21285:
    movq $1, -96(%rbp)
    jmp label21284
    
label21286:
    movq $2, -96(%rbp)
    jmp label21284
    
label21288:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21287:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21285
    jmp label21286
    
label21290:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21287
    jmp label21288
    
label21291:
    cmpq $1, %rcx
    je label21289
    jmp label21290
    
label21292:
    movq $1, %rcx
    jmp label21291
    
label21293:
    movq $0, %rcx
    jmp label21291
    
label21294:
    cmpq $8, %rcx
    jg label21292
    jmp label21293
    
label21296:
    movq $9, %rcx
    jmp label21294
    
label21295:
    movq $8, %rcx
    jmp label21294
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21295
    jmp label21296
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_21"

expected-result:
22


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (if (if (> (read) 1)
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (if (if (> (read) 1)
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (if (if (> (read) 1)
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x21311 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x21311
      1
      (let ([a21312 (if (if (if (if (if (> (read) 1)
                                       (let ([a21313 #t])
                                          a21313)
                                       (let ([a21314 #f])
                                          a21314))
                                    
                                   (let ([a21315 #t])
                                      a21315)
                                   (let ([a21316 #f])
                                      a21316))
                                
                               (let ([a21317 #t])
                                  a21317)
                               (let ([a21318 #f])
                                  a21318))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (+ a21312 (let ([a21319 (if (if (if (if (> (read) 1)
                                                (let ([a21320 #t])
                                                   a21320)
                                                (let ([a21321 #f])
                                                   a21321))
                                             
                                            (let ([a21322 #t])
                                               a21322)
                                            (let ([a21323 #f])
                                               a21323))
                                         
                                        (let ([a21324 #t])
                                           a21324)
                                        (let ([a21325 #f])
                                           a21325))
                                     
                                    1
                                    2)
                                 ])
                      (+ a21319 (let ([a21326 (if (if (if (if (> (read) 1)
                                                             (let ([a21327 #t])
                                                                a21327)
                                                             (let ([a21328 #f])
                                                                a21328))
                                                          
                                                         (let ([a21329 #t])
                                                            a21329)
                                                         (let ([a21330 #f])
                                                            a21330))
                                                      
                                                     (let ([a21331 #t])
                                                        a21331)
                                                     (let ([a21332 #f])
                                                        a21332))
                                                  
                                                 1
                                                 2)
                                              ])
                                   (+ a21326 (let ([a21333 (if (if (if (if (> (read) 1)
                                                                          (let ([a21334 #t])
                                                                             a21334)
                                                                          (let ([a21335 #f])
                                                                             a21335))
                                                                       
                                                                      (let ([a21336 #t])
                                                                         a21336)
                                                                      (let ([a21337 #f])
                                                                         a21337))
                                                                   
                                                                  (let ([a21338 #t])
                                                                     a21338)
                                                                  (let ([a21339 #f])
                                                                     a21339))
                                                               
                                                              1
                                                              2)
                                                           ])
                                                (+ a21333 (let ([a21340 (if (if (if (if (> (read) 1)
                                                                                       (let ([a21341 #t])
                                                                                          a21341)
                                                                                       (let ([a21342 #f])
                                                                                          a21342))
                                                                                    
                                                                                   (let ([a21343 #t])
                                                                                      a21343)
                                                                                   (let ([a21344 #f])
                                                                                      a21344))
                                                                                
                                                                               (let ([a21345 #t])
                                                                                  a21345)
                                                                               (let ([a21346 #f])
                                                                                  a21346))
                                                                            
                                                                           1
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a21347 (if (if (if (if (> (read) 1)
                                                                                                    (let ([a21348 #t])
                                                                                                       a21348)
                                                                                                    (let ([a21349 #f])
                                                                                                       a21349))
                                                                                                 
                                                                                                (let ([a21350 #t])
                                                                                                   a21350)
                                                                                                (let ([a21351 #f])
                                                                                                   a21351))
                                                                                             
                                                                                            (let ([a21352 #t])
                                                                                               a21352)
                                                                                            (let ([a21353 #f])
                                                                                               a21353))
                                                                                         
                                                                                        1
                                                                                        2)
                                                                                     ])
                                                                          (+ a21347 (let ([a21354 (if (if (if (if (> (read) 1)
                                                                                                                 (let ([a21355 #t])
                                                                                                                    a21355)
                                                                                                                 (let ([a21356 #f])
                                                                                                                    a21356))
                                                                                                              
                                                                                                             (let ([a21357 #t])
                                                                                                                a21357)
                                                                                                             (let ([a21358 #f])
                                                                                                                a21358))
                                                                                                          
                                                                                                         (let ([a21359 #t])
                                                                                                            a21359)
                                                                                                         (let ([a21360 #f])
                                                                                                            a21360))
                                                                                                      
                                                                                                     1
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a21354 (let ([a21361 (if (if (if (if (> (read) 1)
                                                                                                                              (let ([a21362 #t])
                                                                                                                                 a21362)
                                                                                                                              (let ([a21363 #f])
                                                                                                                                 a21363))
                                                                                                                           
                                                                                                                          (let ([a21364 #t])
                                                                                                                             a21364)
                                                                                                                          (let ([a21365 #f])
                                                                                                                             a21365))
                                                                                                                       
                                                                                                                      (let ([a21366 #t])
                                                                                                                         a21366)
                                                                                                                      (let ([a21367 #f])
                                                                                                                         a21367))
                                                                                                                   
                                                                                                                  1
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a21361 (let ([a21368 (if (if (if (if (> (read) 1)
                                                                                                                                           (let ([a21369 #t])
                                                                                                                                              a21369)
                                                                                                                                           (let ([a21370 #f])
                                                                                                                                              a21370))
                                                                                                                                        
                                                                                                                                       (let ([a21371 #t])
                                                                                                                                          a21371)
                                                                                                                                       (let ([a21372 #f])
                                                                                                                                          a21372))
                                                                                                                                    
                                                                                                                                   (let ([a21373 #t])
                                                                                                                                      a21373)
                                                                                                                                   (let ([a21374 #f])
                                                                                                                                      a21374))
                                                                                                                                
                                                                                                                               1
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a21368 (let ([a21375 (read)])
                                                                                                                              (+ a21375 (let ([a21376 (if (if (if (if (> (read) 1)
                                                                                                                                                                     (let ([a21377 #t])
                                                                                                                                                                        a21377)
                                                                                                                                                                     (let ([a21378 #f])
                                                                                                                                                                        a21378))
                                                                                                                                                                  
                                                                                                                                                                 (let ([a21379 #t])
                                                                                                                                                                    a21379)
                                                                                                                                                                 (let ([a21380 #f])
                                                                                                                                                                    a21380))
                                                                                                                                                              
                                                                                                                                                             (let ([a21381 #t])
                                                                                                                                                                a21381)
                                                                                                                                                             (let ([a21382 #f])
                                                                                                                                                                a21382))
                                                                                                                                                          
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a21376 (let ([a21383 (if (if (if (if (> (read) 1)
                                                                                                                                                                                  (let ([a21384 #t])
                                                                                                                                                                                     a21384)
                                                                                                                                                                                  (let ([a21385 #f])
                                                                                                                                                                                     a21385))
                                                                                                                                                                               
                                                                                                                                                                              (let ([a21386 #t])
                                                                                                                                                                                 a21386)
                                                                                                                                                                              (let ([a21387 #f])
                                                                                                                                                                                 a21387))
                                                                                                                                                                           
                                                                                                                                                                          (let ([a21388 #t])
                                                                                                                                                                             a21388)
                                                                                                                                                                          (let ([a21389 #f])
                                                                                                                                                                             a21389))
                                                                                                                                                                       
                                                                                                                                                                      1
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a21383))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x21311 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x21311
      1
      (let ([a21312 (if (if (if (if (if (> (read) 1)
                                       (let ([a21313 #t])
                                          a21313)
                                       (let ([a21314 #f])
                                          a21314))
                                    
                                   (let ([a21315 #t])
                                      a21315)
                                   (let ([a21316 #f])
                                      a21316))
                                
                               (let ([a21317 #t])
                                  a21317)
                               (let ([a21318 #f])
                                  a21318))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (+ a21312 (let ([a21319 (if (if (if (if (> (read) 1)
                                                (let ([a21320 #t])
                                                   a21320)
                                                (let ([a21321 #f])
                                                   a21321))
                                             
                                            (let ([a21322 #t])
                                               a21322)
                                            (let ([a21323 #f])
                                               a21323))
                                         
                                        (let ([a21324 #t])
                                           a21324)
                                        (let ([a21325 #f])
                                           a21325))
                                     
                                    1
                                    2)
                                 ])
                      (+ a21319 (let ([a21326 (if (if (if (if (> (read) 1)
                                                             (let ([a21327 #t])
                                                                a21327)
                                                             (let ([a21328 #f])
                                                                a21328))
                                                          
                                                         (let ([a21329 #t])
                                                            a21329)
                                                         (let ([a21330 #f])
                                                            a21330))
                                                      
                                                     (let ([a21331 #t])
                                                        a21331)
                                                     (let ([a21332 #f])
                                                        a21332))
                                                  
                                                 1
                                                 2)
                                              ])
                                   (+ a21326 (let ([a21333 (if (if (if (if (> (read) 1)
                                                                          (let ([a21334 #t])
                                                                             a21334)
                                                                          (let ([a21335 #f])
                                                                             a21335))
                                                                       
                                                                      (let ([a21336 #t])
                                                                         a21336)
                                                                      (let ([a21337 #f])
                                                                         a21337))
                                                                   
                                                                  (let ([a21338 #t])
                                                                     a21338)
                                                                  (let ([a21339 #f])
                                                                     a21339))
                                                               
                                                              1
                                                              2)
                                                           ])
                                                (+ a21333 (let ([a21340 (if (if (if (if (> (read) 1)
                                                                                       (let ([a21341 #t])
                                                                                          a21341)
                                                                                       (let ([a21342 #f])
                                                                                          a21342))
                                                                                    
                                                                                   (let ([a21343 #t])
                                                                                      a21343)
                                                                                   (let ([a21344 #f])
                                                                                      a21344))
                                                                                
                                                                               (let ([a21345 #t])
                                                                                  a21345)
                                                                               (let ([a21346 #f])
                                                                                  a21346))
                                                                            
                                                                           1
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a21347 (if (if (if (if (> (read) 1)
                                                                                                    (let ([a21348 #t])
                                                                                                       a21348)
                                                                                                    (let ([a21349 #f])
                                                                                                       a21349))
                                                                                                 
                                                                                                (let ([a21350 #t])
                                                                                                   a21350)
                                                                                                (let ([a21351 #f])
                                                                                                   a21351))
                                                                                             
                                                                                            (let ([a21352 #t])
                                                                                               a21352)
                                                                                            (let ([a21353 #f])
                                                                                               a21353))
                                                                                         
                                                                                        1
                                                                                        2)
                                                                                     ])
                                                                          (+ a21347 (let ([a21354 (if (if (if (if (> (read) 1)
                                                                                                                 (let ([a21355 #t])
                                                                                                                    a21355)
                                                                                                                 (let ([a21356 #f])
                                                                                                                    a21356))
                                                                                                              
                                                                                                             (let ([a21357 #t])
                                                                                                                a21357)
                                                                                                             (let ([a21358 #f])
                                                                                                                a21358))
                                                                                                          
                                                                                                         (let ([a21359 #t])
                                                                                                            a21359)
                                                                                                         (let ([a21360 #f])
                                                                                                            a21360))
                                                                                                      
                                                                                                     1
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a21354 (let ([a21361 (if (if (if (if (> (read) 1)
                                                                                                                              (let ([a21362 #t])
                                                                                                                                 a21362)
                                                                                                                              (let ([a21363 #f])
                                                                                                                                 a21363))
                                                                                                                           
                                                                                                                          (let ([a21364 #t])
                                                                                                                             a21364)
                                                                                                                          (let ([a21365 #f])
                                                                                                                             a21365))
                                                                                                                       
                                                                                                                      (let ([a21366 #t])
                                                                                                                         a21366)
                                                                                                                      (let ([a21367 #f])
                                                                                                                         a21367))
                                                                                                                   
                                                                                                                  1
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a21361 (let ([a21368 (if (if (if (if (> (read) 1)
                                                                                                                                           (let ([a21369 #t])
                                                                                                                                              a21369)
                                                                                                                                           (let ([a21370 #f])
                                                                                                                                              a21370))
                                                                                                                                        
                                                                                                                                       (let ([a21371 #t])
                                                                                                                                          a21371)
                                                                                                                                       (let ([a21372 #f])
                                                                                                                                          a21372))
                                                                                                                                    
                                                                                                                                   (let ([a21373 #t])
                                                                                                                                      a21373)
                                                                                                                                   (let ([a21374 #f])
                                                                                                                                      a21374))
                                                                                                                                
                                                                                                                               1
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a21368 (let ([a21375 (read)])
                                                                                                                              (+ a21375 (let ([a21376 (if (if (if (if (> (read) 1)
                                                                                                                                                                     (let ([a21377 #t])
                                                                                                                                                                        a21377)
                                                                                                                                                                     (let ([a21378 #f])
                                                                                                                                                                        a21378))
                                                                                                                                                                  
                                                                                                                                                                 (let ([a21379 #t])
                                                                                                                                                                    a21379)
                                                                                                                                                                 (let ([a21380 #f])
                                                                                                                                                                    a21380))
                                                                                                                                                              
                                                                                                                                                             (let ([a21381 #t])
                                                                                                                                                                a21381)
                                                                                                                                                             (let ([a21382 #f])
                                                                                                                                                                a21382))
                                                                                                                                                          
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a21376 (let ([a21383 (if (if (if (if (> (read) 1)
                                                                                                                                                                                  (let ([a21384 #t])
                                                                                                                                                                                     a21384)
                                                                                                                                                                                  (let ([a21385 #f])
                                                                                                                                                                                     a21385))
                                                                                                                                                                               
                                                                                                                                                                              (let ([a21386 #t])
                                                                                                                                                                                 a21386)
                                                                                                                                                                              (let ([a21387 #f])
                                                                                                                                                                                 a21387))
                                                                                                                                                                           
                                                                                                                                                                          (let ([a21388 #t])
                                                                                                                                                                             a21388)
                                                                                                                                                                          (let ([a21389 #f])
                                                                                                                                                                             a21389))
                                                                                                                                                                       
                                                                                                                                                                      1
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a21383))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x21311 (if (let ([temp21391 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp21391 8))
                 #t
                 #f)
              ])
   (if x21311
      1
      (let ([a21312 (if (if (if (if (if (let ([temp21394 (read)])
                                           (> temp21394 1))
                                       (let ([a21313 #t])
                                          a21313)
                                       (let ([a21314 #f])
                                          a21314))
                                    
                                   (let ([a21315 #t])
                                      a21315)
                                   (let ([a21316 #f])
                                      a21316))
                                
                               (let ([a21317 #t])
                                  a21317)
                               (let ([a21318 #f])
                                  a21318))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (let ([a21319 (if (if (if (if (let ([temp21398 (read)])
                                          (> temp21398 1))
                                      (let ([a21320 #t])
                                         a21320)
                                      (let ([a21321 #f])
                                         a21321))
                                   
                                  (let ([a21322 #t])
                                     a21322)
                                  (let ([a21323 #f])
                                     a21323))
                               
                              (let ([a21324 #t])
                                 a21324)
                              (let ([a21325 #f])
                                 a21325))
                           
                          1
                          2)
                       ])
            (let ([temp21396 (let ([a21326 (if (if (if (if (let ([temp21402 (read)])
                                                              (> temp21402 1))
                                                          (let ([a21327 #t])
                                                             a21327)
                                                          (let ([a21328 #f])
                                                             a21328))
                                                       
                                                      (let ([a21329 #t])
                                                         a21329)
                                                      (let ([a21330 #f])
                                                         a21330))
                                                   
                                                  (let ([a21331 #t])
                                                     a21331)
                                                  (let ([a21332 #f])
                                                     a21332))
                                               
                                              1
                                              2)
                                           ])
                                (let ([temp21400 (let ([a21333 (if (if (if (if (let ([temp21406 (read)])
                                                                                  (> temp21406 1))
                                                                              (let ([a21334 #t])
                                                                                 a21334)
                                                                              (let ([a21335 #f])
                                                                                 a21335))
                                                                           
                                                                          (let ([a21336 #t])
                                                                             a21336)
                                                                          (let ([a21337 #f])
                                                                             a21337))
                                                                       
                                                                      (let ([a21338 #t])
                                                                         a21338)
                                                                      (let ([a21339 #f])
                                                                         a21339))
                                                                   
                                                                  1
                                                                  2)
                                                               ])
                                                    (let ([temp21404 (let ([a21340 (if (if (if (if (let ([temp21410 (read)])
                                                                                                      (> temp21410 1))
                                                                                                  (let ([a21341 #t])
                                                                                                     a21341)
                                                                                                  (let ([a21342 #f])
                                                                                                     a21342))
                                                                                               
                                                                                              (let ([a21343 #t])
                                                                                                 a21343)
                                                                                              (let ([a21344 #f])
                                                                                                 a21344))
                                                                                           
                                                                                          (let ([a21345 #t])
                                                                                             a21345)
                                                                                          (let ([a21346 #f])
                                                                                             a21346))
                                                                                       
                                                                                      1
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp21408 (let ([temp21412 (read)])
                                                                                            (let ([a21347 (if (if (if (if (let ([temp21415 (read)])
                                                                                                                             (> temp21415 1))
                                                                                                                         (let ([a21348 #t])
                                                                                                                            a21348)
                                                                                                                         (let ([a21349 #f])
                                                                                                                            a21349))
                                                                                                                      
                                                                                                                     (let ([a21350 #t])
                                                                                                                        a21350)
                                                                                                                     (let ([a21351 #f])
                                                                                                                        a21351))
                                                                                                                  
                                                                                                                 (let ([a21352 #t])
                                                                                                                    a21352)
                                                                                                                 (let ([a21353 #f])
                                                                                                                    a21353))
                                                                                                              
                                                                                                             1
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp21413 (let ([a21354 (if (if (if (if (let ([temp21419 (read)])
                                                                                                                                                 (> temp21419 1))
                                                                                                                                             (let ([a21355 #t])
                                                                                                                                                a21355)
                                                                                                                                             (let ([a21356 #f])
                                                                                                                                                a21356))
                                                                                                                                          
                                                                                                                                         (let ([a21357 #t])
                                                                                                                                            a21357)
                                                                                                                                         (let ([a21358 #f])
                                                                                                                                            a21358))
                                                                                                                                      
                                                                                                                                     (let ([a21359 #t])
                                                                                                                                        a21359)
                                                                                                                                     (let ([a21360 #f])
                                                                                                                                        a21360))
                                                                                                                                  
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp21417 (let ([a21361 (if (if (if (if (let ([temp21423 (read)])
                                                                                                                                                                     (> temp21423 1))
                                                                                                                                                                 (let ([a21362 #t])
                                                                                                                                                                    a21362)
                                                                                                                                                                 (let ([a21363 #f])
                                                                                                                                                                    a21363))
                                                                                                                                                              
                                                                                                                                                             (let ([a21364 #t])
                                                                                                                                                                a21364)
                                                                                                                                                             (let ([a21365 #f])
                                                                                                                                                                a21365))
                                                                                                                                                          
                                                                                                                                                         (let ([a21366 #t])
                                                                                                                                                            a21366)
                                                                                                                                                         (let ([a21367 #f])
                                                                                                                                                            a21367))
                                                                                                                                                      
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp21421 (let ([a21368 (if (if (if (if (let ([temp21427 (read)])
                                                                                                                                                                                         (> temp21427 1))
                                                                                                                                                                                     (let ([a21369 #t])
                                                                                                                                                                                        a21369)
                                                                                                                                                                                     (let ([a21370 #f])
                                                                                                                                                                                        a21370))
                                                                                                                                                                                  
                                                                                                                                                                                 (let ([a21371 #t])
                                                                                                                                                                                    a21371)
                                                                                                                                                                                 (let ([a21372 #f])
                                                                                                                                                                                    a21372))
                                                                                                                                                                              
                                                                                                                                                                             (let ([a21373 #t])
                                                                                                                                                                                a21373)
                                                                                                                                                                             (let ([a21374 #f])
                                                                                                                                                                                a21374))
                                                                                                                                                                          
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp21425 (let ([a21375 (read)])
                                                                                                                                                                               (let ([temp21429 (let ([a21376 (if (if (if (if (let ([temp21434 (read)])
                                                                                                                                                                                                                                 (> temp21434 1))
                                                                                                                                                                                                                             (let ([a21377 #t])
                                                                                                                                                                                                                                a21377)
                                                                                                                                                                                                                             (let ([a21378 #f])
                                                                                                                                                                                                                                a21378))
                                                                                                                                                                                                                          
                                                                                                                                                                                                                         (let ([a21379 #t])
                                                                                                                                                                                                                            a21379)
                                                                                                                                                                                                                         (let ([a21380 #f])
                                                                                                                                                                                                                            a21380))
                                                                                                                                                                                                                      
                                                                                                                                                                                                                     (let ([a21381 #t])
                                                                                                                                                                                                                        a21381)
                                                                                                                                                                                                                     (let ([a21382 #f])
                                                                                                                                                                                                                        a21382))
                                                                                                                                                                                                                  
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp21432 (let ([a21383 (if (if (if (if (let ([temp21438 (read)])
                                                                                                                                                                                                                                                     (> temp21438 1))
                                                                                                                                                                                                                                                 (let ([a21384 #t])
                                                                                                                                                                                                                                                    a21384)
                                                                                                                                                                                                                                                 (let ([a21385 #f])
                                                                                                                                                                                                                                                    a21385))
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                             (let ([a21386 #t])
                                                                                                                                                                                                                                                a21386)
                                                                                                                                                                                                                                             (let ([a21387 #f])
                                                                                                                                                                                                                                                a21387))
                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                         (let ([a21388 #t])
                                                                                                                                                                                                                                            a21388)
                                                                                                                                                                                                                                         (let ([a21389 #f])
                                                                                                                                                                                                                                            a21389))
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp21436 a21383])
                                                                                                                                                                                                                          (+ a21376 temp21436)))])
                                                                                                                                                                                                      (+ a21375 temp21432)))])
                                                                                                                                                                                  (+ a21368 temp21429)))])
                                                                                                                                                              (+ a21361 temp21425)))])
                                                                                                                                          (+ a21354 temp21421)))])
                                                                                                                      (+ a21347 temp21417)))])
                                                                                                  (+ temp21412 temp21413))))])
                                                                           (+ a21333 temp21408)))])
                                                       (+ a21326 temp21404)))])
                                   (+ a21319 temp21400)))])
               (+ a21312 temp21396)))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x21311 (if (let ([temp21391 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp21391 8))
                 #t
                 #f)
              ])
   (if x21311
      1
      (let ([a21312 (if (if (if (if (if (let ([temp21394 (read)])
                                           (> temp21394 1))
                                       (let ([a21313 #t])
                                          a21313)
                                       (let ([a21314 #f])
                                          a21314))
                                    
                                   (let ([a21315 #t])
                                      a21315)
                                   (let ([a21316 #f])
                                      a21316))
                                
                               (let ([a21317 #t])
                                  a21317)
                               (let ([a21318 #f])
                                  a21318))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (let ([a21319 (if (if (if (if (let ([temp21398 (read)])
                                          (> temp21398 1))
                                      (let ([a21320 #t])
                                         a21320)
                                      (let ([a21321 #f])
                                         a21321))
                                   
                                  (let ([a21322 #t])
                                     a21322)
                                  (let ([a21323 #f])
                                     a21323))
                               
                              (let ([a21324 #t])
                                 a21324)
                              (let ([a21325 #f])
                                 a21325))
                           
                          1
                          2)
                       ])
            (let ([temp21396 (let ([a21326 (if (if (if (if (let ([temp21402 (read)])
                                                              (> temp21402 1))
                                                          (let ([a21327 #t])
                                                             a21327)
                                                          (let ([a21328 #f])
                                                             a21328))
                                                       
                                                      (let ([a21329 #t])
                                                         a21329)
                                                      (let ([a21330 #f])
                                                         a21330))
                                                   
                                                  (let ([a21331 #t])
                                                     a21331)
                                                  (let ([a21332 #f])
                                                     a21332))
                                               
                                              1
                                              2)
                                           ])
                                (let ([temp21400 (let ([a21333 (if (if (if (if (let ([temp21406 (read)])
                                                                                  (> temp21406 1))
                                                                              (let ([a21334 #t])
                                                                                 a21334)
                                                                              (let ([a21335 #f])
                                                                                 a21335))
                                                                           
                                                                          (let ([a21336 #t])
                                                                             a21336)
                                                                          (let ([a21337 #f])
                                                                             a21337))
                                                                       
                                                                      (let ([a21338 #t])
                                                                         a21338)
                                                                      (let ([a21339 #f])
                                                                         a21339))
                                                                   
                                                                  1
                                                                  2)
                                                               ])
                                                    (let ([temp21404 (let ([a21340 (if (if (if (if (let ([temp21410 (read)])
                                                                                                      (> temp21410 1))
                                                                                                  (let ([a21341 #t])
                                                                                                     a21341)
                                                                                                  (let ([a21342 #f])
                                                                                                     a21342))
                                                                                               
                                                                                              (let ([a21343 #t])
                                                                                                 a21343)
                                                                                              (let ([a21344 #f])
                                                                                                 a21344))
                                                                                           
                                                                                          (let ([a21345 #t])
                                                                                             a21345)
                                                                                          (let ([a21346 #f])
                                                                                             a21346))
                                                                                       
                                                                                      1
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp21408 (let ([temp21412 (read)])
                                                                                            (let ([a21347 (if (if (if (if (let ([temp21415 (read)])
                                                                                                                             (> temp21415 1))
                                                                                                                         (let ([a21348 #t])
                                                                                                                            a21348)
                                                                                                                         (let ([a21349 #f])
                                                                                                                            a21349))
                                                                                                                      
                                                                                                                     (let ([a21350 #t])
                                                                                                                        a21350)
                                                                                                                     (let ([a21351 #f])
                                                                                                                        a21351))
                                                                                                                  
                                                                                                                 (let ([a21352 #t])
                                                                                                                    a21352)
                                                                                                                 (let ([a21353 #f])
                                                                                                                    a21353))
                                                                                                              
                                                                                                             1
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp21413 (let ([a21354 (if (if (if (if (let ([temp21419 (read)])
                                                                                                                                                 (> temp21419 1))
                                                                                                                                             (let ([a21355 #t])
                                                                                                                                                a21355)
                                                                                                                                             (let ([a21356 #f])
                                                                                                                                                a21356))
                                                                                                                                          
                                                                                                                                         (let ([a21357 #t])
                                                                                                                                            a21357)
                                                                                                                                         (let ([a21358 #f])
                                                                                                                                            a21358))
                                                                                                                                      
                                                                                                                                     (let ([a21359 #t])
                                                                                                                                        a21359)
                                                                                                                                     (let ([a21360 #f])
                                                                                                                                        a21360))
                                                                                                                                  
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp21417 (let ([a21361 (if (if (if (if (let ([temp21423 (read)])
                                                                                                                                                                     (> temp21423 1))
                                                                                                                                                                 (let ([a21362 #t])
                                                                                                                                                                    a21362)
                                                                                                                                                                 (let ([a21363 #f])
                                                                                                                                                                    a21363))
                                                                                                                                                              
                                                                                                                                                             (let ([a21364 #t])
                                                                                                                                                                a21364)
                                                                                                                                                             (let ([a21365 #f])
                                                                                                                                                                a21365))
                                                                                                                                                          
                                                                                                                                                         (let ([a21366 #t])
                                                                                                                                                            a21366)
                                                                                                                                                         (let ([a21367 #f])
                                                                                                                                                            a21367))
                                                                                                                                                      
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp21421 (let ([a21368 (if (if (if (if (let ([temp21427 (read)])
                                                                                                                                                                                         (> temp21427 1))
                                                                                                                                                                                     (let ([a21369 #t])
                                                                                                                                                                                        a21369)
                                                                                                                                                                                     (let ([a21370 #f])
                                                                                                                                                                                        a21370))
                                                                                                                                                                                  
                                                                                                                                                                                 (let ([a21371 #t])
                                                                                                                                                                                    a21371)
                                                                                                                                                                                 (let ([a21372 #f])
                                                                                                                                                                                    a21372))
                                                                                                                                                                              
                                                                                                                                                                             (let ([a21373 #t])
                                                                                                                                                                                a21373)
                                                                                                                                                                             (let ([a21374 #f])
                                                                                                                                                                                a21374))
                                                                                                                                                                          
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp21425 (let ([a21375 (read)])
                                                                                                                                                                               (let ([temp21429 (let ([a21376 (if (if (if (if (let ([temp21434 (read)])
                                                                                                                                                                                                                                 (> temp21434 1))
                                                                                                                                                                                                                             (let ([a21377 #t])
                                                                                                                                                                                                                                a21377)
                                                                                                                                                                                                                             (let ([a21378 #f])
                                                                                                                                                                                                                                a21378))
                                                                                                                                                                                                                          
                                                                                                                                                                                                                         (let ([a21379 #t])
                                                                                                                                                                                                                            a21379)
                                                                                                                                                                                                                         (let ([a21380 #f])
                                                                                                                                                                                                                            a21380))
                                                                                                                                                                                                                      
                                                                                                                                                                                                                     (let ([a21381 #t])
                                                                                                                                                                                                                        a21381)
                                                                                                                                                                                                                     (let ([a21382 #f])
                                                                                                                                                                                                                        a21382))
                                                                                                                                                                                                                  
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp21432 (let ([a21383 (if (if (if (if (let ([temp21438 (read)])
                                                                                                                                                                                                                                                     (> temp21438 1))
                                                                                                                                                                                                                                                 (let ([a21384 #t])
                                                                                                                                                                                                                                                    a21384)
                                                                                                                                                                                                                                                 (let ([a21385 #f])
                                                                                                                                                                                                                                                    a21385))
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                             (let ([a21386 #t])
                                                                                                                                                                                                                                                a21386)
                                                                                                                                                                                                                                             (let ([a21387 #f])
                                                                                                                                                                                                                                                a21387))
                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                         (let ([a21388 #t])
                                                                                                                                                                                                                                            a21388)
                                                                                                                                                                                                                                         (let ([a21389 #f])
                                                                                                                                                                                                                                            a21389))
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp21436 a21383])
                                                                                                                                                                                                                          (+ a21376 temp21436)))])
                                                                                                                                                                                                      (+ a21375 temp21432)))])
                                                                                                                                                                                  (+ a21368 temp21429)))])
                                                                                                                                                              (+ a21361 temp21425)))])
                                                                                                                                          (+ a21354 temp21421)))])
                                                                                                                      (+ a21347 temp21417)))])
                                                                                                  (+ temp21412 temp21413))))])
                                                                           (+ a21333 temp21408)))])
                                                       (+ a21326 temp21404)))])
                                   (+ a21319 temp21400)))])
               (+ a21312 temp21396)))))
   )


output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label21537:
    a21314 = #f;
    if (eq? a21314 #t)
       goto label21534;
    else
       goto label21535;
label21536:
    a21313 = #t;
    if (eq? a21313 #t)
       goto label21534;
    else
       goto label21535;
label21539:
    temp21394 = (read);
    if (> temp21394 1)
       goto label21536;
    else
       goto label21537;
label21538:
    return 1;
label21533:
    a21318 = #f;
    if (eq? a21318 #t)
       goto label21530;
    else
       goto label21531;
label21532:
    a21317 = #t;
    if (eq? a21317 #t)
       goto label21530;
    else
       goto label21531;
label21535:
    a21316 = #f;
    if (eq? a21316 #t)
       goto label21532;
    else
       goto label21533;
label21534:
    a21315 = #t;
    if (eq? a21315 #t)
       goto label21532;
    else
       goto label21533;
label21529:
    temp21398 = (read);
    if (> temp21398 1)
       goto label21527;
    else
       goto label21528;
label21528:
    a21321 = #f;
    if (eq? a21321 #t)
       goto label21525;
    else
       goto label21526;
label21531:
    a21312 = 2;
    goto label21529;
label21530:
    a21312 = 1;
    goto label21529;
label21525:
    a21322 = #t;
    if (eq? a21322 #t)
       goto label21523;
    else
       goto label21524;
label21524:
    a21325 = #f;
    if (eq? a21325 #t)
       goto label21521;
    else
       goto label21522;
label21527:
    a21320 = #t;
    if (eq? a21320 #t)
       goto label21525;
    else
       goto label21526;
label21526:
    a21323 = #f;
    if (eq? a21323 #t)
       goto label21523;
    else
       goto label21524;
label21545:
    temp21391 = 9;
    goto label21543;
label21544:
    temp21391 = 8;
    goto label21543;
label21541:
    x21311 = #t;
    goto label21540;
label21540:
    if (eq? x21311 #t)
       goto label21538;
    else
       goto label21539;
label21543:
    if (> temp21391 8)
       goto label21541;
    else
       goto label21542;
label21542:
    x21311 = #f;
    goto label21540;
label21440:
    a21383 = 1;
    goto label21439;
label21441:
    a21383 = 2;
    goto label21439;
label21442:
    a21388 = #t;
    if (eq? a21388 #t)
       goto label21440;
    else
       goto label21441;
label21443:
    a21389 = #f;
    if (eq? a21389 #t)
       goto label21440;
    else
       goto label21441;
label21439:
    temp21436 = a21383;
    temp21432 = (+ a21376 temp21436);
    temp21429 = (+ a21375 temp21432);
    temp21425 = (+ a21368 temp21429);
    temp21421 = (+ a21361 temp21425);
    temp21417 = (+ a21354 temp21421);
    temp21413 = (+ a21347 temp21417);
    temp21408 = (+ temp21412 temp21413);
    temp21404 = (+ a21333 temp21408);
    temp21400 = (+ a21326 temp21404);
    temp21396 = (+ a21319 temp21400);
    return (+ a21312 temp21396);
label21456:
    a21378 = #f;
    if (eq? a21378 #t)
       goto label21453;
    else
       goto label21454;
label21457:
    a21375 = (read);
    temp21434 = (read);
    if (> temp21434 1)
       goto label21455;
    else
       goto label21456;
label21458:
    a21368 = 1;
    goto label21457;
label21459:
    a21368 = 2;
    goto label21457;
label21452:
    a21382 = #f;
    if (eq? a21382 #t)
       goto label21449;
    else
       goto label21450;
label21453:
    a21379 = #t;
    if (eq? a21379 #t)
       goto label21451;
    else
       goto label21452;
label21454:
    a21380 = #f;
    if (eq? a21380 #t)
       goto label21451;
    else
       goto label21452;
label21455:
    a21377 = #t;
    if (eq? a21377 #t)
       goto label21453;
    else
       goto label21454;
label21448:
    temp21438 = (read);
    if (> temp21438 1)
       goto label21446;
    else
       goto label21447;
start:
    if (>= 1 1)
       goto label21544;
    else
       goto label21545;
label21449:
    a21376 = 1;
    goto label21448;
label21450:
    a21376 = 2;
    goto label21448;
label21451:
    a21381 = #t;
    if (eq? a21381 #t)
       goto label21449;
    else
       goto label21450;
label21444:
    a21386 = #t;
    if (eq? a21386 #t)
       goto label21442;
    else
       goto label21443;
label21445:
    a21387 = #f;
    if (eq? a21387 #t)
       goto label21442;
    else
       goto label21443;
label21446:
    a21384 = #t;
    if (eq? a21384 #t)
       goto label21444;
    else
       goto label21445;
label21447:
    a21385 = #f;
    if (eq? a21385 #t)
       goto label21444;
    else
       goto label21445;
label21473:
    a21362 = #t;
    if (eq? a21362 #t)
       goto label21471;
    else
       goto label21472;
label21472:
    a21365 = #f;
    if (eq? a21365 #t)
       goto label21469;
    else
       goto label21470;
label21475:
    temp21423 = (read);
    if (> temp21423 1)
       goto label21473;
    else
       goto label21474;
label21474:
    a21363 = #f;
    if (eq? a21363 #t)
       goto label21471;
    else
       goto label21472;
label21469:
    a21366 = #t;
    if (eq? a21366 #t)
       goto label21467;
    else
       goto label21468;
label21468:
    a21361 = 2;
    goto label21466;
label21471:
    a21364 = #t;
    if (eq? a21364 #t)
       goto label21469;
    else
       goto label21470;
label21470:
    a21367 = #f;
    if (eq? a21367 #t)
       goto label21467;
    else
       goto label21468;
label21465:
    a21370 = #f;
    if (eq? a21370 #t)
       goto label21462;
    else
       goto label21463;
label21464:
    a21369 = #t;
    if (eq? a21369 #t)
       goto label21462;
    else
       goto label21463;
label21467:
    a21361 = 1;
    goto label21466;
label21466:
    temp21427 = (read);
    if (> temp21427 1)
       goto label21464;
    else
       goto label21465;
label21461:
    a21374 = #f;
    if (eq? a21374 #t)
       goto label21458;
    else
       goto label21459;
label21460:
    a21373 = #t;
    if (eq? a21373 #t)
       goto label21458;
    else
       goto label21459;
label21463:
    a21372 = #f;
    if (eq? a21372 #t)
       goto label21460;
    else
       goto label21461;
label21462:
    a21371 = #t;
    if (eq? a21371 #t)
       goto label21460;
    else
       goto label21461;
label21489:
    a21350 = #t;
    if (eq? a21350 #t)
       goto label21487;
    else
       goto label21488;
label21488:
    a21353 = #f;
    if (eq? a21353 #t)
       goto label21485;
    else
       goto label21486;
label21491:
    a21348 = #t;
    if (eq? a21348 #t)
       goto label21489;
    else
       goto label21490;
label21490:
    a21351 = #f;
    if (eq? a21351 #t)
       goto label21487;
    else
       goto label21488;
label21485:
    a21347 = 1;
    goto label21484;
label21484:
    temp21419 = (read);
    if (> temp21419 1)
       goto label21482;
    else
       goto label21483;
label21487:
    a21352 = #t;
    if (eq? a21352 #t)
       goto label21485;
    else
       goto label21486;
label21486:
    a21347 = 2;
    goto label21484;
label21481:
    a21358 = #f;
    if (eq? a21358 #t)
       goto label21478;
    else
       goto label21479;
label21480:
    a21357 = #t;
    if (eq? a21357 #t)
       goto label21478;
    else
       goto label21479;
label21483:
    a21356 = #f;
    if (eq? a21356 #t)
       goto label21480;
    else
       goto label21481;
label21482:
    a21355 = #t;
    if (eq? a21355 #t)
       goto label21480;
    else
       goto label21481;
label21477:
    a21354 = 2;
    goto label21475;
label21476:
    a21354 = 1;
    goto label21475;
label21479:
    a21360 = #f;
    if (eq? a21360 #t)
       goto label21476;
    else
       goto label21477;
label21478:
    a21359 = #t;
    if (eq? a21359 #t)
       goto label21476;
    else
       goto label21477;
label21505:
    a21338 = #t;
    if (eq? a21338 #t)
       goto label21503;
    else
       goto label21504;
label21504:
    a21333 = 2;
    goto label21502;
label21507:
    a21336 = #t;
    if (eq? a21336 #t)
       goto label21505;
    else
       goto label21506;
label21506:
    a21339 = #f;
    if (eq? a21339 #t)
       goto label21503;
    else
       goto label21504;
label21501:
    a21342 = #f;
    if (eq? a21342 #t)
       goto label21498;
    else
       goto label21499;
label21500:
    a21341 = #t;
    if (eq? a21341 #t)
       goto label21498;
    else
       goto label21499;
label21503:
    a21333 = 1;
    goto label21502;
label21502:
    temp21410 = (read);
    if (> temp21410 1)
       goto label21500;
    else
       goto label21501;
label21497:
    a21346 = #f;
    if (eq? a21346 #t)
       goto label21494;
    else
       goto label21495;
label21496:
    a21345 = #t;
    if (eq? a21345 #t)
       goto label21494;
    else
       goto label21495;
label21499:
    a21344 = #f;
    if (eq? a21344 #t)
       goto label21496;
    else
       goto label21497;
label21498:
    a21343 = #t;
    if (eq? a21343 #t)
       goto label21496;
    else
       goto label21497;
label21493:
    temp21412 = (read);
    temp21415 = (read);
    if (> temp21415 1)
       goto label21491;
    else
       goto label21492;
label21492:
    a21349 = #f;
    if (eq? a21349 #t)
       goto label21489;
    else
       goto label21490;
label21495:
    a21340 = 2;
    goto label21493;
label21494:
    a21340 = 1;
    goto label21493;
label21521:
    a21319 = 1;
    goto label21520;
label21520:
    temp21402 = (read);
    if (> temp21402 1)
       goto label21518;
    else
       goto label21519;
label21523:
    a21324 = #t;
    if (eq? a21324 #t)
       goto label21521;
    else
       goto label21522;
label21522:
    a21319 = 2;
    goto label21520;
label21517:
    a21330 = #f;
    if (eq? a21330 #t)
       goto label21514;
    else
       goto label21515;
label21516:
    a21329 = #t;
    if (eq? a21329 #t)
       goto label21514;
    else
       goto label21515;
label21519:
    a21328 = #f;
    if (eq? a21328 #t)
       goto label21516;
    else
       goto label21517;
label21518:
    a21327 = #t;
    if (eq? a21327 #t)
       goto label21516;
    else
       goto label21517;
label21513:
    a21326 = 2;
    goto label21511;
label21512:
    a21326 = 1;
    goto label21511;
label21515:
    a21332 = #f;
    if (eq? a21332 #t)
       goto label21512;
    else
       goto label21513;
label21514:
    a21331 = #t;
    if (eq? a21331 #t)
       goto label21512;
    else
       goto label21513;
label21509:
    a21334 = #t;
    if (eq? a21334 #t)
       goto label21507;
    else
       goto label21508;
label21508:
    a21337 = #f;
    if (eq? a21337 #t)
       goto label21505;
    else
       goto label21506;
label21511:
    temp21406 = (read);
    if (> temp21406 1)
       goto label21509;
    else
       goto label21510;
label21510:
    a21335 = #f;
    if (eq? a21335 #t)
       goto label21507;
    else
       goto label21508;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
label21537:
    a21314 = #f;
    if (eq? a21314 #t)
       goto label21534;
    else
       goto label21535;
label21536:
    a21313 = #t;
    if (eq? a21313 #t)
       goto label21534;
    else
       goto label21535;
label21539:
    temp21394 = (read);
    if (> temp21394 1)
       goto label21536;
    else
       goto label21537;
label21538:
    return 1;
label21533:
    a21318 = #f;
    if (eq? a21318 #t)
       goto label21530;
    else
       goto label21531;
label21532:
    a21317 = #t;
    if (eq? a21317 #t)
       goto label21530;
    else
       goto label21531;
label21535:
    a21316 = #f;
    if (eq? a21316 #t)
       goto label21532;
    else
       goto label21533;
label21534:
    a21315 = #t;
    if (eq? a21315 #t)
       goto label21532;
    else
       goto label21533;
label21529:
    temp21398 = (read);
    if (> temp21398 1)
       goto label21527;
    else
       goto label21528;
label21528:
    a21321 = #f;
    if (eq? a21321 #t)
       goto label21525;
    else
       goto label21526;
label21531:
    a21312 = 2;
    goto label21529;
label21530:
    a21312 = 1;
    goto label21529;
label21525:
    a21322 = #t;
    if (eq? a21322 #t)
       goto label21523;
    else
       goto label21524;
label21524:
    a21325 = #f;
    if (eq? a21325 #t)
       goto label21521;
    else
       goto label21522;
label21527:
    a21320 = #t;
    if (eq? a21320 #t)
       goto label21525;
    else
       goto label21526;
label21526:
    a21323 = #f;
    if (eq? a21323 #t)
       goto label21523;
    else
       goto label21524;
label21545:
    temp21391 = 9;
    goto label21543;
label21544:
    temp21391 = 8;
    goto label21543;
label21541:
    x21311 = #t;
    goto label21540;
label21540:
    if (eq? x21311 #t)
       goto label21538;
    else
       goto label21539;
label21543:
    if (> temp21391 8)
       goto label21541;
    else
       goto label21542;
label21542:
    x21311 = #f;
    goto label21540;
label21440:
    a21383 = 1;
    goto label21439;
label21441:
    a21383 = 2;
    goto label21439;
label21442:
    a21388 = #t;
    if (eq? a21388 #t)
       goto label21440;
    else
       goto label21441;
label21443:
    a21389 = #f;
    if (eq? a21389 #t)
       goto label21440;
    else
       goto label21441;
label21439:
    temp21436 = a21383;
    temp21432 = (+ a21376 temp21436);
    temp21429 = (+ a21375 temp21432);
    temp21425 = (+ a21368 temp21429);
    temp21421 = (+ a21361 temp21425);
    temp21417 = (+ a21354 temp21421);
    temp21413 = (+ a21347 temp21417);
    temp21408 = (+ temp21412 temp21413);
    temp21404 = (+ a21333 temp21408);
    temp21400 = (+ a21326 temp21404);
    temp21396 = (+ a21319 temp21400);
    return (+ a21312 temp21396);
label21456:
    a21378 = #f;
    if (eq? a21378 #t)
       goto label21453;
    else
       goto label21454;
label21457:
    a21375 = (read);
    temp21434 = (read);
    if (> temp21434 1)
       goto label21455;
    else
       goto label21456;
label21458:
    a21368 = 1;
    goto label21457;
label21459:
    a21368 = 2;
    goto label21457;
label21452:
    a21382 = #f;
    if (eq? a21382 #t)
       goto label21449;
    else
       goto label21450;
label21453:
    a21379 = #t;
    if (eq? a21379 #t)
       goto label21451;
    else
       goto label21452;
label21454:
    a21380 = #f;
    if (eq? a21380 #t)
       goto label21451;
    else
       goto label21452;
label21455:
    a21377 = #t;
    if (eq? a21377 #t)
       goto label21453;
    else
       goto label21454;
label21448:
    temp21438 = (read);
    if (> temp21438 1)
       goto label21446;
    else
       goto label21447;
start:
    if (>= 1 1)
       goto label21544;
    else
       goto label21545;
label21449:
    a21376 = 1;
    goto label21448;
label21450:
    a21376 = 2;
    goto label21448;
label21451:
    a21381 = #t;
    if (eq? a21381 #t)
       goto label21449;
    else
       goto label21450;
label21444:
    a21386 = #t;
    if (eq? a21386 #t)
       goto label21442;
    else
       goto label21443;
label21445:
    a21387 = #f;
    if (eq? a21387 #t)
       goto label21442;
    else
       goto label21443;
label21446:
    a21384 = #t;
    if (eq? a21384 #t)
       goto label21444;
    else
       goto label21445;
label21447:
    a21385 = #f;
    if (eq? a21385 #t)
       goto label21444;
    else
       goto label21445;
label21473:
    a21362 = #t;
    if (eq? a21362 #t)
       goto label21471;
    else
       goto label21472;
label21472:
    a21365 = #f;
    if (eq? a21365 #t)
       goto label21469;
    else
       goto label21470;
label21475:
    temp21423 = (read);
    if (> temp21423 1)
       goto label21473;
    else
       goto label21474;
label21474:
    a21363 = #f;
    if (eq? a21363 #t)
       goto label21471;
    else
       goto label21472;
label21469:
    a21366 = #t;
    if (eq? a21366 #t)
       goto label21467;
    else
       goto label21468;
label21468:
    a21361 = 2;
    goto label21466;
label21471:
    a21364 = #t;
    if (eq? a21364 #t)
       goto label21469;
    else
       goto label21470;
label21470:
    a21367 = #f;
    if (eq? a21367 #t)
       goto label21467;
    else
       goto label21468;
label21465:
    a21370 = #f;
    if (eq? a21370 #t)
       goto label21462;
    else
       goto label21463;
label21464:
    a21369 = #t;
    if (eq? a21369 #t)
       goto label21462;
    else
       goto label21463;
label21467:
    a21361 = 1;
    goto label21466;
label21466:
    temp21427 = (read);
    if (> temp21427 1)
       goto label21464;
    else
       goto label21465;
label21461:
    a21374 = #f;
    if (eq? a21374 #t)
       goto label21458;
    else
       goto label21459;
label21460:
    a21373 = #t;
    if (eq? a21373 #t)
       goto label21458;
    else
       goto label21459;
label21463:
    a21372 = #f;
    if (eq? a21372 #t)
       goto label21460;
    else
       goto label21461;
label21462:
    a21371 = #t;
    if (eq? a21371 #t)
       goto label21460;
    else
       goto label21461;
label21489:
    a21350 = #t;
    if (eq? a21350 #t)
       goto label21487;
    else
       goto label21488;
label21488:
    a21353 = #f;
    if (eq? a21353 #t)
       goto label21485;
    else
       goto label21486;
label21491:
    a21348 = #t;
    if (eq? a21348 #t)
       goto label21489;
    else
       goto label21490;
label21490:
    a21351 = #f;
    if (eq? a21351 #t)
       goto label21487;
    else
       goto label21488;
label21485:
    a21347 = 1;
    goto label21484;
label21484:
    temp21419 = (read);
    if (> temp21419 1)
       goto label21482;
    else
       goto label21483;
label21487:
    a21352 = #t;
    if (eq? a21352 #t)
       goto label21485;
    else
       goto label21486;
label21486:
    a21347 = 2;
    goto label21484;
label21481:
    a21358 = #f;
    if (eq? a21358 #t)
       goto label21478;
    else
       goto label21479;
label21480:
    a21357 = #t;
    if (eq? a21357 #t)
       goto label21478;
    else
       goto label21479;
label21483:
    a21356 = #f;
    if (eq? a21356 #t)
       goto label21480;
    else
       goto label21481;
label21482:
    a21355 = #t;
    if (eq? a21355 #t)
       goto label21480;
    else
       goto label21481;
label21477:
    a21354 = 2;
    goto label21475;
label21476:
    a21354 = 1;
    goto label21475;
label21479:
    a21360 = #f;
    if (eq? a21360 #t)
       goto label21476;
    else
       goto label21477;
label21478:
    a21359 = #t;
    if (eq? a21359 #t)
       goto label21476;
    else
       goto label21477;
label21505:
    a21338 = #t;
    if (eq? a21338 #t)
       goto label21503;
    else
       goto label21504;
label21504:
    a21333 = 2;
    goto label21502;
label21507:
    a21336 = #t;
    if (eq? a21336 #t)
       goto label21505;
    else
       goto label21506;
label21506:
    a21339 = #f;
    if (eq? a21339 #t)
       goto label21503;
    else
       goto label21504;
label21501:
    a21342 = #f;
    if (eq? a21342 #t)
       goto label21498;
    else
       goto label21499;
label21500:
    a21341 = #t;
    if (eq? a21341 #t)
       goto label21498;
    else
       goto label21499;
label21503:
    a21333 = 1;
    goto label21502;
label21502:
    temp21410 = (read);
    if (> temp21410 1)
       goto label21500;
    else
       goto label21501;
label21497:
    a21346 = #f;
    if (eq? a21346 #t)
       goto label21494;
    else
       goto label21495;
label21496:
    a21345 = #t;
    if (eq? a21345 #t)
       goto label21494;
    else
       goto label21495;
label21499:
    a21344 = #f;
    if (eq? a21344 #t)
       goto label21496;
    else
       goto label21497;
label21498:
    a21343 = #t;
    if (eq? a21343 #t)
       goto label21496;
    else
       goto label21497;
label21493:
    temp21412 = (read);
    temp21415 = (read);
    if (> temp21415 1)
       goto label21491;
    else
       goto label21492;
label21492:
    a21349 = #f;
    if (eq? a21349 #t)
       goto label21489;
    else
       goto label21490;
label21495:
    a21340 = 2;
    goto label21493;
label21494:
    a21340 = 1;
    goto label21493;
label21521:
    a21319 = 1;
    goto label21520;
label21520:
    temp21402 = (read);
    if (> temp21402 1)
       goto label21518;
    else
       goto label21519;
label21523:
    a21324 = #t;
    if (eq? a21324 #t)
       goto label21521;
    else
       goto label21522;
label21522:
    a21319 = 2;
    goto label21520;
label21517:
    a21330 = #f;
    if (eq? a21330 #t)
       goto label21514;
    else
       goto label21515;
label21516:
    a21329 = #t;
    if (eq? a21329 #t)
       goto label21514;
    else
       goto label21515;
label21519:
    a21328 = #f;
    if (eq? a21328 #t)
       goto label21516;
    else
       goto label21517;
label21518:
    a21327 = #t;
    if (eq? a21327 #t)
       goto label21516;
    else
       goto label21517;
label21513:
    a21326 = 2;
    goto label21511;
label21512:
    a21326 = 1;
    goto label21511;
label21515:
    a21332 = #f;
    if (eq? a21332 #t)
       goto label21512;
    else
       goto label21513;
label21514:
    a21331 = #t;
    if (eq? a21331 #t)
       goto label21512;
    else
       goto label21513;
label21509:
    a21334 = #t;
    if (eq? a21334 #t)
       goto label21507;
    else
       goto label21508;
label21508:
    a21337 = #f;
    if (eq? a21337 #t)
       goto label21505;
    else
       goto label21506;
label21511:
    temp21406 = (read);
    if (> temp21406 1)
       goto label21509;
    else
       goto label21510;
label21510:
    a21335 = #f;
    if (eq? a21335 #t)
       goto label21507;
    else
       goto label21508;



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
label21537:
    movq $0, a21314
    cmpq $1, a21314
    je label21534
    jmp label21535
    
label21536:
    movq $1, a21313
    cmpq $1, a21313
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, temp21394
    cmpq $1, temp21394
    jg label21536
    jmp label21537
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21533:
    movq $0, a21318
    cmpq $1, a21318
    je label21530
    jmp label21531
    
label21532:
    movq $1, a21317
    cmpq $1, a21317
    je label21530
    jmp label21531
    
label21535:
    movq $0, a21316
    cmpq $1, a21316
    je label21532
    jmp label21533
    
label21534:
    movq $1, a21315
    cmpq $1, a21315
    je label21532
    jmp label21533
    
label21529:
    callq read_int
    movq %rax, temp21398
    cmpq $1, temp21398
    jg label21527
    jmp label21528
    
label21528:
    movq $0, a21321
    cmpq $1, a21321
    je label21525
    jmp label21526
    
label21531:
    movq $2, a21312
    jmp label21529
    
label21530:
    movq $1, a21312
    jmp label21529
    
label21525:
    movq $1, a21322
    cmpq $1, a21322
    je label21523
    jmp label21524
    
label21524:
    movq $0, a21325
    cmpq $1, a21325
    je label21521
    jmp label21522
    
label21527:
    movq $1, a21320
    cmpq $1, a21320
    je label21525
    jmp label21526
    
label21526:
    movq $0, a21323
    cmpq $1, a21323
    je label21523
    jmp label21524
    
label21545:
    movq $9, temp21391
    jmp label21543
    
label21544:
    movq $8, temp21391
    jmp label21543
    
label21541:
    movq $1, x21311
    jmp label21540
    
label21540:
    cmpq $1, x21311
    je label21538
    jmp label21539
    
label21543:
    cmpq $8, temp21391
    jg label21541
    jmp label21542
    
label21542:
    movq $0, x21311
    jmp label21540
    
label21440:
    movq $1, a21383
    jmp label21439
    
label21441:
    movq $2, a21383
    jmp label21439
    
label21442:
    movq $1, a21388
    cmpq $1, a21388
    je label21440
    jmp label21441
    
label21443:
    movq $0, a21389
    cmpq $1, a21389
    je label21440
    jmp label21441
    
label21439:
    movq a21383, temp21436
    movq a21376, temp21432
    addq temp21436, temp21432
    movq a21375, temp21429
    addq temp21432, temp21429
    movq a21368, temp21425
    addq temp21429, temp21425
    movq a21361, temp21421
    addq temp21425, temp21421
    movq a21354, temp21417
    addq temp21421, temp21417
    movq a21347, temp21413
    addq temp21417, temp21413
    movq temp21412, temp21408
    addq temp21413, temp21408
    movq a21333, temp21404
    addq temp21408, temp21404
    movq a21326, temp21400
    addq temp21404, temp21400
    movq a21319, temp21396
    addq temp21400, temp21396
    movq a21312, %rax
    addq temp21396, %rax
    jmp conclusion
    
label21456:
    movq $0, a21378
    cmpq $1, a21378
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, a21375
    callq read_int
    movq %rax, temp21434
    cmpq $1, temp21434
    jg label21455
    jmp label21456
    
label21458:
    movq $1, a21368
    jmp label21457
    
label21459:
    movq $2, a21368
    jmp label21457
    
label21452:
    movq $0, a21382
    cmpq $1, a21382
    je label21449
    jmp label21450
    
label21453:
    movq $1, a21379
    cmpq $1, a21379
    je label21451
    jmp label21452
    
label21454:
    movq $0, a21380
    cmpq $1, a21380
    je label21451
    jmp label21452
    
label21455:
    movq $1, a21377
    cmpq $1, a21377
    je label21453
    jmp label21454
    
label21448:
    callq read_int
    movq %rax, temp21438
    cmpq $1, temp21438
    jg label21446
    jmp label21447
    
start:
    cmpq $1, $1
    jge label21544
    jmp label21545
    
label21449:
    movq $1, a21376
    jmp label21448
    
label21450:
    movq $2, a21376
    jmp label21448
    
label21451:
    movq $1, a21381
    cmpq $1, a21381
    je label21449
    jmp label21450
    
label21444:
    movq $1, a21386
    cmpq $1, a21386
    je label21442
    jmp label21443
    
label21445:
    movq $0, a21387
    cmpq $1, a21387
    je label21442
    jmp label21443
    
label21446:
    movq $1, a21384
    cmpq $1, a21384
    je label21444
    jmp label21445
    
label21447:
    movq $0, a21385
    cmpq $1, a21385
    je label21444
    jmp label21445
    
label21473:
    movq $1, a21362
    cmpq $1, a21362
    je label21471
    jmp label21472
    
label21472:
    movq $0, a21365
    cmpq $1, a21365
    je label21469
    jmp label21470
    
label21475:
    callq read_int
    movq %rax, temp21423
    cmpq $1, temp21423
    jg label21473
    jmp label21474
    
label21474:
    movq $0, a21363
    cmpq $1, a21363
    je label21471
    jmp label21472
    
label21469:
    movq $1, a21366
    cmpq $1, a21366
    je label21467
    jmp label21468
    
label21468:
    movq $2, a21361
    jmp label21466
    
label21471:
    movq $1, a21364
    cmpq $1, a21364
    je label21469
    jmp label21470
    
label21470:
    movq $0, a21367
    cmpq $1, a21367
    je label21467
    jmp label21468
    
label21465:
    movq $0, a21370
    cmpq $1, a21370
    je label21462
    jmp label21463
    
label21464:
    movq $1, a21369
    cmpq $1, a21369
    je label21462
    jmp label21463
    
label21467:
    movq $1, a21361
    jmp label21466
    
label21466:
    callq read_int
    movq %rax, temp21427
    cmpq $1, temp21427
    jg label21464
    jmp label21465
    
label21461:
    movq $0, a21374
    cmpq $1, a21374
    je label21458
    jmp label21459
    
label21460:
    movq $1, a21373
    cmpq $1, a21373
    je label21458
    jmp label21459
    
label21463:
    movq $0, a21372
    cmpq $1, a21372
    je label21460
    jmp label21461
    
label21462:
    movq $1, a21371
    cmpq $1, a21371
    je label21460
    jmp label21461
    
label21489:
    movq $1, a21350
    cmpq $1, a21350
    je label21487
    jmp label21488
    
label21488:
    movq $0, a21353
    cmpq $1, a21353
    je label21485
    jmp label21486
    
label21491:
    movq $1, a21348
    cmpq $1, a21348
    je label21489
    jmp label21490
    
label21490:
    movq $0, a21351
    cmpq $1, a21351
    je label21487
    jmp label21488
    
label21485:
    movq $1, a21347
    jmp label21484
    
label21484:
    callq read_int
    movq %rax, temp21419
    cmpq $1, temp21419
    jg label21482
    jmp label21483
    
label21487:
    movq $1, a21352
    cmpq $1, a21352
    je label21485
    jmp label21486
    
label21486:
    movq $2, a21347
    jmp label21484
    
label21481:
    movq $0, a21358
    cmpq $1, a21358
    je label21478
    jmp label21479
    
label21480:
    movq $1, a21357
    cmpq $1, a21357
    je label21478
    jmp label21479
    
label21483:
    movq $0, a21356
    cmpq $1, a21356
    je label21480
    jmp label21481
    
label21482:
    movq $1, a21355
    cmpq $1, a21355
    je label21480
    jmp label21481
    
label21477:
    movq $2, a21354
    jmp label21475
    
label21476:
    movq $1, a21354
    jmp label21475
    
label21479:
    movq $0, a21360
    cmpq $1, a21360
    je label21476
    jmp label21477
    
label21478:
    movq $1, a21359
    cmpq $1, a21359
    je label21476
    jmp label21477
    
label21505:
    movq $1, a21338
    cmpq $1, a21338
    je label21503
    jmp label21504
    
label21504:
    movq $2, a21333
    jmp label21502
    
label21507:
    movq $1, a21336
    cmpq $1, a21336
    je label21505
    jmp label21506
    
label21506:
    movq $0, a21339
    cmpq $1, a21339
    je label21503
    jmp label21504
    
label21501:
    movq $0, a21342
    cmpq $1, a21342
    je label21498
    jmp label21499
    
label21500:
    movq $1, a21341
    cmpq $1, a21341
    je label21498
    jmp label21499
    
label21503:
    movq $1, a21333
    jmp label21502
    
label21502:
    callq read_int
    movq %rax, temp21410
    cmpq $1, temp21410
    jg label21500
    jmp label21501
    
label21497:
    movq $0, a21346
    cmpq $1, a21346
    je label21494
    jmp label21495
    
label21496:
    movq $1, a21345
    cmpq $1, a21345
    je label21494
    jmp label21495
    
label21499:
    movq $0, a21344
    cmpq $1, a21344
    je label21496
    jmp label21497
    
label21498:
    movq $1, a21343
    cmpq $1, a21343
    je label21496
    jmp label21497
    
label21493:
    callq read_int
    movq %rax, temp21412
    callq read_int
    movq %rax, temp21415
    cmpq $1, temp21415
    jg label21491
    jmp label21492
    
label21492:
    movq $0, a21349
    cmpq $1, a21349
    je label21489
    jmp label21490
    
label21495:
    movq $2, a21340
    jmp label21493
    
label21494:
    movq $1, a21340
    jmp label21493
    
label21521:
    movq $1, a21319
    jmp label21520
    
label21520:
    callq read_int
    movq %rax, temp21402
    cmpq $1, temp21402
    jg label21518
    jmp label21519
    
label21523:
    movq $1, a21324
    cmpq $1, a21324
    je label21521
    jmp label21522
    
label21522:
    movq $2, a21319
    jmp label21520
    
label21517:
    movq $0, a21330
    cmpq $1, a21330
    je label21514
    jmp label21515
    
label21516:
    movq $1, a21329
    cmpq $1, a21329
    je label21514
    jmp label21515
    
label21519:
    movq $0, a21328
    cmpq $1, a21328
    je label21516
    jmp label21517
    
label21518:
    movq $1, a21327
    cmpq $1, a21327
    je label21516
    jmp label21517
    
label21513:
    movq $2, a21326
    jmp label21511
    
label21512:
    movq $1, a21326
    jmp label21511
    
label21515:
    movq $0, a21332
    cmpq $1, a21332
    je label21512
    jmp label21513
    
label21514:
    movq $1, a21331
    cmpq $1, a21331
    je label21512
    jmp label21513
    
label21509:
    movq $1, a21334
    cmpq $1, a21334
    je label21507
    jmp label21508
    
label21508:
    movq $0, a21337
    cmpq $1, a21337
    je label21505
    jmp label21506
    
label21511:
    callq read_int
    movq %rax, temp21406
    cmpq $1, temp21406
    jg label21509
    jmp label21510
    
label21510:
    movq $0, a21335
    cmpq $1, a21335
    je label21507
    jmp label21508
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
label21537:
    movq $0, a21314
    cmpq $1, a21314
    je label21534
    jmp label21535
    
label21536:
    movq $1, a21313
    cmpq $1, a21313
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, temp21394
    cmpq $1, temp21394
    jg label21536
    jmp label21537
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21533:
    movq $0, a21318
    cmpq $1, a21318
    je label21530
    jmp label21531
    
label21532:
    movq $1, a21317
    cmpq $1, a21317
    je label21530
    jmp label21531
    
label21535:
    movq $0, a21316
    cmpq $1, a21316
    je label21532
    jmp label21533
    
label21534:
    movq $1, a21315
    cmpq $1, a21315
    je label21532
    jmp label21533
    
label21529:
    callq read_int
    movq %rax, temp21398
    cmpq $1, temp21398
    jg label21527
    jmp label21528
    
label21528:
    movq $0, a21321
    cmpq $1, a21321
    je label21525
    jmp label21526
    
label21531:
    movq $2, a21312
    jmp label21529
    
label21530:
    movq $1, a21312
    jmp label21529
    
label21525:
    movq $1, a21322
    cmpq $1, a21322
    je label21523
    jmp label21524
    
label21524:
    movq $0, a21325
    cmpq $1, a21325
    je label21521
    jmp label21522
    
label21527:
    movq $1, a21320
    cmpq $1, a21320
    je label21525
    jmp label21526
    
label21526:
    movq $0, a21323
    cmpq $1, a21323
    je label21523
    jmp label21524
    
label21545:
    movq $9, temp21391
    jmp label21543
    
label21544:
    movq $8, temp21391
    jmp label21543
    
label21541:
    movq $1, x21311
    jmp label21540
    
label21540:
    cmpq $1, x21311
    je label21538
    jmp label21539
    
label21543:
    cmpq $8, temp21391
    jg label21541
    jmp label21542
    
label21542:
    movq $0, x21311
    jmp label21540
    
label21440:
    movq $1, a21383
    jmp label21439
    
label21441:
    movq $2, a21383
    jmp label21439
    
label21442:
    movq $1, a21388
    cmpq $1, a21388
    je label21440
    jmp label21441
    
label21443:
    movq $0, a21389
    cmpq $1, a21389
    je label21440
    jmp label21441
    
label21439:
    movq a21383, temp21436
    movq a21376, temp21432
    addq temp21436, temp21432
    movq a21375, temp21429
    addq temp21432, temp21429
    movq a21368, temp21425
    addq temp21429, temp21425
    movq a21361, temp21421
    addq temp21425, temp21421
    movq a21354, temp21417
    addq temp21421, temp21417
    movq a21347, temp21413
    addq temp21417, temp21413
    movq temp21412, temp21408
    addq temp21413, temp21408
    movq a21333, temp21404
    addq temp21408, temp21404
    movq a21326, temp21400
    addq temp21404, temp21400
    movq a21319, temp21396
    addq temp21400, temp21396
    movq a21312, %rax
    addq temp21396, %rax
    jmp conclusion
    
label21456:
    movq $0, a21378
    cmpq $1, a21378
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, a21375
    callq read_int
    movq %rax, temp21434
    cmpq $1, temp21434
    jg label21455
    jmp label21456
    
label21458:
    movq $1, a21368
    jmp label21457
    
label21459:
    movq $2, a21368
    jmp label21457
    
label21452:
    movq $0, a21382
    cmpq $1, a21382
    je label21449
    jmp label21450
    
label21453:
    movq $1, a21379
    cmpq $1, a21379
    je label21451
    jmp label21452
    
label21454:
    movq $0, a21380
    cmpq $1, a21380
    je label21451
    jmp label21452
    
label21455:
    movq $1, a21377
    cmpq $1, a21377
    je label21453
    jmp label21454
    
label21448:
    callq read_int
    movq %rax, temp21438
    cmpq $1, temp21438
    jg label21446
    jmp label21447
    
start:
    cmpq $1, $1
    jge label21544
    jmp label21545
    
label21449:
    movq $1, a21376
    jmp label21448
    
label21450:
    movq $2, a21376
    jmp label21448
    
label21451:
    movq $1, a21381
    cmpq $1, a21381
    je label21449
    jmp label21450
    
label21444:
    movq $1, a21386
    cmpq $1, a21386
    je label21442
    jmp label21443
    
label21445:
    movq $0, a21387
    cmpq $1, a21387
    je label21442
    jmp label21443
    
label21446:
    movq $1, a21384
    cmpq $1, a21384
    je label21444
    jmp label21445
    
label21447:
    movq $0, a21385
    cmpq $1, a21385
    je label21444
    jmp label21445
    
label21473:
    movq $1, a21362
    cmpq $1, a21362
    je label21471
    jmp label21472
    
label21472:
    movq $0, a21365
    cmpq $1, a21365
    je label21469
    jmp label21470
    
label21475:
    callq read_int
    movq %rax, temp21423
    cmpq $1, temp21423
    jg label21473
    jmp label21474
    
label21474:
    movq $0, a21363
    cmpq $1, a21363
    je label21471
    jmp label21472
    
label21469:
    movq $1, a21366
    cmpq $1, a21366
    je label21467
    jmp label21468
    
label21468:
    movq $2, a21361
    jmp label21466
    
label21471:
    movq $1, a21364
    cmpq $1, a21364
    je label21469
    jmp label21470
    
label21470:
    movq $0, a21367
    cmpq $1, a21367
    je label21467
    jmp label21468
    
label21465:
    movq $0, a21370
    cmpq $1, a21370
    je label21462
    jmp label21463
    
label21464:
    movq $1, a21369
    cmpq $1, a21369
    je label21462
    jmp label21463
    
label21467:
    movq $1, a21361
    jmp label21466
    
label21466:
    callq read_int
    movq %rax, temp21427
    cmpq $1, temp21427
    jg label21464
    jmp label21465
    
label21461:
    movq $0, a21374
    cmpq $1, a21374
    je label21458
    jmp label21459
    
label21460:
    movq $1, a21373
    cmpq $1, a21373
    je label21458
    jmp label21459
    
label21463:
    movq $0, a21372
    cmpq $1, a21372
    je label21460
    jmp label21461
    
label21462:
    movq $1, a21371
    cmpq $1, a21371
    je label21460
    jmp label21461
    
label21489:
    movq $1, a21350
    cmpq $1, a21350
    je label21487
    jmp label21488
    
label21488:
    movq $0, a21353
    cmpq $1, a21353
    je label21485
    jmp label21486
    
label21491:
    movq $1, a21348
    cmpq $1, a21348
    je label21489
    jmp label21490
    
label21490:
    movq $0, a21351
    cmpq $1, a21351
    je label21487
    jmp label21488
    
label21485:
    movq $1, a21347
    jmp label21484
    
label21484:
    callq read_int
    movq %rax, temp21419
    cmpq $1, temp21419
    jg label21482
    jmp label21483
    
label21487:
    movq $1, a21352
    cmpq $1, a21352
    je label21485
    jmp label21486
    
label21486:
    movq $2, a21347
    jmp label21484
    
label21481:
    movq $0, a21358
    cmpq $1, a21358
    je label21478
    jmp label21479
    
label21480:
    movq $1, a21357
    cmpq $1, a21357
    je label21478
    jmp label21479
    
label21483:
    movq $0, a21356
    cmpq $1, a21356
    je label21480
    jmp label21481
    
label21482:
    movq $1, a21355
    cmpq $1, a21355
    je label21480
    jmp label21481
    
label21477:
    movq $2, a21354
    jmp label21475
    
label21476:
    movq $1, a21354
    jmp label21475
    
label21479:
    movq $0, a21360
    cmpq $1, a21360
    je label21476
    jmp label21477
    
label21478:
    movq $1, a21359
    cmpq $1, a21359
    je label21476
    jmp label21477
    
label21505:
    movq $1, a21338
    cmpq $1, a21338
    je label21503
    jmp label21504
    
label21504:
    movq $2, a21333
    jmp label21502
    
label21507:
    movq $1, a21336
    cmpq $1, a21336
    je label21505
    jmp label21506
    
label21506:
    movq $0, a21339
    cmpq $1, a21339
    je label21503
    jmp label21504
    
label21501:
    movq $0, a21342
    cmpq $1, a21342
    je label21498
    jmp label21499
    
label21500:
    movq $1, a21341
    cmpq $1, a21341
    je label21498
    jmp label21499
    
label21503:
    movq $1, a21333
    jmp label21502
    
label21502:
    callq read_int
    movq %rax, temp21410
    cmpq $1, temp21410
    jg label21500
    jmp label21501
    
label21497:
    movq $0, a21346
    cmpq $1, a21346
    je label21494
    jmp label21495
    
label21496:
    movq $1, a21345
    cmpq $1, a21345
    je label21494
    jmp label21495
    
label21499:
    movq $0, a21344
    cmpq $1, a21344
    je label21496
    jmp label21497
    
label21498:
    movq $1, a21343
    cmpq $1, a21343
    je label21496
    jmp label21497
    
label21493:
    callq read_int
    movq %rax, temp21412
    callq read_int
    movq %rax, temp21415
    cmpq $1, temp21415
    jg label21491
    jmp label21492
    
label21492:
    movq $0, a21349
    cmpq $1, a21349
    je label21489
    jmp label21490
    
label21495:
    movq $2, a21340
    jmp label21493
    
label21494:
    movq $1, a21340
    jmp label21493
    
label21521:
    movq $1, a21319
    jmp label21520
    
label21520:
    callq read_int
    movq %rax, temp21402
    cmpq $1, temp21402
    jg label21518
    jmp label21519
    
label21523:
    movq $1, a21324
    cmpq $1, a21324
    je label21521
    jmp label21522
    
label21522:
    movq $2, a21319
    jmp label21520
    
label21517:
    movq $0, a21330
    cmpq $1, a21330
    je label21514
    jmp label21515
    
label21516:
    movq $1, a21329
    cmpq $1, a21329
    je label21514
    jmp label21515
    
label21519:
    movq $0, a21328
    cmpq $1, a21328
    je label21516
    jmp label21517
    
label21518:
    movq $1, a21327
    cmpq $1, a21327
    je label21516
    jmp label21517
    
label21513:
    movq $2, a21326
    jmp label21511
    
label21512:
    movq $1, a21326
    jmp label21511
    
label21515:
    movq $0, a21332
    cmpq $1, a21332
    je label21512
    jmp label21513
    
label21514:
    movq $1, a21331
    cmpq $1, a21331
    je label21512
    jmp label21513
    
label21509:
    movq $1, a21334
    cmpq $1, a21334
    je label21507
    jmp label21508
    
label21508:
    movq $0, a21337
    cmpq $1, a21337
    je label21505
    jmp label21506
    
label21511:
    callq read_int
    movq %rax, temp21406
    cmpq $1, temp21406
    jg label21509
    jmp label21510
    
label21510:
    movq $0, a21335
    cmpq $1, a21335
    je label21507
    jmp label21508
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
label21439:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21368
  a21354
  a21326
  a21375
  a21361
  a21319
  a21383
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  temp21436
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  temp21436
  a21326
  a21375
  a21312
  a21361
  a21368
  temp21432
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  a21326
  a21375
  a21312
  a21361
  a21368
  temp21432
  a21347
  %rsp)
 (set
  temp21412
  a21319
  a21354
  a21326
  a21312
  a21361
  a21333
  temp21429
  a21368
  temp21432
  a21347
  %rsp)
 (set
  temp21412
  a21319
  a21368
  a21354
  a21326
  a21312
  a21361
  a21333
  temp21429
  a21347
  %rsp)
 (set
  temp21412
  a21319
  a21354
  a21326
  a21312
  a21333
  temp21429
  a21361
  temp21425
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  a21326
  a21312
  a21361
  temp21425
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  temp21421
  a21326
  a21312
  temp21425
  a21347
  %rsp)
 (set temp21412 a21333 a21319 a21354 temp21421 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 temp21417 temp21421 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 temp21417 a21326 a21312 a21347 %rsp)
 (set temp21412 a21319 temp21417 a21326 a21312 %rsp a21333 temp21413)
 (set temp21412 a21319 a21326 a21312 %rsp a21333 temp21413)
 (set a21319 a21326 %rsp a21333 temp21413 a21312 temp21408)
 (set a21333 a21319 a21326 %rsp a21312 temp21408)
 (set a21319 temp21404 a21326 %rsp a21312 temp21408)
 (set a21319 temp21404 a21326 a21312 %rsp)
 (set a21319 temp21400 temp21404 a21312 %rsp)
 (set a21319 temp21400 a21312 %rsp)
 (set temp21396 temp21400 a21312 %rsp)
 (set temp21396 a21312 %rsp)
 (set %rsp %rax temp21396)
 (set %rax %rsp))
movq a21383, temp21436
movq a21376, temp21432
addq temp21436, temp21432
movq a21375, temp21429
addq temp21432, temp21429
movq a21368, temp21425
addq temp21429, temp21425
movq a21361, temp21421
addq temp21425, temp21421
movq a21354, temp21417
addq temp21421, temp21417
movq a21347, temp21413
addq temp21417, temp21413
movq temp21412, temp21408
addq temp21413, temp21408
movq a21333, temp21404
addq temp21408, temp21404
movq a21326, temp21400
addq temp21404, temp21400
movq a21319, temp21396
addq temp21400, temp21396
movq a21312, %rax
addq temp21396, %rax
jmp conclusion

label21441:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21368
  a21354
  a21326
  a21375
  a21361
  a21319
  a21383
  a21312
  a21376
  a21347
  %rsp))
movq $2, a21383
jmp label21439

label21440:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21368
  a21354
  a21326
  a21375
  a21361
  a21319
  a21383
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21383
jmp label21439

label21442:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21388
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21388
cmpq $1, a21388
je label21440
jmp label21441

label21443:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21389
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $0, a21389
cmpq $1, a21389
je label21440
jmp label21441

label21444:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21326
  a21375
  a21361
  a21354
  a21386
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21386
cmpq $1, a21386
je label21442
jmp label21443

label21445:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21387
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $0, a21387
cmpq $1, a21387
je label21442
jmp label21443

label21446:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  a21326
  a21375
  a21361
  a21368
  a21384
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21384
cmpq $1, a21384
je label21444
jmp label21445

label21447:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21385
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $0, a21385
cmpq $1, a21385
je label21444
jmp label21445

label21448:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  %rax
  temp21412
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21375
  a21361
  a21326
  temp21438
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
callq read_int
movq %rax, temp21438
cmpq $1, temp21438
jg label21446
jmp label21447

label21449:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21376
jmp label21448

label21450:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $2, a21376
jmp label21448

label21452:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21382
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $0, a21382
cmpq $1, a21382
je label21449
jmp label21450

label21451:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21333
  a21381
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $1, a21381
cmpq $1, a21381
je label21449
jmp label21450

label21453:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21379
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $1, a21379
cmpq $1, a21379
je label21451
jmp label21452

label21454:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21380
  temp21412
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $0, a21380
cmpq $1, a21380
je label21451
jmp label21452

label21456:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21378
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $0, a21378
cmpq $1, a21378
je label21453
jmp label21454

label21455:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21377
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $1, a21377
cmpq $1, a21377
je label21453
jmp label21454

label21457:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21368 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set
  a21333
  a21319
  a21368
  a21354
  a21326
  a21312
  a21361
  %rax
  temp21412
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  %rax
  temp21412
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21326
  a21375
  a21312
  a21361
  a21354
  temp21434
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
callq read_int
movq %rax, a21375
callq read_int
movq %rax, temp21434
cmpq $1, temp21434
jg label21455
jmp label21456

label21458:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21368 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21368
jmp label21457

label21459:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21368 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $2, a21368
jmp label21457

label21461:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21312 a21361 a21326 a21374 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $0, a21374
cmpq $1, a21374
je label21458
jmp label21459

label21460:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21373 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21373
cmpq $1, a21373
je label21458
jmp label21459

label21463:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21372 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $0, a21372
cmpq $1, a21372
je label21460
jmp label21461

label21462:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21371 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21371
cmpq $1, a21371
je label21460
jmp label21461

label21465:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21361 a21354 a21370 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $0, a21370
cmpq $1, a21370
je label21462
jmp label21463

label21464:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21369 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21369
cmpq $1, a21369
je label21462
jmp label21463

label21466:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set a21333 a21319 a21354 a21326 a21312 a21361 %rax temp21412 a21347 %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  a21326
  a21312
  a21361
  temp21427
  a21347
  %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
callq read_int
movq %rax, temp21427
cmpq $1, temp21427
jg label21464
jmp label21465

label21468:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $2, a21361
jmp label21466

label21467:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21361
jmp label21466

label21469:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21366 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $1, a21366
cmpq $1, a21366
je label21467
jmp label21468

label21470:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21354 a21326 a21312 a21319 a21367 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $0, a21367
cmpq $1, a21367
je label21467
jmp label21468

label21472:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21319 a21354 a21326 a21312 a21333 a21365 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $0, a21365
cmpq $1, a21365
je label21469
jmp label21470

label21471:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set a21333 a21319 a21354 a21326 a21312 a21364 temp21412 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $1, a21364
cmpq $1, a21364
je label21469
jmp label21470

label21473:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21362 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $1, a21362
cmpq $1, a21362
je label21471
jmp label21472

label21474:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21363 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $0, a21363
cmpq $1, a21363
je label21471
jmp label21472

label21475:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set a21333 a21319 a21354 a21326 a21312 %rax temp21412 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 temp21423 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
callq read_int
movq %rax, temp21423
cmpq $1, temp21423
jg label21473
jmp label21474

label21477:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $2, a21354
jmp label21475

label21476:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $1, a21354
jmp label21475

label21479:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21360 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $0, a21360
cmpq $1, a21360
je label21476
jmp label21477

label21478:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21359 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $1, a21359
cmpq $1, a21359
je label21476
jmp label21477

label21481:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21312 a21326 a21358 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $0, a21358
cmpq $1, a21358
je label21478
jmp label21479

label21480:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21357 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $1, a21357
cmpq $1, a21357
je label21478
jmp label21479

label21483:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21356 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $0, a21356
cmpq $1, a21356
je label21480
jmp label21481

label21482:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21355 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $1, a21355
cmpq $1, a21355
je label21480
jmp label21481

label21484:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set a21333 a21319 a21326 a21312 %rax temp21412 a21347 %rsp)
 (set temp21412 a21333 a21319 temp21419 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
callq read_int
movq %rax, temp21419
cmpq $1, temp21419
jg label21482
jmp label21483

label21485:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $1, a21347
jmp label21484

label21486:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $2, a21347
jmp label21484

label21488:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21353 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $0, a21353
cmpq $1, a21353
je label21485
jmp label21486

label21487:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21352 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $1, a21352
cmpq $1, a21352
je label21485
jmp label21486

label21489:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21350 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $1, a21350
cmpq $1, a21350
je label21487
jmp label21488

label21490:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21326 a21312 %rsp a21319 a21351)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $0, a21351
cmpq $1, a21351
je label21487
jmp label21488

label21491:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp a21348 temp21412)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $1, a21348
cmpq $1, a21348
je label21489
jmp label21490

label21492:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21319 a21326 a21312 %rsp a21333 a21349)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $0, a21349
cmpq $1, a21349
je label21489
jmp label21490

label21493:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set %rax a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp %rax temp21412)
 (set temp21412 a21333 a21326 a21312 %rsp a21319 temp21415)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
callq read_int
movq %rax, temp21412
callq read_int
movq %rax, temp21415
cmpq $1, temp21415
jg label21491
jmp label21492

label21495:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $2, a21340
jmp label21493

label21494:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21340
jmp label21493

label21497:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 a21346 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $0, a21346
cmpq $1, a21346
je label21494
jmp label21495

label21496:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 a21345 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21345
cmpq $1, a21345
je label21494
jmp label21495

label21499:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 %rsp a21312 a21344)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $0, a21344
cmpq $1, a21344
je label21496
jmp label21497

label21498:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21343 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21343
cmpq $1, a21343
je label21496
jmp label21497

label21501:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21312 %rsp a21326 a21342)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $0, a21342
cmpq $1, a21342
je label21498
jmp label21499

label21500:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21341 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21341
cmpq $1, a21341
je label21498
jmp label21499

label21502:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set %rax a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 temp21410 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
callq read_int
movq %rax, temp21410
cmpq $1, temp21410
jg label21500
jmp label21501

label21504:
    liveness
:
(list (set a21319 a21326 a21312 %rsp) (set a21333 a21319 a21326 a21312 %rsp))
movq $2, a21333
jmp label21502

label21503:
    liveness
:
(list (set a21319 a21326 a21312 %rsp) (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21333
jmp label21502

label21505:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21338 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $1, a21338
cmpq $1, a21338
je label21503
jmp label21504

label21506:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21339 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $0, a21339
cmpq $1, a21339
je label21503
jmp label21504

label21507:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21336 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $1, a21336
cmpq $1, a21336
je label21505
jmp label21506

label21508:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21337 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $0, a21337
cmpq $1, a21337
je label21505
jmp label21506

label21509:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21334 a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $1, a21334
cmpq $1, a21334
je label21507
jmp label21508

label21510:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21326 a21312 %rsp a21319 a21335)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $0, a21335
cmpq $1, a21335
je label21507
jmp label21508

label21511:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set %rax a21319 a21326 a21312 %rsp)
 (set a21319 a21312 %rsp a21326 temp21406)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
callq read_int
movq %rax, temp21406
cmpq $1, temp21406
jg label21509
jmp label21510

label21513:
    liveness
:
(list (set a21319 a21312 %rsp) (set a21319 a21326 a21312 %rsp))
movq $2, a21326
jmp label21511

label21512:
    liveness
:
(list (set a21319 a21312 %rsp) (set a21319 a21326 a21312 %rsp))
movq $1, a21326
jmp label21511

label21515:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21332 a21319 a21312 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $0, a21332
cmpq $1, a21332
je label21512
jmp label21513

label21514:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 a21312 a21331 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $1, a21331
cmpq $1, a21331
je label21512
jmp label21513

label21517:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 a21312 a21330 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $0, a21330
cmpq $1, a21330
je label21514
jmp label21515

label21516:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 a21312 a21329 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $1, a21329
cmpq $1, a21329
je label21514
jmp label21515

label21519:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 %rsp a21312 a21328)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $0, a21328
cmpq $1, a21328
je label21516
jmp label21517

label21518:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 a21327 a21312 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $1, a21327
cmpq $1, a21327
je label21516
jmp label21517

label21520:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set %rax a21319 a21312 %rsp)
 (set a21319 temp21402 a21312 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
callq read_int
movq %rax, temp21402
cmpq $1, temp21402
jg label21518
jmp label21519

label21521:
    liveness
:
(list (set a21312 %rsp) (set a21319 a21312 %rsp))
movq $1, a21319
jmp label21520

label21522:
    liveness
:
(list (set a21312 %rsp) (set a21319 a21312 %rsp))
movq $2, a21319
jmp label21520

label21523:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21324 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $1, a21324
cmpq $1, a21324
je label21521
jmp label21522

label21524:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21325 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $0, a21325
cmpq $1, a21325
je label21521
jmp label21522

label21526:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21323 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $0, a21323
cmpq $1, a21323
je label21523
jmp label21524

label21525:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21322 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $1, a21322
cmpq $1, a21322
je label21523
jmp label21524

label21527:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21320 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $1, a21320
cmpq $1, a21320
je label21525
jmp label21526

label21528:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21321 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $0, a21321
cmpq $1, a21321
je label21525
jmp label21526

label21529:
    liveness
:
(list
 (set a21312 %rsp)
 (set %rax a21312 %rsp)
 (set temp21398 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
callq read_int
movq %rax, temp21398
cmpq $1, temp21398
jg label21527
jmp label21528

label21531:
    liveness
:
(list (set %rsp) (set a21312 %rsp))
movq $2, a21312
jmp label21529

label21530:
    liveness
:
(list (set %rsp) (set a21312 %rsp))
movq $1, a21312
jmp label21529

label21532:
    liveness
:
(list (set %rsp) (set a21317 %rsp) (set %rsp) (set %rsp))
movq $1, a21317
cmpq $1, a21317
je label21530
jmp label21531

label21533:
    liveness
:
(list (set %rsp) (set a21318 %rsp) (set %rsp) (set %rsp))
movq $0, a21318
cmpq $1, a21318
je label21530
jmp label21531

label21535:
    liveness
:
(list (set %rsp) (set a21316 %rsp) (set %rsp) (set %rsp))
movq $0, a21316
cmpq $1, a21316
je label21532
jmp label21533

label21534:
    liveness
:
(list (set %rsp) (set a21315 %rsp) (set %rsp) (set %rsp))
movq $1, a21315
cmpq $1, a21315
je label21532
jmp label21533

label21538:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label21536:
    liveness
:
(list (set %rsp) (set a21313 %rsp) (set %rsp) (set %rsp))
movq $1, a21313
cmpq $1, a21313
je label21534
jmp label21535

label21537:
    liveness
:
(list (set %rsp) (set a21314 %rsp) (set %rsp) (set %rsp))
movq $0, a21314
cmpq $1, a21314
je label21534
jmp label21535

label21539:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp21394 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp21394
cmpq $1, temp21394
jg label21536
jmp label21537

label21540:
    liveness
:
(list (set x21311 %rsp) (set %rsp) (set %rsp))
cmpq $1, x21311
je label21538
jmp label21539

label21541:
    liveness
:
(list (set %rsp) (set x21311 %rsp))
movq $1, x21311
jmp label21540

label21542:
    liveness
:
(list (set %rsp) (set x21311 %rsp))
movq $0, x21311
jmp label21540

label21543:
    liveness
:
(list (set temp21391 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp21391
jg label21541
jmp label21542

label21545:
    liveness
:
(list (set %rsp) (set temp21391 %rsp))
movq $9, temp21391
jmp label21543

label21544:
    liveness
:
(list (set %rsp) (set temp21391 %rsp))
movq $8, temp21391
jmp label21543

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label21544
jmp label21545




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
label21439:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21368
  a21354
  a21326
  a21375
  a21361
  a21319
  a21383
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  temp21436
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  temp21436
  a21326
  a21375
  a21312
  a21361
  a21368
  temp21432
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  a21326
  a21375
  a21312
  a21361
  a21368
  temp21432
  a21347
  %rsp)
 (set
  temp21412
  a21319
  a21354
  a21326
  a21312
  a21361
  a21333
  temp21429
  a21368
  temp21432
  a21347
  %rsp)
 (set
  temp21412
  a21319
  a21368
  a21354
  a21326
  a21312
  a21361
  a21333
  temp21429
  a21347
  %rsp)
 (set
  temp21412
  a21319
  a21354
  a21326
  a21312
  a21333
  temp21429
  a21361
  temp21425
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  a21326
  a21312
  a21361
  temp21425
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  temp21421
  a21326
  a21312
  temp21425
  a21347
  %rsp)
 (set temp21412 a21333 a21319 a21354 temp21421 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 temp21417 temp21421 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 temp21417 a21326 a21312 a21347 %rsp)
 (set temp21412 a21319 temp21417 a21326 a21312 %rsp a21333 temp21413)
 (set temp21412 a21319 a21326 a21312 %rsp a21333 temp21413)
 (set a21319 a21326 %rsp a21333 temp21413 a21312 temp21408)
 (set a21333 a21319 a21326 %rsp a21312 temp21408)
 (set a21319 temp21404 a21326 %rsp a21312 temp21408)
 (set a21319 temp21404 a21326 a21312 %rsp)
 (set a21319 temp21400 temp21404 a21312 %rsp)
 (set a21319 temp21400 a21312 %rsp)
 (set temp21396 temp21400 a21312 %rsp)
 (set temp21396 a21312 %rsp)
 (set %rsp %rax temp21396)
 (set %rax %rsp))
movq a21383, temp21436
movq a21376, temp21432
addq temp21436, temp21432
movq a21375, temp21429
addq temp21432, temp21429
movq a21368, temp21425
addq temp21429, temp21425
movq a21361, temp21421
addq temp21425, temp21421
movq a21354, temp21417
addq temp21421, temp21417
movq a21347, temp21413
addq temp21417, temp21413
movq temp21412, temp21408
addq temp21413, temp21408
movq a21333, temp21404
addq temp21408, temp21404
movq a21326, temp21400
addq temp21404, temp21400
movq a21319, temp21396
addq temp21400, temp21396
movq a21312, %rax
addq temp21396, %rax
jmp conclusion

label21441:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21368
  a21354
  a21326
  a21375
  a21361
  a21319
  a21383
  a21312
  a21376
  a21347
  %rsp))
movq $2, a21383
jmp label21439

label21440:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21368
  a21354
  a21326
  a21375
  a21361
  a21319
  a21383
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21383
jmp label21439

label21442:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21388
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21388
cmpq $1, a21388
je label21440
jmp label21441

label21443:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21389
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $0, a21389
cmpq $1, a21389
je label21440
jmp label21441

label21444:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21326
  a21375
  a21361
  a21354
  a21386
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21386
cmpq $1, a21386
je label21442
jmp label21443

label21445:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21387
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $0, a21387
cmpq $1, a21387
je label21442
jmp label21443

label21446:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  a21326
  a21375
  a21361
  a21368
  a21384
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21384
cmpq $1, a21384
je label21444
jmp label21445

label21447:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21385
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $0, a21385
cmpq $1, a21385
je label21444
jmp label21445

label21448:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  %rax
  temp21412
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21375
  a21361
  a21326
  temp21438
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
callq read_int
movq %rax, temp21438
cmpq $1, temp21438
jg label21446
jmp label21447

label21449:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $1, a21376
jmp label21448

label21450:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21361
  a21312
  a21376
  a21347
  %rsp))
movq $2, a21376
jmp label21448

label21452:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21382
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $0, a21382
cmpq $1, a21382
je label21449
jmp label21450

label21451:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21333
  a21381
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $1, a21381
cmpq $1, a21381
je label21449
jmp label21450

label21453:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21379
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $1, a21379
cmpq $1, a21379
je label21451
jmp label21452

label21454:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21380
  temp21412
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $0, a21380
cmpq $1, a21380
je label21451
jmp label21452

label21456:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21378
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $0, a21378
cmpq $1, a21378
je label21453
jmp label21454

label21455:
    liveness
:
(list
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21377
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
movq $1, a21377
cmpq $1, a21377
je label21453
jmp label21454

label21457:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21368 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set
  a21333
  a21319
  a21368
  a21354
  a21326
  a21312
  a21361
  %rax
  temp21412
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  %rax
  temp21412
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21326
  a21375
  a21312
  a21361
  a21354
  temp21434
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp)
 (set
  temp21412
  a21333
  a21319
  a21368
  a21354
  a21326
  a21375
  a21312
  a21361
  a21347
  %rsp))
callq read_int
movq %rax, a21375
callq read_int
movq %rax, temp21434
cmpq $1, temp21434
jg label21455
jmp label21456

label21458:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21368 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21368
jmp label21457

label21459:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21368 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $2, a21368
jmp label21457

label21461:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21312 a21361 a21326 a21374 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $0, a21374
cmpq $1, a21374
je label21458
jmp label21459

label21460:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21373 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21373
cmpq $1, a21373
je label21458
jmp label21459

label21463:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21372 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $0, a21372
cmpq $1, a21372
je label21460
jmp label21461

label21462:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21371 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21371
cmpq $1, a21371
je label21460
jmp label21461

label21465:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21361 a21354 a21370 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $0, a21370
cmpq $1, a21370
je label21462
jmp label21463

label21464:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21369 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21369
cmpq $1, a21369
je label21462
jmp label21463

label21466:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set a21333 a21319 a21354 a21326 a21312 a21361 %rax temp21412 a21347 %rsp)
 (set
  temp21412
  a21333
  a21319
  a21354
  a21326
  a21312
  a21361
  temp21427
  a21347
  %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
callq read_int
movq %rax, temp21427
cmpq $1, temp21427
jg label21464
jmp label21465

label21468:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $2, a21361
jmp label21466

label21467:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21361 a21347 %rsp))
movq $1, a21361
jmp label21466

label21469:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21366 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $1, a21366
cmpq $1, a21366
je label21467
jmp label21468

label21470:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21354 a21326 a21312 a21319 a21367 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $0, a21367
cmpq $1, a21367
je label21467
jmp label21468

label21472:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21319 a21354 a21326 a21312 a21333 a21365 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $0, a21365
cmpq $1, a21365
je label21469
jmp label21470

label21471:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set a21333 a21319 a21354 a21326 a21312 a21364 temp21412 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $1, a21364
cmpq $1, a21364
je label21469
jmp label21470

label21473:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21362 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $1, a21362
cmpq $1, a21362
je label21471
jmp label21472

label21474:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21363 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $0, a21363
cmpq $1, a21363
je label21471
jmp label21472

label21475:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set a21333 a21319 a21354 a21326 a21312 %rax temp21412 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 temp21423 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
callq read_int
movq %rax, temp21423
cmpq $1, temp21423
jg label21473
jmp label21474

label21477:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $2, a21354
jmp label21475

label21476:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21354 a21326 a21312 a21347 %rsp))
movq $1, a21354
jmp label21475

label21479:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21360 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $0, a21360
cmpq $1, a21360
je label21476
jmp label21477

label21478:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21359 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $1, a21359
cmpq $1, a21359
je label21476
jmp label21477

label21481:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21312 a21326 a21358 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $0, a21358
cmpq $1, a21358
je label21478
jmp label21479

label21480:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21357 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $1, a21357
cmpq $1, a21357
je label21478
jmp label21479

label21483:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21356 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $0, a21356
cmpq $1, a21356
je label21480
jmp label21481

label21482:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21355 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $1, a21355
cmpq $1, a21355
je label21480
jmp label21481

label21484:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set a21333 a21319 a21326 a21312 %rax temp21412 a21347 %rsp)
 (set temp21412 a21333 a21319 temp21419 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
callq read_int
movq %rax, temp21419
cmpq $1, temp21419
jg label21482
jmp label21483

label21485:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $1, a21347
jmp label21484

label21486:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 a21347 %rsp))
movq $2, a21347
jmp label21484

label21488:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21353 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $0, a21353
cmpq $1, a21353
je label21485
jmp label21486

label21487:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21352 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $1, a21352
cmpq $1, a21352
je label21485
jmp label21486

label21489:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21350 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $1, a21350
cmpq $1, a21350
je label21487
jmp label21488

label21490:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21326 a21312 %rsp a21319 a21351)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $0, a21351
cmpq $1, a21351
je label21487
jmp label21488

label21491:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp a21348 temp21412)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $1, a21348
cmpq $1, a21348
je label21489
jmp label21490

label21492:
    liveness
:
(list
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21319 a21326 a21312 %rsp a21333 a21349)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
movq $0, a21349
cmpq $1, a21349
je label21489
jmp label21490

label21493:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set %rax a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp %rax temp21412)
 (set temp21412 a21333 a21326 a21312 %rsp a21319 temp21415)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp)
 (set temp21412 a21333 a21319 a21326 a21312 %rsp))
callq read_int
movq %rax, temp21412
callq read_int
movq %rax, temp21415
cmpq $1, temp21415
jg label21491
jmp label21492

label21495:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $2, a21340
jmp label21493

label21494:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21340
jmp label21493

label21497:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 a21346 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $0, a21346
cmpq $1, a21346
je label21494
jmp label21495

label21496:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 a21345 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21345
cmpq $1, a21345
je label21494
jmp label21495

label21499:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 %rsp a21312 a21344)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $0, a21344
cmpq $1, a21344
je label21496
jmp label21497

label21498:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21343 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21343
cmpq $1, a21343
je label21496
jmp label21497

label21501:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21312 %rsp a21326 a21342)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $0, a21342
cmpq $1, a21342
je label21498
jmp label21499

label21500:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21341 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21341
cmpq $1, a21341
je label21498
jmp label21499

label21502:
    liveness
:
(list
 (set a21333 a21319 a21326 a21312 %rsp)
 (set %rax a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 temp21410 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp)
 (set a21333 a21319 a21326 a21312 %rsp))
callq read_int
movq %rax, temp21410
cmpq $1, temp21410
jg label21500
jmp label21501

label21504:
    liveness
:
(list (set a21319 a21326 a21312 %rsp) (set a21333 a21319 a21326 a21312 %rsp))
movq $2, a21333
jmp label21502

label21503:
    liveness
:
(list (set a21319 a21326 a21312 %rsp) (set a21333 a21319 a21326 a21312 %rsp))
movq $1, a21333
jmp label21502

label21505:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21338 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $1, a21338
cmpq $1, a21338
je label21503
jmp label21504

label21506:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21339 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $0, a21339
cmpq $1, a21339
je label21503
jmp label21504

label21507:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21336 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $1, a21336
cmpq $1, a21336
je label21505
jmp label21506

label21508:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21337 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $0, a21337
cmpq $1, a21337
je label21505
jmp label21506

label21509:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21334 a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $1, a21334
cmpq $1, a21334
je label21507
jmp label21508

label21510:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set a21326 a21312 %rsp a21319 a21335)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
movq $0, a21335
cmpq $1, a21335
je label21507
jmp label21508

label21511:
    liveness
:
(list
 (set a21319 a21326 a21312 %rsp)
 (set %rax a21319 a21326 a21312 %rsp)
 (set a21319 a21312 %rsp a21326 temp21406)
 (set a21319 a21326 a21312 %rsp)
 (set a21319 a21326 a21312 %rsp))
callq read_int
movq %rax, temp21406
cmpq $1, temp21406
jg label21509
jmp label21510

label21513:
    liveness
:
(list (set a21319 a21312 %rsp) (set a21319 a21326 a21312 %rsp))
movq $2, a21326
jmp label21511

label21512:
    liveness
:
(list (set a21319 a21312 %rsp) (set a21319 a21326 a21312 %rsp))
movq $1, a21326
jmp label21511

label21515:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21332 a21319 a21312 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $0, a21332
cmpq $1, a21332
je label21512
jmp label21513

label21514:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 a21312 a21331 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $1, a21331
cmpq $1, a21331
je label21512
jmp label21513

label21517:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 a21312 a21330 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $0, a21330
cmpq $1, a21330
je label21514
jmp label21515

label21516:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 a21312 a21329 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $1, a21329
cmpq $1, a21329
je label21514
jmp label21515

label21519:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 %rsp a21312 a21328)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $0, a21328
cmpq $1, a21328
je label21516
jmp label21517

label21518:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set a21319 a21327 a21312 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
movq $1, a21327
cmpq $1, a21327
je label21516
jmp label21517

label21520:
    liveness
:
(list
 (set a21319 a21312 %rsp)
 (set %rax a21319 a21312 %rsp)
 (set a21319 temp21402 a21312 %rsp)
 (set a21319 a21312 %rsp)
 (set a21319 a21312 %rsp))
callq read_int
movq %rax, temp21402
cmpq $1, temp21402
jg label21518
jmp label21519

label21521:
    liveness
:
(list (set a21312 %rsp) (set a21319 a21312 %rsp))
movq $1, a21319
jmp label21520

label21522:
    liveness
:
(list (set a21312 %rsp) (set a21319 a21312 %rsp))
movq $2, a21319
jmp label21520

label21523:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21324 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $1, a21324
cmpq $1, a21324
je label21521
jmp label21522

label21524:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21325 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $0, a21325
cmpq $1, a21325
je label21521
jmp label21522

label21526:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21323 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $0, a21323
cmpq $1, a21323
je label21523
jmp label21524

label21525:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21322 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $1, a21322
cmpq $1, a21322
je label21523
jmp label21524

label21527:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21320 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $1, a21320
cmpq $1, a21320
je label21525
jmp label21526

label21528:
    liveness
:
(list
 (set a21312 %rsp)
 (set a21321 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
movq $0, a21321
cmpq $1, a21321
je label21525
jmp label21526

label21529:
    liveness
:
(list
 (set a21312 %rsp)
 (set %rax a21312 %rsp)
 (set temp21398 a21312 %rsp)
 (set a21312 %rsp)
 (set a21312 %rsp))
callq read_int
movq %rax, temp21398
cmpq $1, temp21398
jg label21527
jmp label21528

label21531:
    liveness
:
(list (set %rsp) (set a21312 %rsp))
movq $2, a21312
jmp label21529

label21530:
    liveness
:
(list (set %rsp) (set a21312 %rsp))
movq $1, a21312
jmp label21529

label21532:
    liveness
:
(list (set %rsp) (set a21317 %rsp) (set %rsp) (set %rsp))
movq $1, a21317
cmpq $1, a21317
je label21530
jmp label21531

label21533:
    liveness
:
(list (set %rsp) (set a21318 %rsp) (set %rsp) (set %rsp))
movq $0, a21318
cmpq $1, a21318
je label21530
jmp label21531

label21535:
    liveness
:
(list (set %rsp) (set a21316 %rsp) (set %rsp) (set %rsp))
movq $0, a21316
cmpq $1, a21316
je label21532
jmp label21533

label21534:
    liveness
:
(list (set %rsp) (set a21315 %rsp) (set %rsp) (set %rsp))
movq $1, a21315
cmpq $1, a21315
je label21532
jmp label21533

label21538:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label21536:
    liveness
:
(list (set %rsp) (set a21313 %rsp) (set %rsp) (set %rsp))
movq $1, a21313
cmpq $1, a21313
je label21534
jmp label21535

label21537:
    liveness
:
(list (set %rsp) (set a21314 %rsp) (set %rsp) (set %rsp))
movq $0, a21314
cmpq $1, a21314
je label21534
jmp label21535

label21539:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp21394 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp21394
cmpq $1, temp21394
jg label21536
jmp label21537

label21540:
    liveness
:
(list (set x21311 %rsp) (set %rsp) (set %rsp))
cmpq $1, x21311
je label21538
jmp label21539

label21541:
    liveness
:
(list (set %rsp) (set x21311 %rsp))
movq $1, x21311
jmp label21540

label21542:
    liveness
:
(list (set %rsp) (set x21311 %rsp))
movq $0, x21311
jmp label21540

label21543:
    liveness
:
(list (set temp21391 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp21391
jg label21541
jmp label21542

label21545:
    liveness
:
(list (set %rsp) (set temp21391 %rsp))
movq $9, temp21391
jmp label21543

label21544:
    liveness
:
(list (set %rsp) (set temp21391 %rsp))
movq $8, temp21391
jmp label21543

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label21544
jmp label21545




output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp21396 a21319)
 (list temp21429 a21375)
 (list a21333 temp21404)
 (list temp21400 a21326)
 (list a21368 temp21425)
 (list temp21432 a21376)
 (list temp21404 a21333)
 (list temp21436 a21383)
 (list a21375 temp21429)
 (list a21376 temp21432)
 (list temp21408 temp21412)
 (list a21347 temp21413)
 (list temp21412 temp21408)
 (list temp21413 a21347)
 (list a21319 temp21396)
 (list a21383 temp21436)
 (list temp21417 a21354)
 (list a21354 temp21417)
 (list temp21421 a21361)
 (list a21326 temp21400)
 (list a21361 temp21421)
 (list temp21425 a21368))
label21439:
    movq a21383, temp21436
    movq a21376, temp21432
    addq temp21436, temp21432
    movq a21375, temp21429
    addq temp21432, temp21429
    movq a21368, temp21425
    addq temp21429, temp21425
    movq a21361, temp21421
    addq temp21425, temp21421
    movq a21354, temp21417
    addq temp21421, temp21417
    movq a21347, temp21413
    addq temp21417, temp21413
    movq temp21412, temp21408
    addq temp21413, temp21408
    movq a21333, temp21404
    addq temp21408, temp21404
    movq a21326, temp21400
    addq temp21404, temp21400
    movq a21319, temp21396
    addq temp21400, temp21396
    movq a21312, %rax
    addq temp21396, %rax
    jmp conclusion
    
label21441:
    movq $2, a21383
    jmp label21439
    
label21440:
    movq $1, a21383
    jmp label21439
    
label21442:
    movq $1, a21388
    cmpq $1, a21388
    je label21440
    jmp label21441
    
label21443:
    movq $0, a21389
    cmpq $1, a21389
    je label21440
    jmp label21441
    
label21444:
    movq $1, a21386
    cmpq $1, a21386
    je label21442
    jmp label21443
    
label21445:
    movq $0, a21387
    cmpq $1, a21387
    je label21442
    jmp label21443
    
label21446:
    movq $1, a21384
    cmpq $1, a21384
    je label21444
    jmp label21445
    
label21447:
    movq $0, a21385
    cmpq $1, a21385
    je label21444
    jmp label21445
    
label21448:
    callq read_int
    movq %rax, temp21438
    cmpq $1, temp21438
    jg label21446
    jmp label21447
    
label21449:
    movq $1, a21376
    jmp label21448
    
label21450:
    movq $2, a21376
    jmp label21448
    
label21452:
    movq $0, a21382
    cmpq $1, a21382
    je label21449
    jmp label21450
    
label21451:
    movq $1, a21381
    cmpq $1, a21381
    je label21449
    jmp label21450
    
label21453:
    movq $1, a21379
    cmpq $1, a21379
    je label21451
    jmp label21452
    
label21454:
    movq $0, a21380
    cmpq $1, a21380
    je label21451
    jmp label21452
    
label21456:
    movq $0, a21378
    cmpq $1, a21378
    je label21453
    jmp label21454
    
label21455:
    movq $1, a21377
    cmpq $1, a21377
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, a21375
    callq read_int
    movq %rax, temp21434
    cmpq $1, temp21434
    jg label21455
    jmp label21456
    
label21458:
    movq $1, a21368
    jmp label21457
    
label21459:
    movq $2, a21368
    jmp label21457
    
label21461:
    movq $0, a21374
    cmpq $1, a21374
    je label21458
    jmp label21459
    
label21460:
    movq $1, a21373
    cmpq $1, a21373
    je label21458
    jmp label21459
    
label21463:
    movq $0, a21372
    cmpq $1, a21372
    je label21460
    jmp label21461
    
label21462:
    movq $1, a21371
    cmpq $1, a21371
    je label21460
    jmp label21461
    
label21465:
    movq $0, a21370
    cmpq $1, a21370
    je label21462
    jmp label21463
    
label21464:
    movq $1, a21369
    cmpq $1, a21369
    je label21462
    jmp label21463
    
label21466:
    callq read_int
    movq %rax, temp21427
    cmpq $1, temp21427
    jg label21464
    jmp label21465
    
label21468:
    movq $2, a21361
    jmp label21466
    
label21467:
    movq $1, a21361
    jmp label21466
    
label21469:
    movq $1, a21366
    cmpq $1, a21366
    je label21467
    jmp label21468
    
label21470:
    movq $0, a21367
    cmpq $1, a21367
    je label21467
    jmp label21468
    
label21472:
    movq $0, a21365
    cmpq $1, a21365
    je label21469
    jmp label21470
    
label21471:
    movq $1, a21364
    cmpq $1, a21364
    je label21469
    jmp label21470
    
label21473:
    movq $1, a21362
    cmpq $1, a21362
    je label21471
    jmp label21472
    
label21474:
    movq $0, a21363
    cmpq $1, a21363
    je label21471
    jmp label21472
    
label21475:
    callq read_int
    movq %rax, temp21423
    cmpq $1, temp21423
    jg label21473
    jmp label21474
    
label21477:
    movq $2, a21354
    jmp label21475
    
label21476:
    movq $1, a21354
    jmp label21475
    
label21479:
    movq $0, a21360
    cmpq $1, a21360
    je label21476
    jmp label21477
    
label21478:
    movq $1, a21359
    cmpq $1, a21359
    je label21476
    jmp label21477
    
label21481:
    movq $0, a21358
    cmpq $1, a21358
    je label21478
    jmp label21479
    
label21480:
    movq $1, a21357
    cmpq $1, a21357
    je label21478
    jmp label21479
    
label21483:
    movq $0, a21356
    cmpq $1, a21356
    je label21480
    jmp label21481
    
label21482:
    movq $1, a21355
    cmpq $1, a21355
    je label21480
    jmp label21481
    
label21484:
    callq read_int
    movq %rax, temp21419
    cmpq $1, temp21419
    jg label21482
    jmp label21483
    
label21485:
    movq $1, a21347
    jmp label21484
    
label21486:
    movq $2, a21347
    jmp label21484
    
label21488:
    movq $0, a21353
    cmpq $1, a21353
    je label21485
    jmp label21486
    
label21487:
    movq $1, a21352
    cmpq $1, a21352
    je label21485
    jmp label21486
    
label21489:
    movq $1, a21350
    cmpq $1, a21350
    je label21487
    jmp label21488
    
label21490:
    movq $0, a21351
    cmpq $1, a21351
    je label21487
    jmp label21488
    
label21491:
    movq $1, a21348
    cmpq $1, a21348
    je label21489
    jmp label21490
    
label21492:
    movq $0, a21349
    cmpq $1, a21349
    je label21489
    jmp label21490
    
label21493:
    callq read_int
    movq %rax, temp21412
    callq read_int
    movq %rax, temp21415
    cmpq $1, temp21415
    jg label21491
    jmp label21492
    
label21495:
    movq $2, a21340
    jmp label21493
    
label21494:
    movq $1, a21340
    jmp label21493
    
label21497:
    movq $0, a21346
    cmpq $1, a21346
    je label21494
    jmp label21495
    
label21496:
    movq $1, a21345
    cmpq $1, a21345
    je label21494
    jmp label21495
    
label21499:
    movq $0, a21344
    cmpq $1, a21344
    je label21496
    jmp label21497
    
label21498:
    movq $1, a21343
    cmpq $1, a21343
    je label21496
    jmp label21497
    
label21501:
    movq $0, a21342
    cmpq $1, a21342
    je label21498
    jmp label21499
    
label21500:
    movq $1, a21341
    cmpq $1, a21341
    je label21498
    jmp label21499
    
label21502:
    callq read_int
    movq %rax, temp21410
    cmpq $1, temp21410
    jg label21500
    jmp label21501
    
label21504:
    movq $2, a21333
    jmp label21502
    
label21503:
    movq $1, a21333
    jmp label21502
    
label21505:
    movq $1, a21338
    cmpq $1, a21338
    je label21503
    jmp label21504
    
label21506:
    movq $0, a21339
    cmpq $1, a21339
    je label21503
    jmp label21504
    
label21507:
    movq $1, a21336
    cmpq $1, a21336
    je label21505
    jmp label21506
    
label21508:
    movq $0, a21337
    cmpq $1, a21337
    je label21505
    jmp label21506
    
label21509:
    movq $1, a21334
    cmpq $1, a21334
    je label21507
    jmp label21508
    
label21510:
    movq $0, a21335
    cmpq $1, a21335
    je label21507
    jmp label21508
    
label21511:
    callq read_int
    movq %rax, temp21406
    cmpq $1, temp21406
    jg label21509
    jmp label21510
    
label21513:
    movq $2, a21326
    jmp label21511
    
label21512:
    movq $1, a21326
    jmp label21511
    
label21515:
    movq $0, a21332
    cmpq $1, a21332
    je label21512
    jmp label21513
    
label21514:
    movq $1, a21331
    cmpq $1, a21331
    je label21512
    jmp label21513
    
label21517:
    movq $0, a21330
    cmpq $1, a21330
    je label21514
    jmp label21515
    
label21516:
    movq $1, a21329
    cmpq $1, a21329
    je label21514
    jmp label21515
    
label21519:
    movq $0, a21328
    cmpq $1, a21328
    je label21516
    jmp label21517
    
label21518:
    movq $1, a21327
    cmpq $1, a21327
    je label21516
    jmp label21517
    
label21520:
    callq read_int
    movq %rax, temp21402
    cmpq $1, temp21402
    jg label21518
    jmp label21519
    
label21521:
    movq $1, a21319
    jmp label21520
    
label21522:
    movq $2, a21319
    jmp label21520
    
label21523:
    movq $1, a21324
    cmpq $1, a21324
    je label21521
    jmp label21522
    
label21524:
    movq $0, a21325
    cmpq $1, a21325
    je label21521
    jmp label21522
    
label21526:
    movq $0, a21323
    cmpq $1, a21323
    je label21523
    jmp label21524
    
label21525:
    movq $1, a21322
    cmpq $1, a21322
    je label21523
    jmp label21524
    
label21527:
    movq $1, a21320
    cmpq $1, a21320
    je label21525
    jmp label21526
    
label21528:
    movq $0, a21321
    cmpq $1, a21321
    je label21525
    jmp label21526
    
label21529:
    callq read_int
    movq %rax, temp21398
    cmpq $1, temp21398
    jg label21527
    jmp label21528
    
label21531:
    movq $2, a21312
    jmp label21529
    
label21530:
    movq $1, a21312
    jmp label21529
    
label21532:
    movq $1, a21317
    cmpq $1, a21317
    je label21530
    jmp label21531
    
label21533:
    movq $0, a21318
    cmpq $1, a21318
    je label21530
    jmp label21531
    
label21535:
    movq $0, a21316
    cmpq $1, a21316
    je label21532
    jmp label21533
    
label21534:
    movq $1, a21315
    cmpq $1, a21315
    je label21532
    jmp label21533
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21536:
    movq $1, a21313
    cmpq $1, a21313
    je label21534
    jmp label21535
    
label21537:
    movq $0, a21314
    cmpq $1, a21314
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, temp21394
    cmpq $1, temp21394
    jg label21536
    jmp label21537
    
label21540:
    cmpq $1, x21311
    je label21538
    jmp label21539
    
label21541:
    movq $1, x21311
    jmp label21540
    
label21542:
    movq $0, x21311
    jmp label21540
    
label21543:
    cmpq $8, temp21391
    jg label21541
    jmp label21542
    
label21545:
    movq $9, temp21391
    jmp label21543
    
label21544:
    movq $8, temp21391
    jmp label21543
    
start:
    cmpq $1, $1
    jge label21544
    jmp label21545
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp21396 a21319)
 (list temp21429 a21375)
 (list a21333 temp21404)
 (list temp21400 a21326)
 (list a21368 temp21425)
 (list temp21432 a21376)
 (list temp21404 a21333)
 (list temp21436 a21383)
 (list a21375 temp21429)
 (list a21376 temp21432)
 (list temp21408 temp21412)
 (list a21347 temp21413)
 (list temp21412 temp21408)
 (list temp21413 a21347)
 (list a21319 temp21396)
 (list a21383 temp21436)
 (list temp21417 a21354)
 (list a21354 temp21417)
 (list temp21421 a21361)
 (list a21326 temp21400)
 (list a21361 temp21421)
 (list temp21425 a21368))
label21439:
    movq a21383, temp21436
    movq a21376, temp21432
    addq temp21436, temp21432
    movq a21375, temp21429
    addq temp21432, temp21429
    movq a21368, temp21425
    addq temp21429, temp21425
    movq a21361, temp21421
    addq temp21425, temp21421
    movq a21354, temp21417
    addq temp21421, temp21417
    movq a21347, temp21413
    addq temp21417, temp21413
    movq temp21412, temp21408
    addq temp21413, temp21408
    movq a21333, temp21404
    addq temp21408, temp21404
    movq a21326, temp21400
    addq temp21404, temp21400
    movq a21319, temp21396
    addq temp21400, temp21396
    movq a21312, %rax
    addq temp21396, %rax
    jmp conclusion
    
label21441:
    movq $2, a21383
    jmp label21439
    
label21440:
    movq $1, a21383
    jmp label21439
    
label21442:
    movq $1, a21388
    cmpq $1, a21388
    je label21440
    jmp label21441
    
label21443:
    movq $0, a21389
    cmpq $1, a21389
    je label21440
    jmp label21441
    
label21444:
    movq $1, a21386
    cmpq $1, a21386
    je label21442
    jmp label21443
    
label21445:
    movq $0, a21387
    cmpq $1, a21387
    je label21442
    jmp label21443
    
label21446:
    movq $1, a21384
    cmpq $1, a21384
    je label21444
    jmp label21445
    
label21447:
    movq $0, a21385
    cmpq $1, a21385
    je label21444
    jmp label21445
    
label21448:
    callq read_int
    movq %rax, temp21438
    cmpq $1, temp21438
    jg label21446
    jmp label21447
    
label21449:
    movq $1, a21376
    jmp label21448
    
label21450:
    movq $2, a21376
    jmp label21448
    
label21452:
    movq $0, a21382
    cmpq $1, a21382
    je label21449
    jmp label21450
    
label21451:
    movq $1, a21381
    cmpq $1, a21381
    je label21449
    jmp label21450
    
label21453:
    movq $1, a21379
    cmpq $1, a21379
    je label21451
    jmp label21452
    
label21454:
    movq $0, a21380
    cmpq $1, a21380
    je label21451
    jmp label21452
    
label21456:
    movq $0, a21378
    cmpq $1, a21378
    je label21453
    jmp label21454
    
label21455:
    movq $1, a21377
    cmpq $1, a21377
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, a21375
    callq read_int
    movq %rax, temp21434
    cmpq $1, temp21434
    jg label21455
    jmp label21456
    
label21458:
    movq $1, a21368
    jmp label21457
    
label21459:
    movq $2, a21368
    jmp label21457
    
label21461:
    movq $0, a21374
    cmpq $1, a21374
    je label21458
    jmp label21459
    
label21460:
    movq $1, a21373
    cmpq $1, a21373
    je label21458
    jmp label21459
    
label21463:
    movq $0, a21372
    cmpq $1, a21372
    je label21460
    jmp label21461
    
label21462:
    movq $1, a21371
    cmpq $1, a21371
    je label21460
    jmp label21461
    
label21465:
    movq $0, a21370
    cmpq $1, a21370
    je label21462
    jmp label21463
    
label21464:
    movq $1, a21369
    cmpq $1, a21369
    je label21462
    jmp label21463
    
label21466:
    callq read_int
    movq %rax, temp21427
    cmpq $1, temp21427
    jg label21464
    jmp label21465
    
label21468:
    movq $2, a21361
    jmp label21466
    
label21467:
    movq $1, a21361
    jmp label21466
    
label21469:
    movq $1, a21366
    cmpq $1, a21366
    je label21467
    jmp label21468
    
label21470:
    movq $0, a21367
    cmpq $1, a21367
    je label21467
    jmp label21468
    
label21472:
    movq $0, a21365
    cmpq $1, a21365
    je label21469
    jmp label21470
    
label21471:
    movq $1, a21364
    cmpq $1, a21364
    je label21469
    jmp label21470
    
label21473:
    movq $1, a21362
    cmpq $1, a21362
    je label21471
    jmp label21472
    
label21474:
    movq $0, a21363
    cmpq $1, a21363
    je label21471
    jmp label21472
    
label21475:
    callq read_int
    movq %rax, temp21423
    cmpq $1, temp21423
    jg label21473
    jmp label21474
    
label21477:
    movq $2, a21354
    jmp label21475
    
label21476:
    movq $1, a21354
    jmp label21475
    
label21479:
    movq $0, a21360
    cmpq $1, a21360
    je label21476
    jmp label21477
    
label21478:
    movq $1, a21359
    cmpq $1, a21359
    je label21476
    jmp label21477
    
label21481:
    movq $0, a21358
    cmpq $1, a21358
    je label21478
    jmp label21479
    
label21480:
    movq $1, a21357
    cmpq $1, a21357
    je label21478
    jmp label21479
    
label21483:
    movq $0, a21356
    cmpq $1, a21356
    je label21480
    jmp label21481
    
label21482:
    movq $1, a21355
    cmpq $1, a21355
    je label21480
    jmp label21481
    
label21484:
    callq read_int
    movq %rax, temp21419
    cmpq $1, temp21419
    jg label21482
    jmp label21483
    
label21485:
    movq $1, a21347
    jmp label21484
    
label21486:
    movq $2, a21347
    jmp label21484
    
label21488:
    movq $0, a21353
    cmpq $1, a21353
    je label21485
    jmp label21486
    
label21487:
    movq $1, a21352
    cmpq $1, a21352
    je label21485
    jmp label21486
    
label21489:
    movq $1, a21350
    cmpq $1, a21350
    je label21487
    jmp label21488
    
label21490:
    movq $0, a21351
    cmpq $1, a21351
    je label21487
    jmp label21488
    
label21491:
    movq $1, a21348
    cmpq $1, a21348
    je label21489
    jmp label21490
    
label21492:
    movq $0, a21349
    cmpq $1, a21349
    je label21489
    jmp label21490
    
label21493:
    callq read_int
    movq %rax, temp21412
    callq read_int
    movq %rax, temp21415
    cmpq $1, temp21415
    jg label21491
    jmp label21492
    
label21495:
    movq $2, a21340
    jmp label21493
    
label21494:
    movq $1, a21340
    jmp label21493
    
label21497:
    movq $0, a21346
    cmpq $1, a21346
    je label21494
    jmp label21495
    
label21496:
    movq $1, a21345
    cmpq $1, a21345
    je label21494
    jmp label21495
    
label21499:
    movq $0, a21344
    cmpq $1, a21344
    je label21496
    jmp label21497
    
label21498:
    movq $1, a21343
    cmpq $1, a21343
    je label21496
    jmp label21497
    
label21501:
    movq $0, a21342
    cmpq $1, a21342
    je label21498
    jmp label21499
    
label21500:
    movq $1, a21341
    cmpq $1, a21341
    je label21498
    jmp label21499
    
label21502:
    callq read_int
    movq %rax, temp21410
    cmpq $1, temp21410
    jg label21500
    jmp label21501
    
label21504:
    movq $2, a21333
    jmp label21502
    
label21503:
    movq $1, a21333
    jmp label21502
    
label21505:
    movq $1, a21338
    cmpq $1, a21338
    je label21503
    jmp label21504
    
label21506:
    movq $0, a21339
    cmpq $1, a21339
    je label21503
    jmp label21504
    
label21507:
    movq $1, a21336
    cmpq $1, a21336
    je label21505
    jmp label21506
    
label21508:
    movq $0, a21337
    cmpq $1, a21337
    je label21505
    jmp label21506
    
label21509:
    movq $1, a21334
    cmpq $1, a21334
    je label21507
    jmp label21508
    
label21510:
    movq $0, a21335
    cmpq $1, a21335
    je label21507
    jmp label21508
    
label21511:
    callq read_int
    movq %rax, temp21406
    cmpq $1, temp21406
    jg label21509
    jmp label21510
    
label21513:
    movq $2, a21326
    jmp label21511
    
label21512:
    movq $1, a21326
    jmp label21511
    
label21515:
    movq $0, a21332
    cmpq $1, a21332
    je label21512
    jmp label21513
    
label21514:
    movq $1, a21331
    cmpq $1, a21331
    je label21512
    jmp label21513
    
label21517:
    movq $0, a21330
    cmpq $1, a21330
    je label21514
    jmp label21515
    
label21516:
    movq $1, a21329
    cmpq $1, a21329
    je label21514
    jmp label21515
    
label21519:
    movq $0, a21328
    cmpq $1, a21328
    je label21516
    jmp label21517
    
label21518:
    movq $1, a21327
    cmpq $1, a21327
    je label21516
    jmp label21517
    
label21520:
    callq read_int
    movq %rax, temp21402
    cmpq $1, temp21402
    jg label21518
    jmp label21519
    
label21521:
    movq $1, a21319
    jmp label21520
    
label21522:
    movq $2, a21319
    jmp label21520
    
label21523:
    movq $1, a21324
    cmpq $1, a21324
    je label21521
    jmp label21522
    
label21524:
    movq $0, a21325
    cmpq $1, a21325
    je label21521
    jmp label21522
    
label21526:
    movq $0, a21323
    cmpq $1, a21323
    je label21523
    jmp label21524
    
label21525:
    movq $1, a21322
    cmpq $1, a21322
    je label21523
    jmp label21524
    
label21527:
    movq $1, a21320
    cmpq $1, a21320
    je label21525
    jmp label21526
    
label21528:
    movq $0, a21321
    cmpq $1, a21321
    je label21525
    jmp label21526
    
label21529:
    callq read_int
    movq %rax, temp21398
    cmpq $1, temp21398
    jg label21527
    jmp label21528
    
label21531:
    movq $2, a21312
    jmp label21529
    
label21530:
    movq $1, a21312
    jmp label21529
    
label21532:
    movq $1, a21317
    cmpq $1, a21317
    je label21530
    jmp label21531
    
label21533:
    movq $0, a21318
    cmpq $1, a21318
    je label21530
    jmp label21531
    
label21535:
    movq $0, a21316
    cmpq $1, a21316
    je label21532
    jmp label21533
    
label21534:
    movq $1, a21315
    cmpq $1, a21315
    je label21532
    jmp label21533
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21536:
    movq $1, a21313
    cmpq $1, a21313
    je label21534
    jmp label21535
    
label21537:
    movq $0, a21314
    cmpq $1, a21314
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, temp21394
    cmpq $1, temp21394
    jg label21536
    jmp label21537
    
label21540:
    cmpq $1, x21311
    je label21538
    jmp label21539
    
label21541:
    movq $1, x21311
    jmp label21540
    
label21542:
    movq $0, x21311
    jmp label21540
    
label21543:
    cmpq $8, temp21391
    jg label21541
    jmp label21542
    
label21545:
    movq $9, temp21391
    jmp label21543
    
label21544:
    movq $8, temp21391
    jmp label21543
    
start:
    cmpq $1, $1
    jge label21544
    jmp label21545
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp21396 a21319)
 (list temp21429 a21375)
 (list a21333 temp21404)
 (list temp21400 a21326)
 (list a21368 temp21425)
 (list temp21432 a21376)
 (list temp21404 a21333)
 (list temp21436 a21383)
 (list a21375 temp21429)
 (list a21376 temp21432)
 (list temp21408 temp21412)
 (list a21347 temp21413)
 (list temp21412 temp21408)
 (list temp21413 a21347)
 (list a21319 temp21396)
 (list a21383 temp21436)
 (list temp21417 a21354)
 (list a21354 temp21417)
 (list temp21421 a21361)
 (list a21326 temp21400)
 (list a21361 temp21421)
 (list temp21425 a21368))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21368 7)
 (cons a21375 8)
 (cons a21376 9)
 (cons a21354 10)
 (cons a21361 11)
 (cons a21333 12)
 (cons a21347 13)
 (cons a21319 14)
 (cons a21326 15)
 (cons a21312 16)
 (cons temp21412 17)
 (cons a21383 0)
 (cons a21386 0)
 (cons a21385 0)
 (cons a21384 0)
 (cons a21389 0)
 (cons a21388 0)
 (cons temp21436 0)
 (cons temp21432 1)
 (cons a21387 0)
 (cons temp21438 0)
 (cons temp21429 0)
 (cons temp21434 0)
 (cons a21380 0)
 (cons a21377 0)
 (cons a21381 0)
 (cons a21378 0)
 (cons a21379 0)
 (cons a21382 0)
 (cons temp21425 1)
 (cons temp21421 0)
 (cons temp21427 0)
 (cons a21371 0)
 (cons a21370 0)
 (cons a21369 0)
 (cons a21374 0)
 (cons a21373 0)
 (cons a21372 0)
 (cons temp21417 1)
 (cons temp21423 0)
 (cons a21367 0)
 (cons a21364 0)
 (cons a21366 0)
 (cons a21365 0)
 (cons a21363 0)
 (cons a21362 0)
 (cons temp21413 0)
 (cons a21360 0)
 (cons a21355 0)
 (cons a21359 0)
 (cons a21358 0)
 (cons temp21419 0)
 (cons a21357 0)
 (cons a21356 0)
 (cons temp21408 1)
 (cons a21348 0)
 (cons temp21415 0)
 (cons a21352 0)
 (cons a21350 0)
 (cons a21353 0)
 (cons a21349 0)
 (cons a21351 0)
 (cons a21346 0)
 (cons a21341 0)
 (cons a21340 0)
 (cons a21343 0)
 (cons a21342 0)
 (cons a21344 0)
 (cons temp21404 0)
 (cons a21345 0)
 (cons temp21410 0)
 (cons temp21400 1)
 (cons temp21396 0)
 (cons a21338 0)
 (cons a21334 0)
 (cons a21337 0)
 (cons a21336 0)
 (cons a21339 0)
 (cons a21335 0)
 (cons temp21406 0)
 (cons a21328 0)
 (cons a21331 0)
 (cons a21329 0)
 (cons temp21402 0)
 (cons a21330 0)
 (cons a21332 0)
 (cons a21327 0)
 (cons a21321 0)
 (cons a21324 0)
 (cons temp21398 0)
 (cons a21322 0)
 (cons a21325 0)
 (cons a21323 0)
 (cons a21320 0)
 (cons a21318 0)
 (cons a21313 0)
 (cons x21311 0)
 (cons a21317 0)
 (cons temp21391 0)
 (cons a21315 0)
 (cons temp21394 0)
 (cons a21316 0)
 (cons a21314 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21439:
    movq %rcx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21441:
    movq $2, %rcx
    jmp label21439
    
label21440:
    movq $1, %rcx
    jmp label21439
    
label21442:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21443:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21444:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21445:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21446:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21447:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21448:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21446
    jmp label21447
    
label21449:
    movq $1, %r13
    jmp label21448
    
label21450:
    movq $2, %r13
    jmp label21448
    
label21452:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21451:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21453:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21454:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21456:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21455:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21455
    jmp label21456
    
label21458:
    movq $1, %rbx
    jmp label21457
    
label21459:
    movq $2, %rbx
    jmp label21457
    
label21461:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21460:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21463:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21462:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21465:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21464:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21466:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21464
    jmp label21465
    
label21468:
    movq $2, -48(%rbp)
    jmp label21466
    
label21467:
    movq $1, -48(%rbp)
    jmp label21466
    
label21469:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21470:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21472:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21471:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21473:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21474:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21475:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21473
    jmp label21474
    
label21477:
    movq $2, %r14
    jmp label21475
    
label21476:
    movq $1, %r14
    jmp label21475
    
label21479:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21478:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21481:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21480:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21483:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21482:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21484:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21482
    jmp label21483
    
label21485:
    movq $1, -64(%rbp)
    jmp label21484
    
label21486:
    movq $2, -64(%rbp)
    jmp label21484
    
label21488:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21487:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21489:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21490:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21491:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21492:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21493:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21491
    jmp label21492
    
label21495:
    movq $2, %rcx
    jmp label21493
    
label21494:
    movq $1, %rcx
    jmp label21493
    
label21497:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21496:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21499:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21498:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21501:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21500:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21502:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21500
    jmp label21501
    
label21504:
    movq $2, -56(%rbp)
    jmp label21502
    
label21503:
    movq $1, -56(%rbp)
    jmp label21502
    
label21505:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21506:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21507:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21508:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21509:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21510:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21511:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21509
    jmp label21510
    
label21513:
    movq $2, -80(%rbp)
    jmp label21511
    
label21512:
    movq $1, -80(%rbp)
    jmp label21511
    
label21515:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21514:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21517:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21516:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21519:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21518:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21520:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21518
    jmp label21519
    
label21521:
    movq $1, -72(%rbp)
    jmp label21520
    
label21522:
    movq $2, -72(%rbp)
    jmp label21520
    
label21523:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21524:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21526:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21525:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21527:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21528:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21529:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21527
    jmp label21528
    
label21531:
    movq $2, -88(%rbp)
    jmp label21529
    
label21530:
    movq $1, -88(%rbp)
    jmp label21529
    
label21532:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21533:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21535:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21534:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21536:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21537:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21536
    jmp label21537
    
label21540:
    cmpq $1, %rcx
    je label21538
    jmp label21539
    
label21541:
    movq $1, %rcx
    jmp label21540
    
label21542:
    movq $0, %rcx
    jmp label21540
    
label21543:
    cmpq $8, %rcx
    jg label21541
    jmp label21542
    
label21545:
    movq $9, %rcx
    jmp label21543
    
label21544:
    movq $8, %rcx
    jmp label21543
    
start:
    cmpq $1, $1
    jge label21544
    jmp label21545
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp21396 a21319)
 (list temp21429 a21375)
 (list a21333 temp21404)
 (list temp21400 a21326)
 (list a21368 temp21425)
 (list temp21432 a21376)
 (list temp21404 a21333)
 (list temp21436 a21383)
 (list a21375 temp21429)
 (list a21376 temp21432)
 (list temp21408 temp21412)
 (list a21347 temp21413)
 (list temp21412 temp21408)
 (list temp21413 a21347)
 (list a21319 temp21396)
 (list a21383 temp21436)
 (list temp21417 a21354)
 (list a21354 temp21417)
 (list temp21421 a21361)
 (list a21326 temp21400)
 (list a21361 temp21421)
 (list temp21425 a21368))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21368 7)
 (cons a21375 8)
 (cons a21376 9)
 (cons a21354 10)
 (cons a21361 11)
 (cons a21333 12)
 (cons a21347 13)
 (cons a21319 14)
 (cons a21326 15)
 (cons a21312 16)
 (cons temp21412 17)
 (cons a21383 0)
 (cons a21386 0)
 (cons a21385 0)
 (cons a21384 0)
 (cons a21389 0)
 (cons a21388 0)
 (cons temp21436 0)
 (cons temp21432 1)
 (cons a21387 0)
 (cons temp21438 0)
 (cons temp21429 0)
 (cons temp21434 0)
 (cons a21380 0)
 (cons a21377 0)
 (cons a21381 0)
 (cons a21378 0)
 (cons a21379 0)
 (cons a21382 0)
 (cons temp21425 1)
 (cons temp21421 0)
 (cons temp21427 0)
 (cons a21371 0)
 (cons a21370 0)
 (cons a21369 0)
 (cons a21374 0)
 (cons a21373 0)
 (cons a21372 0)
 (cons temp21417 1)
 (cons temp21423 0)
 (cons a21367 0)
 (cons a21364 0)
 (cons a21366 0)
 (cons a21365 0)
 (cons a21363 0)
 (cons a21362 0)
 (cons temp21413 0)
 (cons a21360 0)
 (cons a21355 0)
 (cons a21359 0)
 (cons a21358 0)
 (cons temp21419 0)
 (cons a21357 0)
 (cons a21356 0)
 (cons temp21408 1)
 (cons a21348 0)
 (cons temp21415 0)
 (cons a21352 0)
 (cons a21350 0)
 (cons a21353 0)
 (cons a21349 0)
 (cons a21351 0)
 (cons a21346 0)
 (cons a21341 0)
 (cons a21340 0)
 (cons a21343 0)
 (cons a21342 0)
 (cons a21344 0)
 (cons temp21404 0)
 (cons a21345 0)
 (cons temp21410 0)
 (cons temp21400 1)
 (cons temp21396 0)
 (cons a21338 0)
 (cons a21334 0)
 (cons a21337 0)
 (cons a21336 0)
 (cons a21339 0)
 (cons a21335 0)
 (cons temp21406 0)
 (cons a21328 0)
 (cons a21331 0)
 (cons a21329 0)
 (cons temp21402 0)
 (cons a21330 0)
 (cons a21332 0)
 (cons a21327 0)
 (cons a21321 0)
 (cons a21324 0)
 (cons temp21398 0)
 (cons a21322 0)
 (cons a21325 0)
 (cons a21323 0)
 (cons a21320 0)
 (cons a21318 0)
 (cons a21313 0)
 (cons x21311 0)
 (cons a21317 0)
 (cons temp21391 0)
 (cons a21315 0)
 (cons temp21394 0)
 (cons a21316 0)
 (cons a21314 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21439:
    movq %rcx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21441:
    movq $2, %rcx
    jmp label21439
    
label21440:
    movq $1, %rcx
    jmp label21439
    
label21442:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21443:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21444:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21445:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21446:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21447:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21448:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21446
    jmp label21447
    
label21449:
    movq $1, %r13
    jmp label21448
    
label21450:
    movq $2, %r13
    jmp label21448
    
label21452:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21451:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21453:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21454:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21456:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21455:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21455
    jmp label21456
    
label21458:
    movq $1, %rbx
    jmp label21457
    
label21459:
    movq $2, %rbx
    jmp label21457
    
label21461:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21460:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21463:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21462:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21465:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21464:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21466:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21464
    jmp label21465
    
label21468:
    movq $2, -48(%rbp)
    jmp label21466
    
label21467:
    movq $1, -48(%rbp)
    jmp label21466
    
label21469:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21470:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21472:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21471:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21473:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21474:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21475:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21473
    jmp label21474
    
label21477:
    movq $2, %r14
    jmp label21475
    
label21476:
    movq $1, %r14
    jmp label21475
    
label21479:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21478:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21481:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21480:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21483:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21482:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21484:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21482
    jmp label21483
    
label21485:
    movq $1, -64(%rbp)
    jmp label21484
    
label21486:
    movq $2, -64(%rbp)
    jmp label21484
    
label21488:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21487:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21489:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21490:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21491:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21492:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21493:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21491
    jmp label21492
    
label21495:
    movq $2, %rcx
    jmp label21493
    
label21494:
    movq $1, %rcx
    jmp label21493
    
label21497:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21496:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21499:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21498:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21501:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21500:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21502:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21500
    jmp label21501
    
label21504:
    movq $2, -56(%rbp)
    jmp label21502
    
label21503:
    movq $1, -56(%rbp)
    jmp label21502
    
label21505:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21506:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21507:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21508:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21509:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21510:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21511:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21509
    jmp label21510
    
label21513:
    movq $2, -80(%rbp)
    jmp label21511
    
label21512:
    movq $1, -80(%rbp)
    jmp label21511
    
label21515:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21514:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21517:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21516:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21519:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21518:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21520:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21518
    jmp label21519
    
label21521:
    movq $1, -72(%rbp)
    jmp label21520
    
label21522:
    movq $2, -72(%rbp)
    jmp label21520
    
label21523:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21524:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21526:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21525:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21527:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21528:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21529:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21527
    jmp label21528
    
label21531:
    movq $2, -88(%rbp)
    jmp label21529
    
label21530:
    movq $1, -88(%rbp)
    jmp label21529
    
label21532:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21533:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21535:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21534:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21536:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21537:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21536
    jmp label21537
    
label21540:
    cmpq $1, %rcx
    je label21538
    jmp label21539
    
label21541:
    movq $1, %rcx
    jmp label21540
    
label21542:
    movq $0, %rcx
    jmp label21540
    
label21543:
    cmpq $8, %rcx
    jg label21541
    jmp label21542
    
label21545:
    movq $9, %rcx
    jmp label21543
    
label21544:
    movq $8, %rcx
    jmp label21543
    
start:
    cmpq $1, $1
    jge label21544
    jmp label21545
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp21396 a21319)
 (list temp21429 a21375)
 (list a21333 temp21404)
 (list temp21400 a21326)
 (list a21368 temp21425)
 (list temp21432 a21376)
 (list temp21404 a21333)
 (list temp21436 a21383)
 (list a21375 temp21429)
 (list a21376 temp21432)
 (list temp21408 temp21412)
 (list a21347 temp21413)
 (list temp21412 temp21408)
 (list temp21413 a21347)
 (list a21319 temp21396)
 (list a21383 temp21436)
 (list temp21417 a21354)
 (list a21354 temp21417)
 (list temp21421 a21361)
 (list a21326 temp21400)
 (list a21361 temp21421)
 (list temp21425 a21368))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21368 7)
 (cons a21375 8)
 (cons a21376 9)
 (cons a21354 10)
 (cons a21361 11)
 (cons a21333 12)
 (cons a21347 13)
 (cons a21319 14)
 (cons a21326 15)
 (cons a21312 16)
 (cons temp21412 17)
 (cons a21383 0)
 (cons a21386 0)
 (cons a21385 0)
 (cons a21384 0)
 (cons a21389 0)
 (cons a21388 0)
 (cons temp21436 0)
 (cons temp21432 1)
 (cons a21387 0)
 (cons temp21438 0)
 (cons temp21429 0)
 (cons temp21434 0)
 (cons a21380 0)
 (cons a21377 0)
 (cons a21381 0)
 (cons a21378 0)
 (cons a21379 0)
 (cons a21382 0)
 (cons temp21425 1)
 (cons temp21421 0)
 (cons temp21427 0)
 (cons a21371 0)
 (cons a21370 0)
 (cons a21369 0)
 (cons a21374 0)
 (cons a21373 0)
 (cons a21372 0)
 (cons temp21417 1)
 (cons temp21423 0)
 (cons a21367 0)
 (cons a21364 0)
 (cons a21366 0)
 (cons a21365 0)
 (cons a21363 0)
 (cons a21362 0)
 (cons temp21413 0)
 (cons a21360 0)
 (cons a21355 0)
 (cons a21359 0)
 (cons a21358 0)
 (cons temp21419 0)
 (cons a21357 0)
 (cons a21356 0)
 (cons temp21408 1)
 (cons a21348 0)
 (cons temp21415 0)
 (cons a21352 0)
 (cons a21350 0)
 (cons a21353 0)
 (cons a21349 0)
 (cons a21351 0)
 (cons a21346 0)
 (cons a21341 0)
 (cons a21340 0)
 (cons a21343 0)
 (cons a21342 0)
 (cons a21344 0)
 (cons temp21404 0)
 (cons a21345 0)
 (cons temp21410 0)
 (cons temp21400 1)
 (cons temp21396 0)
 (cons a21338 0)
 (cons a21334 0)
 (cons a21337 0)
 (cons a21336 0)
 (cons a21339 0)
 (cons a21335 0)
 (cons temp21406 0)
 (cons a21328 0)
 (cons a21331 0)
 (cons a21329 0)
 (cons temp21402 0)
 (cons a21330 0)
 (cons a21332 0)
 (cons a21327 0)
 (cons a21321 0)
 (cons a21324 0)
 (cons temp21398 0)
 (cons a21322 0)
 (cons a21325 0)
 (cons a21323 0)
 (cons a21320 0)
 (cons a21318 0)
 (cons a21313 0)
 (cons x21311 0)
 (cons a21317 0)
 (cons temp21391 0)
 (cons a21315 0)
 (cons temp21394 0)
 (cons a21316 0)
 (cons a21314 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21439:
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21441:
    movq $2, %rcx
    jmp label21439
    
label21440:
    movq $1, %rcx
    jmp label21439
    
label21442:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21443:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21444:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21445:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21446:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21447:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21448:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21446
    jmp label21447
    
label21449:
    movq $1, %r13
    jmp label21448
    
label21450:
    movq $2, %r13
    jmp label21448
    
label21452:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21451:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21453:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21454:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21456:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21455:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21455
    jmp label21456
    
label21458:
    movq $1, %rbx
    jmp label21457
    
label21459:
    movq $2, %rbx
    jmp label21457
    
label21461:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21460:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21463:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21462:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21465:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21464:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21466:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21464
    jmp label21465
    
label21468:
    movq $2, -48(%rbp)
    jmp label21466
    
label21467:
    movq $1, -48(%rbp)
    jmp label21466
    
label21469:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21470:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21472:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21471:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21473:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21474:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21475:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21473
    jmp label21474
    
label21477:
    movq $2, %r14
    jmp label21475
    
label21476:
    movq $1, %r14
    jmp label21475
    
label21479:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21478:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21481:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21480:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21483:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21482:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21484:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21482
    jmp label21483
    
label21485:
    movq $1, -64(%rbp)
    jmp label21484
    
label21486:
    movq $2, -64(%rbp)
    jmp label21484
    
label21488:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21487:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21489:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21490:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21491:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21492:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21493:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21491
    jmp label21492
    
label21495:
    movq $2, %rcx
    jmp label21493
    
label21494:
    movq $1, %rcx
    jmp label21493
    
label21497:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21496:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21499:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21498:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21501:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21500:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21502:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21500
    jmp label21501
    
label21504:
    movq $2, -56(%rbp)
    jmp label21502
    
label21503:
    movq $1, -56(%rbp)
    jmp label21502
    
label21505:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21506:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21507:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21508:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21509:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21510:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21511:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21509
    jmp label21510
    
label21513:
    movq $2, -80(%rbp)
    jmp label21511
    
label21512:
    movq $1, -80(%rbp)
    jmp label21511
    
label21515:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21514:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21517:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21516:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21519:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21518:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21520:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21518
    jmp label21519
    
label21521:
    movq $1, -72(%rbp)
    jmp label21520
    
label21522:
    movq $2, -72(%rbp)
    jmp label21520
    
label21523:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21524:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21526:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21525:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21527:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21528:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21529:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21527
    jmp label21528
    
label21531:
    movq $2, -88(%rbp)
    jmp label21529
    
label21530:
    movq $1, -88(%rbp)
    jmp label21529
    
label21532:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21533:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21535:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21534:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21536:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21537:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21536
    jmp label21537
    
label21540:
    cmpq $1, %rcx
    je label21538
    jmp label21539
    
label21541:
    movq $1, %rcx
    jmp label21540
    
label21542:
    movq $0, %rcx
    jmp label21540
    
label21543:
    cmpq $8, %rcx
    jg label21541
    jmp label21542
    
label21545:
    movq $9, %rcx
    jmp label21543
    
label21544:
    movq $8, %rcx
    jmp label21543
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21544
    jmp label21545
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp21396 a21319)
 (list temp21429 a21375)
 (list a21333 temp21404)
 (list temp21400 a21326)
 (list a21368 temp21425)
 (list temp21432 a21376)
 (list temp21404 a21333)
 (list temp21436 a21383)
 (list a21375 temp21429)
 (list a21376 temp21432)
 (list temp21408 temp21412)
 (list a21347 temp21413)
 (list temp21412 temp21408)
 (list temp21413 a21347)
 (list a21319 temp21396)
 (list a21383 temp21436)
 (list temp21417 a21354)
 (list a21354 temp21417)
 (list temp21421 a21361)
 (list a21326 temp21400)
 (list a21361 temp21421)
 (list temp21425 a21368))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21368 7)
 (cons a21375 8)
 (cons a21376 9)
 (cons a21354 10)
 (cons a21361 11)
 (cons a21333 12)
 (cons a21347 13)
 (cons a21319 14)
 (cons a21326 15)
 (cons a21312 16)
 (cons temp21412 17)
 (cons a21383 0)
 (cons a21386 0)
 (cons a21385 0)
 (cons a21384 0)
 (cons a21389 0)
 (cons a21388 0)
 (cons temp21436 0)
 (cons temp21432 1)
 (cons a21387 0)
 (cons temp21438 0)
 (cons temp21429 0)
 (cons temp21434 0)
 (cons a21380 0)
 (cons a21377 0)
 (cons a21381 0)
 (cons a21378 0)
 (cons a21379 0)
 (cons a21382 0)
 (cons temp21425 1)
 (cons temp21421 0)
 (cons temp21427 0)
 (cons a21371 0)
 (cons a21370 0)
 (cons a21369 0)
 (cons a21374 0)
 (cons a21373 0)
 (cons a21372 0)
 (cons temp21417 1)
 (cons temp21423 0)
 (cons a21367 0)
 (cons a21364 0)
 (cons a21366 0)
 (cons a21365 0)
 (cons a21363 0)
 (cons a21362 0)
 (cons temp21413 0)
 (cons a21360 0)
 (cons a21355 0)
 (cons a21359 0)
 (cons a21358 0)
 (cons temp21419 0)
 (cons a21357 0)
 (cons a21356 0)
 (cons temp21408 1)
 (cons a21348 0)
 (cons temp21415 0)
 (cons a21352 0)
 (cons a21350 0)
 (cons a21353 0)
 (cons a21349 0)
 (cons a21351 0)
 (cons a21346 0)
 (cons a21341 0)
 (cons a21340 0)
 (cons a21343 0)
 (cons a21342 0)
 (cons a21344 0)
 (cons temp21404 0)
 (cons a21345 0)
 (cons temp21410 0)
 (cons temp21400 1)
 (cons temp21396 0)
 (cons a21338 0)
 (cons a21334 0)
 (cons a21337 0)
 (cons a21336 0)
 (cons a21339 0)
 (cons a21335 0)
 (cons temp21406 0)
 (cons a21328 0)
 (cons a21331 0)
 (cons a21329 0)
 (cons temp21402 0)
 (cons a21330 0)
 (cons a21332 0)
 (cons a21327 0)
 (cons a21321 0)
 (cons a21324 0)
 (cons temp21398 0)
 (cons a21322 0)
 (cons a21325 0)
 (cons a21323 0)
 (cons a21320 0)
 (cons a21318 0)
 (cons a21313 0)
 (cons x21311 0)
 (cons a21317 0)
 (cons temp21391 0)
 (cons a21315 0)
 (cons temp21394 0)
 (cons a21316 0)
 (cons a21314 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21439:
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21441:
    movq $2, %rcx
    jmp label21439
    
label21440:
    movq $1, %rcx
    jmp label21439
    
label21442:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21443:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21444:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21445:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21446:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21447:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21448:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21446
    jmp label21447
    
label21449:
    movq $1, %r13
    jmp label21448
    
label21450:
    movq $2, %r13
    jmp label21448
    
label21452:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21451:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21453:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21454:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21456:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21455:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21455
    jmp label21456
    
label21458:
    movq $1, %rbx
    jmp label21457
    
label21459:
    movq $2, %rbx
    jmp label21457
    
label21461:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21460:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21463:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21462:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21465:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21464:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21466:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21464
    jmp label21465
    
label21468:
    movq $2, -48(%rbp)
    jmp label21466
    
label21467:
    movq $1, -48(%rbp)
    jmp label21466
    
label21469:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21470:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21472:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21471:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21473:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21474:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21475:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21473
    jmp label21474
    
label21477:
    movq $2, %r14
    jmp label21475
    
label21476:
    movq $1, %r14
    jmp label21475
    
label21479:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21478:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21481:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21480:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21483:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21482:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21484:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21482
    jmp label21483
    
label21485:
    movq $1, -64(%rbp)
    jmp label21484
    
label21486:
    movq $2, -64(%rbp)
    jmp label21484
    
label21488:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21487:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21489:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21490:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21491:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21492:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21493:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21491
    jmp label21492
    
label21495:
    movq $2, %rcx
    jmp label21493
    
label21494:
    movq $1, %rcx
    jmp label21493
    
label21497:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21496:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21499:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21498:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21501:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21500:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21502:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21500
    jmp label21501
    
label21504:
    movq $2, -56(%rbp)
    jmp label21502
    
label21503:
    movq $1, -56(%rbp)
    jmp label21502
    
label21505:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21506:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21507:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21508:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21509:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21510:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21511:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21509
    jmp label21510
    
label21513:
    movq $2, -80(%rbp)
    jmp label21511
    
label21512:
    movq $1, -80(%rbp)
    jmp label21511
    
label21515:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21514:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21517:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21516:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21519:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21518:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21520:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21518
    jmp label21519
    
label21521:
    movq $1, -72(%rbp)
    jmp label21520
    
label21522:
    movq $2, -72(%rbp)
    jmp label21520
    
label21523:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21524:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21526:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21525:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21527:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21528:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21529:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21527
    jmp label21528
    
label21531:
    movq $2, -88(%rbp)
    jmp label21529
    
label21530:
    movq $1, -88(%rbp)
    jmp label21529
    
label21532:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21533:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21535:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21534:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21536:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21537:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21536
    jmp label21537
    
label21540:
    cmpq $1, %rcx
    je label21538
    jmp label21539
    
label21541:
    movq $1, %rcx
    jmp label21540
    
label21542:
    movq $0, %rcx
    jmp label21540
    
label21543:
    cmpq $8, %rcx
    jg label21541
    jmp label21542
    
label21545:
    movq $9, %rcx
    jmp label21543
    
label21544:
    movq $8, %rcx
    jmp label21543
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21544
    jmp label21545
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp21396 a21319)
 (list temp21429 a21375)
 (list a21333 temp21404)
 (list temp21400 a21326)
 (list a21368 temp21425)
 (list temp21432 a21376)
 (list temp21404 a21333)
 (list temp21436 a21383)
 (list a21375 temp21429)
 (list a21376 temp21432)
 (list temp21408 temp21412)
 (list a21347 temp21413)
 (list temp21412 temp21408)
 (list temp21413 a21347)
 (list a21319 temp21396)
 (list a21383 temp21436)
 (list temp21417 a21354)
 (list a21354 temp21417)
 (list temp21421 a21361)
 (list a21326 temp21400)
 (list a21361 temp21421)
 (list temp21425 a21368))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21368 7)
 (cons a21375 8)
 (cons a21376 9)
 (cons a21354 10)
 (cons a21361 11)
 (cons a21333 12)
 (cons a21347 13)
 (cons a21319 14)
 (cons a21326 15)
 (cons a21312 16)
 (cons temp21412 17)
 (cons a21383 0)
 (cons a21386 0)
 (cons a21385 0)
 (cons a21384 0)
 (cons a21389 0)
 (cons a21388 0)
 (cons temp21436 0)
 (cons temp21432 1)
 (cons a21387 0)
 (cons temp21438 0)
 (cons temp21429 0)
 (cons temp21434 0)
 (cons a21380 0)
 (cons a21377 0)
 (cons a21381 0)
 (cons a21378 0)
 (cons a21379 0)
 (cons a21382 0)
 (cons temp21425 1)
 (cons temp21421 0)
 (cons temp21427 0)
 (cons a21371 0)
 (cons a21370 0)
 (cons a21369 0)
 (cons a21374 0)
 (cons a21373 0)
 (cons a21372 0)
 (cons temp21417 1)
 (cons temp21423 0)
 (cons a21367 0)
 (cons a21364 0)
 (cons a21366 0)
 (cons a21365 0)
 (cons a21363 0)
 (cons a21362 0)
 (cons temp21413 0)
 (cons a21360 0)
 (cons a21355 0)
 (cons a21359 0)
 (cons a21358 0)
 (cons temp21419 0)
 (cons a21357 0)
 (cons a21356 0)
 (cons temp21408 1)
 (cons a21348 0)
 (cons temp21415 0)
 (cons a21352 0)
 (cons a21350 0)
 (cons a21353 0)
 (cons a21349 0)
 (cons a21351 0)
 (cons a21346 0)
 (cons a21341 0)
 (cons a21340 0)
 (cons a21343 0)
 (cons a21342 0)
 (cons a21344 0)
 (cons temp21404 0)
 (cons a21345 0)
 (cons temp21410 0)
 (cons temp21400 1)
 (cons temp21396 0)
 (cons a21338 0)
 (cons a21334 0)
 (cons a21337 0)
 (cons a21336 0)
 (cons a21339 0)
 (cons a21335 0)
 (cons temp21406 0)
 (cons a21328 0)
 (cons a21331 0)
 (cons a21329 0)
 (cons temp21402 0)
 (cons a21330 0)
 (cons a21332 0)
 (cons a21327 0)
 (cons a21321 0)
 (cons a21324 0)
 (cons temp21398 0)
 (cons a21322 0)
 (cons a21325 0)
 (cons a21323 0)
 (cons a21320 0)
 (cons a21318 0)
 (cons a21313 0)
 (cons x21311 0)
 (cons a21317 0)
 (cons temp21391 0)
 (cons a21315 0)
 (cons temp21394 0)
 (cons a21316 0)
 (cons a21314 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21439:
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21441:
    movq $2, %rcx
    jmp label21439
    
label21440:
    movq $1, %rcx
    jmp label21439
    
label21442:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21443:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21444:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21445:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21446:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21447:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21448:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21446
    jmp label21447
    
label21449:
    movq $1, %r13
    jmp label21448
    
label21450:
    movq $2, %r13
    jmp label21448
    
label21452:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21451:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21453:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21454:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21456:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21455:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21455
    jmp label21456
    
label21458:
    movq $1, %rbx
    jmp label21457
    
label21459:
    movq $2, %rbx
    jmp label21457
    
label21461:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21460:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21463:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21462:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21465:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21464:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21466:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21464
    jmp label21465
    
label21468:
    movq $2, -48(%rbp)
    jmp label21466
    
label21467:
    movq $1, -48(%rbp)
    jmp label21466
    
label21469:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21470:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21472:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21471:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21473:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21474:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21475:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21473
    jmp label21474
    
label21477:
    movq $2, %r14
    jmp label21475
    
label21476:
    movq $1, %r14
    jmp label21475
    
label21479:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21478:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21481:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21480:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21483:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21482:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21484:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21482
    jmp label21483
    
label21485:
    movq $1, -64(%rbp)
    jmp label21484
    
label21486:
    movq $2, -64(%rbp)
    jmp label21484
    
label21488:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21487:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21489:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21490:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21491:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21492:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21493:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21491
    jmp label21492
    
label21495:
    movq $2, %rcx
    jmp label21493
    
label21494:
    movq $1, %rcx
    jmp label21493
    
label21497:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21496:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21499:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21498:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21501:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21500:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21502:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21500
    jmp label21501
    
label21504:
    movq $2, -56(%rbp)
    jmp label21502
    
label21503:
    movq $1, -56(%rbp)
    jmp label21502
    
label21505:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21506:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21507:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21508:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21509:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21510:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21511:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21509
    jmp label21510
    
label21513:
    movq $2, -80(%rbp)
    jmp label21511
    
label21512:
    movq $1, -80(%rbp)
    jmp label21511
    
label21515:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21514:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21517:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21516:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21519:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21518:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21520:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21518
    jmp label21519
    
label21521:
    movq $1, -72(%rbp)
    jmp label21520
    
label21522:
    movq $2, -72(%rbp)
    jmp label21520
    
label21523:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21524:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21526:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21525:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21527:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21528:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21529:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21527
    jmp label21528
    
label21531:
    movq $2, -88(%rbp)
    jmp label21529
    
label21530:
    movq $1, -88(%rbp)
    jmp label21529
    
label21532:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21533:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21535:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21534:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21536:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21537:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21536
    jmp label21537
    
label21540:
    cmpq $1, %rcx
    je label21538
    jmp label21539
    
label21541:
    movq $1, %rcx
    jmp label21540
    
label21542:
    movq $0, %rcx
    jmp label21540
    
label21543:
    cmpq $8, %rcx
    jg label21541
    jmp label21542
    
label21545:
    movq $9, %rcx
    jmp label21543
    
label21544:
    movq $8, %rcx
    jmp label21543
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21544
    jmp label21545
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21408 : 'Integer, temp21410 : 'Integer, temp21404 : 'Integer, temp21406 : 'Integer, temp21400 : 'Integer, temp21402 : 'Integer, temp21396 : 'Integer, temp21398 : 'Integer, temp21425 : 'Integer, temp21427 : 'Integer, temp21421 : 'Integer, temp21423 : 'Integer, temp21417 : 'Integer, temp21419 : 'Integer, temp21412 : 'Integer, temp21413 : 'Integer, temp21415 : 'Integer, a21312 : 'Integer, a21313 : 'Boolean, a21314 : 'Boolean, a21315 : 'Boolean, temp21436 : 'Integer, temp21438 : 'Integer, x21311 : 'Boolean, temp21432 : 'Integer, temp21434 : 'Integer, temp21429 : 'Integer, a21328 : 'Boolean, a21329 : 'Boolean, a21330 : 'Boolean, a21331 : 'Boolean, a21324 : 'Boolean, a21325 : 'Boolean, a21326 : 'Integer, a21327 : 'Boolean, a21320 : 'Boolean, a21321 : 'Boolean, a21322 : 'Boolean, a21323 : 'Boolean, a21316 : 'Boolean, a21317 : 'Boolean, a21318 : 'Boolean, a21319 : 'Integer, a21344 : 'Boolean, a21345 : 'Boolean, a21346 : 'Boolean, a21347 : 'Integer, a21340 : 'Integer, a21341 : 'Boolean, a21342 : 'Boolean, a21343 : 'Boolean, a21336 : 'Boolean, a21337 : 'Boolean, a21338 : 'Boolean, a21339 : 'Boolean, a21332 : 'Boolean, a21333 : 'Integer, a21334 : 'Boolean, a21335 : 'Boolean, a21360 : 'Boolean, a21361 : 'Integer, a21362 : 'Boolean, a21363 : 'Boolean, a21356 : 'Boolean, a21357 : 'Boolean, a21358 : 'Boolean, a21359 : 'Boolean, a21352 : 'Boolean, a21353 : 'Boolean, a21354 : 'Integer, a21355 : 'Boolean, a21348 : 'Boolean, a21349 : 'Boolean, a21350 : 'Boolean, a21351 : 'Boolean, a21376 : 'Integer, a21377 : 'Boolean, a21378 : 'Boolean, a21379 : 'Boolean, a21372 : 'Boolean, a21373 : 'Boolean, a21374 : 'Boolean, a21375 : 'Integer, a21368 : 'Integer, a21369 : 'Boolean, a21370 : 'Boolean, a21371 : 'Boolean, a21364 : 'Boolean, a21365 : 'Boolean, a21366 : 'Boolean, a21367 : 'Boolean, temp21394 : 'Integer, a21388 : 'Boolean, a21389 : 'Boolean, temp21391 : 'Integer, a21384 : 'Boolean, a21385 : 'Boolean, a21386 : 'Boolean, a21387 : 'Boolean, a21380 : 'Boolean, a21381 : 'Boolean, a21382 : 'Boolean, a21383 : 'Integer, 
tsorted
:
'(label21439
  label21441
  label21440
  label21442
  label21443
  label21444
  label21445
  label21446
  label21447
  label21448
  label21449
  label21450
  label21452
  label21451
  label21453
  label21454
  label21456
  label21455
  label21457
  label21458
  label21459
  label21461
  label21460
  label21463
  label21462
  label21465
  label21464
  label21466
  label21468
  label21467
  label21469
  label21470
  label21472
  label21471
  label21473
  label21474
  label21475
  label21477
  label21476
  label21479
  label21478
  label21481
  label21480
  label21483
  label21482
  label21484
  label21485
  label21486
  label21488
  label21487
  label21489
  label21490
  label21491
  label21492
  label21493
  label21495
  label21494
  label21497
  label21496
  label21499
  label21498
  label21501
  label21500
  label21502
  label21504
  label21503
  label21505
  label21506
  label21507
  label21508
  label21509
  label21510
  label21511
  label21513
  label21512
  label21515
  label21514
  label21517
  label21516
  label21519
  label21518
  label21520
  label21521
  label21522
  label21523
  label21524
  label21526
  label21525
  label21527
  label21528
  label21529
  label21531
  label21530
  label21532
  label21533
  label21535
  label21534
  label21538
  label21536
  label21537
  label21539
  label21540
  label21541
  label21542
  label21543
  label21545
  label21544
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp21396 a21319)
 (list temp21429 a21375)
 (list a21333 temp21404)
 (list temp21400 a21326)
 (list a21368 temp21425)
 (list temp21432 a21376)
 (list temp21404 a21333)
 (list temp21436 a21383)
 (list a21375 temp21429)
 (list a21376 temp21432)
 (list temp21408 temp21412)
 (list a21347 temp21413)
 (list temp21412 temp21408)
 (list temp21413 a21347)
 (list a21319 temp21396)
 (list a21383 temp21436)
 (list temp21417 a21354)
 (list a21354 temp21417)
 (list temp21421 a21361)
 (list a21326 temp21400)
 (list a21361 temp21421)
 (list temp21425 a21368))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a21368 7)
 (cons a21375 8)
 (cons a21376 9)
 (cons a21354 10)
 (cons a21361 11)
 (cons a21333 12)
 (cons a21347 13)
 (cons a21319 14)
 (cons a21326 15)
 (cons a21312 16)
 (cons temp21412 17)
 (cons a21383 0)
 (cons a21386 0)
 (cons a21385 0)
 (cons a21384 0)
 (cons a21389 0)
 (cons a21388 0)
 (cons temp21436 0)
 (cons temp21432 1)
 (cons a21387 0)
 (cons temp21438 0)
 (cons temp21429 0)
 (cons temp21434 0)
 (cons a21380 0)
 (cons a21377 0)
 (cons a21381 0)
 (cons a21378 0)
 (cons a21379 0)
 (cons a21382 0)
 (cons temp21425 1)
 (cons temp21421 0)
 (cons temp21427 0)
 (cons a21371 0)
 (cons a21370 0)
 (cons a21369 0)
 (cons a21374 0)
 (cons a21373 0)
 (cons a21372 0)
 (cons temp21417 1)
 (cons temp21423 0)
 (cons a21367 0)
 (cons a21364 0)
 (cons a21366 0)
 (cons a21365 0)
 (cons a21363 0)
 (cons a21362 0)
 (cons temp21413 0)
 (cons a21360 0)
 (cons a21355 0)
 (cons a21359 0)
 (cons a21358 0)
 (cons temp21419 0)
 (cons a21357 0)
 (cons a21356 0)
 (cons temp21408 1)
 (cons a21348 0)
 (cons temp21415 0)
 (cons a21352 0)
 (cons a21350 0)
 (cons a21353 0)
 (cons a21349 0)
 (cons a21351 0)
 (cons a21346 0)
 (cons a21341 0)
 (cons a21340 0)
 (cons a21343 0)
 (cons a21342 0)
 (cons a21344 0)
 (cons temp21404 0)
 (cons a21345 0)
 (cons temp21410 0)
 (cons temp21400 1)
 (cons temp21396 0)
 (cons a21338 0)
 (cons a21334 0)
 (cons a21337 0)
 (cons a21336 0)
 (cons a21339 0)
 (cons a21335 0)
 (cons temp21406 0)
 (cons a21328 0)
 (cons a21331 0)
 (cons a21329 0)
 (cons temp21402 0)
 (cons a21330 0)
 (cons a21332 0)
 (cons a21327 0)
 (cons a21321 0)
 (cons a21324 0)
 (cons temp21398 0)
 (cons a21322 0)
 (cons a21325 0)
 (cons a21323 0)
 (cons a21320 0)
 (cons a21318 0)
 (cons a21313 0)
 (cons x21311 0)
 (cons a21317 0)
 (cons temp21391 0)
 (cons a21315 0)
 (cons temp21394 0)
 (cons a21316 0)
 (cons a21314 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21439:
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label21441:
    movq $2, %rcx
    jmp label21439
    
label21440:
    movq $1, %rcx
    jmp label21439
    
label21442:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21443:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21440
    jmp label21441
    
label21444:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21445:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21442
    jmp label21443
    
label21446:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21447:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21444
    jmp label21445
    
label21448:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21446
    jmp label21447
    
label21449:
    movq $1, %r13
    jmp label21448
    
label21450:
    movq $2, %r13
    jmp label21448
    
label21452:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21451:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21449
    jmp label21450
    
label21453:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21454:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21451
    jmp label21452
    
label21456:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21455:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21453
    jmp label21454
    
label21457:
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21455
    jmp label21456
    
label21458:
    movq $1, %rbx
    jmp label21457
    
label21459:
    movq $2, %rbx
    jmp label21457
    
label21461:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21460:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21458
    jmp label21459
    
label21463:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21462:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21460
    jmp label21461
    
label21465:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21464:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21462
    jmp label21463
    
label21466:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21464
    jmp label21465
    
label21468:
    movq $2, -48(%rbp)
    jmp label21466
    
label21467:
    movq $1, -48(%rbp)
    jmp label21466
    
label21469:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21470:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21467
    jmp label21468
    
label21472:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21471:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21469
    jmp label21470
    
label21473:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21474:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21471
    jmp label21472
    
label21475:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21473
    jmp label21474
    
label21477:
    movq $2, %r14
    jmp label21475
    
label21476:
    movq $1, %r14
    jmp label21475
    
label21479:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21478:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21476
    jmp label21477
    
label21481:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21480:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21478
    jmp label21479
    
label21483:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21482:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21480
    jmp label21481
    
label21484:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21482
    jmp label21483
    
label21485:
    movq $1, -64(%rbp)
    jmp label21484
    
label21486:
    movq $2, -64(%rbp)
    jmp label21484
    
label21488:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21487:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21485
    jmp label21486
    
label21489:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21490:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21487
    jmp label21488
    
label21491:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21492:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21489
    jmp label21490
    
label21493:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21491
    jmp label21492
    
label21495:
    movq $2, %rcx
    jmp label21493
    
label21494:
    movq $1, %rcx
    jmp label21493
    
label21497:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21496:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21494
    jmp label21495
    
label21499:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21498:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21496
    jmp label21497
    
label21501:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21500:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21498
    jmp label21499
    
label21502:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21500
    jmp label21501
    
label21504:
    movq $2, -56(%rbp)
    jmp label21502
    
label21503:
    movq $1, -56(%rbp)
    jmp label21502
    
label21505:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21506:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21503
    jmp label21504
    
label21507:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21508:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21505
    jmp label21506
    
label21509:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21510:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21507
    jmp label21508
    
label21511:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21509
    jmp label21510
    
label21513:
    movq $2, -80(%rbp)
    jmp label21511
    
label21512:
    movq $1, -80(%rbp)
    jmp label21511
    
label21515:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21514:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21512
    jmp label21513
    
label21517:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21516:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21514
    jmp label21515
    
label21519:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21518:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21516
    jmp label21517
    
label21520:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21518
    jmp label21519
    
label21521:
    movq $1, -72(%rbp)
    jmp label21520
    
label21522:
    movq $2, -72(%rbp)
    jmp label21520
    
label21523:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21524:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21521
    jmp label21522
    
label21526:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21525:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21523
    jmp label21524
    
label21527:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21528:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21525
    jmp label21526
    
label21529:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21527
    jmp label21528
    
label21531:
    movq $2, -88(%rbp)
    jmp label21529
    
label21530:
    movq $1, -88(%rbp)
    jmp label21529
    
label21532:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21533:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21530
    jmp label21531
    
label21535:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21534:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21532
    jmp label21533
    
label21538:
    movq $1, %rax
    jmp conclusion
    
label21536:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21537:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21534
    jmp label21535
    
label21539:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label21536
    jmp label21537
    
label21540:
    cmpq $1, %rcx
    je label21538
    jmp label21539
    
label21541:
    movq $1, %rcx
    jmp label21540
    
label21542:
    movq $0, %rcx
    jmp label21540
    
label21543:
    cmpq $8, %rcx
    jg label21541
    jmp label21542
    
label21545:
    movq $9, %rcx
    jmp label21543
    
label21544:
    movq $8, %rcx
    jmp label21543
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label21544
    jmp label21545
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
22


testing @ utilities.rkt:2038
test-name:
"cond_test_22"

expected-result:
22


type checker output: @ utilities.rkt:2021
(strip-has-type tsexp):
program:
(let ([x (if (> (if (>= (if (> 3 (if (> 3 1)
                                    (let ([a 1])
                                       a)
                                    (let ([a 2])
                                       a))
                                 )
                           (let ([a (if (> 3 1)
                                       (let ([a 1])
                                          a)
                                       (let ([a 2])
                                          a))
                                    ])
                              a)
                           (let ([a 2])
                              a))
                         (if (> 3 (if (> 3 1)
                                     (let ([a 1])
                                        a)
                                     (let ([a 2])
                                        a))
                                  )
                            (let ([a (if (> 3 1)
                                        (let ([a 1])
                                           a)
                                        (let ([a 2])
                                           a))
                                     ])
                               a)
                            (let ([a 2])
                               a))
                         )
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      (if (> 3 (if (> 3 1)
                  (let ([a 1])
                     a)
                  (let ([a 2])
                     a))
               )
         (let ([a (if (> 3 1)
                     (let ([a 1])
                        a)
                     (let ([a 2])
                        a))
                  ])
            a)
         (let ([a 2])
            a))
      
      (let ([a (if (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      )
                                                (let ([a (if (> 3 1)
                                                            (let ([a 1])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         ])
                                                   a)
                                                (let ([a 2])
                                                   a))
                                             )
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  (if (> 3 (if (> 3 1)
                              (let ([a 1])
                                 a)
                              (let ([a 2])
                                 a))
                           )
                     (let ([a (if (> 3 1)
                                 (let ([a 1])
                                    a)
                                 (let ([a 2])
                                    a))
                              ])
                        a)
                     (let ([a 2])
                        a))
                  
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                             (let ([a 1])
                                                                a)
                                                             (let ([a 2])
                                                                a))
                                                          )
                                                    (let ([a (if (> 3 1)
                                                                (let ([a 1])
                                                                   a)
                                                                (let ([a 2])
                                                                   a))
                                                             ])
                                                       a)
                                                    (let ([a 2])
                                                       a))
                                                 )
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (if (> 3 (if (> 3 1)
                                      (let ([a 1])
                                         a)
                                      (let ([a 2])
                                         a))
                                   )
                             (let ([a (if (> 3 1)
                                         (let ([a 1])
                                            a)
                                         (let ([a 2])
                                            a))
                                      ])
                                a)
                             (let ([a 2])
                                a))
                          
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                     (let ([a 1])
                                                                        a)
                                                                     (let ([a 2])
                                                                        a))
                                                                  )
                                                            (let ([a (if (> 3 1)
                                                                        (let ([a 1])
                                                                           a)
                                                                        (let ([a 2])
                                                                           a))
                                                                     ])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         )
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (if (> 3 (if (> 3 1)
                                              (let ([a 1])
                                                 a)
                                              (let ([a 2])
                                                 a))
                                           )
                                     (let ([a (if (> 3 1)
                                                 (let ([a 1])
                                                    a)
                                                 (let ([a 2])
                                                    a))
                                              ])
                                        a)
                                     (let ([a 2])
                                        a))
                                  
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                             (let ([a 1])
                                                                                a)
                                                                             (let ([a 2])
                                                                                a))
                                                                          )
                                                                    (let ([a (if (> 3 1)
                                                                                (let ([a 1])
                                                                                   a)
                                                                                (let ([a 2])
                                                                                   a))
                                                                             ])
                                                                       a)
                                                                    (let ([a 2])
                                                                       a))
                                                                 )
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (if (> 3 (if (> 3 1)
                                                      (let ([a 1])
                                                         a)
                                                      (let ([a 2])
                                                         a))
                                                   )
                                             (let ([a (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      ])
                                                a)
                                             (let ([a 2])
                                                a))
                                          
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                     (let ([a 1])
                                                                                        a)
                                                                                     (let ([a 2])
                                                                                        a))
                                                                                  )
                                                                            (let ([a (if (> 3 1)
                                                                                        (let ([a 1])
                                                                                           a)
                                                                                        (let ([a 2])
                                                                                           a))
                                                                                     ])
                                                                               a)
                                                                            (let ([a 2])
                                                                               a))
                                                                         )
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (if (> 3 (if (> 3 1)
                                                              (let ([a 1])
                                                                 a)
                                                              (let ([a 2])
                                                                 a))
                                                           )
                                                     (let ([a (if (> 3 1)
                                                                 (let ([a 1])
                                                                    a)
                                                                 (let ([a 2])
                                                                    a))
                                                              ])
                                                        a)
                                                     (let ([a 2])
                                                        a))
                                                  
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                  (let ([a 1])
                                                                                                     a)
                                                                                                  (let ([a 2])
                                                                                                     a))
                                                                                               )
                                                                                         (let ([a (if (> 3 1)
                                                                                                     (let ([a 1])
                                                                                                        a)
                                                                                                     (let ([a 2])
                                                                                                        a))
                                                                                                  ])
                                                                                            a)
                                                                                         (let ([a 2])
                                                                                            a))
                                                                                      )
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               (if (> 3 (if (> 3 1)
                                                                           (let ([a 1])
                                                                              a)
                                                                           (let ([a 2])
                                                                              a))
                                                                        )
                                                                  (let ([a (if (> 3 1)
                                                                              (let ([a 1])
                                                                                 a)
                                                                              (let ([a 2])
                                                                                 a))
                                                                           ])
                                                                     a)
                                                                  (let ([a 2])
                                                                     a))
                                                               
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                          (let ([a 1])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       )
                                                                                                 (let ([a (if (> 3 1)
                                                                                                             (let ([a 1])
                                                                                                                a)
                                                                                                             (let ([a 2])
                                                                                                                a))
                                                                                                          ])
                                                                                                    a)
                                                                                                 (let ([a 2])
                                                                                                    a))
                                                                                              )
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (if (> 3 (if (> 3 1)
                                                                                   (let ([a 1])
                                                                                      a)
                                                                                   (let ([a 2])
                                                                                      a))
                                                                                )
                                                                          (let ([a (if (> 3 1)
                                                                                      (let ([a 1])
                                                                                         a)
                                                                                      (let ([a 2])
                                                                                         a))
                                                                                   ])
                                                                             a)
                                                                          (let ([a 2])
                                                                             a))
                                                                       
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                  (let ([a 1])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               )
                                                                                                         (let ([a (if (> 3 1)
                                                                                                                     (let ([a 1])
                                                                                                                        a)
                                                                                                                     (let ([a 2])
                                                                                                                        a))
                                                                                                                  ])
                                                                                                            a)
                                                                                                         (let ([a 2])
                                                                                                            a))
                                                                                                      )
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (if (> 3 (if (> 3 1)
                                                                                           (let ([a 1])
                                                                                              a)
                                                                                           (let ([a 2])
                                                                                              a))
                                                                                        )
                                                                                  (let ([a (if (> 3 1)
                                                                                              (let ([a 1])
                                                                                                 a)
                                                                                              (let ([a 2])
                                                                                                 a))
                                                                                           ])
                                                                                     a)
                                                                                  (let ([a 2])
                                                                                     a))
                                                                               
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                          (let ([a 1])
                                                                                                                             a)
                                                                                                                          (let ([a 2])
                                                                                                                             a))
                                                                                                                       )
                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                             (let ([a 1])
                                                                                                                                a)
                                                                                                                             (let ([a 2])
                                                                                                                                a))
                                                                                                                          ])
                                                                                                                    a)
                                                                                                                 (let ([a 2])
                                                                                                                    a))
                                                                                                              )
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (if (> 3 (if (> 3 1)
                                                                                                   (let ([a 1])
                                                                                                      a)
                                                                                                   (let ([a 2])
                                                                                                      a))
                                                                                                )
                                                                                          (let ([a (if (> 3 1)
                                                                                                      (let ([a 1])
                                                                                                         a)
                                                                                                      (let ([a 2])
                                                                                                         a))
                                                                                                   ])
                                                                                             a)
                                                                                          (let ([a 2])
                                                                                             a))
                                                                                       
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                          (let ([a 1])
                                                                                                                                             a)
                                                                                                                                          (let ([a 2])
                                                                                                                                             a))
                                                                                                                                       )
                                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                                             (let ([a 1])
                                                                                                                                                a)
                                                                                                                                             (let ([a 2])
                                                                                                                                                a))
                                                                                                                                          ])
                                                                                                                                    a)
                                                                                                                                 (let ([a 2])
                                                                                                                                    a))
                                                                                                                              )
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       (if (> 3 (if (> 3 1)
                                                                                                                   (let ([a 1])
                                                                                                                      a)
                                                                                                                   (let ([a 2])
                                                                                                                      a))
                                                                                                                )
                                                                                                          (let ([a (if (> 3 1)
                                                                                                                      (let ([a 1])
                                                                                                                         a)
                                                                                                                      (let ([a 2])
                                                                                                                         a))
                                                                                                                   ])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                  (let ([a 1])
                                                                                                                                                     a)
                                                                                                                                                  (let ([a 2])
                                                                                                                                                     a))
                                                                                                                                               )
                                                                                                                                         (let ([a (if (> 3 1)
                                                                                                                                                     (let ([a 1])
                                                                                                                                                        a)
                                                                                                                                                     (let ([a 2])
                                                                                                                                                        a))
                                                                                                                                                  ])
                                                                                                                                            a)
                                                                                                                                         (let ([a 2])
                                                                                                                                            a))
                                                                                                                                      )
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (if (> 3 (if (> 3 1)
                                                                                                                           (let ([a 1])
                                                                                                                              a)
                                                                                                                           (let ([a 2])
                                                                                                                              a))
                                                                                                                        )
                                                                                                                  (let ([a (if (> 3 1)
                                                                                                                              (let ([a 1])
                                                                                                                                 a)
                                                                                                                              (let ([a 2])
                                                                                                                                 a))
                                                                                                                           ])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: shrink @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= (if (> 3 (if (> 3 1)
                                    (let ([a 1])
                                       a)
                                    (let ([a 2])
                                       a))
                                 )
                           (let ([a (if (> 3 1)
                                       (let ([a 1])
                                          a)
                                       (let ([a 2])
                                          a))
                                    ])
                              a)
                           (let ([a 2])
                              a))
                         (if (> 3 (if (> 3 1)
                                     (let ([a 1])
                                        a)
                                     (let ([a 2])
                                        a))
                                  )
                            (let ([a (if (> 3 1)
                                        (let ([a 1])
                                           a)
                                        (let ([a 2])
                                           a))
                                     ])
                               a)
                            (let ([a 2])
                               a))
                         )
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      (if (> 3 (if (> 3 1)
                  (let ([a 1])
                     a)
                  (let ([a 2])
                     a))
               )
         (let ([a (if (> 3 1)
                     (let ([a 1])
                        a)
                     (let ([a 2])
                        a))
                  ])
            a)
         (let ([a 2])
            a))
      
      (let ([a (if (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      )
                                                (let ([a (if (> 3 1)
                                                            (let ([a 1])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         ])
                                                   a)
                                                (let ([a 2])
                                                   a))
                                             )
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  (if (> 3 (if (> 3 1)
                              (let ([a 1])
                                 a)
                              (let ([a 2])
                                 a))
                           )
                     (let ([a (if (> 3 1)
                                 (let ([a 1])
                                    a)
                                 (let ([a 2])
                                    a))
                              ])
                        a)
                     (let ([a 2])
                        a))
                  
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                             (let ([a 1])
                                                                a)
                                                             (let ([a 2])
                                                                a))
                                                          )
                                                    (let ([a (if (> 3 1)
                                                                (let ([a 1])
                                                                   a)
                                                                (let ([a 2])
                                                                   a))
                                                             ])
                                                       a)
                                                    (let ([a 2])
                                                       a))
                                                 )
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (if (> 3 (if (> 3 1)
                                      (let ([a 1])
                                         a)
                                      (let ([a 2])
                                         a))
                                   )
                             (let ([a (if (> 3 1)
                                         (let ([a 1])
                                            a)
                                         (let ([a 2])
                                            a))
                                      ])
                                a)
                             (let ([a 2])
                                a))
                          
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                     (let ([a 1])
                                                                        a)
                                                                     (let ([a 2])
                                                                        a))
                                                                  )
                                                            (let ([a (if (> 3 1)
                                                                        (let ([a 1])
                                                                           a)
                                                                        (let ([a 2])
                                                                           a))
                                                                     ])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         )
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (if (> 3 (if (> 3 1)
                                              (let ([a 1])
                                                 a)
                                              (let ([a 2])
                                                 a))
                                           )
                                     (let ([a (if (> 3 1)
                                                 (let ([a 1])
                                                    a)
                                                 (let ([a 2])
                                                    a))
                                              ])
                                        a)
                                     (let ([a 2])
                                        a))
                                  
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                             (let ([a 1])
                                                                                a)
                                                                             (let ([a 2])
                                                                                a))
                                                                          )
                                                                    (let ([a (if (> 3 1)
                                                                                (let ([a 1])
                                                                                   a)
                                                                                (let ([a 2])
                                                                                   a))
                                                                             ])
                                                                       a)
                                                                    (let ([a 2])
                                                                       a))
                                                                 )
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (if (> 3 (if (> 3 1)
                                                      (let ([a 1])
                                                         a)
                                                      (let ([a 2])
                                                         a))
                                                   )
                                             (let ([a (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      ])
                                                a)
                                             (let ([a 2])
                                                a))
                                          
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                     (let ([a 1])
                                                                                        a)
                                                                                     (let ([a 2])
                                                                                        a))
                                                                                  )
                                                                            (let ([a (if (> 3 1)
                                                                                        (let ([a 1])
                                                                                           a)
                                                                                        (let ([a 2])
                                                                                           a))
                                                                                     ])
                                                                               a)
                                                                            (let ([a 2])
                                                                               a))
                                                                         )
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (if (> 3 (if (> 3 1)
                                                              (let ([a 1])
                                                                 a)
                                                              (let ([a 2])
                                                                 a))
                                                           )
                                                     (let ([a (if (> 3 1)
                                                                 (let ([a 1])
                                                                    a)
                                                                 (let ([a 2])
                                                                    a))
                                                              ])
                                                        a)
                                                     (let ([a 2])
                                                        a))
                                                  
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                  (let ([a 1])
                                                                                                     a)
                                                                                                  (let ([a 2])
                                                                                                     a))
                                                                                               )
                                                                                         (let ([a (if (> 3 1)
                                                                                                     (let ([a 1])
                                                                                                        a)
                                                                                                     (let ([a 2])
                                                                                                        a))
                                                                                                  ])
                                                                                            a)
                                                                                         (let ([a 2])
                                                                                            a))
                                                                                      )
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               (if (> 3 (if (> 3 1)
                                                                           (let ([a 1])
                                                                              a)
                                                                           (let ([a 2])
                                                                              a))
                                                                        )
                                                                  (let ([a (if (> 3 1)
                                                                              (let ([a 1])
                                                                                 a)
                                                                              (let ([a 2])
                                                                                 a))
                                                                           ])
                                                                     a)
                                                                  (let ([a 2])
                                                                     a))
                                                               
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                          (let ([a 1])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       )
                                                                                                 (let ([a (if (> 3 1)
                                                                                                             (let ([a 1])
                                                                                                                a)
                                                                                                             (let ([a 2])
                                                                                                                a))
                                                                                                          ])
                                                                                                    a)
                                                                                                 (let ([a 2])
                                                                                                    a))
                                                                                              )
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (if (> 3 (if (> 3 1)
                                                                                   (let ([a 1])
                                                                                      a)
                                                                                   (let ([a 2])
                                                                                      a))
                                                                                )
                                                                          (let ([a (if (> 3 1)
                                                                                      (let ([a 1])
                                                                                         a)
                                                                                      (let ([a 2])
                                                                                         a))
                                                                                   ])
                                                                             a)
                                                                          (let ([a 2])
                                                                             a))
                                                                       
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                  (let ([a 1])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               )
                                                                                                         (let ([a (if (> 3 1)
                                                                                                                     (let ([a 1])
                                                                                                                        a)
                                                                                                                     (let ([a 2])
                                                                                                                        a))
                                                                                                                  ])
                                                                                                            a)
                                                                                                         (let ([a 2])
                                                                                                            a))
                                                                                                      )
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (if (> 3 (if (> 3 1)
                                                                                           (let ([a 1])
                                                                                              a)
                                                                                           (let ([a 2])
                                                                                              a))
                                                                                        )
                                                                                  (let ([a (if (> 3 1)
                                                                                              (let ([a 1])
                                                                                                 a)
                                                                                              (let ([a 2])
                                                                                                 a))
                                                                                           ])
                                                                                     a)
                                                                                  (let ([a 2])
                                                                                     a))
                                                                               
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                          (let ([a 1])
                                                                                                                             a)
                                                                                                                          (let ([a 2])
                                                                                                                             a))
                                                                                                                       )
                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                             (let ([a 1])
                                                                                                                                a)
                                                                                                                             (let ([a 2])
                                                                                                                                a))
                                                                                                                          ])
                                                                                                                    a)
                                                                                                                 (let ([a 2])
                                                                                                                    a))
                                                                                                              )
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (if (> 3 (if (> 3 1)
                                                                                                   (let ([a 1])
                                                                                                      a)
                                                                                                   (let ([a 2])
                                                                                                      a))
                                                                                                )
                                                                                          (let ([a (if (> 3 1)
                                                                                                      (let ([a 1])
                                                                                                         a)
                                                                                                      (let ([a 2])
                                                                                                         a))
                                                                                                   ])
                                                                                             a)
                                                                                          (let ([a 2])
                                                                                             a))
                                                                                       
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                          (let ([a 1])
                                                                                                                                             a)
                                                                                                                                          (let ([a 2])
                                                                                                                                             a))
                                                                                                                                       )
                                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                                             (let ([a 1])
                                                                                                                                                a)
                                                                                                                                             (let ([a 2])
                                                                                                                                                a))
                                                                                                                                          ])
                                                                                                                                    a)
                                                                                                                                 (let ([a 2])
                                                                                                                                    a))
                                                                                                                              )
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       (if (> 3 (if (> 3 1)
                                                                                                                   (let ([a 1])
                                                                                                                      a)
                                                                                                                   (let ([a 2])
                                                                                                                      a))
                                                                                                                )
                                                                                                          (let ([a (if (> 3 1)
                                                                                                                      (let ([a 1])
                                                                                                                         a)
                                                                                                                      (let ([a 2])
                                                                                                                         a))
                                                                                                                   ])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                  (let ([a 1])
                                                                                                                                                     a)
                                                                                                                                                  (let ([a 2])
                                                                                                                                                     a))
                                                                                                                                               )
                                                                                                                                         (let ([a (if (> 3 1)
                                                                                                                                                     (let ([a 1])
                                                                                                                                                        a)
                                                                                                                                                     (let ([a 2])
                                                                                                                                                        a))
                                                                                                                                                  ])
                                                                                                                                            a)
                                                                                                                                         (let ([a 2])
                                                                                                                                            a))
                                                                                                                                      )
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (if (> 3 (if (> 3 1)
                                                                                                                           (let ([a 1])
                                                                                                                              a)
                                                                                                                           (let ([a 2])
                                                                                                                              a))
                                                                                                                        )
                                                                                                                  (let ([a (if (> 3 1)
                                                                                                                              (let ([a 1])
                                                                                                                                 a)
                                                                                                                              (let ([a 2])
                                                                                                                                 a))
                                                                                                                           ])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x (if (> (if (>= (if (> 3 (if (> 3 1)
                                    (let ([a 1])
                                       a)
                                    (let ([a 2])
                                       a))
                                 )
                           (let ([a (if (> 3 1)
                                       (let ([a 1])
                                          a)
                                       (let ([a 2])
                                          a))
                                    ])
                              a)
                           (let ([a 2])
                              a))
                         (if (> 3 (if (> 3 1)
                                     (let ([a 1])
                                        a)
                                     (let ([a 2])
                                        a))
                                  )
                            (let ([a (if (> 3 1)
                                        (let ([a 1])
                                           a)
                                        (let ([a 2])
                                           a))
                                     ])
                               a)
                            (let ([a 2])
                               a))
                         )
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      (if (> 3 (if (> 3 1)
                  (let ([a 1])
                     a)
                  (let ([a 2])
                     a))
               )
         (let ([a (if (> 3 1)
                     (let ([a 1])
                        a)
                     (let ([a 2])
                        a))
                  ])
            a)
         (let ([a 2])
            a))
      
      (let ([a (if (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      )
                                                (let ([a (if (> 3 1)
                                                            (let ([a 1])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         ])
                                                   a)
                                                (let ([a 2])
                                                   a))
                                             )
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  (if (> 3 (if (> 3 1)
                              (let ([a 1])
                                 a)
                              (let ([a 2])
                                 a))
                           )
                     (let ([a (if (> 3 1)
                                 (let ([a 1])
                                    a)
                                 (let ([a 2])
                                    a))
                              ])
                        a)
                     (let ([a 2])
                        a))
                  
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                             (let ([a 1])
                                                                a)
                                                             (let ([a 2])
                                                                a))
                                                          )
                                                    (let ([a (if (> 3 1)
                                                                (let ([a 1])
                                                                   a)
                                                                (let ([a 2])
                                                                   a))
                                                             ])
                                                       a)
                                                    (let ([a 2])
                                                       a))
                                                 )
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (if (> 3 (if (> 3 1)
                                      (let ([a 1])
                                         a)
                                      (let ([a 2])
                                         a))
                                   )
                             (let ([a (if (> 3 1)
                                         (let ([a 1])
                                            a)
                                         (let ([a 2])
                                            a))
                                      ])
                                a)
                             (let ([a 2])
                                a))
                          
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                     (let ([a 1])
                                                                        a)
                                                                     (let ([a 2])
                                                                        a))
                                                                  )
                                                            (let ([a (if (> 3 1)
                                                                        (let ([a 1])
                                                                           a)
                                                                        (let ([a 2])
                                                                           a))
                                                                     ])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         )
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (if (> 3 (if (> 3 1)
                                              (let ([a 1])
                                                 a)
                                              (let ([a 2])
                                                 a))
                                           )
                                     (let ([a (if (> 3 1)
                                                 (let ([a 1])
                                                    a)
                                                 (let ([a 2])
                                                    a))
                                              ])
                                        a)
                                     (let ([a 2])
                                        a))
                                  
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                             (let ([a 1])
                                                                                a)
                                                                             (let ([a 2])
                                                                                a))
                                                                          )
                                                                    (let ([a (if (> 3 1)
                                                                                (let ([a 1])
                                                                                   a)
                                                                                (let ([a 2])
                                                                                   a))
                                                                             ])
                                                                       a)
                                                                    (let ([a 2])
                                                                       a))
                                                                 )
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (if (> 3 (if (> 3 1)
                                                      (let ([a 1])
                                                         a)
                                                      (let ([a 2])
                                                         a))
                                                   )
                                             (let ([a (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      ])
                                                a)
                                             (let ([a 2])
                                                a))
                                          
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                     (let ([a 1])
                                                                                        a)
                                                                                     (let ([a 2])
                                                                                        a))
                                                                                  )
                                                                            (let ([a (if (> 3 1)
                                                                                        (let ([a 1])
                                                                                           a)
                                                                                        (let ([a 2])
                                                                                           a))
                                                                                     ])
                                                                               a)
                                                                            (let ([a 2])
                                                                               a))
                                                                         )
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (if (> 3 (if (> 3 1)
                                                              (let ([a 1])
                                                                 a)
                                                              (let ([a 2])
                                                                 a))
                                                           )
                                                     (let ([a (if (> 3 1)
                                                                 (let ([a 1])
                                                                    a)
                                                                 (let ([a 2])
                                                                    a))
                                                              ])
                                                        a)
                                                     (let ([a 2])
                                                        a))
                                                  
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                  (let ([a 1])
                                                                                                     a)
                                                                                                  (let ([a 2])
                                                                                                     a))
                                                                                               )
                                                                                         (let ([a (if (> 3 1)
                                                                                                     (let ([a 1])
                                                                                                        a)
                                                                                                     (let ([a 2])
                                                                                                        a))
                                                                                                  ])
                                                                                            a)
                                                                                         (let ([a 2])
                                                                                            a))
                                                                                      )
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               (if (> 3 (if (> 3 1)
                                                                           (let ([a 1])
                                                                              a)
                                                                           (let ([a 2])
                                                                              a))
                                                                        )
                                                                  (let ([a (if (> 3 1)
                                                                              (let ([a 1])
                                                                                 a)
                                                                              (let ([a 2])
                                                                                 a))
                                                                           ])
                                                                     a)
                                                                  (let ([a 2])
                                                                     a))
                                                               
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                          (let ([a 1])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       )
                                                                                                 (let ([a (if (> 3 1)
                                                                                                             (let ([a 1])
                                                                                                                a)
                                                                                                             (let ([a 2])
                                                                                                                a))
                                                                                                          ])
                                                                                                    a)
                                                                                                 (let ([a 2])
                                                                                                    a))
                                                                                              )
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (if (> 3 (if (> 3 1)
                                                                                   (let ([a 1])
                                                                                      a)
                                                                                   (let ([a 2])
                                                                                      a))
                                                                                )
                                                                          (let ([a (if (> 3 1)
                                                                                      (let ([a 1])
                                                                                         a)
                                                                                      (let ([a 2])
                                                                                         a))
                                                                                   ])
                                                                             a)
                                                                          (let ([a 2])
                                                                             a))
                                                                       
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                  (let ([a 1])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               )
                                                                                                         (let ([a (if (> 3 1)
                                                                                                                     (let ([a 1])
                                                                                                                        a)
                                                                                                                     (let ([a 2])
                                                                                                                        a))
                                                                                                                  ])
                                                                                                            a)
                                                                                                         (let ([a 2])
                                                                                                            a))
                                                                                                      )
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (if (> 3 (if (> 3 1)
                                                                                           (let ([a 1])
                                                                                              a)
                                                                                           (let ([a 2])
                                                                                              a))
                                                                                        )
                                                                                  (let ([a (if (> 3 1)
                                                                                              (let ([a 1])
                                                                                                 a)
                                                                                              (let ([a 2])
                                                                                                 a))
                                                                                           ])
                                                                                     a)
                                                                                  (let ([a 2])
                                                                                     a))
                                                                               
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                          (let ([a 1])
                                                                                                                             a)
                                                                                                                          (let ([a 2])
                                                                                                                             a))
                                                                                                                       )
                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                             (let ([a 1])
                                                                                                                                a)
                                                                                                                             (let ([a 2])
                                                                                                                                a))
                                                                                                                          ])
                                                                                                                    a)
                                                                                                                 (let ([a 2])
                                                                                                                    a))
                                                                                                              )
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (if (> 3 (if (> 3 1)
                                                                                                   (let ([a 1])
                                                                                                      a)
                                                                                                   (let ([a 2])
                                                                                                      a))
                                                                                                )
                                                                                          (let ([a (if (> 3 1)
                                                                                                      (let ([a 1])
                                                                                                         a)
                                                                                                      (let ([a 2])
                                                                                                         a))
                                                                                                   ])
                                                                                             a)
                                                                                          (let ([a 2])
                                                                                             a))
                                                                                       
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                          (let ([a 1])
                                                                                                                                             a)
                                                                                                                                          (let ([a 2])
                                                                                                                                             a))
                                                                                                                                       )
                                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                                             (let ([a 1])
                                                                                                                                                a)
                                                                                                                                             (let ([a 2])
                                                                                                                                                a))
                                                                                                                                          ])
                                                                                                                                    a)
                                                                                                                                 (let ([a 2])
                                                                                                                                    a))
                                                                                                                              )
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       (if (> 3 (if (> 3 1)
                                                                                                                   (let ([a 1])
                                                                                                                      a)
                                                                                                                   (let ([a 2])
                                                                                                                      a))
                                                                                                                )
                                                                                                          (let ([a (if (> 3 1)
                                                                                                                      (let ([a 1])
                                                                                                                         a)
                                                                                                                      (let ([a 2])
                                                                                                                         a))
                                                                                                                   ])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                  (let ([a 1])
                                                                                                                                                     a)
                                                                                                                                                  (let ([a 2])
                                                                                                                                                     a))
                                                                                                                                               )
                                                                                                                                         (let ([a (if (> 3 1)
                                                                                                                                                     (let ([a 1])
                                                                                                                                                        a)
                                                                                                                                                     (let ([a 2])
                                                                                                                                                        a))
                                                                                                                                                  ])
                                                                                                                                            a)
                                                                                                                                         (let ([a 2])
                                                                                                                                            a))
                                                                                                                                      )
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (if (> 3 (if (> 3 1)
                                                                                                                           (let ([a 1])
                                                                                                                              a)
                                                                                                                           (let ([a 2])
                                                                                                                              a))
                                                                                                                        )
                                                                                                                  (let ([a (if (> 3 1)
                                                                                                                              (let ([a 1])
                                                                                                                                 a)
                                                                                                                              (let ([a 2])
                                                                                                                                 a))
                                                                                                                           ])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: uniquify @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x21560 (if (> (if (>= (if (> 3 (if (> 3 1)
                                         (let ([a21561 1])
                                            a21561)
                                         (let ([a21562 2])
                                            a21562))
                                      )
                                (let ([a21563 (if (> 3 1)
                                                 (let ([a21564 1])
                                                    a21564)
                                                 (let ([a21565 2])
                                                    a21565))
                                              ])
                                   a21563)
                                (let ([a21566 2])
                                   a21566))
                              (if (> 3 (if (> 3 1)
                                          (let ([a21567 1])
                                             a21567)
                                          (let ([a21568 2])
                                             a21568))
                                       )
                                 (let ([a21569 (if (> 3 1)
                                                  (let ([a21570 1])
                                                     a21570)
                                                  (let ([a21571 2])
                                                     a21571))
                                               ])
                                    a21569)
                                 (let ([a21572 2])
                                    a21572))
                              )
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x21560
      (if (> 3 (if (> 3 1)
                  (let ([a21573 1])
                     a21573)
                  (let ([a21574 2])
                     a21574))
               )
         (let ([a21575 (if (> 3 1)
                          (let ([a21576 1])
                             a21576)
                          (let ([a21577 2])
                             a21577))
                       ])
            a21575)
         (let ([a21578 2])
            a21578))
      
      (let ([a21579 (if (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                              (let ([a21580 1])
                                                                 a21580)
                                                              (let ([a21581 2])
                                                                 a21581))
                                                           )
                                                     (let ([a21582 (if (> 3 1)
                                                                      (let ([a21583 1])
                                                                         a21583)
                                                                      (let ([a21584 2])
                                                                         a21584))
                                                                   ])
                                                        a21582)
                                                     (let ([a21585 2])
                                                        a21585))
                                                  )
                                       (let ([a21586 #t])
                                          a21586)
                                       (let ([a21587 #f])
                                          a21587))
                                    
                                   (let ([a21588 #t])
                                      a21588)
                                   (let ([a21589 #f])
                                      a21589))
                                
                               (let ([a21590 #t])
                                  a21590)
                               (let ([a21591 #f])
                                  a21591))
                            
                           #t
                           #f)
                        
                       (if (> 3 (if (> 3 1)
                                   (let ([a21592 1])
                                      a21592)
                                   (let ([a21593 2])
                                      a21593))
                                )
                          (let ([a21594 (if (> 3 1)
                                           (let ([a21595 1])
                                              a21595)
                                           (let ([a21596 2])
                                              a21596))
                                        ])
                             a21594)
                          (let ([a21597 2])
                             a21597))
                       
                       2)
                    ])
         (+ a21579 (let ([a21598 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                       (let ([a21599 1])
                                                                          a21599)
                                                                       (let ([a21600 2])
                                                                          a21600))
                                                                    )
                                                              (let ([a21601 (if (> 3 1)
                                                                               (let ([a21602 1])
                                                                                  a21602)
                                                                               (let ([a21603 2])
                                                                                  a21603))
                                                                            ])
                                                                 a21601)
                                                              (let ([a21604 2])
                                                                 a21604))
                                                           )
                                                (let ([a21605 #t])
                                                   a21605)
                                                (let ([a21606 #f])
                                                   a21606))
                                             
                                            (let ([a21607 #t])
                                               a21607)
                                            (let ([a21608 #f])
                                               a21608))
                                         
                                        (let ([a21609 #t])
                                           a21609)
                                        (let ([a21610 #f])
                                           a21610))
                                     
                                    (if (> 3 (if (> 3 1)
                                                (let ([a21611 1])
                                                   a21611)
                                                (let ([a21612 2])
                                                   a21612))
                                             )
                                       (let ([a21613 (if (> 3 1)
                                                        (let ([a21614 1])
                                                           a21614)
                                                        (let ([a21615 2])
                                                           a21615))
                                                     ])
                                          a21613)
                                       (let ([a21616 2])
                                          a21616))
                                    
                                    2)
                                 ])
                      (+ a21598 (let ([a21617 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                    (let ([a21618 1])
                                                                                       a21618)
                                                                                    (let ([a21619 2])
                                                                                       a21619))
                                                                                 )
                                                                           (let ([a21620 (if (> 3 1)
                                                                                            (let ([a21621 1])
                                                                                               a21621)
                                                                                            (let ([a21622 2])
                                                                                               a21622))
                                                                                         ])
                                                                              a21620)
                                                                           (let ([a21623 2])
                                                                              a21623))
                                                                        )
                                                             (let ([a21624 #t])
                                                                a21624)
                                                             (let ([a21625 #f])
                                                                a21625))
                                                          
                                                         (let ([a21626 #t])
                                                            a21626)
                                                         (let ([a21627 #f])
                                                            a21627))
                                                      
                                                     (let ([a21628 #t])
                                                        a21628)
                                                     (let ([a21629 #f])
                                                        a21629))
                                                  
                                                 (if (> 3 (if (> 3 1)
                                                             (let ([a21630 1])
                                                                a21630)
                                                             (let ([a21631 2])
                                                                a21631))
                                                          )
                                                    (let ([a21632 (if (> 3 1)
                                                                     (let ([a21633 1])
                                                                        a21633)
                                                                     (let ([a21634 2])
                                                                        a21634))
                                                                  ])
                                                       a21632)
                                                    (let ([a21635 2])
                                                       a21635))
                                                 
                                                 2)
                                              ])
                                   (+ a21617 (let ([a21636 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                 (let ([a21637 1])
                                                                                                    a21637)
                                                                                                 (let ([a21638 2])
                                                                                                    a21638))
                                                                                              )
                                                                                        (let ([a21639 (if (> 3 1)
                                                                                                         (let ([a21640 1])
                                                                                                            a21640)
                                                                                                         (let ([a21641 2])
                                                                                                            a21641))
                                                                                                      ])
                                                                                           a21639)
                                                                                        (let ([a21642 2])
                                                                                           a21642))
                                                                                     )
                                                                          (let ([a21643 #t])
                                                                             a21643)
                                                                          (let ([a21644 #f])
                                                                             a21644))
                                                                       
                                                                      (let ([a21645 #t])
                                                                         a21645)
                                                                      (let ([a21646 #f])
                                                                         a21646))
                                                                   
                                                                  (let ([a21647 #t])
                                                                     a21647)
                                                                  (let ([a21648 #f])
                                                                     a21648))
                                                               
                                                              (if (> 3 (if (> 3 1)
                                                                          (let ([a21649 1])
                                                                             a21649)
                                                                          (let ([a21650 2])
                                                                             a21650))
                                                                       )
                                                                 (let ([a21651 (if (> 3 1)
                                                                                  (let ([a21652 1])
                                                                                     a21652)
                                                                                  (let ([a21653 2])
                                                                                     a21653))
                                                                               ])
                                                                    a21651)
                                                                 (let ([a21654 2])
                                                                    a21654))
                                                              
                                                              2)
                                                           ])
                                                (+ a21636 (let ([a21655 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                              (let ([a21656 1])
                                                                                                                 a21656)
                                                                                                              (let ([a21657 2])
                                                                                                                 a21657))
                                                                                                           )
                                                                                                     (let ([a21658 (if (> 3 1)
                                                                                                                      (let ([a21659 1])
                                                                                                                         a21659)
                                                                                                                      (let ([a21660 2])
                                                                                                                         a21660))
                                                                                                                   ])
                                                                                                        a21658)
                                                                                                     (let ([a21661 2])
                                                                                                        a21661))
                                                                                                  )
                                                                                       (let ([a21662 #t])
                                                                                          a21662)
                                                                                       (let ([a21663 #f])
                                                                                          a21663))
                                                                                    
                                                                                   (let ([a21664 #t])
                                                                                      a21664)
                                                                                   (let ([a21665 #f])
                                                                                      a21665))
                                                                                
                                                                               (let ([a21666 #t])
                                                                                  a21666)
                                                                               (let ([a21667 #f])
                                                                                  a21667))
                                                                            
                                                                           (if (> 3 (if (> 3 1)
                                                                                       (let ([a21668 1])
                                                                                          a21668)
                                                                                       (let ([a21669 2])
                                                                                          a21669))
                                                                                    )
                                                                              (let ([a21670 (if (> 3 1)
                                                                                               (let ([a21671 1])
                                                                                                  a21671)
                                                                                               (let ([a21672 2])
                                                                                                  a21672))
                                                                                            ])
                                                                                 a21670)
                                                                              (let ([a21673 2])
                                                                                 a21673))
                                                                           
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a21674 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                           (let ([a21675 1])
                                                                                                                              a21675)
                                                                                                                           (let ([a21676 2])
                                                                                                                              a21676))
                                                                                                                        )
                                                                                                                  (let ([a21677 (if (> 3 1)
                                                                                                                                   (let ([a21678 1])
                                                                                                                                      a21678)
                                                                                                                                   (let ([a21679 2])
                                                                                                                                      a21679))
                                                                                                                                ])
                                                                                                                     a21677)
                                                                                                                  (let ([a21680 2])
                                                                                                                     a21680))
                                                                                                               )
                                                                                                    (let ([a21681 #t])
                                                                                                       a21681)
                                                                                                    (let ([a21682 #f])
                                                                                                       a21682))
                                                                                                 
                                                                                                (let ([a21683 #t])
                                                                                                   a21683)
                                                                                                (let ([a21684 #f])
                                                                                                   a21684))
                                                                                             
                                                                                            (let ([a21685 #t])
                                                                                               a21685)
                                                                                            (let ([a21686 #f])
                                                                                               a21686))
                                                                                         
                                                                                        (if (> 3 (if (> 3 1)
                                                                                                    (let ([a21687 1])
                                                                                                       a21687)
                                                                                                    (let ([a21688 2])
                                                                                                       a21688))
                                                                                                 )
                                                                                           (let ([a21689 (if (> 3 1)
                                                                                                            (let ([a21690 1])
                                                                                                               a21690)
                                                                                                            (let ([a21691 2])
                                                                                                               a21691))
                                                                                                         ])
                                                                                              a21689)
                                                                                           (let ([a21692 2])
                                                                                              a21692))
                                                                                        
                                                                                        2)
                                                                                     ])
                                                                          (+ a21674 (let ([a21693 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                        (let ([a21694 1])
                                                                                                                                           a21694)
                                                                                                                                        (let ([a21695 2])
                                                                                                                                           a21695))
                                                                                                                                     )
                                                                                                                               (let ([a21696 (if (> 3 1)
                                                                                                                                                (let ([a21697 1])
                                                                                                                                                   a21697)
                                                                                                                                                (let ([a21698 2])
                                                                                                                                                   a21698))
                                                                                                                                             ])
                                                                                                                                  a21696)
                                                                                                                               (let ([a21699 2])
                                                                                                                                  a21699))
                                                                                                                            )
                                                                                                                 (let ([a21700 #t])
                                                                                                                    a21700)
                                                                                                                 (let ([a21701 #f])
                                                                                                                    a21701))
                                                                                                              
                                                                                                             (let ([a21702 #t])
                                                                                                                a21702)
                                                                                                             (let ([a21703 #f])
                                                                                                                a21703))
                                                                                                          
                                                                                                         (let ([a21704 #t])
                                                                                                            a21704)
                                                                                                         (let ([a21705 #f])
                                                                                                            a21705))
                                                                                                      
                                                                                                     (if (> 3 (if (> 3 1)
                                                                                                                 (let ([a21706 1])
                                                                                                                    a21706)
                                                                                                                 (let ([a21707 2])
                                                                                                                    a21707))
                                                                                                              )
                                                                                                        (let ([a21708 (if (> 3 1)
                                                                                                                         (let ([a21709 1])
                                                                                                                            a21709)
                                                                                                                         (let ([a21710 2])
                                                                                                                            a21710))
                                                                                                                      ])
                                                                                                           a21708)
                                                                                                        (let ([a21711 2])
                                                                                                           a21711))
                                                                                                     
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a21693 (let ([a21712 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                     (let ([a21713 1])
                                                                                                                                                        a21713)
                                                                                                                                                     (let ([a21714 2])
                                                                                                                                                        a21714))
                                                                                                                                                  )
                                                                                                                                            (let ([a21715 (if (> 3 1)
                                                                                                                                                             (let ([a21716 1])
                                                                                                                                                                a21716)
                                                                                                                                                             (let ([a21717 2])
                                                                                                                                                                a21717))
                                                                                                                                                          ])
                                                                                                                                               a21715)
                                                                                                                                            (let ([a21718 2])
                                                                                                                                               a21718))
                                                                                                                                         )
                                                                                                                              (let ([a21719 #t])
                                                                                                                                 a21719)
                                                                                                                              (let ([a21720 #f])
                                                                                                                                 a21720))
                                                                                                                           
                                                                                                                          (let ([a21721 #t])
                                                                                                                             a21721)
                                                                                                                          (let ([a21722 #f])
                                                                                                                             a21722))
                                                                                                                       
                                                                                                                      (let ([a21723 #t])
                                                                                                                         a21723)
                                                                                                                      (let ([a21724 #f])
                                                                                                                         a21724))
                                                                                                                   
                                                                                                                  (if (> 3 (if (> 3 1)
                                                                                                                              (let ([a21725 1])
                                                                                                                                 a21725)
                                                                                                                              (let ([a21726 2])
                                                                                                                                 a21726))
                                                                                                                           )
                                                                                                                     (let ([a21727 (if (> 3 1)
                                                                                                                                      (let ([a21728 1])
                                                                                                                                         a21728)
                                                                                                                                      (let ([a21729 2])
                                                                                                                                         a21729))
                                                                                                                                   ])
                                                                                                                        a21727)
                                                                                                                     (let ([a21730 2])
                                                                                                                        a21730))
                                                                                                                  
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a21712 (let ([a21731 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                                  (let ([a21732 1])
                                                                                                                                                                     a21732)
                                                                                                                                                                  (let ([a21733 2])
                                                                                                                                                                     a21733))
                                                                                                                                                               )
                                                                                                                                                         (let ([a21734 (if (> 3 1)
                                                                                                                                                                          (let ([a21735 1])
                                                                                                                                                                             a21735)
                                                                                                                                                                          (let ([a21736 2])
                                                                                                                                                                             a21736))
                                                                                                                                                                       ])
                                                                                                                                                            a21734)
                                                                                                                                                         (let ([a21737 2])
                                                                                                                                                            a21737))
                                                                                                                                                      )
                                                                                                                                           (let ([a21738 #t])
                                                                                                                                              a21738)
                                                                                                                                           (let ([a21739 #f])
                                                                                                                                              a21739))
                                                                                                                                        
                                                                                                                                       (let ([a21740 #t])
                                                                                                                                          a21740)
                                                                                                                                       (let ([a21741 #f])
                                                                                                                                          a21741))
                                                                                                                                    
                                                                                                                                   (let ([a21742 #t])
                                                                                                                                      a21742)
                                                                                                                                   (let ([a21743 #f])
                                                                                                                                      a21743))
                                                                                                                                
                                                                                                                               (if (> 3 (if (> 3 1)
                                                                                                                                           (let ([a21744 1])
                                                                                                                                              a21744)
                                                                                                                                           (let ([a21745 2])
                                                                                                                                              a21745))
                                                                                                                                        )
                                                                                                                                  (let ([a21746 (if (> 3 1)
                                                                                                                                                   (let ([a21747 1])
                                                                                                                                                      a21747)
                                                                                                                                                   (let ([a21748 2])
                                                                                                                                                      a21748))
                                                                                                                                                ])
                                                                                                                                     a21746)
                                                                                                                                  (let ([a21749 2])
                                                                                                                                     a21749))
                                                                                                                               
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a21731 (let ([a21750 (read)])
                                                                                                                              (+ a21750 (let ([a21751 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                                                            (let ([a21752 1])
                                                                                                                                                                                               a21752)
                                                                                                                                                                                            (let ([a21753 2])
                                                                                                                                                                                               a21753))
                                                                                                                                                                                         )
                                                                                                                                                                                   (let ([a21754 (if (> 3 1)
                                                                                                                                                                                                    (let ([a21755 1])
                                                                                                                                                                                                       a21755)
                                                                                                                                                                                                    (let ([a21756 2])
                                                                                                                                                                                                       a21756))
                                                                                                                                                                                                 ])
                                                                                                                                                                                      a21754)
                                                                                                                                                                                   (let ([a21757 2])
                                                                                                                                                                                      a21757))
                                                                                                                                                                                )
                                                                                                                                                                     (let ([a21758 #t])
                                                                                                                                                                        a21758)
                                                                                                                                                                     (let ([a21759 #f])
                                                                                                                                                                        a21759))
                                                                                                                                                                  
                                                                                                                                                                 (let ([a21760 #t])
                                                                                                                                                                    a21760)
                                                                                                                                                                 (let ([a21761 #f])
                                                                                                                                                                    a21761))
                                                                                                                                                              
                                                                                                                                                             (let ([a21762 #t])
                                                                                                                                                                a21762)
                                                                                                                                                             (let ([a21763 #f])
                                                                                                                                                                a21763))
                                                                                                                                                          
                                                                                                                                                         (if (> 3 (if (> 3 1)
                                                                                                                                                                     (let ([a21764 1])
                                                                                                                                                                        a21764)
                                                                                                                                                                     (let ([a21765 2])
                                                                                                                                                                        a21765))
                                                                                                                                                                  )
                                                                                                                                                            (let ([a21766 (if (> 3 1)
                                                                                                                                                                             (let ([a21767 1])
                                                                                                                                                                                a21767)
                                                                                                                                                                             (let ([a21768 2])
                                                                                                                                                                                a21768))
                                                                                                                                                                          ])
                                                                                                                                                               a21766)
                                                                                                                                                            (let ([a21769 2])
                                                                                                                                                               a21769))
                                                                                                                                                         
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a21751 (let ([a21770 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                                                                         (let ([a21771 1])
                                                                                                                                                                                                            a21771)
                                                                                                                                                                                                         (let ([a21772 2])
                                                                                                                                                                                                            a21772))
                                                                                                                                                                                                      )
                                                                                                                                                                                                (let ([a21773 (if (> 3 1)
                                                                                                                                                                                                                 (let ([a21774 1])
                                                                                                                                                                                                                    a21774)
                                                                                                                                                                                                                 (let ([a21775 2])
                                                                                                                                                                                                                    a21775))
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   a21773)
                                                                                                                                                                                                (let ([a21776 2])
                                                                                                                                                                                                   a21776))
                                                                                                                                                                                             )
                                                                                                                                                                                  (let ([a21777 #t])
                                                                                                                                                                                     a21777)
                                                                                                                                                                                  (let ([a21778 #f])
                                                                                                                                                                                     a21778))
                                                                                                                                                                               
                                                                                                                                                                              (let ([a21779 #t])
                                                                                                                                                                                 a21779)
                                                                                                                                                                              (let ([a21780 #f])
                                                                                                                                                                                 a21780))
                                                                                                                                                                           
                                                                                                                                                                          (let ([a21781 #t])
                                                                                                                                                                             a21781)
                                                                                                                                                                          (let ([a21782 #f])
                                                                                                                                                                             a21782))
                                                                                                                                                                       
                                                                                                                                                                      (if (> 3 (if (> 3 1)
                                                                                                                                                                                  (let ([a21783 1])
                                                                                                                                                                                     a21783)
                                                                                                                                                                                  (let ([a21784 2])
                                                                                                                                                                                     a21784))
                                                                                                                                                                               )
                                                                                                                                                                         (let ([a21785 (if (> 3 1)
                                                                                                                                                                                          (let ([a21786 1])
                                                                                                                                                                                             a21786)
                                                                                                                                                                                          (let ([a21787 2])
                                                                                                                                                                                             a21787))
                                                                                                                                                                                       ])
                                                                                                                                                                            a21785)
                                                                                                                                                                         (let ([a21788 2])
                                                                                                                                                                            a21788))
                                                                                                                                                                      
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a21770))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x21560 (if (> (if (>= (if (> 3 (if (> 3 1)
                                         (let ([a21561 1])
                                            a21561)
                                         (let ([a21562 2])
                                            a21562))
                                      )
                                (let ([a21563 (if (> 3 1)
                                                 (let ([a21564 1])
                                                    a21564)
                                                 (let ([a21565 2])
                                                    a21565))
                                              ])
                                   a21563)
                                (let ([a21566 2])
                                   a21566))
                              (if (> 3 (if (> 3 1)
                                          (let ([a21567 1])
                                             a21567)
                                          (let ([a21568 2])
                                             a21568))
                                       )
                                 (let ([a21569 (if (> 3 1)
                                                  (let ([a21570 1])
                                                     a21570)
                                                  (let ([a21571 2])
                                                     a21571))
                                               ])
                                    a21569)
                                 (let ([a21572 2])
                                    a21572))
                              )
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x21560
      (if (> 3 (if (> 3 1)
                  (let ([a21573 1])
                     a21573)
                  (let ([a21574 2])
                     a21574))
               )
         (let ([a21575 (if (> 3 1)
                          (let ([a21576 1])
                             a21576)
                          (let ([a21577 2])
                             a21577))
                       ])
            a21575)
         (let ([a21578 2])
            a21578))
      
      (let ([a21579 (if (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                              (let ([a21580 1])
                                                                 a21580)
                                                              (let ([a21581 2])
                                                                 a21581))
                                                           )
                                                     (let ([a21582 (if (> 3 1)
                                                                      (let ([a21583 1])
                                                                         a21583)
                                                                      (let ([a21584 2])
                                                                         a21584))
                                                                   ])
                                                        a21582)
                                                     (let ([a21585 2])
                                                        a21585))
                                                  )
                                       (let ([a21586 #t])
                                          a21586)
                                       (let ([a21587 #f])
                                          a21587))
                                    
                                   (let ([a21588 #t])
                                      a21588)
                                   (let ([a21589 #f])
                                      a21589))
                                
                               (let ([a21590 #t])
                                  a21590)
                               (let ([a21591 #f])
                                  a21591))
                            
                           #t
                           #f)
                        
                       (if (> 3 (if (> 3 1)
                                   (let ([a21592 1])
                                      a21592)
                                   (let ([a21593 2])
                                      a21593))
                                )
                          (let ([a21594 (if (> 3 1)
                                           (let ([a21595 1])
                                              a21595)
                                           (let ([a21596 2])
                                              a21596))
                                        ])
                             a21594)
                          (let ([a21597 2])
                             a21597))
                       
                       2)
                    ])
         (+ a21579 (let ([a21598 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                       (let ([a21599 1])
                                                                          a21599)
                                                                       (let ([a21600 2])
                                                                          a21600))
                                                                    )
                                                              (let ([a21601 (if (> 3 1)
                                                                               (let ([a21602 1])
                                                                                  a21602)
                                                                               (let ([a21603 2])
                                                                                  a21603))
                                                                            ])
                                                                 a21601)
                                                              (let ([a21604 2])
                                                                 a21604))
                                                           )
                                                (let ([a21605 #t])
                                                   a21605)
                                                (let ([a21606 #f])
                                                   a21606))
                                             
                                            (let ([a21607 #t])
                                               a21607)
                                            (let ([a21608 #f])
                                               a21608))
                                         
                                        (let ([a21609 #t])
                                           a21609)
                                        (let ([a21610 #f])
                                           a21610))
                                     
                                    (if (> 3 (if (> 3 1)
                                                (let ([a21611 1])
                                                   a21611)
                                                (let ([a21612 2])
                                                   a21612))
                                             )
                                       (let ([a21613 (if (> 3 1)
                                                        (let ([a21614 1])
                                                           a21614)
                                                        (let ([a21615 2])
                                                           a21615))
                                                     ])
                                          a21613)
                                       (let ([a21616 2])
                                          a21616))
                                    
                                    2)
                                 ])
                      (+ a21598 (let ([a21617 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                    (let ([a21618 1])
                                                                                       a21618)
                                                                                    (let ([a21619 2])
                                                                                       a21619))
                                                                                 )
                                                                           (let ([a21620 (if (> 3 1)
                                                                                            (let ([a21621 1])
                                                                                               a21621)
                                                                                            (let ([a21622 2])
                                                                                               a21622))
                                                                                         ])
                                                                              a21620)
                                                                           (let ([a21623 2])
                                                                              a21623))
                                                                        )
                                                             (let ([a21624 #t])
                                                                a21624)
                                                             (let ([a21625 #f])
                                                                a21625))
                                                          
                                                         (let ([a21626 #t])
                                                            a21626)
                                                         (let ([a21627 #f])
                                                            a21627))
                                                      
                                                     (let ([a21628 #t])
                                                        a21628)
                                                     (let ([a21629 #f])
                                                        a21629))
                                                  
                                                 (if (> 3 (if (> 3 1)
                                                             (let ([a21630 1])
                                                                a21630)
                                                             (let ([a21631 2])
                                                                a21631))
                                                          )
                                                    (let ([a21632 (if (> 3 1)
                                                                     (let ([a21633 1])
                                                                        a21633)
                                                                     (let ([a21634 2])
                                                                        a21634))
                                                                  ])
                                                       a21632)
                                                    (let ([a21635 2])
                                                       a21635))
                                                 
                                                 2)
                                              ])
                                   (+ a21617 (let ([a21636 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                 (let ([a21637 1])
                                                                                                    a21637)
                                                                                                 (let ([a21638 2])
                                                                                                    a21638))
                                                                                              )
                                                                                        (let ([a21639 (if (> 3 1)
                                                                                                         (let ([a21640 1])
                                                                                                            a21640)
                                                                                                         (let ([a21641 2])
                                                                                                            a21641))
                                                                                                      ])
                                                                                           a21639)
                                                                                        (let ([a21642 2])
                                                                                           a21642))
                                                                                     )
                                                                          (let ([a21643 #t])
                                                                             a21643)
                                                                          (let ([a21644 #f])
                                                                             a21644))
                                                                       
                                                                      (let ([a21645 #t])
                                                                         a21645)
                                                                      (let ([a21646 #f])
                                                                         a21646))
                                                                   
                                                                  (let ([a21647 #t])
                                                                     a21647)
                                                                  (let ([a21648 #f])
                                                                     a21648))
                                                               
                                                              (if (> 3 (if (> 3 1)
                                                                          (let ([a21649 1])
                                                                             a21649)
                                                                          (let ([a21650 2])
                                                                             a21650))
                                                                       )
                                                                 (let ([a21651 (if (> 3 1)
                                                                                  (let ([a21652 1])
                                                                                     a21652)
                                                                                  (let ([a21653 2])
                                                                                     a21653))
                                                                               ])
                                                                    a21651)
                                                                 (let ([a21654 2])
                                                                    a21654))
                                                              
                                                              2)
                                                           ])
                                                (+ a21636 (let ([a21655 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                              (let ([a21656 1])
                                                                                                                 a21656)
                                                                                                              (let ([a21657 2])
                                                                                                                 a21657))
                                                                                                           )
                                                                                                     (let ([a21658 (if (> 3 1)
                                                                                                                      (let ([a21659 1])
                                                                                                                         a21659)
                                                                                                                      (let ([a21660 2])
                                                                                                                         a21660))
                                                                                                                   ])
                                                                                                        a21658)
                                                                                                     (let ([a21661 2])
                                                                                                        a21661))
                                                                                                  )
                                                                                       (let ([a21662 #t])
                                                                                          a21662)
                                                                                       (let ([a21663 #f])
                                                                                          a21663))
                                                                                    
                                                                                   (let ([a21664 #t])
                                                                                      a21664)
                                                                                   (let ([a21665 #f])
                                                                                      a21665))
                                                                                
                                                                               (let ([a21666 #t])
                                                                                  a21666)
                                                                               (let ([a21667 #f])
                                                                                  a21667))
                                                                            
                                                                           (if (> 3 (if (> 3 1)
                                                                                       (let ([a21668 1])
                                                                                          a21668)
                                                                                       (let ([a21669 2])
                                                                                          a21669))
                                                                                    )
                                                                              (let ([a21670 (if (> 3 1)
                                                                                               (let ([a21671 1])
                                                                                                  a21671)
                                                                                               (let ([a21672 2])
                                                                                                  a21672))
                                                                                            ])
                                                                                 a21670)
                                                                              (let ([a21673 2])
                                                                                 a21673))
                                                                           
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a21674 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                           (let ([a21675 1])
                                                                                                                              a21675)
                                                                                                                           (let ([a21676 2])
                                                                                                                              a21676))
                                                                                                                        )
                                                                                                                  (let ([a21677 (if (> 3 1)
                                                                                                                                   (let ([a21678 1])
                                                                                                                                      a21678)
                                                                                                                                   (let ([a21679 2])
                                                                                                                                      a21679))
                                                                                                                                ])
                                                                                                                     a21677)
                                                                                                                  (let ([a21680 2])
                                                                                                                     a21680))
                                                                                                               )
                                                                                                    (let ([a21681 #t])
                                                                                                       a21681)
                                                                                                    (let ([a21682 #f])
                                                                                                       a21682))
                                                                                                 
                                                                                                (let ([a21683 #t])
                                                                                                   a21683)
                                                                                                (let ([a21684 #f])
                                                                                                   a21684))
                                                                                             
                                                                                            (let ([a21685 #t])
                                                                                               a21685)
                                                                                            (let ([a21686 #f])
                                                                                               a21686))
                                                                                         
                                                                                        (if (> 3 (if (> 3 1)
                                                                                                    (let ([a21687 1])
                                                                                                       a21687)
                                                                                                    (let ([a21688 2])
                                                                                                       a21688))
                                                                                                 )
                                                                                           (let ([a21689 (if (> 3 1)
                                                                                                            (let ([a21690 1])
                                                                                                               a21690)
                                                                                                            (let ([a21691 2])
                                                                                                               a21691))
                                                                                                         ])
                                                                                              a21689)
                                                                                           (let ([a21692 2])
                                                                                              a21692))
                                                                                        
                                                                                        2)
                                                                                     ])
                                                                          (+ a21674 (let ([a21693 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                        (let ([a21694 1])
                                                                                                                                           a21694)
                                                                                                                                        (let ([a21695 2])
                                                                                                                                           a21695))
                                                                                                                                     )
                                                                                                                               (let ([a21696 (if (> 3 1)
                                                                                                                                                (let ([a21697 1])
                                                                                                                                                   a21697)
                                                                                                                                                (let ([a21698 2])
                                                                                                                                                   a21698))
                                                                                                                                             ])
                                                                                                                                  a21696)
                                                                                                                               (let ([a21699 2])
                                                                                                                                  a21699))
                                                                                                                            )
                                                                                                                 (let ([a21700 #t])
                                                                                                                    a21700)
                                                                                                                 (let ([a21701 #f])
                                                                                                                    a21701))
                                                                                                              
                                                                                                             (let ([a21702 #t])
                                                                                                                a21702)
                                                                                                             (let ([a21703 #f])
                                                                                                                a21703))
                                                                                                          
                                                                                                         (let ([a21704 #t])
                                                                                                            a21704)
                                                                                                         (let ([a21705 #f])
                                                                                                            a21705))
                                                                                                      
                                                                                                     (if (> 3 (if (> 3 1)
                                                                                                                 (let ([a21706 1])
                                                                                                                    a21706)
                                                                                                                 (let ([a21707 2])
                                                                                                                    a21707))
                                                                                                              )
                                                                                                        (let ([a21708 (if (> 3 1)
                                                                                                                         (let ([a21709 1])
                                                                                                                            a21709)
                                                                                                                         (let ([a21710 2])
                                                                                                                            a21710))
                                                                                                                      ])
                                                                                                           a21708)
                                                                                                        (let ([a21711 2])
                                                                                                           a21711))
                                                                                                     
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a21693 (let ([a21712 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                     (let ([a21713 1])
                                                                                                                                                        a21713)
                                                                                                                                                     (let ([a21714 2])
                                                                                                                                                        a21714))
                                                                                                                                                  )
                                                                                                                                            (let ([a21715 (if (> 3 1)
                                                                                                                                                             (let ([a21716 1])
                                                                                                                                                                a21716)
                                                                                                                                                             (let ([a21717 2])
                                                                                                                                                                a21717))
                                                                                                                                                          ])
                                                                                                                                               a21715)
                                                                                                                                            (let ([a21718 2])
                                                                                                                                               a21718))
                                                                                                                                         )
                                                                                                                              (let ([a21719 #t])
                                                                                                                                 a21719)
                                                                                                                              (let ([a21720 #f])
                                                                                                                                 a21720))
                                                                                                                           
                                                                                                                          (let ([a21721 #t])
                                                                                                                             a21721)
                                                                                                                          (let ([a21722 #f])
                                                                                                                             a21722))
                                                                                                                       
                                                                                                                      (let ([a21723 #t])
                                                                                                                         a21723)
                                                                                                                      (let ([a21724 #f])
                                                                                                                         a21724))
                                                                                                                   
                                                                                                                  (if (> 3 (if (> 3 1)
                                                                                                                              (let ([a21725 1])
                                                                                                                                 a21725)
                                                                                                                              (let ([a21726 2])
                                                                                                                                 a21726))
                                                                                                                           )
                                                                                                                     (let ([a21727 (if (> 3 1)
                                                                                                                                      (let ([a21728 1])
                                                                                                                                         a21728)
                                                                                                                                      (let ([a21729 2])
                                                                                                                                         a21729))
                                                                                                                                   ])
                                                                                                                        a21727)
                                                                                                                     (let ([a21730 2])
                                                                                                                        a21730))
                                                                                                                  
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a21712 (let ([a21731 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                                  (let ([a21732 1])
                                                                                                                                                                     a21732)
                                                                                                                                                                  (let ([a21733 2])
                                                                                                                                                                     a21733))
                                                                                                                                                               )
                                                                                                                                                         (let ([a21734 (if (> 3 1)
                                                                                                                                                                          (let ([a21735 1])
                                                                                                                                                                             a21735)
                                                                                                                                                                          (let ([a21736 2])
                                                                                                                                                                             a21736))
                                                                                                                                                                       ])
                                                                                                                                                            a21734)
                                                                                                                                                         (let ([a21737 2])
                                                                                                                                                            a21737))
                                                                                                                                                      )
                                                                                                                                           (let ([a21738 #t])
                                                                                                                                              a21738)
                                                                                                                                           (let ([a21739 #f])
                                                                                                                                              a21739))
                                                                                                                                        
                                                                                                                                       (let ([a21740 #t])
                                                                                                                                          a21740)
                                                                                                                                       (let ([a21741 #f])
                                                                                                                                          a21741))
                                                                                                                                    
                                                                                                                                   (let ([a21742 #t])
                                                                                                                                      a21742)
                                                                                                                                   (let ([a21743 #f])
                                                                                                                                      a21743))
                                                                                                                                
                                                                                                                               (if (> 3 (if (> 3 1)
                                                                                                                                           (let ([a21744 1])
                                                                                                                                              a21744)
                                                                                                                                           (let ([a21745 2])
                                                                                                                                              a21745))
                                                                                                                                        )
                                                                                                                                  (let ([a21746 (if (> 3 1)
                                                                                                                                                   (let ([a21747 1])
                                                                                                                                                      a21747)
                                                                                                                                                   (let ([a21748 2])
                                                                                                                                                      a21748))
                                                                                                                                                ])
                                                                                                                                     a21746)
                                                                                                                                  (let ([a21749 2])
                                                                                                                                     a21749))
                                                                                                                               
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a21731 (let ([a21750 (read)])
                                                                                                                              (+ a21750 (let ([a21751 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                                                            (let ([a21752 1])
                                                                                                                                                                                               a21752)
                                                                                                                                                                                            (let ([a21753 2])
                                                                                                                                                                                               a21753))
                                                                                                                                                                                         )
                                                                                                                                                                                   (let ([a21754 (if (> 3 1)
                                                                                                                                                                                                    (let ([a21755 1])
                                                                                                                                                                                                       a21755)
                                                                                                                                                                                                    (let ([a21756 2])
                                                                                                                                                                                                       a21756))
                                                                                                                                                                                                 ])
                                                                                                                                                                                      a21754)
                                                                                                                                                                                   (let ([a21757 2])
                                                                                                                                                                                      a21757))
                                                                                                                                                                                )
                                                                                                                                                                     (let ([a21758 #t])
                                                                                                                                                                        a21758)
                                                                                                                                                                     (let ([a21759 #f])
                                                                                                                                                                        a21759))
                                                                                                                                                                  
                                                                                                                                                                 (let ([a21760 #t])
                                                                                                                                                                    a21760)
                                                                                                                                                                 (let ([a21761 #f])
                                                                                                                                                                    a21761))
                                                                                                                                                              
                                                                                                                                                             (let ([a21762 #t])
                                                                                                                                                                a21762)
                                                                                                                                                             (let ([a21763 #f])
                                                                                                                                                                a21763))
                                                                                                                                                          
                                                                                                                                                         (if (> 3 (if (> 3 1)
                                                                                                                                                                     (let ([a21764 1])
                                                                                                                                                                        a21764)
                                                                                                                                                                     (let ([a21765 2])
                                                                                                                                                                        a21765))
                                                                                                                                                                  )
                                                                                                                                                            (let ([a21766 (if (> 3 1)
                                                                                                                                                                             (let ([a21767 1])
                                                                                                                                                                                a21767)
                                                                                                                                                                             (let ([a21768 2])
                                                                                                                                                                                a21768))
                                                                                                                                                                          ])
                                                                                                                                                               a21766)
                                                                                                                                                            (let ([a21769 2])
                                                                                                                                                               a21769))
                                                                                                                                                         
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a21751 (let ([a21770 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                                                                         (let ([a21771 1])
                                                                                                                                                                                                            a21771)
                                                                                                                                                                                                         (let ([a21772 2])
                                                                                                                                                                                                            a21772))
                                                                                                                                                                                                      )
                                                                                                                                                                                                (let ([a21773 (if (> 3 1)
                                                                                                                                                                                                                 (let ([a21774 1])
                                                                                                                                                                                                                    a21774)
                                                                                                                                                                                                                 (let ([a21775 2])
                                                                                                                                                                                                                    a21775))
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   a21773)
                                                                                                                                                                                                (let ([a21776 2])
                                                                                                                                                                                                   a21776))
                                                                                                                                                                                             )
                                                                                                                                                                                  (let ([a21777 #t])
                                                                                                                                                                                     a21777)
                                                                                                                                                                                  (let ([a21778 #f])
                                                                                                                                                                                     a21778))
                                                                                                                                                                               
                                                                                                                                                                              (let ([a21779 #t])
                                                                                                                                                                                 a21779)
                                                                                                                                                                              (let ([a21780 #f])
                                                                                                                                                                                 a21780))
                                                                                                                                                                           
                                                                                                                                                                          (let ([a21781 #t])
                                                                                                                                                                             a21781)
                                                                                                                                                                          (let ([a21782 #f])
                                                                                                                                                                             a21782))
                                                                                                                                                                       
                                                                                                                                                                      (if (> 3 (if (> 3 1)
                                                                                                                                                                                  (let ([a21783 1])
                                                                                                                                                                                     a21783)
                                                                                                                                                                                  (let ([a21784 2])
                                                                                                                                                                                     a21784))
                                                                                                                                                                               )
                                                                                                                                                                         (let ([a21785 (if (> 3 1)
                                                                                                                                                                                          (let ([a21786 1])
                                                                                                                                                                                             a21786)
                                                                                                                                                                                          (let ([a21787 2])
                                                                                                                                                                                             a21787))
                                                                                                                                                                                       ])
                                                                                                                                                                            a21785)
                                                                                                                                                                         (let ([a21788 2])
                                                                                                                                                                            a21788))
                                                                                                                                                                      
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a21770))))))))))))))))))))))))
   )


output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: remove complex opera* @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
(let ([x21560 (if (let ([temp21790 (if (let ([temp21792 (if (let ([temp21794 (if (> 3 1)
                                                                                (let ([a21561 1])
                                                                                   a21561)
                                                                                (let ([a21562 2])
                                                                                   a21562))
                                                                             ])
                                                               (> 3 temp21794))
                                                           (let ([a21563 (if (> 3 1)
                                                                            (let ([a21564 1])
                                                                               a21564)
                                                                            (let ([a21565 2])
                                                                               a21565))
                                                                         ])
                                                              a21563)
                                                           (let ([a21566 2])
                                                              a21566))
                                                        ])
                                          (let ([temp21797 (if (let ([temp21799 (if (> 3 1)
                                                                                   (let ([a21567 1])
                                                                                      a21567)
                                                                                   (let ([a21568 2])
                                                                                      a21568))
                                                                                ])
                                                                  (> 3 temp21799))
                                                              (let ([a21569 (if (> 3 1)
                                                                               (let ([a21570 1])
                                                                                  a21570)
                                                                               (let ([a21571 2])
                                                                                  a21571))
                                                                            ])
                                                                 a21569)
                                                              (let ([a21572 2])
                                                                 a21572))
                                                           ])
                                             (>= temp21792 temp21797)))
                                      8
                                      9)
                                   ])
                     (> temp21790 8))
                 #t
                 #f)
              ])
   (if x21560
      (if (let ([temp21803 (if (> 3 1)
                              (let ([a21573 1])
                                 a21573)
                              (let ([a21574 2])
                                 a21574))
                           ])
             (> 3 temp21803))
         (let ([a21575 (if (> 3 1)
                          (let ([a21576 1])
                             a21576)
                          (let ([a21577 2])
                             a21577))
                       ])
            a21575)
         (let ([a21578 2])
            a21578))
      
      (let ([a21579 (if (if (if (if (if (let ([temp21807 (read)])
                                           (let ([temp21808 (if (let ([temp21810 (if (> 3 1)
                                                                                    (let ([a21580 1])
                                                                                       a21580)
                                                                                    (let ([a21581 2])
                                                                                       a21581))
                                                                                 ])
                                                                   (> 3 temp21810))
                                                               (let ([a21582 (if (> 3 1)
                                                                                (let ([a21583 1])
                                                                                   a21583)
                                                                                (let ([a21584 2])
                                                                                   a21584))
                                                                             ])
                                                                  a21582)
                                                               (let ([a21585 2])
                                                                  a21585))
                                                            ])
                                              (> temp21807 temp21808)))
                                       (let ([a21586 #t])
                                          a21586)
                                       (let ([a21587 #f])
                                          a21587))
                                    
                                   (let ([a21588 #t])
                                      a21588)
                                   (let ([a21589 #f])
                                      a21589))
                                
                               (let ([a21590 #t])
                                  a21590)
                               (let ([a21591 #f])
                                  a21591))
                            
                           #t
                           #f)
                        
                       (if (let ([temp21814 (if (> 3 1)
                                               (let ([a21592 1])
                                                  a21592)
                                               (let ([a21593 2])
                                                  a21593))
                                            ])
                              (> 3 temp21814))
                          (let ([a21594 (if (> 3 1)
                                           (let ([a21595 1])
                                              a21595)
                                           (let ([a21596 2])
                                              a21596))
                                        ])
                             a21594)
                          (let ([a21597 2])
                             a21597))
                       
                       2)
                    ])
         (let ([a21598 (if (if (if (if (let ([temp21820 (read)])
                                          (let ([temp21821 (if (let ([temp21823 (if (> 3 1)
                                                                                   (let ([a21599 1])
                                                                                      a21599)
                                                                                   (let ([a21600 2])
                                                                                      a21600))
                                                                                ])
                                                                  (> 3 temp21823))
                                                              (let ([a21601 (if (> 3 1)
                                                                               (let ([a21602 1])
                                                                                  a21602)
                                                                               (let ([a21603 2])
                                                                                  a21603))
                                                                            ])
                                                                 a21601)
                                                              (let ([a21604 2])
                                                                 a21604))
                                                           ])
                                             (> temp21820 temp21821)))
                                      (let ([a21605 #t])
                                         a21605)
                                      (let ([a21606 #f])
                                         a21606))
                                   
                                  (let ([a21607 #t])
                                     a21607)
                                  (let ([a21608 #f])
                                     a21608))
                               
                              (let ([a21609 #t])
                                 a21609)
                              (let ([a21610 #f])
                                 a21610))
                           
                          (if (let ([temp21827 (if (> 3 1)
                                                  (let ([a21611 1])
                                                     a21611)
                                                  (let ([a21612 2])
                                                     a21612))
                                               ])
                                 (> 3 temp21827))
                             (let ([a21613 (if (> 3 1)
                                              (let ([a21614 1])
                                                 a21614)
                                              (let ([a21615 2])
                                                 a21615))
                                           ])
                                a21613)
                             (let ([a21616 2])
                                a21616))
                          
                          2)
                       ])
            (let ([temp21818 (let ([a21617 (if (if (if (if (let ([temp21833 (read)])
                                                              (let ([temp21834 (if (let ([temp21836 (if (> 3 1)
                                                                                                       (let ([a21618 1])
                                                                                                          a21618)
                                                                                                       (let ([a21619 2])
                                                                                                          a21619))
                                                                                                    ])
                                                                                      (> 3 temp21836))
                                                                                  (let ([a21620 (if (> 3 1)
                                                                                                   (let ([a21621 1])
                                                                                                      a21621)
                                                                                                   (let ([a21622 2])
                                                                                                      a21622))
                                                                                                ])
                                                                                     a21620)
                                                                                  (let ([a21623 2])
                                                                                     a21623))
                                                                               ])
                                                                 (> temp21833 temp21834)))
                                                          (let ([a21624 #t])
                                                             a21624)
                                                          (let ([a21625 #f])
                                                             a21625))
                                                       
                                                      (let ([a21626 #t])
                                                         a21626)
                                                      (let ([a21627 #f])
                                                         a21627))
                                                   
                                                  (let ([a21628 #t])
                                                     a21628)
                                                  (let ([a21629 #f])
                                                     a21629))
                                               
                                              (if (let ([temp21840 (if (> 3 1)
                                                                      (let ([a21630 1])
                                                                         a21630)
                                                                      (let ([a21631 2])
                                                                         a21631))
                                                                   ])
                                                     (> 3 temp21840))
                                                 (let ([a21632 (if (> 3 1)
                                                                  (let ([a21633 1])
                                                                     a21633)
                                                                  (let ([a21634 2])
                                                                     a21634))
                                                               ])
                                                    a21632)
                                                 (let ([a21635 2])
                                                    a21635))
                                              
                                              2)
                                           ])
                                (let ([temp21831 (let ([a21636 (if (if (if (if (let ([temp21846 (read)])
                                                                                  (let ([temp21847 (if (let ([temp21849 (if (> 3 1)
                                                                                                                           (let ([a21637 1])
                                                                                                                              a21637)
                                                                                                                           (let ([a21638 2])
                                                                                                                              a21638))
                                                                                                                        ])
                                                                                                          (> 3 temp21849))
                                                                                                      (let ([a21639 (if (> 3 1)
                                                                                                                       (let ([a21640 1])
                                                                                                                          a21640)
                                                                                                                       (let ([a21641 2])
                                                                                                                          a21641))
                                                                                                                    ])
                                                                                                         a21639)
                                                                                                      (let ([a21642 2])
                                                                                                         a21642))
                                                                                                   ])
                                                                                     (> temp21846 temp21847)))
                                                                              (let ([a21643 #t])
                                                                                 a21643)
                                                                              (let ([a21644 #f])
                                                                                 a21644))
                                                                           
                                                                          (let ([a21645 #t])
                                                                             a21645)
                                                                          (let ([a21646 #f])
                                                                             a21646))
                                                                       
                                                                      (let ([a21647 #t])
                                                                         a21647)
                                                                      (let ([a21648 #f])
                                                                         a21648))
                                                                   
                                                                  (if (let ([temp21853 (if (> 3 1)
                                                                                          (let ([a21649 1])
                                                                                             a21649)
                                                                                          (let ([a21650 2])
                                                                                             a21650))
                                                                                       ])
                                                                         (> 3 temp21853))
                                                                     (let ([a21651 (if (> 3 1)
                                                                                      (let ([a21652 1])
                                                                                         a21652)
                                                                                      (let ([a21653 2])
                                                                                         a21653))
                                                                                   ])
                                                                        a21651)
                                                                     (let ([a21654 2])
                                                                        a21654))
                                                                  
                                                                  2)
                                                               ])
                                                    (let ([temp21844 (let ([a21655 (if (if (if (if (let ([temp21859 (read)])
                                                                                                      (let ([temp21860 (if (let ([temp21862 (if (> 3 1)
                                                                                                                                               (let ([a21656 1])
                                                                                                                                                  a21656)
                                                                                                                                               (let ([a21657 2])
                                                                                                                                                  a21657))
                                                                                                                                            ])
                                                                                                                              (> 3 temp21862))
                                                                                                                          (let ([a21658 (if (> 3 1)
                                                                                                                                           (let ([a21659 1])
                                                                                                                                              a21659)
                                                                                                                                           (let ([a21660 2])
                                                                                                                                              a21660))
                                                                                                                                        ])
                                                                                                                             a21658)
                                                                                                                          (let ([a21661 2])
                                                                                                                             a21661))
                                                                                                                       ])
                                                                                                         (> temp21859 temp21860)))
                                                                                                  (let ([a21662 #t])
                                                                                                     a21662)
                                                                                                  (let ([a21663 #f])
                                                                                                     a21663))
                                                                                               
                                                                                              (let ([a21664 #t])
                                                                                                 a21664)
                                                                                              (let ([a21665 #f])
                                                                                                 a21665))
                                                                                           
                                                                                          (let ([a21666 #t])
                                                                                             a21666)
                                                                                          (let ([a21667 #f])
                                                                                             a21667))
                                                                                       
                                                                                      (if (let ([temp21866 (if (> 3 1)
                                                                                                              (let ([a21668 1])
                                                                                                                 a21668)
                                                                                                              (let ([a21669 2])
                                                                                                                 a21669))
                                                                                                           ])
                                                                                             (> 3 temp21866))
                                                                                         (let ([a21670 (if (> 3 1)
                                                                                                          (let ([a21671 1])
                                                                                                             a21671)
                                                                                                          (let ([a21672 2])
                                                                                                             a21672))
                                                                                                       ])
                                                                                            a21670)
                                                                                         (let ([a21673 2])
                                                                                            a21673))
                                                                                      
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp21857 (let ([temp21870 (read)])
                                                                                            (let ([a21674 (if (if (if (if (let ([temp21873 (read)])
                                                                                                                             (let ([temp21874 (if (let ([temp21876 (if (> 3 1)
                                                                                                                                                                      (let ([a21675 1])
                                                                                                                                                                         a21675)
                                                                                                                                                                      (let ([a21676 2])
                                                                                                                                                                         a21676))
                                                                                                                                                                   ])
                                                                                                                                                     (> 3 temp21876))
                                                                                                                                                 (let ([a21677 (if (> 3 1)
                                                                                                                                                                  (let ([a21678 1])
                                                                                                                                                                     a21678)
                                                                                                                                                                  (let ([a21679 2])
                                                                                                                                                                     a21679))
                                                                                                                                                               ])
                                                                                                                                                    a21677)
                                                                                                                                                 (let ([a21680 2])
                                                                                                                                                    a21680))
                                                                                                                                              ])
                                                                                                                                (> temp21873 temp21874)))
                                                                                                                         (let ([a21681 #t])
                                                                                                                            a21681)
                                                                                                                         (let ([a21682 #f])
                                                                                                                            a21682))
                                                                                                                      
                                                                                                                     (let ([a21683 #t])
                                                                                                                        a21683)
                                                                                                                     (let ([a21684 #f])
                                                                                                                        a21684))
                                                                                                                  
                                                                                                                 (let ([a21685 #t])
                                                                                                                    a21685)
                                                                                                                 (let ([a21686 #f])
                                                                                                                    a21686))
                                                                                                              
                                                                                                             (if (let ([temp21880 (if (> 3 1)
                                                                                                                                     (let ([a21687 1])
                                                                                                                                        a21687)
                                                                                                                                     (let ([a21688 2])
                                                                                                                                        a21688))
                                                                                                                                  ])
                                                                                                                    (> 3 temp21880))
                                                                                                                (let ([a21689 (if (> 3 1)
                                                                                                                                 (let ([a21690 1])
                                                                                                                                    a21690)
                                                                                                                                 (let ([a21691 2])
                                                                                                                                    a21691))
                                                                                                                              ])
                                                                                                                   a21689)
                                                                                                                (let ([a21692 2])
                                                                                                                   a21692))
                                                                                                             
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp21871 (let ([a21693 (if (if (if (if (let ([temp21886 (read)])
                                                                                                                                                 (let ([temp21887 (if (let ([temp21889 (if (> 3 1)
                                                                                                                                                                                          (let ([a21694 1])
                                                                                                                                                                                             a21694)
                                                                                                                                                                                          (let ([a21695 2])
                                                                                                                                                                                             a21695))
                                                                                                                                                                                       ])
                                                                                                                                                                         (> 3 temp21889))
                                                                                                                                                                     (let ([a21696 (if (> 3 1)
                                                                                                                                                                                      (let ([a21697 1])
                                                                                                                                                                                         a21697)
                                                                                                                                                                                      (let ([a21698 2])
                                                                                                                                                                                         a21698))
                                                                                                                                                                                   ])
                                                                                                                                                                        a21696)
                                                                                                                                                                     (let ([a21699 2])
                                                                                                                                                                        a21699))
                                                                                                                                                                  ])
                                                                                                                                                    (> temp21886 temp21887)))
                                                                                                                                             (let ([a21700 #t])
                                                                                                                                                a21700)
                                                                                                                                             (let ([a21701 #f])
                                                                                                                                                a21701))
                                                                                                                                          
                                                                                                                                         (let ([a21702 #t])
                                                                                                                                            a21702)
                                                                                                                                         (let ([a21703 #f])
                                                                                                                                            a21703))
                                                                                                                                      
                                                                                                                                     (let ([a21704 #t])
                                                                                                                                        a21704)
                                                                                                                                     (let ([a21705 #f])
                                                                                                                                        a21705))
                                                                                                                                  
                                                                                                                                 (if (let ([temp21893 (if (> 3 1)
                                                                                                                                                         (let ([a21706 1])
                                                                                                                                                            a21706)
                                                                                                                                                         (let ([a21707 2])
                                                                                                                                                            a21707))
                                                                                                                                                      ])
                                                                                                                                        (> 3 temp21893))
                                                                                                                                    (let ([a21708 (if (> 3 1)
                                                                                                                                                     (let ([a21709 1])
                                                                                                                                                        a21709)
                                                                                                                                                     (let ([a21710 2])
                                                                                                                                                        a21710))
                                                                                                                                                  ])
                                                                                                                                       a21708)
                                                                                                                                    (let ([a21711 2])
                                                                                                                                       a21711))
                                                                                                                                 
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp21884 (let ([a21712 (if (if (if (if (let ([temp21899 (read)])
                                                                                                                                                                     (let ([temp21900 (if (let ([temp21902 (if (> 3 1)
                                                                                                                                                                                                              (let ([a21713 1])
                                                                                                                                                                                                                 a21713)
                                                                                                                                                                                                              (let ([a21714 2])
                                                                                                                                                                                                                 a21714))
                                                                                                                                                                                                           ])
                                                                                                                                                                                             (> 3 temp21902))
                                                                                                                                                                                         (let ([a21715 (if (> 3 1)
                                                                                                                                                                                                          (let ([a21716 1])
                                                                                                                                                                                                             a21716)
                                                                                                                                                                                                          (let ([a21717 2])
                                                                                                                                                                                                             a21717))
                                                                                                                                                                                                       ])
                                                                                                                                                                                            a21715)
                                                                                                                                                                                         (let ([a21718 2])
                                                                                                                                                                                            a21718))
                                                                                                                                                                                      ])
                                                                                                                                                                        (> temp21899 temp21900)))
                                                                                                                                                                 (let ([a21719 #t])
                                                                                                                                                                    a21719)
                                                                                                                                                                 (let ([a21720 #f])
                                                                                                                                                                    a21720))
                                                                                                                                                              
                                                                                                                                                             (let ([a21721 #t])
                                                                                                                                                                a21721)
                                                                                                                                                             (let ([a21722 #f])
                                                                                                                                                                a21722))
                                                                                                                                                          
                                                                                                                                                         (let ([a21723 #t])
                                                                                                                                                            a21723)
                                                                                                                                                         (let ([a21724 #f])
                                                                                                                                                            a21724))
                                                                                                                                                      
                                                                                                                                                     (if (let ([temp21906 (if (> 3 1)
                                                                                                                                                                             (let ([a21725 1])
                                                                                                                                                                                a21725)
                                                                                                                                                                             (let ([a21726 2])
                                                                                                                                                                                a21726))
                                                                                                                                                                          ])
                                                                                                                                                            (> 3 temp21906))
                                                                                                                                                        (let ([a21727 (if (> 3 1)
                                                                                                                                                                         (let ([a21728 1])
                                                                                                                                                                            a21728)
                                                                                                                                                                         (let ([a21729 2])
                                                                                                                                                                            a21729))
                                                                                                                                                                      ])
                                                                                                                                                           a21727)
                                                                                                                                                        (let ([a21730 2])
                                                                                                                                                           a21730))
                                                                                                                                                     
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp21897 (let ([a21731 (if (if (if (if (let ([temp21912 (read)])
                                                                                                                                                                                         (let ([temp21913 (if (let ([temp21915 (if (> 3 1)
                                                                                                                                                                                                                                  (let ([a21732 1])
                                                                                                                                                                                                                                     a21732)
                                                                                                                                                                                                                                  (let ([a21733 2])
                                                                                                                                                                                                                                     a21733))
                                                                                                                                                                                                                               ])
                                                                                                                                                                                                                 (> 3 temp21915))
                                                                                                                                                                                                             (let ([a21734 (if (> 3 1)
                                                                                                                                                                                                                              (let ([a21735 1])
                                                                                                                                                                                                                                 a21735)
                                                                                                                                                                                                                              (let ([a21736 2])
                                                                                                                                                                                                                                 a21736))
                                                                                                                                                                                                                           ])
                                                                                                                                                                                                                a21734)
                                                                                                                                                                                                             (let ([a21737 2])
                                                                                                                                                                                                                a21737))
                                                                                                                                                                                                          ])
                                                                                                                                                                                            (> temp21912 temp21913)))
                                                                                                                                                                                     (let ([a21738 #t])
                                                                                                                                                                                        a21738)
                                                                                                                                                                                     (let ([a21739 #f])
                                                                                                                                                                                        a21739))
                                                                                                                                                                                  
                                                                                                                                                                                 (let ([a21740 #t])
                                                                                                                                                                                    a21740)
                                                                                                                                                                                 (let ([a21741 #f])
                                                                                                                                                                                    a21741))
                                                                                                                                                                              
                                                                                                                                                                             (let ([a21742 #t])
                                                                                                                                                                                a21742)
                                                                                                                                                                             (let ([a21743 #f])
                                                                                                                                                                                a21743))
                                                                                                                                                                          
                                                                                                                                                                         (if (let ([temp21919 (if (> 3 1)
                                                                                                                                                                                                 (let ([a21744 1])
                                                                                                                                                                                                    a21744)
                                                                                                                                                                                                 (let ([a21745 2])
                                                                                                                                                                                                    a21745))
                                                                                                                                                                                              ])
                                                                                                                                                                                (> 3 temp21919))
                                                                                                                                                                            (let ([a21746 (if (> 3 1)
                                                                                                                                                                                             (let ([a21747 1])
                                                                                                                                                                                                a21747)
                                                                                                                                                                                             (let ([a21748 2])
                                                                                                                                                                                                a21748))
                                                                                                                                                                                          ])
                                                                                                                                                                               a21746)
                                                                                                                                                                            (let ([a21749 2])
                                                                                                                                                                               a21749))
                                                                                                                                                                         
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp21910 (let ([a21750 (read)])
                                                                                                                                                                               (let ([temp21923 (let ([a21751 (if (if (if (if (let ([temp21928 (read)])
                                                                                                                                                                                                                                 (let ([temp21929 (if (let ([temp21931 (if (> 3 1)
                                                                                                                                                                                                                                                                          (let ([a21752 1])
                                                                                                                                                                                                                                                                             a21752)
                                                                                                                                                                                                                                                                          (let ([a21753 2])
                                                                                                                                                                                                                                                                             a21753))
                                                                                                                                                                                                                                                                       ])
                                                                                                                                                                                                                                                         (> 3 temp21931))
                                                                                                                                                                                                                                                     (let ([a21754 (if (> 3 1)
                                                                                                                                                                                                                                                                      (let ([a21755 1])
                                                                                                                                                                                                                                                                         a21755)
                                                                                                                                                                                                                                                                      (let ([a21756 2])
                                                                                                                                                                                                                                                                         a21756))
                                                                                                                                                                                                                                                                   ])
                                                                                                                                                                                                                                                        a21754)
                                                                                                                                                                                                                                                     (let ([a21757 2])
                                                                                                                                                                                                                                                        a21757))
                                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                                    (> temp21928 temp21929)))
                                                                                                                                                                                                                             (let ([a21758 #t])
                                                                                                                                                                                                                                a21758)
                                                                                                                                                                                                                             (let ([a21759 #f])
                                                                                                                                                                                                                                a21759))
                                                                                                                                                                                                                          
                                                                                                                                                                                                                         (let ([a21760 #t])
                                                                                                                                                                                                                            a21760)
                                                                                                                                                                                                                         (let ([a21761 #f])
                                                                                                                                                                                                                            a21761))
                                                                                                                                                                                                                      
                                                                                                                                                                                                                     (let ([a21762 #t])
                                                                                                                                                                                                                        a21762)
                                                                                                                                                                                                                     (let ([a21763 #f])
                                                                                                                                                                                                                        a21763))
                                                                                                                                                                                                                  
                                                                                                                                                                                                                 (if (let ([temp21935 (if (> 3 1)
                                                                                                                                                                                                                                         (let ([a21764 1])
                                                                                                                                                                                                                                            a21764)
                                                                                                                                                                                                                                         (let ([a21765 2])
                                                                                                                                                                                                                                            a21765))
                                                                                                                                                                                                                                      ])
                                                                                                                                                                                                                        (> 3 temp21935))
                                                                                                                                                                                                                    (let ([a21766 (if (> 3 1)
                                                                                                                                                                                                                                     (let ([a21767 1])
                                                                                                                                                                                                                                        a21767)
                                                                                                                                                                                                                                     (let ([a21768 2])
                                                                                                                                                                                                                                        a21768))
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       a21766)
                                                                                                                                                                                                                    (let ([a21769 2])
                                                                                                                                                                                                                       a21769))
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp21926 (let ([a21770 (if (if (if (if (let ([temp21941 (read)])
                                                                                                                                                                                                                                                     (let ([temp21942 (if (let ([temp21944 (if (> 3 1)
                                                                                                                                                                                                                                                                                              (let ([a21771 1])
                                                                                                                                                                                                                                                                                                 a21771)
                                                                                                                                                                                                                                                                                              (let ([a21772 2])
                                                                                                                                                                                                                                                                                                 a21772))
                                                                                                                                                                                                                                                                                           ])
                                                                                                                                                                                                                                                                             (> 3 temp21944))
                                                                                                                                                                                                                                                                         (let ([a21773 (if (> 3 1)
                                                                                                                                                                                                                                                                                          (let ([a21774 1])
                                                                                                                                                                                                                                                                                             a21774)
                                                                                                                                                                                                                                                                                          (let ([a21775 2])
                                                                                                                                                                                                                                                                                             a21775))
                                                                                                                                                                                                                                                                                       ])
                                                                                                                                                                                                                                                                            a21773)
                                                                                                                                                                                                                                                                         (let ([a21776 2])
                                                                                                                                                                                                                                                                            a21776))
                                                                                                                                                                                                                                                                      ])
                                                                                                                                                                                                                                                        (> temp21941 temp21942)))
                                                                                                                                                                                                                                                 (let ([a21777 #t])
                                                                                                                                                                                                                                                    a21777)
                                                                                                                                                                                                                                                 (let ([a21778 #f])
                                                                                                                                                                                                                                                    a21778))
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                             (let ([a21779 #t])
                                                                                                                                                                                                                                                a21779)
                                                                                                                                                                                                                                             (let ([a21780 #f])
                                                                                                                                                                                                                                                a21780))
                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                         (let ([a21781 #t])
                                                                                                                                                                                                                                            a21781)
                                                                                                                                                                                                                                         (let ([a21782 #f])
                                                                                                                                                                                                                                            a21782))
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                     (if (let ([temp21948 (if (> 3 1)
                                                                                                                                                                                                                                                             (let ([a21783 1])
                                                                                                                                                                                                                                                                a21783)
                                                                                                                                                                                                                                                             (let ([a21784 2])
                                                                                                                                                                                                                                                                a21784))
                                                                                                                                                                                                                                                          ])
                                                                                                                                                                                                                                            (> 3 temp21948))
                                                                                                                                                                                                                                        (let ([a21785 (if (> 3 1)
                                                                                                                                                                                                                                                         (let ([a21786 1])
                                                                                                                                                                                                                                                            a21786)
                                                                                                                                                                                                                                                         (let ([a21787 2])
                                                                                                                                                                                                                                                            a21787))
                                                                                                                                                                                                                                                      ])
                                                                                                                                                                                                                                           a21785)
                                                                                                                                                                                                                                        (let ([a21788 2])
                                                                                                                                                                                                                                           a21788))
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp21939 a21770])
                                                                                                                                                                                                                          (+ a21751 temp21939)))])
                                                                                                                                                                                                      (+ a21750 temp21926)))])
                                                                                                                                                                                  (+ a21731 temp21923)))])
                                                                                                                                                              (+ a21712 temp21910)))])
                                                                                                                                          (+ a21693 temp21897)))])
                                                                                                                      (+ a21674 temp21884)))])
                                                                                                  (+ temp21870 temp21871))))])
                                                                           (+ a21636 temp21857)))])
                                                       (+ a21617 temp21844)))])
                                   (+ a21598 temp21831)))])
               (+ a21579 temp21818)))))
   )


type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
(let ([x21560 (if (let ([temp21790 (if (let ([temp21792 (if (let ([temp21794 (if (> 3 1)
                                                                                (let ([a21561 1])
                                                                                   a21561)
                                                                                (let ([a21562 2])
                                                                                   a21562))
                                                                             ])
                                                               (> 3 temp21794))
                                                           (let ([a21563 (if (> 3 1)
                                                                            (let ([a21564 1])
                                                                               a21564)
                                                                            (let ([a21565 2])
                                                                               a21565))
                                                                         ])
                                                              a21563)
                                                           (let ([a21566 2])
                                                              a21566))
                                                        ])
                                          (let ([temp21797 (if (let ([temp21799 (if (> 3 1)
                                                                                   (let ([a21567 1])
                                                                                      a21567)
                                                                                   (let ([a21568 2])
                                                                                      a21568))
                                                                                ])
                                                                  (> 3 temp21799))
                                                              (let ([a21569 (if (> 3 1)
                                                                               (let ([a21570 1])
                                                                                  a21570)
                                                                               (let ([a21571 2])
                                                                                  a21571))
                                                                            ])
                                                                 a21569)
                                                              (let ([a21572 2])
                                                                 a21572))
                                                           ])
                                             (>= temp21792 temp21797)))
                                      8
                                      9)
                                   ])
                     (> temp21790 8))
                 #t
                 #f)
              ])
   (if x21560
      (if (let ([temp21803 (if (> 3 1)
                              (let ([a21573 1])
                                 a21573)
                              (let ([a21574 2])
                                 a21574))
                           ])
             (> 3 temp21803))
         (let ([a21575 (if (> 3 1)
                          (let ([a21576 1])
                             a21576)
                          (let ([a21577 2])
                             a21577))
                       ])
            a21575)
         (let ([a21578 2])
            a21578))
      
      (let ([a21579 (if (if (if (if (if (let ([temp21807 (read)])
                                           (let ([temp21808 (if (let ([temp21810 (if (> 3 1)
                                                                                    (let ([a21580 1])
                                                                                       a21580)
                                                                                    (let ([a21581 2])
                                                                                       a21581))
                                                                                 ])
                                                                   (> 3 temp21810))
                                                               (let ([a21582 (if (> 3 1)
                                                                                (let ([a21583 1])
                                                                                   a21583)
                                                                                (let ([a21584 2])
                                                                                   a21584))
                                                                             ])
                                                                  a21582)
                                                               (let ([a21585 2])
                                                                  a21585))
                                                            ])
                                              (> temp21807 temp21808)))
                                       (let ([a21586 #t])
                                          a21586)
                                       (let ([a21587 #f])
                                          a21587))
                                    
                                   (let ([a21588 #t])
                                      a21588)
                                   (let ([a21589 #f])
                                      a21589))
                                
                               (let ([a21590 #t])
                                  a21590)
                               (let ([a21591 #f])
                                  a21591))
                            
                           #t
                           #f)
                        
                       (if (let ([temp21814 (if (> 3 1)
                                               (let ([a21592 1])
                                                  a21592)
                                               (let ([a21593 2])
                                                  a21593))
                                            ])
                              (> 3 temp21814))
                          (let ([a21594 (if (> 3 1)
                                           (let ([a21595 1])
                                              a21595)
                                           (let ([a21596 2])
                                              a21596))
                                        ])
                             a21594)
                          (let ([a21597 2])
                             a21597))
                       
                       2)
                    ])
         (let ([a21598 (if (if (if (if (let ([temp21820 (read)])
                                          (let ([temp21821 (if (let ([temp21823 (if (> 3 1)
                                                                                   (let ([a21599 1])
                                                                                      a21599)
                                                                                   (let ([a21600 2])
                                                                                      a21600))
                                                                                ])
                                                                  (> 3 temp21823))
                                                              (let ([a21601 (if (> 3 1)
                                                                               (let ([a21602 1])
                                                                                  a21602)
                                                                               (let ([a21603 2])
                                                                                  a21603))
                                                                            ])
                                                                 a21601)
                                                              (let ([a21604 2])
                                                                 a21604))
                                                           ])
                                             (> temp21820 temp21821)))
                                      (let ([a21605 #t])
                                         a21605)
                                      (let ([a21606 #f])
                                         a21606))
                                   
                                  (let ([a21607 #t])
                                     a21607)
                                  (let ([a21608 #f])
                                     a21608))
                               
                              (let ([a21609 #t])
                                 a21609)
                              (let ([a21610 #f])
                                 a21610))
                           
                          (if (let ([temp21827 (if (> 3 1)
                                                  (let ([a21611 1])
                                                     a21611)
                                                  (let ([a21612 2])
                                                     a21612))
                                               ])
                                 (> 3 temp21827))
                             (let ([a21613 (if (> 3 1)
                                              (let ([a21614 1])
                                                 a21614)
                                              (let ([a21615 2])
                                                 a21615))
                                           ])
                                a21613)
                             (let ([a21616 2])
                                a21616))
                          
                          2)
                       ])
            (let ([temp21818 (let ([a21617 (if (if (if (if (let ([temp21833 (read)])
                                                              (let ([temp21834 (if (let ([temp21836 (if (> 3 1)
                                                                                                       (let ([a21618 1])
                                                                                                          a21618)
                                                                                                       (let ([a21619 2])
                                                                                                          a21619))
                                                                                                    ])
                                                                                      (> 3 temp21836))
                                                                                  (let ([a21620 (if (> 3 1)
                                                                                                   (let ([a21621 1])
                                                                                                      a21621)
                                                                                                   (let ([a21622 2])
                                                                                                      a21622))
                                                                                                ])
                                                                                     a21620)
                                                                                  (let ([a21623 2])
                                                                                     a21623))
                                                                               ])
                                                                 (> temp21833 temp21834)))
                                                          (let ([a21624 #t])
                                                             a21624)
                                                          (let ([a21625 #f])
                                                             a21625))
                                                       
                                                      (let ([a21626 #t])
                                                         a21626)
                                                      (let ([a21627 #f])
                                                         a21627))
                                                   
                                                  (let ([a21628 #t])
                                                     a21628)
                                                  (let ([a21629 #f])
                                                     a21629))
                                               
                                              (if (let ([temp21840 (if (> 3 1)
                                                                      (let ([a21630 1])
                                                                         a21630)
                                                                      (let ([a21631 2])
                                                                         a21631))
                                                                   ])
                                                     (> 3 temp21840))
                                                 (let ([a21632 (if (> 3 1)
                                                                  (let ([a21633 1])
                                                                     a21633)
                                                                  (let ([a21634 2])
                                                                     a21634))
                                                               ])
                                                    a21632)
                                                 (let ([a21635 2])
                                                    a21635))
                                              
                                              2)
                                           ])
                                (let ([temp21831 (let ([a21636 (if (if (if (if (let ([temp21846 (read)])
                                                                                  (let ([temp21847 (if (let ([temp21849 (if (> 3 1)
                                                                                                                           (let ([a21637 1])
                                                                                                                              a21637)
                                                                                                                           (let ([a21638 2])
                                                                                                                              a21638))
                                                                                                                        ])
                                                                                                          (> 3 temp21849))
                                                                                                      (let ([a21639 (if (> 3 1)
                                                                                                                       (let ([a21640 1])
                                                                                                                          a21640)
                                                                                                                       (let ([a21641 2])
                                                                                                                          a21641))
                                                                                                                    ])
                                                                                                         a21639)
                                                                                                      (let ([a21642 2])
                                                                                                         a21642))
                                                                                                   ])
                                                                                     (> temp21846 temp21847)))
                                                                              (let ([a21643 #t])
                                                                                 a21643)
                                                                              (let ([a21644 #f])
                                                                                 a21644))
                                                                           
                                                                          (let ([a21645 #t])
                                                                             a21645)
                                                                          (let ([a21646 #f])
                                                                             a21646))
                                                                       
                                                                      (let ([a21647 #t])
                                                                         a21647)
                                                                      (let ([a21648 #f])
                                                                         a21648))
                                                                   
                                                                  (if (let ([temp21853 (if (> 3 1)
                                                                                          (let ([a21649 1])
                                                                                             a21649)
                                                                                          (let ([a21650 2])
                                                                                             a21650))
                                                                                       ])
                                                                         (> 3 temp21853))
                                                                     (let ([a21651 (if (> 3 1)
                                                                                      (let ([a21652 1])
                                                                                         a21652)
                                                                                      (let ([a21653 2])
                                                                                         a21653))
                                                                                   ])
                                                                        a21651)
                                                                     (let ([a21654 2])
                                                                        a21654))
                                                                  
                                                                  2)
                                                               ])
                                                    (let ([temp21844 (let ([a21655 (if (if (if (if (let ([temp21859 (read)])
                                                                                                      (let ([temp21860 (if (let ([temp21862 (if (> 3 1)
                                                                                                                                               (let ([a21656 1])
                                                                                                                                                  a21656)
                                                                                                                                               (let ([a21657 2])
                                                                                                                                                  a21657))
                                                                                                                                            ])
                                                                                                                              (> 3 temp21862))
                                                                                                                          (let ([a21658 (if (> 3 1)
                                                                                                                                           (let ([a21659 1])
                                                                                                                                              a21659)
                                                                                                                                           (let ([a21660 2])
                                                                                                                                              a21660))
                                                                                                                                        ])
                                                                                                                             a21658)
                                                                                                                          (let ([a21661 2])
                                                                                                                             a21661))
                                                                                                                       ])
                                                                                                         (> temp21859 temp21860)))
                                                                                                  (let ([a21662 #t])
                                                                                                     a21662)
                                                                                                  (let ([a21663 #f])
                                                                                                     a21663))
                                                                                               
                                                                                              (let ([a21664 #t])
                                                                                                 a21664)
                                                                                              (let ([a21665 #f])
                                                                                                 a21665))
                                                                                           
                                                                                          (let ([a21666 #t])
                                                                                             a21666)
                                                                                          (let ([a21667 #f])
                                                                                             a21667))
                                                                                       
                                                                                      (if (let ([temp21866 (if (> 3 1)
                                                                                                              (let ([a21668 1])
                                                                                                                 a21668)
                                                                                                              (let ([a21669 2])
                                                                                                                 a21669))
                                                                                                           ])
                                                                                             (> 3 temp21866))
                                                                                         (let ([a21670 (if (> 3 1)
                                                                                                          (let ([a21671 1])
                                                                                                             a21671)
                                                                                                          (let ([a21672 2])
                                                                                                             a21672))
                                                                                                       ])
                                                                                            a21670)
                                                                                         (let ([a21673 2])
                                                                                            a21673))
                                                                                      
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp21857 (let ([temp21870 (read)])
                                                                                            (let ([a21674 (if (if (if (if (let ([temp21873 (read)])
                                                                                                                             (let ([temp21874 (if (let ([temp21876 (if (> 3 1)
                                                                                                                                                                      (let ([a21675 1])
                                                                                                                                                                         a21675)
                                                                                                                                                                      (let ([a21676 2])
                                                                                                                                                                         a21676))
                                                                                                                                                                   ])
                                                                                                                                                     (> 3 temp21876))
                                                                                                                                                 (let ([a21677 (if (> 3 1)
                                                                                                                                                                  (let ([a21678 1])
                                                                                                                                                                     a21678)
                                                                                                                                                                  (let ([a21679 2])
                                                                                                                                                                     a21679))
                                                                                                                                                               ])
                                                                                                                                                    a21677)
                                                                                                                                                 (let ([a21680 2])
                                                                                                                                                    a21680))
                                                                                                                                              ])
                                                                                                                                (> temp21873 temp21874)))
                                                                                                                         (let ([a21681 #t])
                                                                                                                            a21681)
                                                                                                                         (let ([a21682 #f])
                                                                                                                            a21682))
                                                                                                                      
                                                                                                                     (let ([a21683 #t])
                                                                                                                        a21683)
                                                                                                                     (let ([a21684 #f])
                                                                                                                        a21684))
                                                                                                                  
                                                                                                                 (let ([a21685 #t])
                                                                                                                    a21685)
                                                                                                                 (let ([a21686 #f])
                                                                                                                    a21686))
                                                                                                              
                                                                                                             (if (let ([temp21880 (if (> 3 1)
                                                                                                                                     (let ([a21687 1])
                                                                                                                                        a21687)
                                                                                                                                     (let ([a21688 2])
                                                                                                                                        a21688))
                                                                                                                                  ])
                                                                                                                    (> 3 temp21880))
                                                                                                                (let ([a21689 (if (> 3 1)
                                                                                                                                 (let ([a21690 1])
                                                                                                                                    a21690)
                                                                                                                                 (let ([a21691 2])
                                                                                                                                    a21691))
                                                                                                                              ])
                                                                                                                   a21689)
                                                                                                                (let ([a21692 2])
                                                                                                                   a21692))
                                                                                                             
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp21871 (let ([a21693 (if (if (if (if (let ([temp21886 (read)])
                                                                                                                                                 (let ([temp21887 (if (let ([temp21889 (if (> 3 1)
                                                                                                                                                                                          (let ([a21694 1])
                                                                                                                                                                                             a21694)
                                                                                                                                                                                          (let ([a21695 2])
                                                                                                                                                                                             a21695))
                                                                                                                                                                                       ])
                                                                                                                                                                         (> 3 temp21889))
                                                                                                                                                                     (let ([a21696 (if (> 3 1)
                                                                                                                                                                                      (let ([a21697 1])
                                                                                                                                                                                         a21697)
                                                                                                                                                                                      (let ([a21698 2])
                                                                                                                                                                                         a21698))
                                                                                                                                                                                   ])
                                                                                                                                                                        a21696)
                                                                                                                                                                     (let ([a21699 2])
                                                                                                                                                                        a21699))
                                                                                                                                                                  ])
                                                                                                                                                    (> temp21886 temp21887)))
                                                                                                                                             (let ([a21700 #t])
                                                                                                                                                a21700)
                                                                                                                                             (let ([a21701 #f])
                                                                                                                                                a21701))
                                                                                                                                          
                                                                                                                                         (let ([a21702 #t])
                                                                                                                                            a21702)
                                                                                                                                         (let ([a21703 #f])
                                                                                                                                            a21703))
                                                                                                                                      
                                                                                                                                     (let ([a21704 #t])
                                                                                                                                        a21704)
                                                                                                                                     (let ([a21705 #f])
                                                                                                                                        a21705))
                                                                                                                                  
                                                                                                                                 (if (let ([temp21893 (if (> 3 1)
                                                                                                                                                         (let ([a21706 1])
                                                                                                                                                            a21706)
                                                                                                                                                         (let ([a21707 2])
                                                                                                                                                            a21707))
                                                                                                                                                      ])
                                                                                                                                        (> 3 temp21893))
                                                                                                                                    (let ([a21708 (if (> 3 1)
                                                                                                                                                     (let ([a21709 1])
                                                                                                                                                        a21709)
                                                                                                                                                     (let ([a21710 2])
                                                                                                                                                        a21710))
                                                                                                                                                  ])
                                                                                                                                       a21708)
                                                                                                                                    (let ([a21711 2])
                                                                                                                                       a21711))
                                                                                                                                 
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp21884 (let ([a21712 (if (if (if (if (let ([temp21899 (read)])
                                                                                                                                                                     (let ([temp21900 (if (let ([temp21902 (if (> 3 1)
                                                                                                                                                                                                              (let ([a21713 1])
                                                                                                                                                                                                                 a21713)
                                                                                                                                                                                                              (let ([a21714 2])
                                                                                                                                                                                                                 a21714))
                                                                                                                                                                                                           ])
                                                                                                                                                                                             (> 3 temp21902))
                                                                                                                                                                                         (let ([a21715 (if (> 3 1)
                                                                                                                                                                                                          (let ([a21716 1])
                                                                                                                                                                                                             a21716)
                                                                                                                                                                                                          (let ([a21717 2])
                                                                                                                                                                                                             a21717))
                                                                                                                                                                                                       ])
                                                                                                                                                                                            a21715)
                                                                                                                                                                                         (let ([a21718 2])
                                                                                                                                                                                            a21718))
                                                                                                                                                                                      ])
                                                                                                                                                                        (> temp21899 temp21900)))
                                                                                                                                                                 (let ([a21719 #t])
                                                                                                                                                                    a21719)
                                                                                                                                                                 (let ([a21720 #f])
                                                                                                                                                                    a21720))
                                                                                                                                                              
                                                                                                                                                             (let ([a21721 #t])
                                                                                                                                                                a21721)
                                                                                                                                                             (let ([a21722 #f])
                                                                                                                                                                a21722))
                                                                                                                                                          
                                                                                                                                                         (let ([a21723 #t])
                                                                                                                                                            a21723)
                                                                                                                                                         (let ([a21724 #f])
                                                                                                                                                            a21724))
                                                                                                                                                      
                                                                                                                                                     (if (let ([temp21906 (if (> 3 1)
                                                                                                                                                                             (let ([a21725 1])
                                                                                                                                                                                a21725)
                                                                                                                                                                             (let ([a21726 2])
                                                                                                                                                                                a21726))
                                                                                                                                                                          ])
                                                                                                                                                            (> 3 temp21906))
                                                                                                                                                        (let ([a21727 (if (> 3 1)
                                                                                                                                                                         (let ([a21728 1])
                                                                                                                                                                            a21728)
                                                                                                                                                                         (let ([a21729 2])
                                                                                                                                                                            a21729))
                                                                                                                                                                      ])
                                                                                                                                                           a21727)
                                                                                                                                                        (let ([a21730 2])
                                                                                                                                                           a21730))
                                                                                                                                                     
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp21897 (let ([a21731 (if (if (if (if (let ([temp21912 (read)])
                                                                                                                                                                                         (let ([temp21913 (if (let ([temp21915 (if (> 3 1)
                                                                                                                                                                                                                                  (let ([a21732 1])
                                                                                                                                                                                                                                     a21732)
                                                                                                                                                                                                                                  (let ([a21733 2])
                                                                                                                                                                                                                                     a21733))
                                                                                                                                                                                                                               ])
                                                                                                                                                                                                                 (> 3 temp21915))
                                                                                                                                                                                                             (let ([a21734 (if (> 3 1)
                                                                                                                                                                                                                              (let ([a21735 1])
                                                                                                                                                                                                                                 a21735)
                                                                                                                                                                                                                              (let ([a21736 2])
                                                                                                                                                                                                                                 a21736))
                                                                                                                                                                                                                           ])
                                                                                                                                                                                                                a21734)
                                                                                                                                                                                                             (let ([a21737 2])
                                                                                                                                                                                                                a21737))
                                                                                                                                                                                                          ])
                                                                                                                                                                                            (> temp21912 temp21913)))
                                                                                                                                                                                     (let ([a21738 #t])
                                                                                                                                                                                        a21738)
                                                                                                                                                                                     (let ([a21739 #f])
                                                                                                                                                                                        a21739))
                                                                                                                                                                                  
                                                                                                                                                                                 (let ([a21740 #t])
                                                                                                                                                                                    a21740)
                                                                                                                                                                                 (let ([a21741 #f])
                                                                                                                                                                                    a21741))
                                                                                                                                                                              
                                                                                                                                                                             (let ([a21742 #t])
                                                                                                                                                                                a21742)
                                                                                                                                                                             (let ([a21743 #f])
                                                                                                                                                                                a21743))
                                                                                                                                                                          
                                                                                                                                                                         (if (let ([temp21919 (if (> 3 1)
                                                                                                                                                                                                 (let ([a21744 1])
                                                                                                                                                                                                    a21744)
                                                                                                                                                                                                 (let ([a21745 2])
                                                                                                                                                                                                    a21745))
                                                                                                                                                                                              ])
                                                                                                                                                                                (> 3 temp21919))
                                                                                                                                                                            (let ([a21746 (if (> 3 1)
                                                                                                                                                                                             (let ([a21747 1])
                                                                                                                                                                                                a21747)
                                                                                                                                                                                             (let ([a21748 2])
                                                                                                                                                                                                a21748))
                                                                                                                                                                                          ])
                                                                                                                                                                               a21746)
                                                                                                                                                                            (let ([a21749 2])
                                                                                                                                                                               a21749))
                                                                                                                                                                         
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp21910 (let ([a21750 (read)])
                                                                                                                                                                               (let ([temp21923 (let ([a21751 (if (if (if (if (let ([temp21928 (read)])
                                                                                                                                                                                                                                 (let ([temp21929 (if (let ([temp21931 (if (> 3 1)
                                                                                                                                                                                                                                                                          (let ([a21752 1])
                                                                                                                                                                                                                                                                             a21752)
                                                                                                                                                                                                                                                                          (let ([a21753 2])
                                                                                                                                                                                                                                                                             a21753))
                                                                                                                                                                                                                                                                       ])
                                                                                                                                                                                                                                                         (> 3 temp21931))
                                                                                                                                                                                                                                                     (let ([a21754 (if (> 3 1)
                                                                                                                                                                                                                                                                      (let ([a21755 1])
                                                                                                                                                                                                                                                                         a21755)
                                                                                                                                                                                                                                                                      (let ([a21756 2])
                                                                                                                                                                                                                                                                         a21756))
                                                                                                                                                                                                                                                                   ])
                                                                                                                                                                                                                                                        a21754)
                                                                                                                                                                                                                                                     (let ([a21757 2])
                                                                                                                                                                                                                                                        a21757))
                                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                                    (> temp21928 temp21929)))
                                                                                                                                                                                                                             (let ([a21758 #t])
                                                                                                                                                                                                                                a21758)
                                                                                                                                                                                                                             (let ([a21759 #f])
                                                                                                                                                                                                                                a21759))
                                                                                                                                                                                                                          
                                                                                                                                                                                                                         (let ([a21760 #t])
                                                                                                                                                                                                                            a21760)
                                                                                                                                                                                                                         (let ([a21761 #f])
                                                                                                                                                                                                                            a21761))
                                                                                                                                                                                                                      
                                                                                                                                                                                                                     (let ([a21762 #t])
                                                                                                                                                                                                                        a21762)
                                                                                                                                                                                                                     (let ([a21763 #f])
                                                                                                                                                                                                                        a21763))
                                                                                                                                                                                                                  
                                                                                                                                                                                                                 (if (let ([temp21935 (if (> 3 1)
                                                                                                                                                                                                                                         (let ([a21764 1])
                                                                                                                                                                                                                                            a21764)
                                                                                                                                                                                                                                         (let ([a21765 2])
                                                                                                                                                                                                                                            a21765))
                                                                                                                                                                                                                                      ])
                                                                                                                                                                                                                        (> 3 temp21935))
                                                                                                                                                                                                                    (let ([a21766 (if (> 3 1)
                                                                                                                                                                                                                                     (let ([a21767 1])
                                                                                                                                                                                                                                        a21767)
                                                                                                                                                                                                                                     (let ([a21768 2])
                                                                                                                                                                                                                                        a21768))
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       a21766)
                                                                                                                                                                                                                    (let ([a21769 2])
                                                                                                                                                                                                                       a21769))
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp21926 (let ([a21770 (if (if (if (if (let ([temp21941 (read)])
                                                                                                                                                                                                                                                     (let ([temp21942 (if (let ([temp21944 (if (> 3 1)
                                                                                                                                                                                                                                                                                              (let ([a21771 1])
                                                                                                                                                                                                                                                                                                 a21771)
                                                                                                                                                                                                                                                                                              (let ([a21772 2])
                                                                                                                                                                                                                                                                                                 a21772))
                                                                                                                                                                                                                                                                                           ])
                                                                                                                                                                                                                                                                             (> 3 temp21944))
                                                                                                                                                                                                                                                                         (let ([a21773 (if (> 3 1)
                                                                                                                                                                                                                                                                                          (let ([a21774 1])
                                                                                                                                                                                                                                                                                             a21774)
                                                                                                                                                                                                                                                                                          (let ([a21775 2])
                                                                                                                                                                                                                                                                                             a21775))
                                                                                                                                                                                                                                                                                       ])
                                                                                                                                                                                                                                                                            a21773)
                                                                                                                                                                                                                                                                         (let ([a21776 2])
                                                                                                                                                                                                                                                                            a21776))
                                                                                                                                                                                                                                                                      ])
                                                                                                                                                                                                                                                        (> temp21941 temp21942)))
                                                                                                                                                                                                                                                 (let ([a21777 #t])
                                                                                                                                                                                                                                                    a21777)
                                                                                                                                                                                                                                                 (let ([a21778 #f])
                                                                                                                                                                                                                                                    a21778))
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                             (let ([a21779 #t])
                                                                                                                                                                                                                                                a21779)
                                                                                                                                                                                                                                             (let ([a21780 #f])
                                                                                                                                                                                                                                                a21780))
                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                         (let ([a21781 #t])
                                                                                                                                                                                                                                            a21781)
                                                                                                                                                                                                                                         (let ([a21782 #f])
                                                                                                                                                                                                                                            a21782))
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                     (if (let ([temp21948 (if (> 3 1)
                                                                                                                                                                                                                                                             (let ([a21783 1])
                                                                                                                                                                                                                                                                a21783)
                                                                                                                                                                                                                                                             (let ([a21784 2])
                                                                                                                                                                                                                                                                a21784))
                                                                                                                                                                                                                                                          ])
                                                                                                                                                                                                                                            (> 3 temp21948))
                                                                                                                                                                                                                                        (let ([a21785 (if (> 3 1)
                                                                                                                                                                                                                                                         (let ([a21786 1])
                                                                                                                                                                                                                                                            a21786)
                                                                                                                                                                                                                                                         (let ([a21787 2])
                                                                                                                                                                                                                                                            a21787))
                                                                                                                                                                                                                                                      ])
                                                                                                                                                                                                                                           a21785)
                                                                                                                                                                                                                                        (let ([a21788 2])
                                                                                                                                                                                                                                           a21788))
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp21939 a21770])
                                                                                                                                                                                                                          (+ a21751 temp21939)))])
                                                                                                                                                                                                      (+ a21750 temp21926)))])
                                                                                                                                                                                  (+ a21731 temp21923)))])
                                                                                                                                                              (+ a21712 temp21910)))])
                                                                                                                                          (+ a21693 temp21897)))])
                                                                                                                      (+ a21674 temp21884)))])
                                                                                                  (+ temp21870 temp21871))))])
                                                                           (+ a21636 temp21857)))])
                                                       (+ a21617 temp21844)))])
                                   (+ a21598 temp21831)))])
               (+ a21579 temp21818)))))
   )


output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: explicate control @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
label21954:
    if (> 3 1)
       goto label21952;
    else
       goto label21953;
label21955:
    a21578 = 2;
    return a21578;
label21952:
    a21576 = 1;
    a21575 = a21576;
    goto label21951;
label21953:
    a21577 = 2;
    a21575 = a21577;
    goto label21951;
label21951:
    return a21575;
label21970:
    a21781 = #t;
    if (eq? a21781 #t)
       goto label21968;
    else
       goto label21969;
label21971:
    a21782 = #f;
    if (eq? a21782 #t)
       goto label21968;
    else
       goto label21969;
label21968:
    if (> 3 1)
       goto label21966;
    else
       goto label21967;
label21969:
    a21770 = 2;
    goto label21959;
label21966:
    a21783 = 1;
    temp21948 = a21783;
    goto label21965;
label21967:
    a21784 = 2;
    temp21948 = a21784;
    goto label21965;
label21964:
    a21788 = 2;
    a21770 = a21788;
    goto label21959;
label21965:
    if (> 3 temp21948)
       goto label21963;
    else
       goto label21964;
label21962:
    a21787 = 2;
    a21785 = a21787;
    goto label21960;
label21963:
    if (> 3 1)
       goto label21961;
    else
       goto label21962;
label21960:
    a21770 = a21785;
    goto label21959;
label21961:
    a21786 = 1;
    a21785 = a21786;
    goto label21960;
label21958:
    a21574 = 2;
    temp21803 = a21574;
    goto label21956;
label21959:
    temp21939 = a21770;
    temp21926 = (+ a21751 temp21939);
    temp21923 = (+ a21750 temp21926);
    temp21910 = (+ a21731 temp21923);
    temp21897 = (+ a21712 temp21910);
    temp21884 = (+ a21693 temp21897);
    temp21871 = (+ a21674 temp21884);
    temp21857 = (+ temp21870 temp21871);
    temp21844 = (+ a21636 temp21857);
    temp21831 = (+ a21617 temp21844);
    temp21818 = (+ a21598 temp21831);
    return (+ a21579 temp21818);
label21956:
    if (> 3 temp21803)
       goto label21954;
    else
       goto label21955;
label21957:
    a21573 = 1;
    temp21803 = a21573;
    goto label21956;
label22244:
    a21581 = 2;
    temp21810 = a21581;
    goto label22242;
label22245:
    if (> 3 1)
       goto label21957;
    else
       goto label21958;
label22246:
    temp21807 = (read);
    if (> 3 1)
       goto label22243;
    else
       goto label22244;
label22247:
    if (eq? x21560 #t)
       goto label22245;
    else
       goto label22246;
label22248:
    x21560 = #t;
    goto label22247;
label22249:
    x21560 = #f;
    goto label22247;
label22250:
    if (> temp21790 8)
       goto label22248;
    else
       goto label22249;
label22251:
    temp21790 = 8;
    goto label22250;
label22252:
    temp21790 = 9;
    goto label22250;
label22253:
    if (>= temp21792 temp21797)
       goto label22251;
    else
       goto label22252;
label22254:
    temp21797 = a21569;
    goto label22253;
label22255:
    a21570 = 1;
    a21569 = a21570;
    goto label22254;
label22256:
    a21571 = 2;
    a21569 = a21571;
    goto label22254;
label22257:
    if (> 3 1)
       goto label22255;
    else
       goto label22256;
label22258:
    a21572 = 2;
    temp21797 = a21572;
    goto label22253;
label22259:
    if (> 3 temp21799)
       goto label22257;
    else
       goto label22258;
label22228:
    if (> 3 1)
       goto label22226;
    else
       goto label22227;
label22229:
    a21579 = 2;
    goto label22219;
label22230:
    a21590 = #t;
    if (eq? a21590 #t)
       goto label22228;
    else
       goto label22229;
label22231:
    a21591 = #f;
    if (eq? a21591 #t)
       goto label22228;
    else
       goto label22229;
label22232:
    a21588 = #t;
    if (eq? a21588 #t)
       goto label22230;
    else
       goto label22231;
label22233:
    a21589 = #f;
    if (eq? a21589 #t)
       goto label22230;
    else
       goto label22231;
label22234:
    a21586 = #t;
    if (eq? a21586 #t)
       goto label22232;
    else
       goto label22233;
label22235:
    a21587 = #f;
    if (eq? a21587 #t)
       goto label22232;
    else
       goto label22233;
label22236:
    if (> temp21807 temp21808)
       goto label22234;
    else
       goto label22235;
label22237:
    temp21808 = a21582;
    goto label22236;
label22238:
    a21583 = 1;
    a21582 = a21583;
    goto label22237;
label22239:
    a21584 = 2;
    a21582 = a21584;
    goto label22237;
label22240:
    if (> 3 1)
       goto label22238;
    else
       goto label22239;
label22241:
    a21585 = 2;
    temp21808 = a21585;
    goto label22236;
label22242:
    if (> 3 temp21810)
       goto label22240;
    else
       goto label22241;
label22243:
    a21580 = 1;
    temp21810 = a21580;
    goto label22242;
label22260:
    a21567 = 1;
    temp21799 = a21567;
    goto label22259;
label22261:
    a21568 = 2;
    temp21799 = a21568;
    goto label22259;
label22262:
    if (> 3 1)
       goto label22260;
    else
       goto label22261;
label22263:
    temp21792 = a21563;
    goto label22262;
label22264:
    a21564 = 1;
    a21563 = a21564;
    goto label22263;
label22265:
    a21565 = 2;
    a21563 = a21565;
    goto label22263;
label22266:
    if (> 3 1)
       goto label22264;
    else
       goto label22265;
label22267:
    a21566 = 2;
    temp21792 = a21566;
    goto label22262;
label22268:
    if (> 3 temp21794)
       goto label22266;
    else
       goto label22267;
label22269:
    a21561 = 1;
    temp21794 = a21561;
    goto label22268;
label22270:
    a21562 = 2;
    temp21794 = a21562;
    goto label22268;
label22179:
    a21629 = #f;
    if (eq? a21629 #t)
       goto label22176;
    else
       goto label22177;
label22178:
    a21628 = #t;
    if (eq? a21628 #t)
       goto label22176;
    else
       goto label22177;
label22177:
    a21617 = 2;
    goto label22167;
label22176:
    if (> 3 1)
       goto label22174;
    else
       goto label22175;
label22175:
    a21631 = 2;
    temp21840 = a21631;
    goto label22173;
label22174:
    a21630 = 1;
    temp21840 = a21630;
    goto label22173;
label22173:
    if (> 3 temp21840)
       goto label22171;
    else
       goto label22172;
label22172:
    a21635 = 2;
    a21617 = a21635;
    goto label22167;
label22171:
    if (> 3 1)
       goto label22169;
    else
       goto label22170;
label22170:
    a21634 = 2;
    a21632 = a21634;
    goto label22168;
label22169:
    a21633 = 1;
    a21632 = a21633;
    goto label22168;
label22168:
    a21617 = a21632;
    goto label22167;
label22167:
    temp21846 = (read);
    if (> 3 1)
       goto label22165;
    else
       goto label22166;
label22166:
    a21638 = 2;
    temp21849 = a21638;
    goto label22164;
label22165:
    a21637 = 1;
    temp21849 = a21637;
    goto label22164;
label22164:
    if (> 3 temp21849)
       goto label22162;
    else
       goto label22163;
label22195:
    a21614 = 1;
    a21613 = a21614;
    goto label22194;
label22194:
    a21598 = a21613;
    goto label22193;
label22193:
    temp21833 = (read);
    if (> 3 1)
       goto label22191;
    else
       goto label22192;
label22192:
    a21619 = 2;
    temp21836 = a21619;
    goto label22190;
label22191:
    a21618 = 1;
    temp21836 = a21618;
    goto label22190;
label22190:
    if (> 3 temp21836)
       goto label22188;
    else
       goto label22189;
label22189:
    a21623 = 2;
    temp21834 = a21623;
    goto label22184;
label22188:
    if (> 3 1)
       goto label22186;
    else
       goto label22187;
label22187:
    a21622 = 2;
    a21620 = a21622;
    goto label22185;
label22186:
    a21621 = 1;
    a21620 = a21621;
    goto label22185;
label22185:
    temp21834 = a21620;
    goto label22184;
label22184:
    if (> temp21833 temp21834)
       goto label22182;
    else
       goto label22183;
label22183:
    a21625 = #f;
    if (eq? a21625 #t)
       goto label22180;
    else
       goto label22181;
label22182:
    a21624 = #t;
    if (eq? a21624 #t)
       goto label22180;
    else
       goto label22181;
label22181:
    a21627 = #f;
    if (eq? a21627 #t)
       goto label22178;
    else
       goto label22179;
label22180:
    a21626 = #t;
    if (eq? a21626 #t)
       goto label22178;
    else
       goto label22179;
label22211:
    temp21821 = a21601;
    goto label22210;
label22210:
    if (> temp21820 temp21821)
       goto label22208;
    else
       goto label22209;
label22209:
    a21606 = #f;
    if (eq? a21606 #t)
       goto label22206;
    else
       goto label22207;
label22208:
    a21605 = #t;
    if (eq? a21605 #t)
       goto label22206;
    else
       goto label22207;
label22207:
    a21608 = #f;
    if (eq? a21608 #t)
       goto label22204;
    else
       goto label22205;
label22206:
    a21607 = #t;
    if (eq? a21607 #t)
       goto label22204;
    else
       goto label22205;
label22205:
    a21610 = #f;
    if (eq? a21610 #t)
       goto label22202;
    else
       goto label22203;
label22204:
    a21609 = #t;
    if (eq? a21609 #t)
       goto label22202;
    else
       goto label22203;
label22203:
    a21598 = 2;
    goto label22193;
label22202:
    if (> 3 1)
       goto label22200;
    else
       goto label22201;
label22201:
    a21612 = 2;
    temp21827 = a21612;
    goto label22199;
label22200:
    a21611 = 1;
    temp21827 = a21611;
    goto label22199;
label22199:
    if (> 3 temp21827)
       goto label22197;
    else
       goto label22198;
label22198:
    a21616 = 2;
    a21598 = a21616;
    goto label22193;
label22197:
    if (> 3 1)
       goto label22195;
    else
       goto label22196;
label22196:
    a21615 = 2;
    a21613 = a21615;
    goto label22194;
label22227:
    a21593 = 2;
    temp21814 = a21593;
    goto label22225;
label22226:
    a21592 = 1;
    temp21814 = a21592;
    goto label22225;
label22225:
    if (> 3 temp21814)
       goto label22223;
    else
       goto label22224;
label22224:
    a21597 = 2;
    a21579 = a21597;
    goto label22219;
label22223:
    if (> 3 1)
       goto label22221;
    else
       goto label22222;
label22222:
    a21596 = 2;
    a21594 = a21596;
    goto label22220;
label22221:
    a21595 = 1;
    a21594 = a21595;
    goto label22220;
label22220:
    a21579 = a21594;
    goto label22219;
label22219:
    temp21820 = (read);
    if (> 3 1)
       goto label22217;
    else
       goto label22218;
label22218:
    a21600 = 2;
    temp21823 = a21600;
    goto label22216;
label22217:
    a21599 = 1;
    temp21823 = a21599;
    goto label22216;
label22216:
    if (> 3 temp21823)
       goto label22214;
    else
       goto label22215;
label22215:
    a21604 = 2;
    temp21821 = a21604;
    goto label22210;
label22214:
    if (> 3 1)
       goto label22212;
    else
       goto label22213;
label22213:
    a21603 = 2;
    a21601 = a21603;
    goto label22211;
label22212:
    a21602 = 1;
    a21601 = a21602;
    goto label22211;
label22115:
    temp21870 = (read);
    temp21873 = (read);
    if (> 3 1)
       goto label22113;
    else
       goto label22114;
label22114:
    a21676 = 2;
    temp21876 = a21676;
    goto label22112;
label22113:
    a21675 = 1;
    temp21876 = a21675;
    goto label22112;
label22112:
    if (> 3 temp21876)
       goto label22110;
    else
       goto label22111;
label22111:
    a21680 = 2;
    temp21874 = a21680;
    goto label22106;
label22110:
    if (> 3 1)
       goto label22108;
    else
       goto label22109;
label22109:
    a21679 = 2;
    a21677 = a21679;
    goto label22107;
label22108:
    a21678 = 1;
    a21677 = a21678;
    goto label22107;
label22107:
    temp21874 = a21677;
    goto label22106;
label22106:
    if (> temp21873 temp21874)
       goto label22104;
    else
       goto label22105;
label22105:
    a21682 = #f;
    if (eq? a21682 #t)
       goto label22102;
    else
       goto label22103;
label22104:
    a21681 = #t;
    if (eq? a21681 #t)
       goto label22102;
    else
       goto label22103;
label22103:
    a21684 = #f;
    if (eq? a21684 #t)
       goto label22100;
    else
       goto label22101;
label22102:
    a21683 = #t;
    if (eq? a21683 #t)
       goto label22100;
    else
       goto label22101;
label22101:
    a21686 = #f;
    if (eq? a21686 #t)
       goto label22098;
    else
       goto label22099;
label22100:
    a21685 = #t;
    if (eq? a21685 #t)
       goto label22098;
    else
       goto label22099;
label22131:
    a21663 = #f;
    if (eq? a21663 #t)
       goto label22128;
    else
       goto label22129;
label22130:
    a21662 = #t;
    if (eq? a21662 #t)
       goto label22128;
    else
       goto label22129;
label22129:
    a21665 = #f;
    if (eq? a21665 #t)
       goto label22126;
    else
       goto label22127;
label22128:
    a21664 = #t;
    if (eq? a21664 #t)
       goto label22126;
    else
       goto label22127;
label22127:
    a21667 = #f;
    if (eq? a21667 #t)
       goto label22124;
    else
       goto label22125;
label22126:
    a21666 = #t;
    if (eq? a21666 #t)
       goto label22124;
    else
       goto label22125;
label22125:
    a21655 = 2;
    goto label22115;
label22124:
    if (> 3 1)
       goto label22122;
    else
       goto label22123;
label22123:
    a21669 = 2;
    temp21866 = a21669;
    goto label22121;
label22122:
    a21668 = 1;
    temp21866 = a21668;
    goto label22121;
label22121:
    if (> 3 temp21866)
       goto label22119;
    else
       goto label22120;
label22120:
    a21673 = 2;
    a21655 = a21673;
    goto label22115;
label22119:
    if (> 3 1)
       goto label22117;
    else
       goto label22118;
label22118:
    a21672 = 2;
    a21670 = a21672;
    goto label22116;
label22117:
    a21671 = 1;
    a21670 = a21671;
    goto label22116;
label22116:
    a21655 = a21670;
    goto label22115;
label22147:
    if (> 3 temp21853)
       goto label22145;
    else
       goto label22146;
label22146:
    a21654 = 2;
    a21636 = a21654;
    goto label22141;
label22145:
    if (> 3 1)
       goto label22143;
    else
       goto label22144;
label22144:
    a21653 = 2;
    a21651 = a21653;
    goto label22142;
label22143:
    a21652 = 1;
    a21651 = a21652;
    goto label22142;
label22142:
    a21636 = a21651;
    goto label22141;
label22141:
    temp21859 = (read);
    if (> 3 1)
       goto label22139;
    else
       goto label22140;
label22140:
    a21657 = 2;
    temp21862 = a21657;
    goto label22138;
label22139:
    a21656 = 1;
    temp21862 = a21656;
    goto label22138;
label22138:
    if (> 3 temp21862)
       goto label22136;
    else
       goto label22137;
label22137:
    a21661 = 2;
    temp21860 = a21661;
    goto label22132;
label22136:
    if (> 3 1)
       goto label22134;
    else
       goto label22135;
label22135:
    a21660 = 2;
    a21658 = a21660;
    goto label22133;
label22134:
    a21659 = 1;
    a21658 = a21659;
    goto label22133;
label22133:
    temp21860 = a21658;
    goto label22132;
label22132:
    if (> temp21859 temp21860)
       goto label22130;
    else
       goto label22131;
label22163:
    a21642 = 2;
    temp21847 = a21642;
    goto label22158;
label22162:
    if (> 3 1)
       goto label22160;
    else
       goto label22161;
label22161:
    a21641 = 2;
    a21639 = a21641;
    goto label22159;
label22160:
    a21640 = 1;
    a21639 = a21640;
    goto label22159;
label22159:
    temp21847 = a21639;
    goto label22158;
label22158:
    if (> temp21846 temp21847)
       goto label22156;
    else
       goto label22157;
label22157:
    a21644 = #f;
    if (eq? a21644 #t)
       goto label22154;
    else
       goto label22155;
label22156:
    a21643 = #t;
    if (eq? a21643 #t)
       goto label22154;
    else
       goto label22155;
label22155:
    a21646 = #f;
    if (eq? a21646 #t)
       goto label22152;
    else
       goto label22153;
label22154:
    a21645 = #t;
    if (eq? a21645 #t)
       goto label22152;
    else
       goto label22153;
label22153:
    a21648 = #f;
    if (eq? a21648 #t)
       goto label22150;
    else
       goto label22151;
label22152:
    a21647 = #t;
    if (eq? a21647 #t)
       goto label22150;
    else
       goto label22151;
label22151:
    a21636 = 2;
    goto label22141;
label22150:
    if (> 3 1)
       goto label22148;
    else
       goto label22149;
label22149:
    a21650 = 2;
    temp21853 = a21650;
    goto label22147;
label22148:
    a21649 = 1;
    temp21853 = a21649;
    goto label22147;
label22051:
    a21722 = #f;
    if (eq? a21722 #t)
       goto label22048;
    else
       goto label22049;
label22050:
    a21721 = #t;
    if (eq? a21721 #t)
       goto label22048;
    else
       goto label22049;
label22049:
    a21724 = #f;
    if (eq? a21724 #t)
       goto label22046;
    else
       goto label22047;
label22048:
    a21723 = #t;
    if (eq? a21723 #t)
       goto label22046;
    else
       goto label22047;
label22047:
    a21712 = 2;
    goto label22037;
label22046:
    if (> 3 1)
       goto label22044;
    else
       goto label22045;
label22045:
    a21726 = 2;
    temp21906 = a21726;
    goto label22043;
label22044:
    a21725 = 1;
    temp21906 = a21725;
    goto label22043;
label22043:
    if (> 3 temp21906)
       goto label22041;
    else
       goto label22042;
label22042:
    a21730 = 2;
    a21712 = a21730;
    goto label22037;
label22041:
    if (> 3 1)
       goto label22039;
    else
       goto label22040;
label22040:
    a21729 = 2;
    a21727 = a21729;
    goto label22038;
label22039:
    a21728 = 1;
    a21727 = a21728;
    goto label22038;
label22038:
    a21712 = a21727;
    goto label22037;
label22037:
    temp21912 = (read);
    if (> 3 1)
       goto label22035;
    else
       goto label22036;
label22036:
    a21733 = 2;
    temp21915 = a21733;
    goto label22034;
label22067:
    if (> 3 1)
       goto label22065;
    else
       goto label22066;
label22066:
    a21710 = 2;
    a21708 = a21710;
    goto label22064;
label22065:
    a21709 = 1;
    a21708 = a21709;
    goto label22064;
label22064:
    a21693 = a21708;
    goto label22063;
label22063:
    temp21899 = (read);
    if (> 3 1)
       goto label22061;
    else
       goto label22062;
label22062:
    a21714 = 2;
    temp21902 = a21714;
    goto label22060;
label22061:
    a21713 = 1;
    temp21902 = a21713;
    goto label22060;
label22060:
    if (> 3 temp21902)
       goto label22058;
    else
       goto label22059;
label22059:
    a21718 = 2;
    temp21900 = a21718;
    goto label22054;
label22058:
    if (> 3 1)
       goto label22056;
    else
       goto label22057;
label22057:
    a21717 = 2;
    a21715 = a21717;
    goto label22055;
label22056:
    a21716 = 1;
    a21715 = a21716;
    goto label22055;
label22055:
    temp21900 = a21715;
    goto label22054;
label22054:
    if (> temp21899 temp21900)
       goto label22052;
    else
       goto label22053;
label22053:
    a21720 = #f;
    if (eq? a21720 #t)
       goto label22050;
    else
       goto label22051;
label22052:
    a21719 = #t;
    if (eq? a21719 #t)
       goto label22050;
    else
       goto label22051;
label22083:
    a21698 = 2;
    a21696 = a21698;
    goto label22081;
label22082:
    a21697 = 1;
    a21696 = a21697;
    goto label22081;
label22081:
    temp21887 = a21696;
    goto label22080;
label22080:
    if (> temp21886 temp21887)
       goto label22078;
    else
       goto label22079;
label22079:
    a21701 = #f;
    if (eq? a21701 #t)
       goto label22076;
    else
       goto label22077;
label22078:
    a21700 = #t;
    if (eq? a21700 #t)
       goto label22076;
    else
       goto label22077;
label22077:
    a21703 = #f;
    if (eq? a21703 #t)
       goto label22074;
    else
       goto label22075;
label22076:
    a21702 = #t;
    if (eq? a21702 #t)
       goto label22074;
    else
       goto label22075;
label22075:
    a21705 = #f;
    if (eq? a21705 #t)
       goto label22072;
    else
       goto label22073;
label22074:
    a21704 = #t;
    if (eq? a21704 #t)
       goto label22072;
    else
       goto label22073;
label22073:
    a21693 = 2;
    goto label22063;
label22072:
    if (> 3 1)
       goto label22070;
    else
       goto label22071;
label22071:
    a21707 = 2;
    temp21893 = a21707;
    goto label22069;
label22070:
    a21706 = 1;
    temp21893 = a21706;
    goto label22069;
label22069:
    if (> 3 temp21893)
       goto label22067;
    else
       goto label22068;
label22068:
    a21711 = 2;
    a21693 = a21711;
    goto label22063;
label22099:
    a21674 = 2;
    goto label22089;
label22098:
    if (> 3 1)
       goto label22096;
    else
       goto label22097;
label22097:
    a21688 = 2;
    temp21880 = a21688;
    goto label22095;
label22096:
    a21687 = 1;
    temp21880 = a21687;
    goto label22095;
label22095:
    if (> 3 temp21880)
       goto label22093;
    else
       goto label22094;
label22094:
    a21692 = 2;
    a21674 = a21692;
    goto label22089;
label22093:
    if (> 3 1)
       goto label22091;
    else
       goto label22092;
label22092:
    a21691 = 2;
    a21689 = a21691;
    goto label22090;
label22091:
    a21690 = 1;
    a21689 = a21690;
    goto label22090;
start:
    if (> 3 1)
       goto label22269;
    else
       goto label22270;
label22090:
    a21674 = a21689;
    goto label22089;
label22089:
    temp21886 = (read);
    if (> 3 1)
       goto label22087;
    else
       goto label22088;
label22088:
    a21695 = 2;
    temp21889 = a21695;
    goto label22086;
label22087:
    a21694 = 1;
    temp21889 = a21694;
    goto label22086;
label22086:
    if (> 3 temp21889)
       goto label22084;
    else
       goto label22085;
label22085:
    a21699 = 2;
    temp21887 = a21699;
    goto label22080;
label22084:
    if (> 3 1)
       goto label22082;
    else
       goto label22083;
label21987:
    a21767 = 1;
    a21766 = a21767;
    goto label21986;
label21986:
    a21751 = a21766;
    goto label21985;
label21985:
    temp21941 = (read);
    if (> 3 1)
       goto label21983;
    else
       goto label21984;
label21984:
    a21772 = 2;
    temp21944 = a21772;
    goto label21982;
label21983:
    a21771 = 1;
    temp21944 = a21771;
    goto label21982;
label21982:
    if (> 3 temp21944)
       goto label21980;
    else
       goto label21981;
label21981:
    a21776 = 2;
    temp21942 = a21776;
    goto label21976;
label21980:
    if (> 3 1)
       goto label21978;
    else
       goto label21979;
label21979:
    a21775 = 2;
    a21773 = a21775;
    goto label21977;
label21978:
    a21774 = 1;
    a21773 = a21774;
    goto label21977;
label21977:
    temp21942 = a21773;
    goto label21976;
label21976:
    if (> temp21941 temp21942)
       goto label21974;
    else
       goto label21975;
label21975:
    a21778 = #f;
    if (eq? a21778 #t)
       goto label21972;
    else
       goto label21973;
label21974:
    a21777 = #t;
    if (eq? a21777 #t)
       goto label21972;
    else
       goto label21973;
label21973:
    a21780 = #f;
    if (eq? a21780 #t)
       goto label21970;
    else
       goto label21971;
label21972:
    a21779 = #t;
    if (eq? a21779 #t)
       goto label21970;
    else
       goto label21971;
label22003:
    temp21929 = a21754;
    goto label22002;
label22002:
    if (> temp21928 temp21929)
       goto label22000;
    else
       goto label22001;
label22001:
    a21759 = #f;
    if (eq? a21759 #t)
       goto label21998;
    else
       goto label21999;
label22000:
    a21758 = #t;
    if (eq? a21758 #t)
       goto label21998;
    else
       goto label21999;
label21999:
    a21761 = #f;
    if (eq? a21761 #t)
       goto label21996;
    else
       goto label21997;
label21998:
    a21760 = #t;
    if (eq? a21760 #t)
       goto label21996;
    else
       goto label21997;
label21997:
    a21763 = #f;
    if (eq? a21763 #t)
       goto label21994;
    else
       goto label21995;
label21996:
    a21762 = #t;
    if (eq? a21762 #t)
       goto label21994;
    else
       goto label21995;
label21995:
    a21751 = 2;
    goto label21985;
label21994:
    if (> 3 1)
       goto label21992;
    else
       goto label21993;
label21993:
    a21765 = 2;
    temp21935 = a21765;
    goto label21991;
label21992:
    a21764 = 1;
    temp21935 = a21764;
    goto label21991;
label21991:
    if (> 3 temp21935)
       goto label21989;
    else
       goto label21990;
label21990:
    a21769 = 2;
    a21751 = a21769;
    goto label21985;
label21989:
    if (> 3 1)
       goto label21987;
    else
       goto label21988;
label21988:
    a21768 = 2;
    a21766 = a21768;
    goto label21986;
label22019:
    a21745 = 2;
    temp21919 = a21745;
    goto label22017;
label22018:
    a21744 = 1;
    temp21919 = a21744;
    goto label22017;
label22017:
    if (> 3 temp21919)
       goto label22015;
    else
       goto label22016;
label22016:
    a21749 = 2;
    a21731 = a21749;
    goto label22011;
label22015:
    if (> 3 1)
       goto label22013;
    else
       goto label22014;
label22014:
    a21748 = 2;
    a21746 = a21748;
    goto label22012;
label22013:
    a21747 = 1;
    a21746 = a21747;
    goto label22012;
label22012:
    a21731 = a21746;
    goto label22011;
label22011:
    a21750 = (read);
    temp21928 = (read);
    if (> 3 1)
       goto label22009;
    else
       goto label22010;
label22010:
    a21753 = 2;
    temp21931 = a21753;
    goto label22008;
label22009:
    a21752 = 1;
    temp21931 = a21752;
    goto label22008;
label22008:
    if (> 3 temp21931)
       goto label22006;
    else
       goto label22007;
label22007:
    a21757 = 2;
    temp21929 = a21757;
    goto label22002;
label22006:
    if (> 3 1)
       goto label22004;
    else
       goto label22005;
label22005:
    a21756 = 2;
    a21754 = a21756;
    goto label22003;
label22004:
    a21755 = 1;
    a21754 = a21755;
    goto label22003;
label22035:
    a21732 = 1;
    temp21915 = a21732;
    goto label22034;
label22034:
    if (> 3 temp21915)
       goto label22032;
    else
       goto label22033;
label22033:
    a21737 = 2;
    temp21913 = a21737;
    goto label22028;
label22032:
    if (> 3 1)
       goto label22030;
    else
       goto label22031;
label22031:
    a21736 = 2;
    a21734 = a21736;
    goto label22029;
label22030:
    a21735 = 1;
    a21734 = a21735;
    goto label22029;
label22029:
    temp21913 = a21734;
    goto label22028;
label22028:
    if (> temp21912 temp21913)
       goto label22026;
    else
       goto label22027;
label22027:
    a21739 = #f;
    if (eq? a21739 #t)
       goto label22024;
    else
       goto label22025;
label22026:
    a21738 = #t;
    if (eq? a21738 #t)
       goto label22024;
    else
       goto label22025;
label22025:
    a21741 = #f;
    if (eq? a21741 #t)
       goto label22022;
    else
       goto label22023;
label22024:
    a21740 = #t;
    if (eq? a21740 #t)
       goto label22022;
    else
       goto label22023;
label22023:
    a21743 = #f;
    if (eq? a21743 #t)
       goto label22020;
    else
       goto label22021;
label22022:
    a21742 = #t;
    if (eq? a21742 #t)
       goto label22020;
    else
       goto label22021;
label22021:
    a21731 = 2;
    goto label22011;
label22020:
    if (> 3 1)
       goto label22018;
    else
       goto label22019;



type checking... @ utilities.rkt:2054

type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
label21954:
    if (> 3 1)
       goto label21952;
    else
       goto label21953;
label21955:
    a21578 = 2;
    return a21578;
label21952:
    a21576 = 1;
    a21575 = a21576;
    goto label21951;
label21953:
    a21577 = 2;
    a21575 = a21577;
    goto label21951;
label21951:
    return a21575;
label21970:
    a21781 = #t;
    if (eq? a21781 #t)
       goto label21968;
    else
       goto label21969;
label21971:
    a21782 = #f;
    if (eq? a21782 #t)
       goto label21968;
    else
       goto label21969;
label21968:
    if (> 3 1)
       goto label21966;
    else
       goto label21967;
label21969:
    a21770 = 2;
    goto label21959;
label21966:
    a21783 = 1;
    temp21948 = a21783;
    goto label21965;
label21967:
    a21784 = 2;
    temp21948 = a21784;
    goto label21965;
label21964:
    a21788 = 2;
    a21770 = a21788;
    goto label21959;
label21965:
    if (> 3 temp21948)
       goto label21963;
    else
       goto label21964;
label21962:
    a21787 = 2;
    a21785 = a21787;
    goto label21960;
label21963:
    if (> 3 1)
       goto label21961;
    else
       goto label21962;
label21960:
    a21770 = a21785;
    goto label21959;
label21961:
    a21786 = 1;
    a21785 = a21786;
    goto label21960;
label21958:
    a21574 = 2;
    temp21803 = a21574;
    goto label21956;
label21959:
    temp21939 = a21770;
    temp21926 = (+ a21751 temp21939);
    temp21923 = (+ a21750 temp21926);
    temp21910 = (+ a21731 temp21923);
    temp21897 = (+ a21712 temp21910);
    temp21884 = (+ a21693 temp21897);
    temp21871 = (+ a21674 temp21884);
    temp21857 = (+ temp21870 temp21871);
    temp21844 = (+ a21636 temp21857);
    temp21831 = (+ a21617 temp21844);
    temp21818 = (+ a21598 temp21831);
    return (+ a21579 temp21818);
label21956:
    if (> 3 temp21803)
       goto label21954;
    else
       goto label21955;
label21957:
    a21573 = 1;
    temp21803 = a21573;
    goto label21956;
label22244:
    a21581 = 2;
    temp21810 = a21581;
    goto label22242;
label22245:
    if (> 3 1)
       goto label21957;
    else
       goto label21958;
label22246:
    temp21807 = (read);
    if (> 3 1)
       goto label22243;
    else
       goto label22244;
label22247:
    if (eq? x21560 #t)
       goto label22245;
    else
       goto label22246;
label22248:
    x21560 = #t;
    goto label22247;
label22249:
    x21560 = #f;
    goto label22247;
label22250:
    if (> temp21790 8)
       goto label22248;
    else
       goto label22249;
label22251:
    temp21790 = 8;
    goto label22250;
label22252:
    temp21790 = 9;
    goto label22250;
label22253:
    if (>= temp21792 temp21797)
       goto label22251;
    else
       goto label22252;
label22254:
    temp21797 = a21569;
    goto label22253;
label22255:
    a21570 = 1;
    a21569 = a21570;
    goto label22254;
label22256:
    a21571 = 2;
    a21569 = a21571;
    goto label22254;
label22257:
    if (> 3 1)
       goto label22255;
    else
       goto label22256;
label22258:
    a21572 = 2;
    temp21797 = a21572;
    goto label22253;
label22259:
    if (> 3 temp21799)
       goto label22257;
    else
       goto label22258;
label22228:
    if (> 3 1)
       goto label22226;
    else
       goto label22227;
label22229:
    a21579 = 2;
    goto label22219;
label22230:
    a21590 = #t;
    if (eq? a21590 #t)
       goto label22228;
    else
       goto label22229;
label22231:
    a21591 = #f;
    if (eq? a21591 #t)
       goto label22228;
    else
       goto label22229;
label22232:
    a21588 = #t;
    if (eq? a21588 #t)
       goto label22230;
    else
       goto label22231;
label22233:
    a21589 = #f;
    if (eq? a21589 #t)
       goto label22230;
    else
       goto label22231;
label22234:
    a21586 = #t;
    if (eq? a21586 #t)
       goto label22232;
    else
       goto label22233;
label22235:
    a21587 = #f;
    if (eq? a21587 #t)
       goto label22232;
    else
       goto label22233;
label22236:
    if (> temp21807 temp21808)
       goto label22234;
    else
       goto label22235;
label22237:
    temp21808 = a21582;
    goto label22236;
label22238:
    a21583 = 1;
    a21582 = a21583;
    goto label22237;
label22239:
    a21584 = 2;
    a21582 = a21584;
    goto label22237;
label22240:
    if (> 3 1)
       goto label22238;
    else
       goto label22239;
label22241:
    a21585 = 2;
    temp21808 = a21585;
    goto label22236;
label22242:
    if (> 3 temp21810)
       goto label22240;
    else
       goto label22241;
label22243:
    a21580 = 1;
    temp21810 = a21580;
    goto label22242;
label22260:
    a21567 = 1;
    temp21799 = a21567;
    goto label22259;
label22261:
    a21568 = 2;
    temp21799 = a21568;
    goto label22259;
label22262:
    if (> 3 1)
       goto label22260;
    else
       goto label22261;
label22263:
    temp21792 = a21563;
    goto label22262;
label22264:
    a21564 = 1;
    a21563 = a21564;
    goto label22263;
label22265:
    a21565 = 2;
    a21563 = a21565;
    goto label22263;
label22266:
    if (> 3 1)
       goto label22264;
    else
       goto label22265;
label22267:
    a21566 = 2;
    temp21792 = a21566;
    goto label22262;
label22268:
    if (> 3 temp21794)
       goto label22266;
    else
       goto label22267;
label22269:
    a21561 = 1;
    temp21794 = a21561;
    goto label22268;
label22270:
    a21562 = 2;
    temp21794 = a21562;
    goto label22268;
label22179:
    a21629 = #f;
    if (eq? a21629 #t)
       goto label22176;
    else
       goto label22177;
label22178:
    a21628 = #t;
    if (eq? a21628 #t)
       goto label22176;
    else
       goto label22177;
label22177:
    a21617 = 2;
    goto label22167;
label22176:
    if (> 3 1)
       goto label22174;
    else
       goto label22175;
label22175:
    a21631 = 2;
    temp21840 = a21631;
    goto label22173;
label22174:
    a21630 = 1;
    temp21840 = a21630;
    goto label22173;
label22173:
    if (> 3 temp21840)
       goto label22171;
    else
       goto label22172;
label22172:
    a21635 = 2;
    a21617 = a21635;
    goto label22167;
label22171:
    if (> 3 1)
       goto label22169;
    else
       goto label22170;
label22170:
    a21634 = 2;
    a21632 = a21634;
    goto label22168;
label22169:
    a21633 = 1;
    a21632 = a21633;
    goto label22168;
label22168:
    a21617 = a21632;
    goto label22167;
label22167:
    temp21846 = (read);
    if (> 3 1)
       goto label22165;
    else
       goto label22166;
label22166:
    a21638 = 2;
    temp21849 = a21638;
    goto label22164;
label22165:
    a21637 = 1;
    temp21849 = a21637;
    goto label22164;
label22164:
    if (> 3 temp21849)
       goto label22162;
    else
       goto label22163;
label22195:
    a21614 = 1;
    a21613 = a21614;
    goto label22194;
label22194:
    a21598 = a21613;
    goto label22193;
label22193:
    temp21833 = (read);
    if (> 3 1)
       goto label22191;
    else
       goto label22192;
label22192:
    a21619 = 2;
    temp21836 = a21619;
    goto label22190;
label22191:
    a21618 = 1;
    temp21836 = a21618;
    goto label22190;
label22190:
    if (> 3 temp21836)
       goto label22188;
    else
       goto label22189;
label22189:
    a21623 = 2;
    temp21834 = a21623;
    goto label22184;
label22188:
    if (> 3 1)
       goto label22186;
    else
       goto label22187;
label22187:
    a21622 = 2;
    a21620 = a21622;
    goto label22185;
label22186:
    a21621 = 1;
    a21620 = a21621;
    goto label22185;
label22185:
    temp21834 = a21620;
    goto label22184;
label22184:
    if (> temp21833 temp21834)
       goto label22182;
    else
       goto label22183;
label22183:
    a21625 = #f;
    if (eq? a21625 #t)
       goto label22180;
    else
       goto label22181;
label22182:
    a21624 = #t;
    if (eq? a21624 #t)
       goto label22180;
    else
       goto label22181;
label22181:
    a21627 = #f;
    if (eq? a21627 #t)
       goto label22178;
    else
       goto label22179;
label22180:
    a21626 = #t;
    if (eq? a21626 #t)
       goto label22178;
    else
       goto label22179;
label22211:
    temp21821 = a21601;
    goto label22210;
label22210:
    if (> temp21820 temp21821)
       goto label22208;
    else
       goto label22209;
label22209:
    a21606 = #f;
    if (eq? a21606 #t)
       goto label22206;
    else
       goto label22207;
label22208:
    a21605 = #t;
    if (eq? a21605 #t)
       goto label22206;
    else
       goto label22207;
label22207:
    a21608 = #f;
    if (eq? a21608 #t)
       goto label22204;
    else
       goto label22205;
label22206:
    a21607 = #t;
    if (eq? a21607 #t)
       goto label22204;
    else
       goto label22205;
label22205:
    a21610 = #f;
    if (eq? a21610 #t)
       goto label22202;
    else
       goto label22203;
label22204:
    a21609 = #t;
    if (eq? a21609 #t)
       goto label22202;
    else
       goto label22203;
label22203:
    a21598 = 2;
    goto label22193;
label22202:
    if (> 3 1)
       goto label22200;
    else
       goto label22201;
label22201:
    a21612 = 2;
    temp21827 = a21612;
    goto label22199;
label22200:
    a21611 = 1;
    temp21827 = a21611;
    goto label22199;
label22199:
    if (> 3 temp21827)
       goto label22197;
    else
       goto label22198;
label22198:
    a21616 = 2;
    a21598 = a21616;
    goto label22193;
label22197:
    if (> 3 1)
       goto label22195;
    else
       goto label22196;
label22196:
    a21615 = 2;
    a21613 = a21615;
    goto label22194;
label22227:
    a21593 = 2;
    temp21814 = a21593;
    goto label22225;
label22226:
    a21592 = 1;
    temp21814 = a21592;
    goto label22225;
label22225:
    if (> 3 temp21814)
       goto label22223;
    else
       goto label22224;
label22224:
    a21597 = 2;
    a21579 = a21597;
    goto label22219;
label22223:
    if (> 3 1)
       goto label22221;
    else
       goto label22222;
label22222:
    a21596 = 2;
    a21594 = a21596;
    goto label22220;
label22221:
    a21595 = 1;
    a21594 = a21595;
    goto label22220;
label22220:
    a21579 = a21594;
    goto label22219;
label22219:
    temp21820 = (read);
    if (> 3 1)
       goto label22217;
    else
       goto label22218;
label22218:
    a21600 = 2;
    temp21823 = a21600;
    goto label22216;
label22217:
    a21599 = 1;
    temp21823 = a21599;
    goto label22216;
label22216:
    if (> 3 temp21823)
       goto label22214;
    else
       goto label22215;
label22215:
    a21604 = 2;
    temp21821 = a21604;
    goto label22210;
label22214:
    if (> 3 1)
       goto label22212;
    else
       goto label22213;
label22213:
    a21603 = 2;
    a21601 = a21603;
    goto label22211;
label22212:
    a21602 = 1;
    a21601 = a21602;
    goto label22211;
label22115:
    temp21870 = (read);
    temp21873 = (read);
    if (> 3 1)
       goto label22113;
    else
       goto label22114;
label22114:
    a21676 = 2;
    temp21876 = a21676;
    goto label22112;
label22113:
    a21675 = 1;
    temp21876 = a21675;
    goto label22112;
label22112:
    if (> 3 temp21876)
       goto label22110;
    else
       goto label22111;
label22111:
    a21680 = 2;
    temp21874 = a21680;
    goto label22106;
label22110:
    if (> 3 1)
       goto label22108;
    else
       goto label22109;
label22109:
    a21679 = 2;
    a21677 = a21679;
    goto label22107;
label22108:
    a21678 = 1;
    a21677 = a21678;
    goto label22107;
label22107:
    temp21874 = a21677;
    goto label22106;
label22106:
    if (> temp21873 temp21874)
       goto label22104;
    else
       goto label22105;
label22105:
    a21682 = #f;
    if (eq? a21682 #t)
       goto label22102;
    else
       goto label22103;
label22104:
    a21681 = #t;
    if (eq? a21681 #t)
       goto label22102;
    else
       goto label22103;
label22103:
    a21684 = #f;
    if (eq? a21684 #t)
       goto label22100;
    else
       goto label22101;
label22102:
    a21683 = #t;
    if (eq? a21683 #t)
       goto label22100;
    else
       goto label22101;
label22101:
    a21686 = #f;
    if (eq? a21686 #t)
       goto label22098;
    else
       goto label22099;
label22100:
    a21685 = #t;
    if (eq? a21685 #t)
       goto label22098;
    else
       goto label22099;
label22131:
    a21663 = #f;
    if (eq? a21663 #t)
       goto label22128;
    else
       goto label22129;
label22130:
    a21662 = #t;
    if (eq? a21662 #t)
       goto label22128;
    else
       goto label22129;
label22129:
    a21665 = #f;
    if (eq? a21665 #t)
       goto label22126;
    else
       goto label22127;
label22128:
    a21664 = #t;
    if (eq? a21664 #t)
       goto label22126;
    else
       goto label22127;
label22127:
    a21667 = #f;
    if (eq? a21667 #t)
       goto label22124;
    else
       goto label22125;
label22126:
    a21666 = #t;
    if (eq? a21666 #t)
       goto label22124;
    else
       goto label22125;
label22125:
    a21655 = 2;
    goto label22115;
label22124:
    if (> 3 1)
       goto label22122;
    else
       goto label22123;
label22123:
    a21669 = 2;
    temp21866 = a21669;
    goto label22121;
label22122:
    a21668 = 1;
    temp21866 = a21668;
    goto label22121;
label22121:
    if (> 3 temp21866)
       goto label22119;
    else
       goto label22120;
label22120:
    a21673 = 2;
    a21655 = a21673;
    goto label22115;
label22119:
    if (> 3 1)
       goto label22117;
    else
       goto label22118;
label22118:
    a21672 = 2;
    a21670 = a21672;
    goto label22116;
label22117:
    a21671 = 1;
    a21670 = a21671;
    goto label22116;
label22116:
    a21655 = a21670;
    goto label22115;
label22147:
    if (> 3 temp21853)
       goto label22145;
    else
       goto label22146;
label22146:
    a21654 = 2;
    a21636 = a21654;
    goto label22141;
label22145:
    if (> 3 1)
       goto label22143;
    else
       goto label22144;
label22144:
    a21653 = 2;
    a21651 = a21653;
    goto label22142;
label22143:
    a21652 = 1;
    a21651 = a21652;
    goto label22142;
label22142:
    a21636 = a21651;
    goto label22141;
label22141:
    temp21859 = (read);
    if (> 3 1)
       goto label22139;
    else
       goto label22140;
label22140:
    a21657 = 2;
    temp21862 = a21657;
    goto label22138;
label22139:
    a21656 = 1;
    temp21862 = a21656;
    goto label22138;
label22138:
    if (> 3 temp21862)
       goto label22136;
    else
       goto label22137;
label22137:
    a21661 = 2;
    temp21860 = a21661;
    goto label22132;
label22136:
    if (> 3 1)
       goto label22134;
    else
       goto label22135;
label22135:
    a21660 = 2;
    a21658 = a21660;
    goto label22133;
label22134:
    a21659 = 1;
    a21658 = a21659;
    goto label22133;
label22133:
    temp21860 = a21658;
    goto label22132;
label22132:
    if (> temp21859 temp21860)
       goto label22130;
    else
       goto label22131;
label22163:
    a21642 = 2;
    temp21847 = a21642;
    goto label22158;
label22162:
    if (> 3 1)
       goto label22160;
    else
       goto label22161;
label22161:
    a21641 = 2;
    a21639 = a21641;
    goto label22159;
label22160:
    a21640 = 1;
    a21639 = a21640;
    goto label22159;
label22159:
    temp21847 = a21639;
    goto label22158;
label22158:
    if (> temp21846 temp21847)
       goto label22156;
    else
       goto label22157;
label22157:
    a21644 = #f;
    if (eq? a21644 #t)
       goto label22154;
    else
       goto label22155;
label22156:
    a21643 = #t;
    if (eq? a21643 #t)
       goto label22154;
    else
       goto label22155;
label22155:
    a21646 = #f;
    if (eq? a21646 #t)
       goto label22152;
    else
       goto label22153;
label22154:
    a21645 = #t;
    if (eq? a21645 #t)
       goto label22152;
    else
       goto label22153;
label22153:
    a21648 = #f;
    if (eq? a21648 #t)
       goto label22150;
    else
       goto label22151;
label22152:
    a21647 = #t;
    if (eq? a21647 #t)
       goto label22150;
    else
       goto label22151;
label22151:
    a21636 = 2;
    goto label22141;
label22150:
    if (> 3 1)
       goto label22148;
    else
       goto label22149;
label22149:
    a21650 = 2;
    temp21853 = a21650;
    goto label22147;
label22148:
    a21649 = 1;
    temp21853 = a21649;
    goto label22147;
label22051:
    a21722 = #f;
    if (eq? a21722 #t)
       goto label22048;
    else
       goto label22049;
label22050:
    a21721 = #t;
    if (eq? a21721 #t)
       goto label22048;
    else
       goto label22049;
label22049:
    a21724 = #f;
    if (eq? a21724 #t)
       goto label22046;
    else
       goto label22047;
label22048:
    a21723 = #t;
    if (eq? a21723 #t)
       goto label22046;
    else
       goto label22047;
label22047:
    a21712 = 2;
    goto label22037;
label22046:
    if (> 3 1)
       goto label22044;
    else
       goto label22045;
label22045:
    a21726 = 2;
    temp21906 = a21726;
    goto label22043;
label22044:
    a21725 = 1;
    temp21906 = a21725;
    goto label22043;
label22043:
    if (> 3 temp21906)
       goto label22041;
    else
       goto label22042;
label22042:
    a21730 = 2;
    a21712 = a21730;
    goto label22037;
label22041:
    if (> 3 1)
       goto label22039;
    else
       goto label22040;
label22040:
    a21729 = 2;
    a21727 = a21729;
    goto label22038;
label22039:
    a21728 = 1;
    a21727 = a21728;
    goto label22038;
label22038:
    a21712 = a21727;
    goto label22037;
label22037:
    temp21912 = (read);
    if (> 3 1)
       goto label22035;
    else
       goto label22036;
label22036:
    a21733 = 2;
    temp21915 = a21733;
    goto label22034;
label22067:
    if (> 3 1)
       goto label22065;
    else
       goto label22066;
label22066:
    a21710 = 2;
    a21708 = a21710;
    goto label22064;
label22065:
    a21709 = 1;
    a21708 = a21709;
    goto label22064;
label22064:
    a21693 = a21708;
    goto label22063;
label22063:
    temp21899 = (read);
    if (> 3 1)
       goto label22061;
    else
       goto label22062;
label22062:
    a21714 = 2;
    temp21902 = a21714;
    goto label22060;
label22061:
    a21713 = 1;
    temp21902 = a21713;
    goto label22060;
label22060:
    if (> 3 temp21902)
       goto label22058;
    else
       goto label22059;
label22059:
    a21718 = 2;
    temp21900 = a21718;
    goto label22054;
label22058:
    if (> 3 1)
       goto label22056;
    else
       goto label22057;
label22057:
    a21717 = 2;
    a21715 = a21717;
    goto label22055;
label22056:
    a21716 = 1;
    a21715 = a21716;
    goto label22055;
label22055:
    temp21900 = a21715;
    goto label22054;
label22054:
    if (> temp21899 temp21900)
       goto label22052;
    else
       goto label22053;
label22053:
    a21720 = #f;
    if (eq? a21720 #t)
       goto label22050;
    else
       goto label22051;
label22052:
    a21719 = #t;
    if (eq? a21719 #t)
       goto label22050;
    else
       goto label22051;
label22083:
    a21698 = 2;
    a21696 = a21698;
    goto label22081;
label22082:
    a21697 = 1;
    a21696 = a21697;
    goto label22081;
label22081:
    temp21887 = a21696;
    goto label22080;
label22080:
    if (> temp21886 temp21887)
       goto label22078;
    else
       goto label22079;
label22079:
    a21701 = #f;
    if (eq? a21701 #t)
       goto label22076;
    else
       goto label22077;
label22078:
    a21700 = #t;
    if (eq? a21700 #t)
       goto label22076;
    else
       goto label22077;
label22077:
    a21703 = #f;
    if (eq? a21703 #t)
       goto label22074;
    else
       goto label22075;
label22076:
    a21702 = #t;
    if (eq? a21702 #t)
       goto label22074;
    else
       goto label22075;
label22075:
    a21705 = #f;
    if (eq? a21705 #t)
       goto label22072;
    else
       goto label22073;
label22074:
    a21704 = #t;
    if (eq? a21704 #t)
       goto label22072;
    else
       goto label22073;
label22073:
    a21693 = 2;
    goto label22063;
label22072:
    if (> 3 1)
       goto label22070;
    else
       goto label22071;
label22071:
    a21707 = 2;
    temp21893 = a21707;
    goto label22069;
label22070:
    a21706 = 1;
    temp21893 = a21706;
    goto label22069;
label22069:
    if (> 3 temp21893)
       goto label22067;
    else
       goto label22068;
label22068:
    a21711 = 2;
    a21693 = a21711;
    goto label22063;
label22099:
    a21674 = 2;
    goto label22089;
label22098:
    if (> 3 1)
       goto label22096;
    else
       goto label22097;
label22097:
    a21688 = 2;
    temp21880 = a21688;
    goto label22095;
label22096:
    a21687 = 1;
    temp21880 = a21687;
    goto label22095;
label22095:
    if (> 3 temp21880)
       goto label22093;
    else
       goto label22094;
label22094:
    a21692 = 2;
    a21674 = a21692;
    goto label22089;
label22093:
    if (> 3 1)
       goto label22091;
    else
       goto label22092;
label22092:
    a21691 = 2;
    a21689 = a21691;
    goto label22090;
label22091:
    a21690 = 1;
    a21689 = a21690;
    goto label22090;
start:
    if (> 3 1)
       goto label22269;
    else
       goto label22270;
label22090:
    a21674 = a21689;
    goto label22089;
label22089:
    temp21886 = (read);
    if (> 3 1)
       goto label22087;
    else
       goto label22088;
label22088:
    a21695 = 2;
    temp21889 = a21695;
    goto label22086;
label22087:
    a21694 = 1;
    temp21889 = a21694;
    goto label22086;
label22086:
    if (> 3 temp21889)
       goto label22084;
    else
       goto label22085;
label22085:
    a21699 = 2;
    temp21887 = a21699;
    goto label22080;
label22084:
    if (> 3 1)
       goto label22082;
    else
       goto label22083;
label21987:
    a21767 = 1;
    a21766 = a21767;
    goto label21986;
label21986:
    a21751 = a21766;
    goto label21985;
label21985:
    temp21941 = (read);
    if (> 3 1)
       goto label21983;
    else
       goto label21984;
label21984:
    a21772 = 2;
    temp21944 = a21772;
    goto label21982;
label21983:
    a21771 = 1;
    temp21944 = a21771;
    goto label21982;
label21982:
    if (> 3 temp21944)
       goto label21980;
    else
       goto label21981;
label21981:
    a21776 = 2;
    temp21942 = a21776;
    goto label21976;
label21980:
    if (> 3 1)
       goto label21978;
    else
       goto label21979;
label21979:
    a21775 = 2;
    a21773 = a21775;
    goto label21977;
label21978:
    a21774 = 1;
    a21773 = a21774;
    goto label21977;
label21977:
    temp21942 = a21773;
    goto label21976;
label21976:
    if (> temp21941 temp21942)
       goto label21974;
    else
       goto label21975;
label21975:
    a21778 = #f;
    if (eq? a21778 #t)
       goto label21972;
    else
       goto label21973;
label21974:
    a21777 = #t;
    if (eq? a21777 #t)
       goto label21972;
    else
       goto label21973;
label21973:
    a21780 = #f;
    if (eq? a21780 #t)
       goto label21970;
    else
       goto label21971;
label21972:
    a21779 = #t;
    if (eq? a21779 #t)
       goto label21970;
    else
       goto label21971;
label22003:
    temp21929 = a21754;
    goto label22002;
label22002:
    if (> temp21928 temp21929)
       goto label22000;
    else
       goto label22001;
label22001:
    a21759 = #f;
    if (eq? a21759 #t)
       goto label21998;
    else
       goto label21999;
label22000:
    a21758 = #t;
    if (eq? a21758 #t)
       goto label21998;
    else
       goto label21999;
label21999:
    a21761 = #f;
    if (eq? a21761 #t)
       goto label21996;
    else
       goto label21997;
label21998:
    a21760 = #t;
    if (eq? a21760 #t)
       goto label21996;
    else
       goto label21997;
label21997:
    a21763 = #f;
    if (eq? a21763 #t)
       goto label21994;
    else
       goto label21995;
label21996:
    a21762 = #t;
    if (eq? a21762 #t)
       goto label21994;
    else
       goto label21995;
label21995:
    a21751 = 2;
    goto label21985;
label21994:
    if (> 3 1)
       goto label21992;
    else
       goto label21993;
label21993:
    a21765 = 2;
    temp21935 = a21765;
    goto label21991;
label21992:
    a21764 = 1;
    temp21935 = a21764;
    goto label21991;
label21991:
    if (> 3 temp21935)
       goto label21989;
    else
       goto label21990;
label21990:
    a21769 = 2;
    a21751 = a21769;
    goto label21985;
label21989:
    if (> 3 1)
       goto label21987;
    else
       goto label21988;
label21988:
    a21768 = 2;
    a21766 = a21768;
    goto label21986;
label22019:
    a21745 = 2;
    temp21919 = a21745;
    goto label22017;
label22018:
    a21744 = 1;
    temp21919 = a21744;
    goto label22017;
label22017:
    if (> 3 temp21919)
       goto label22015;
    else
       goto label22016;
label22016:
    a21749 = 2;
    a21731 = a21749;
    goto label22011;
label22015:
    if (> 3 1)
       goto label22013;
    else
       goto label22014;
label22014:
    a21748 = 2;
    a21746 = a21748;
    goto label22012;
label22013:
    a21747 = 1;
    a21746 = a21747;
    goto label22012;
label22012:
    a21731 = a21746;
    goto label22011;
label22011:
    a21750 = (read);
    temp21928 = (read);
    if (> 3 1)
       goto label22009;
    else
       goto label22010;
label22010:
    a21753 = 2;
    temp21931 = a21753;
    goto label22008;
label22009:
    a21752 = 1;
    temp21931 = a21752;
    goto label22008;
label22008:
    if (> 3 temp21931)
       goto label22006;
    else
       goto label22007;
label22007:
    a21757 = 2;
    temp21929 = a21757;
    goto label22002;
label22006:
    if (> 3 1)
       goto label22004;
    else
       goto label22005;
label22005:
    a21756 = 2;
    a21754 = a21756;
    goto label22003;
label22004:
    a21755 = 1;
    a21754 = a21755;
    goto label22003;
label22035:
    a21732 = 1;
    temp21915 = a21732;
    goto label22034;
label22034:
    if (> 3 temp21915)
       goto label22032;
    else
       goto label22033;
label22033:
    a21737 = 2;
    temp21913 = a21737;
    goto label22028;
label22032:
    if (> 3 1)
       goto label22030;
    else
       goto label22031;
label22031:
    a21736 = 2;
    a21734 = a21736;
    goto label22029;
label22030:
    a21735 = 1;
    a21734 = a21735;
    goto label22029;
label22029:
    temp21913 = a21734;
    goto label22028;
label22028:
    if (> temp21912 temp21913)
       goto label22026;
    else
       goto label22027;
label22027:
    a21739 = #f;
    if (eq? a21739 #t)
       goto label22024;
    else
       goto label22025;
label22026:
    a21738 = #t;
    if (eq? a21738 #t)
       goto label22024;
    else
       goto label22025;
label22025:
    a21741 = #f;
    if (eq? a21741 #t)
       goto label22022;
    else
       goto label22023;
label22024:
    a21740 = #t;
    if (eq? a21740 #t)
       goto label22022;
    else
       goto label22023;
label22023:
    a21743 = #f;
    if (eq? a21743 #t)
       goto label22020;
    else
       goto label22021;
label22022:
    a21742 = #t;
    if (eq? a21742 #t)
       goto label22020;
    else
       goto label22021;
label22021:
    a21731 = 2;
    goto label22011;
label22020:
    if (> 3 1)
       goto label22018;
    else
       goto label22019;



output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: instruction selection @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
label21954:
    cmpq $1, $3
    jg label21952
    jmp label21953
    
label21955:
    movq $2, a21578
    movq a21578, %rax
    jmp conclusion
    
label21952:
    movq $1, a21576
    movq a21576, a21575
    jmp label21951
    
label21953:
    movq $2, a21577
    movq a21577, a21575
    jmp label21951
    
label21951:
    movq a21575, %rax
    jmp conclusion
    
label21970:
    movq $1, a21781
    cmpq $1, a21781
    je label21968
    jmp label21969
    
label21971:
    movq $0, a21782
    cmpq $1, a21782
    je label21968
    jmp label21969
    
label21968:
    cmpq $1, $3
    jg label21966
    jmp label21967
    
label21969:
    movq $2, a21770
    jmp label21959
    
label21966:
    movq $1, a21783
    movq a21783, temp21948
    jmp label21965
    
label21967:
    movq $2, a21784
    movq a21784, temp21948
    jmp label21965
    
label21964:
    movq $2, a21788
    movq a21788, a21770
    jmp label21959
    
label21965:
    cmpq temp21948, $3
    jg label21963
    jmp label21964
    
label21962:
    movq $2, a21787
    movq a21787, a21785
    jmp label21960
    
label21963:
    cmpq $1, $3
    jg label21961
    jmp label21962
    
label21960:
    movq a21785, a21770
    jmp label21959
    
label21961:
    movq $1, a21786
    movq a21786, a21785
    jmp label21960
    
label21958:
    movq $2, a21574
    movq a21574, temp21803
    jmp label21956
    
label21959:
    movq a21770, temp21939
    movq a21751, temp21926
    addq temp21939, temp21926
    movq a21750, temp21923
    addq temp21926, temp21923
    movq a21731, temp21910
    addq temp21923, temp21910
    movq a21712, temp21897
    addq temp21910, temp21897
    movq a21693, temp21884
    addq temp21897, temp21884
    movq a21674, temp21871
    addq temp21884, temp21871
    movq temp21870, temp21857
    addq temp21871, temp21857
    movq a21636, temp21844
    addq temp21857, temp21844
    movq a21617, temp21831
    addq temp21844, temp21831
    movq a21598, temp21818
    addq temp21831, temp21818
    movq a21579, %rax
    addq temp21818, %rax
    jmp conclusion
    
label21956:
    cmpq temp21803, $3
    jg label21954
    jmp label21955
    
label21957:
    movq $1, a21573
    movq a21573, temp21803
    jmp label21956
    
label22244:
    movq $2, a21581
    movq a21581, temp21810
    jmp label22242
    
label22245:
    cmpq $1, $3
    jg label21957
    jmp label21958
    
label22246:
    callq read_int
    movq %rax, temp21807
    cmpq $1, $3
    jg label22243
    jmp label22244
    
label22247:
    cmpq $1, x21560
    je label22245
    jmp label22246
    
label22248:
    movq $1, x21560
    jmp label22247
    
label22249:
    movq $0, x21560
    jmp label22247
    
label22250:
    cmpq $8, temp21790
    jg label22248
    jmp label22249
    
label22251:
    movq $8, temp21790
    jmp label22250
    
label22252:
    movq $9, temp21790
    jmp label22250
    
label22253:
    cmpq temp21797, temp21792
    jge label22251
    jmp label22252
    
label22254:
    movq a21569, temp21797
    jmp label22253
    
label22255:
    movq $1, a21570
    movq a21570, a21569
    jmp label22254
    
label22256:
    movq $2, a21571
    movq a21571, a21569
    jmp label22254
    
label22257:
    cmpq $1, $3
    jg label22255
    jmp label22256
    
label22258:
    movq $2, a21572
    movq a21572, temp21797
    jmp label22253
    
label22259:
    cmpq temp21799, $3
    jg label22257
    jmp label22258
    
label22228:
    cmpq $1, $3
    jg label22226
    jmp label22227
    
label22229:
    movq $2, a21579
    jmp label22219
    
label22230:
    movq $1, a21590
    cmpq $1, a21590
    je label22228
    jmp label22229
    
label22231:
    movq $0, a21591
    cmpq $1, a21591
    je label22228
    jmp label22229
    
label22232:
    movq $1, a21588
    cmpq $1, a21588
    je label22230
    jmp label22231
    
label22233:
    movq $0, a21589
    cmpq $1, a21589
    je label22230
    jmp label22231
    
label22234:
    movq $1, a21586
    cmpq $1, a21586
    je label22232
    jmp label22233
    
label22235:
    movq $0, a21587
    cmpq $1, a21587
    je label22232
    jmp label22233
    
label22236:
    cmpq temp21808, temp21807
    jg label22234
    jmp label22235
    
label22237:
    movq a21582, temp21808
    jmp label22236
    
label22238:
    movq $1, a21583
    movq a21583, a21582
    jmp label22237
    
label22239:
    movq $2, a21584
    movq a21584, a21582
    jmp label22237
    
label22240:
    cmpq $1, $3
    jg label22238
    jmp label22239
    
label22241:
    movq $2, a21585
    movq a21585, temp21808
    jmp label22236
    
label22242:
    cmpq temp21810, $3
    jg label22240
    jmp label22241
    
label22243:
    movq $1, a21580
    movq a21580, temp21810
    jmp label22242
    
label22260:
    movq $1, a21567
    movq a21567, temp21799
    jmp label22259
    
label22261:
    movq $2, a21568
    movq a21568, temp21799
    jmp label22259
    
label22262:
    cmpq $1, $3
    jg label22260
    jmp label22261
    
label22263:
    movq a21563, temp21792
    jmp label22262
    
label22264:
    movq $1, a21564
    movq a21564, a21563
    jmp label22263
    
label22265:
    movq $2, a21565
    movq a21565, a21563
    jmp label22263
    
label22266:
    cmpq $1, $3
    jg label22264
    jmp label22265
    
label22267:
    movq $2, a21566
    movq a21566, temp21792
    jmp label22262
    
label22268:
    cmpq temp21794, $3
    jg label22266
    jmp label22267
    
label22269:
    movq $1, a21561
    movq a21561, temp21794
    jmp label22268
    
label22270:
    movq $2, a21562
    movq a21562, temp21794
    jmp label22268
    
label22179:
    movq $0, a21629
    cmpq $1, a21629
    je label22176
    jmp label22177
    
label22178:
    movq $1, a21628
    cmpq $1, a21628
    je label22176
    jmp label22177
    
label22177:
    movq $2, a21617
    jmp label22167
    
label22176:
    cmpq $1, $3
    jg label22174
    jmp label22175
    
label22175:
    movq $2, a21631
    movq a21631, temp21840
    jmp label22173
    
label22174:
    movq $1, a21630
    movq a21630, temp21840
    jmp label22173
    
label22173:
    cmpq temp21840, $3
    jg label22171
    jmp label22172
    
label22172:
    movq $2, a21635
    movq a21635, a21617
    jmp label22167
    
label22171:
    cmpq $1, $3
    jg label22169
    jmp label22170
    
label22170:
    movq $2, a21634
    movq a21634, a21632
    jmp label22168
    
label22169:
    movq $1, a21633
    movq a21633, a21632
    jmp label22168
    
label22168:
    movq a21632, a21617
    jmp label22167
    
label22167:
    callq read_int
    movq %rax, temp21846
    cmpq $1, $3
    jg label22165
    jmp label22166
    
label22166:
    movq $2, a21638
    movq a21638, temp21849
    jmp label22164
    
label22165:
    movq $1, a21637
    movq a21637, temp21849
    jmp label22164
    
label22164:
    cmpq temp21849, $3
    jg label22162
    jmp label22163
    
label22195:
    movq $1, a21614
    movq a21614, a21613
    jmp label22194
    
label22194:
    movq a21613, a21598
    jmp label22193
    
label22193:
    callq read_int
    movq %rax, temp21833
    cmpq $1, $3
    jg label22191
    jmp label22192
    
label22192:
    movq $2, a21619
    movq a21619, temp21836
    jmp label22190
    
label22191:
    movq $1, a21618
    movq a21618, temp21836
    jmp label22190
    
label22190:
    cmpq temp21836, $3
    jg label22188
    jmp label22189
    
label22189:
    movq $2, a21623
    movq a21623, temp21834
    jmp label22184
    
label22188:
    cmpq $1, $3
    jg label22186
    jmp label22187
    
label22187:
    movq $2, a21622
    movq a21622, a21620
    jmp label22185
    
label22186:
    movq $1, a21621
    movq a21621, a21620
    jmp label22185
    
label22185:
    movq a21620, temp21834
    jmp label22184
    
label22184:
    cmpq temp21834, temp21833
    jg label22182
    jmp label22183
    
label22183:
    movq $0, a21625
    cmpq $1, a21625
    je label22180
    jmp label22181
    
label22182:
    movq $1, a21624
    cmpq $1, a21624
    je label22180
    jmp label22181
    
label22181:
    movq $0, a21627
    cmpq $1, a21627
    je label22178
    jmp label22179
    
label22180:
    movq $1, a21626
    cmpq $1, a21626
    je label22178
    jmp label22179
    
label22211:
    movq a21601, temp21821
    jmp label22210
    
label22210:
    cmpq temp21821, temp21820
    jg label22208
    jmp label22209
    
label22209:
    movq $0, a21606
    cmpq $1, a21606
    je label22206
    jmp label22207
    
label22208:
    movq $1, a21605
    cmpq $1, a21605
    je label22206
    jmp label22207
    
label22207:
    movq $0, a21608
    cmpq $1, a21608
    je label22204
    jmp label22205
    
label22206:
    movq $1, a21607
    cmpq $1, a21607
    je label22204
    jmp label22205
    
label22205:
    movq $0, a21610
    cmpq $1, a21610
    je label22202
    jmp label22203
    
label22204:
    movq $1, a21609
    cmpq $1, a21609
    je label22202
    jmp label22203
    
label22203:
    movq $2, a21598
    jmp label22193
    
label22202:
    cmpq $1, $3
    jg label22200
    jmp label22201
    
label22201:
    movq $2, a21612
    movq a21612, temp21827
    jmp label22199
    
label22200:
    movq $1, a21611
    movq a21611, temp21827
    jmp label22199
    
label22199:
    cmpq temp21827, $3
    jg label22197
    jmp label22198
    
label22198:
    movq $2, a21616
    movq a21616, a21598
    jmp label22193
    
label22197:
    cmpq $1, $3
    jg label22195
    jmp label22196
    
label22196:
    movq $2, a21615
    movq a21615, a21613
    jmp label22194
    
label22227:
    movq $2, a21593
    movq a21593, temp21814
    jmp label22225
    
label22226:
    movq $1, a21592
    movq a21592, temp21814
    jmp label22225
    
label22225:
    cmpq temp21814, $3
    jg label22223
    jmp label22224
    
label22224:
    movq $2, a21597
    movq a21597, a21579
    jmp label22219
    
label22223:
    cmpq $1, $3
    jg label22221
    jmp label22222
    
label22222:
    movq $2, a21596
    movq a21596, a21594
    jmp label22220
    
label22221:
    movq $1, a21595
    movq a21595, a21594
    jmp label22220
    
label22220:
    movq a21594, a21579
    jmp label22219
    
label22219:
    callq read_int
    movq %rax, temp21820
    cmpq $1, $3
    jg label22217
    jmp label22218
    
label22218:
    movq $2, a21600
    movq a21600, temp21823
    jmp label22216
    
label22217:
    movq $1, a21599
    movq a21599, temp21823
    jmp label22216
    
label22216:
    cmpq temp21823, $3
    jg label22214
    jmp label22215
    
label22215:
    movq $2, a21604
    movq a21604, temp21821
    jmp label22210
    
label22214:
    cmpq $1, $3
    jg label22212
    jmp label22213
    
label22213:
    movq $2, a21603
    movq a21603, a21601
    jmp label22211
    
label22212:
    movq $1, a21602
    movq a21602, a21601
    jmp label22211
    
label22115:
    callq read_int
    movq %rax, temp21870
    callq read_int
    movq %rax, temp21873
    cmpq $1, $3
    jg label22113
    jmp label22114
    
label22114:
    movq $2, a21676
    movq a21676, temp21876
    jmp label22112
    
label22113:
    movq $1, a21675
    movq a21675, temp21876
    jmp label22112
    
label22112:
    cmpq temp21876, $3
    jg label22110
    jmp label22111
    
label22111:
    movq $2, a21680
    movq a21680, temp21874
    jmp label22106
    
label22110:
    cmpq $1, $3
    jg label22108
    jmp label22109
    
label22109:
    movq $2, a21679
    movq a21679, a21677
    jmp label22107
    
label22108:
    movq $1, a21678
    movq a21678, a21677
    jmp label22107
    
label22107:
    movq a21677, temp21874
    jmp label22106
    
label22106:
    cmpq temp21874, temp21873
    jg label22104
    jmp label22105
    
label22105:
    movq $0, a21682
    cmpq $1, a21682
    je label22102
    jmp label22103
    
label22104:
    movq $1, a21681
    cmpq $1, a21681
    je label22102
    jmp label22103
    
label22103:
    movq $0, a21684
    cmpq $1, a21684
    je label22100
    jmp label22101
    
label22102:
    movq $1, a21683
    cmpq $1, a21683
    je label22100
    jmp label22101
    
label22101:
    movq $0, a21686
    cmpq $1, a21686
    je label22098
    jmp label22099
    
label22100:
    movq $1, a21685
    cmpq $1, a21685
    je label22098
    jmp label22099
    
label22131:
    movq $0, a21663
    cmpq $1, a21663
    je label22128
    jmp label22129
    
label22130:
    movq $1, a21662
    cmpq $1, a21662
    je label22128
    jmp label22129
    
label22129:
    movq $0, a21665
    cmpq $1, a21665
    je label22126
    jmp label22127
    
label22128:
    movq $1, a21664
    cmpq $1, a21664
    je label22126
    jmp label22127
    
label22127:
    movq $0, a21667
    cmpq $1, a21667
    je label22124
    jmp label22125
    
label22126:
    movq $1, a21666
    cmpq $1, a21666
    je label22124
    jmp label22125
    
label22125:
    movq $2, a21655
    jmp label22115
    
label22124:
    cmpq $1, $3
    jg label22122
    jmp label22123
    
label22123:
    movq $2, a21669
    movq a21669, temp21866
    jmp label22121
    
label22122:
    movq $1, a21668
    movq a21668, temp21866
    jmp label22121
    
label22121:
    cmpq temp21866, $3
    jg label22119
    jmp label22120
    
label22120:
    movq $2, a21673
    movq a21673, a21655
    jmp label22115
    
label22119:
    cmpq $1, $3
    jg label22117
    jmp label22118
    
label22118:
    movq $2, a21672
    movq a21672, a21670
    jmp label22116
    
label22117:
    movq $1, a21671
    movq a21671, a21670
    jmp label22116
    
label22116:
    movq a21670, a21655
    jmp label22115
    
label22147:
    cmpq temp21853, $3
    jg label22145
    jmp label22146
    
label22146:
    movq $2, a21654
    movq a21654, a21636
    jmp label22141
    
label22145:
    cmpq $1, $3
    jg label22143
    jmp label22144
    
label22144:
    movq $2, a21653
    movq a21653, a21651
    jmp label22142
    
label22143:
    movq $1, a21652
    movq a21652, a21651
    jmp label22142
    
label22142:
    movq a21651, a21636
    jmp label22141
    
label22141:
    callq read_int
    movq %rax, temp21859
    cmpq $1, $3
    jg label22139
    jmp label22140
    
label22140:
    movq $2, a21657
    movq a21657, temp21862
    jmp label22138
    
label22139:
    movq $1, a21656
    movq a21656, temp21862
    jmp label22138
    
label22138:
    cmpq temp21862, $3
    jg label22136
    jmp label22137
    
label22137:
    movq $2, a21661
    movq a21661, temp21860
    jmp label22132
    
label22136:
    cmpq $1, $3
    jg label22134
    jmp label22135
    
label22135:
    movq $2, a21660
    movq a21660, a21658
    jmp label22133
    
label22134:
    movq $1, a21659
    movq a21659, a21658
    jmp label22133
    
label22133:
    movq a21658, temp21860
    jmp label22132
    
label22132:
    cmpq temp21860, temp21859
    jg label22130
    jmp label22131
    
label22163:
    movq $2, a21642
    movq a21642, temp21847
    jmp label22158
    
label22162:
    cmpq $1, $3
    jg label22160
    jmp label22161
    
label22161:
    movq $2, a21641
    movq a21641, a21639
    jmp label22159
    
label22160:
    movq $1, a21640
    movq a21640, a21639
    jmp label22159
    
label22159:
    movq a21639, temp21847
    jmp label22158
    
label22158:
    cmpq temp21847, temp21846
    jg label22156
    jmp label22157
    
label22157:
    movq $0, a21644
    cmpq $1, a21644
    je label22154
    jmp label22155
    
label22156:
    movq $1, a21643
    cmpq $1, a21643
    je label22154
    jmp label22155
    
label22155:
    movq $0, a21646
    cmpq $1, a21646
    je label22152
    jmp label22153
    
label22154:
    movq $1, a21645
    cmpq $1, a21645
    je label22152
    jmp label22153
    
label22153:
    movq $0, a21648
    cmpq $1, a21648
    je label22150
    jmp label22151
    
label22152:
    movq $1, a21647
    cmpq $1, a21647
    je label22150
    jmp label22151
    
label22151:
    movq $2, a21636
    jmp label22141
    
label22150:
    cmpq $1, $3
    jg label22148
    jmp label22149
    
label22149:
    movq $2, a21650
    movq a21650, temp21853
    jmp label22147
    
label22148:
    movq $1, a21649
    movq a21649, temp21853
    jmp label22147
    
label22051:
    movq $0, a21722
    cmpq $1, a21722
    je label22048
    jmp label22049
    
label22050:
    movq $1, a21721
    cmpq $1, a21721
    je label22048
    jmp label22049
    
label22049:
    movq $0, a21724
    cmpq $1, a21724
    je label22046
    jmp label22047
    
label22048:
    movq $1, a21723
    cmpq $1, a21723
    je label22046
    jmp label22047
    
label22047:
    movq $2, a21712
    jmp label22037
    
label22046:
    cmpq $1, $3
    jg label22044
    jmp label22045
    
label22045:
    movq $2, a21726
    movq a21726, temp21906
    jmp label22043
    
label22044:
    movq $1, a21725
    movq a21725, temp21906
    jmp label22043
    
label22043:
    cmpq temp21906, $3
    jg label22041
    jmp label22042
    
label22042:
    movq $2, a21730
    movq a21730, a21712
    jmp label22037
    
label22041:
    cmpq $1, $3
    jg label22039
    jmp label22040
    
label22040:
    movq $2, a21729
    movq a21729, a21727
    jmp label22038
    
label22039:
    movq $1, a21728
    movq a21728, a21727
    jmp label22038
    
label22038:
    movq a21727, a21712
    jmp label22037
    
label22037:
    callq read_int
    movq %rax, temp21912
    cmpq $1, $3
    jg label22035
    jmp label22036
    
label22036:
    movq $2, a21733
    movq a21733, temp21915
    jmp label22034
    
label22067:
    cmpq $1, $3
    jg label22065
    jmp label22066
    
label22066:
    movq $2, a21710
    movq a21710, a21708
    jmp label22064
    
label22065:
    movq $1, a21709
    movq a21709, a21708
    jmp label22064
    
label22064:
    movq a21708, a21693
    jmp label22063
    
label22063:
    callq read_int
    movq %rax, temp21899
    cmpq $1, $3
    jg label22061
    jmp label22062
    
label22062:
    movq $2, a21714
    movq a21714, temp21902
    jmp label22060
    
label22061:
    movq $1, a21713
    movq a21713, temp21902
    jmp label22060
    
label22060:
    cmpq temp21902, $3
    jg label22058
    jmp label22059
    
label22059:
    movq $2, a21718
    movq a21718, temp21900
    jmp label22054
    
label22058:
    cmpq $1, $3
    jg label22056
    jmp label22057
    
label22057:
    movq $2, a21717
    movq a21717, a21715
    jmp label22055
    
label22056:
    movq $1, a21716
    movq a21716, a21715
    jmp label22055
    
label22055:
    movq a21715, temp21900
    jmp label22054
    
label22054:
    cmpq temp21900, temp21899
    jg label22052
    jmp label22053
    
label22053:
    movq $0, a21720
    cmpq $1, a21720
    je label22050
    jmp label22051
    
label22052:
    movq $1, a21719
    cmpq $1, a21719
    je label22050
    jmp label22051
    
label22083:
    movq $2, a21698
    movq a21698, a21696
    jmp label22081
    
label22082:
    movq $1, a21697
    movq a21697, a21696
    jmp label22081
    
label22081:
    movq a21696, temp21887
    jmp label22080
    
label22080:
    cmpq temp21887, temp21886
    jg label22078
    jmp label22079
    
label22079:
    movq $0, a21701
    cmpq $1, a21701
    je label22076
    jmp label22077
    
label22078:
    movq $1, a21700
    cmpq $1, a21700
    je label22076
    jmp label22077
    
label22077:
    movq $0, a21703
    cmpq $1, a21703
    je label22074
    jmp label22075
    
label22076:
    movq $1, a21702
    cmpq $1, a21702
    je label22074
    jmp label22075
    
label22075:
    movq $0, a21705
    cmpq $1, a21705
    je label22072
    jmp label22073
    
label22074:
    movq $1, a21704
    cmpq $1, a21704
    je label22072
    jmp label22073
    
label22073:
    movq $2, a21693
    jmp label22063
    
label22072:
    cmpq $1, $3
    jg label22070
    jmp label22071
    
label22071:
    movq $2, a21707
    movq a21707, temp21893
    jmp label22069
    
label22070:
    movq $1, a21706
    movq a21706, temp21893
    jmp label22069
    
label22069:
    cmpq temp21893, $3
    jg label22067
    jmp label22068
    
label22068:
    movq $2, a21711
    movq a21711, a21693
    jmp label22063
    
label22099:
    movq $2, a21674
    jmp label22089
    
label22098:
    cmpq $1, $3
    jg label22096
    jmp label22097
    
label22097:
    movq $2, a21688
    movq a21688, temp21880
    jmp label22095
    
label22096:
    movq $1, a21687
    movq a21687, temp21880
    jmp label22095
    
label22095:
    cmpq temp21880, $3
    jg label22093
    jmp label22094
    
label22094:
    movq $2, a21692
    movq a21692, a21674
    jmp label22089
    
label22093:
    cmpq $1, $3
    jg label22091
    jmp label22092
    
label22092:
    movq $2, a21691
    movq a21691, a21689
    jmp label22090
    
label22091:
    movq $1, a21690
    movq a21690, a21689
    jmp label22090
    
start:
    cmpq $1, $3
    jg label22269
    jmp label22270
    
label22090:
    movq a21689, a21674
    jmp label22089
    
label22089:
    callq read_int
    movq %rax, temp21886
    cmpq $1, $3
    jg label22087
    jmp label22088
    
label22088:
    movq $2, a21695
    movq a21695, temp21889
    jmp label22086
    
label22087:
    movq $1, a21694
    movq a21694, temp21889
    jmp label22086
    
label22086:
    cmpq temp21889, $3
    jg label22084
    jmp label22085
    
label22085:
    movq $2, a21699
    movq a21699, temp21887
    jmp label22080
    
label22084:
    cmpq $1, $3
    jg label22082
    jmp label22083
    
label21987:
    movq $1, a21767
    movq a21767, a21766
    jmp label21986
    
label21986:
    movq a21766, a21751
    jmp label21985
    
label21985:
    callq read_int
    movq %rax, temp21941
    cmpq $1, $3
    jg label21983
    jmp label21984
    
label21984:
    movq $2, a21772
    movq a21772, temp21944
    jmp label21982
    
label21983:
    movq $1, a21771
    movq a21771, temp21944
    jmp label21982
    
label21982:
    cmpq temp21944, $3
    jg label21980
    jmp label21981
    
label21981:
    movq $2, a21776
    movq a21776, temp21942
    jmp label21976
    
label21980:
    cmpq $1, $3
    jg label21978
    jmp label21979
    
label21979:
    movq $2, a21775
    movq a21775, a21773
    jmp label21977
    
label21978:
    movq $1, a21774
    movq a21774, a21773
    jmp label21977
    
label21977:
    movq a21773, temp21942
    jmp label21976
    
label21976:
    cmpq temp21942, temp21941
    jg label21974
    jmp label21975
    
label21975:
    movq $0, a21778
    cmpq $1, a21778
    je label21972
    jmp label21973
    
label21974:
    movq $1, a21777
    cmpq $1, a21777
    je label21972
    jmp label21973
    
label21973:
    movq $0, a21780
    cmpq $1, a21780
    je label21970
    jmp label21971
    
label21972:
    movq $1, a21779
    cmpq $1, a21779
    je label21970
    jmp label21971
    
label22003:
    movq a21754, temp21929
    jmp label22002
    
label22002:
    cmpq temp21929, temp21928
    jg label22000
    jmp label22001
    
label22001:
    movq $0, a21759
    cmpq $1, a21759
    je label21998
    jmp label21999
    
label22000:
    movq $1, a21758
    cmpq $1, a21758
    je label21998
    jmp label21999
    
label21999:
    movq $0, a21761
    cmpq $1, a21761
    je label21996
    jmp label21997
    
label21998:
    movq $1, a21760
    cmpq $1, a21760
    je label21996
    jmp label21997
    
label21997:
    movq $0, a21763
    cmpq $1, a21763
    je label21994
    jmp label21995
    
label21996:
    movq $1, a21762
    cmpq $1, a21762
    je label21994
    jmp label21995
    
label21995:
    movq $2, a21751
    jmp label21985
    
label21994:
    cmpq $1, $3
    jg label21992
    jmp label21993
    
label21993:
    movq $2, a21765
    movq a21765, temp21935
    jmp label21991
    
label21992:
    movq $1, a21764
    movq a21764, temp21935
    jmp label21991
    
label21991:
    cmpq temp21935, $3
    jg label21989
    jmp label21990
    
label21990:
    movq $2, a21769
    movq a21769, a21751
    jmp label21985
    
label21989:
    cmpq $1, $3
    jg label21987
    jmp label21988
    
label21988:
    movq $2, a21768
    movq a21768, a21766
    jmp label21986
    
label22019:
    movq $2, a21745
    movq a21745, temp21919
    jmp label22017
    
label22018:
    movq $1, a21744
    movq a21744, temp21919
    jmp label22017
    
label22017:
    cmpq temp21919, $3
    jg label22015
    jmp label22016
    
label22016:
    movq $2, a21749
    movq a21749, a21731
    jmp label22011
    
label22015:
    cmpq $1, $3
    jg label22013
    jmp label22014
    
label22014:
    movq $2, a21748
    movq a21748, a21746
    jmp label22012
    
label22013:
    movq $1, a21747
    movq a21747, a21746
    jmp label22012
    
label22012:
    movq a21746, a21731
    jmp label22011
    
label22011:
    callq read_int
    movq %rax, a21750
    callq read_int
    movq %rax, temp21928
    cmpq $1, $3
    jg label22009
    jmp label22010
    
label22010:
    movq $2, a21753
    movq a21753, temp21931
    jmp label22008
    
label22009:
    movq $1, a21752
    movq a21752, temp21931
    jmp label22008
    
label22008:
    cmpq temp21931, $3
    jg label22006
    jmp label22007
    
label22007:
    movq $2, a21757
    movq a21757, temp21929
    jmp label22002
    
label22006:
    cmpq $1, $3
    jg label22004
    jmp label22005
    
label22005:
    movq $2, a21756
    movq a21756, a21754
    jmp label22003
    
label22004:
    movq $1, a21755
    movq a21755, a21754
    jmp label22003
    
label22035:
    movq $1, a21732
    movq a21732, temp21915
    jmp label22034
    
label22034:
    cmpq temp21915, $3
    jg label22032
    jmp label22033
    
label22033:
    movq $2, a21737
    movq a21737, temp21913
    jmp label22028
    
label22032:
    cmpq $1, $3
    jg label22030
    jmp label22031
    
label22031:
    movq $2, a21736
    movq a21736, a21734
    jmp label22029
    
label22030:
    movq $1, a21735
    movq a21735, a21734
    jmp label22029
    
label22029:
    movq a21734, temp21913
    jmp label22028
    
label22028:
    cmpq temp21913, temp21912
    jg label22026
    jmp label22027
    
label22027:
    movq $0, a21739
    cmpq $1, a21739
    je label22024
    jmp label22025
    
label22026:
    movq $1, a21738
    cmpq $1, a21738
    je label22024
    jmp label22025
    
label22025:
    movq $0, a21741
    cmpq $1, a21741
    je label22022
    jmp label22023
    
label22024:
    movq $1, a21740
    cmpq $1, a21740
    je label22022
    jmp label22023
    
label22023:
    movq $0, a21743
    cmpq $1, a21743
    je label22020
    jmp label22021
    
label22022:
    movq $1, a21742
    cmpq $1, a21742
    je label22020
    jmp label22021
    
label22021:
    movq $2, a21731
    jmp label22011
    
label22020:
    cmpq $1, $3
    jg label22018
    jmp label22019
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
label21954:
    cmpq $1, $3
    jg label21952
    jmp label21953
    
label21955:
    movq $2, a21578
    movq a21578, %rax
    jmp conclusion
    
label21952:
    movq $1, a21576
    movq a21576, a21575
    jmp label21951
    
label21953:
    movq $2, a21577
    movq a21577, a21575
    jmp label21951
    
label21951:
    movq a21575, %rax
    jmp conclusion
    
label21970:
    movq $1, a21781
    cmpq $1, a21781
    je label21968
    jmp label21969
    
label21971:
    movq $0, a21782
    cmpq $1, a21782
    je label21968
    jmp label21969
    
label21968:
    cmpq $1, $3
    jg label21966
    jmp label21967
    
label21969:
    movq $2, a21770
    jmp label21959
    
label21966:
    movq $1, a21783
    movq a21783, temp21948
    jmp label21965
    
label21967:
    movq $2, a21784
    movq a21784, temp21948
    jmp label21965
    
label21964:
    movq $2, a21788
    movq a21788, a21770
    jmp label21959
    
label21965:
    cmpq temp21948, $3
    jg label21963
    jmp label21964
    
label21962:
    movq $2, a21787
    movq a21787, a21785
    jmp label21960
    
label21963:
    cmpq $1, $3
    jg label21961
    jmp label21962
    
label21960:
    movq a21785, a21770
    jmp label21959
    
label21961:
    movq $1, a21786
    movq a21786, a21785
    jmp label21960
    
label21958:
    movq $2, a21574
    movq a21574, temp21803
    jmp label21956
    
label21959:
    movq a21770, temp21939
    movq a21751, temp21926
    addq temp21939, temp21926
    movq a21750, temp21923
    addq temp21926, temp21923
    movq a21731, temp21910
    addq temp21923, temp21910
    movq a21712, temp21897
    addq temp21910, temp21897
    movq a21693, temp21884
    addq temp21897, temp21884
    movq a21674, temp21871
    addq temp21884, temp21871
    movq temp21870, temp21857
    addq temp21871, temp21857
    movq a21636, temp21844
    addq temp21857, temp21844
    movq a21617, temp21831
    addq temp21844, temp21831
    movq a21598, temp21818
    addq temp21831, temp21818
    movq a21579, %rax
    addq temp21818, %rax
    jmp conclusion
    
label21956:
    cmpq temp21803, $3
    jg label21954
    jmp label21955
    
label21957:
    movq $1, a21573
    movq a21573, temp21803
    jmp label21956
    
label22244:
    movq $2, a21581
    movq a21581, temp21810
    jmp label22242
    
label22245:
    cmpq $1, $3
    jg label21957
    jmp label21958
    
label22246:
    callq read_int
    movq %rax, temp21807
    cmpq $1, $3
    jg label22243
    jmp label22244
    
label22247:
    cmpq $1, x21560
    je label22245
    jmp label22246
    
label22248:
    movq $1, x21560
    jmp label22247
    
label22249:
    movq $0, x21560
    jmp label22247
    
label22250:
    cmpq $8, temp21790
    jg label22248
    jmp label22249
    
label22251:
    movq $8, temp21790
    jmp label22250
    
label22252:
    movq $9, temp21790
    jmp label22250
    
label22253:
    cmpq temp21797, temp21792
    jge label22251
    jmp label22252
    
label22254:
    movq a21569, temp21797
    jmp label22253
    
label22255:
    movq $1, a21570
    movq a21570, a21569
    jmp label22254
    
label22256:
    movq $2, a21571
    movq a21571, a21569
    jmp label22254
    
label22257:
    cmpq $1, $3
    jg label22255
    jmp label22256
    
label22258:
    movq $2, a21572
    movq a21572, temp21797
    jmp label22253
    
label22259:
    cmpq temp21799, $3
    jg label22257
    jmp label22258
    
label22228:
    cmpq $1, $3
    jg label22226
    jmp label22227
    
label22229:
    movq $2, a21579
    jmp label22219
    
label22230:
    movq $1, a21590
    cmpq $1, a21590
    je label22228
    jmp label22229
    
label22231:
    movq $0, a21591
    cmpq $1, a21591
    je label22228
    jmp label22229
    
label22232:
    movq $1, a21588
    cmpq $1, a21588
    je label22230
    jmp label22231
    
label22233:
    movq $0, a21589
    cmpq $1, a21589
    je label22230
    jmp label22231
    
label22234:
    movq $1, a21586
    cmpq $1, a21586
    je label22232
    jmp label22233
    
label22235:
    movq $0, a21587
    cmpq $1, a21587
    je label22232
    jmp label22233
    
label22236:
    cmpq temp21808, temp21807
    jg label22234
    jmp label22235
    
label22237:
    movq a21582, temp21808
    jmp label22236
    
label22238:
    movq $1, a21583
    movq a21583, a21582
    jmp label22237
    
label22239:
    movq $2, a21584
    movq a21584, a21582
    jmp label22237
    
label22240:
    cmpq $1, $3
    jg label22238
    jmp label22239
    
label22241:
    movq $2, a21585
    movq a21585, temp21808
    jmp label22236
    
label22242:
    cmpq temp21810, $3
    jg label22240
    jmp label22241
    
label22243:
    movq $1, a21580
    movq a21580, temp21810
    jmp label22242
    
label22260:
    movq $1, a21567
    movq a21567, temp21799
    jmp label22259
    
label22261:
    movq $2, a21568
    movq a21568, temp21799
    jmp label22259
    
label22262:
    cmpq $1, $3
    jg label22260
    jmp label22261
    
label22263:
    movq a21563, temp21792
    jmp label22262
    
label22264:
    movq $1, a21564
    movq a21564, a21563
    jmp label22263
    
label22265:
    movq $2, a21565
    movq a21565, a21563
    jmp label22263
    
label22266:
    cmpq $1, $3
    jg label22264
    jmp label22265
    
label22267:
    movq $2, a21566
    movq a21566, temp21792
    jmp label22262
    
label22268:
    cmpq temp21794, $3
    jg label22266
    jmp label22267
    
label22269:
    movq $1, a21561
    movq a21561, temp21794
    jmp label22268
    
label22270:
    movq $2, a21562
    movq a21562, temp21794
    jmp label22268
    
label22179:
    movq $0, a21629
    cmpq $1, a21629
    je label22176
    jmp label22177
    
label22178:
    movq $1, a21628
    cmpq $1, a21628
    je label22176
    jmp label22177
    
label22177:
    movq $2, a21617
    jmp label22167
    
label22176:
    cmpq $1, $3
    jg label22174
    jmp label22175
    
label22175:
    movq $2, a21631
    movq a21631, temp21840
    jmp label22173
    
label22174:
    movq $1, a21630
    movq a21630, temp21840
    jmp label22173
    
label22173:
    cmpq temp21840, $3
    jg label22171
    jmp label22172
    
label22172:
    movq $2, a21635
    movq a21635, a21617
    jmp label22167
    
label22171:
    cmpq $1, $3
    jg label22169
    jmp label22170
    
label22170:
    movq $2, a21634
    movq a21634, a21632
    jmp label22168
    
label22169:
    movq $1, a21633
    movq a21633, a21632
    jmp label22168
    
label22168:
    movq a21632, a21617
    jmp label22167
    
label22167:
    callq read_int
    movq %rax, temp21846
    cmpq $1, $3
    jg label22165
    jmp label22166
    
label22166:
    movq $2, a21638
    movq a21638, temp21849
    jmp label22164
    
label22165:
    movq $1, a21637
    movq a21637, temp21849
    jmp label22164
    
label22164:
    cmpq temp21849, $3
    jg label22162
    jmp label22163
    
label22195:
    movq $1, a21614
    movq a21614, a21613
    jmp label22194
    
label22194:
    movq a21613, a21598
    jmp label22193
    
label22193:
    callq read_int
    movq %rax, temp21833
    cmpq $1, $3
    jg label22191
    jmp label22192
    
label22192:
    movq $2, a21619
    movq a21619, temp21836
    jmp label22190
    
label22191:
    movq $1, a21618
    movq a21618, temp21836
    jmp label22190
    
label22190:
    cmpq temp21836, $3
    jg label22188
    jmp label22189
    
label22189:
    movq $2, a21623
    movq a21623, temp21834
    jmp label22184
    
label22188:
    cmpq $1, $3
    jg label22186
    jmp label22187
    
label22187:
    movq $2, a21622
    movq a21622, a21620
    jmp label22185
    
label22186:
    movq $1, a21621
    movq a21621, a21620
    jmp label22185
    
label22185:
    movq a21620, temp21834
    jmp label22184
    
label22184:
    cmpq temp21834, temp21833
    jg label22182
    jmp label22183
    
label22183:
    movq $0, a21625
    cmpq $1, a21625
    je label22180
    jmp label22181
    
label22182:
    movq $1, a21624
    cmpq $1, a21624
    je label22180
    jmp label22181
    
label22181:
    movq $0, a21627
    cmpq $1, a21627
    je label22178
    jmp label22179
    
label22180:
    movq $1, a21626
    cmpq $1, a21626
    je label22178
    jmp label22179
    
label22211:
    movq a21601, temp21821
    jmp label22210
    
label22210:
    cmpq temp21821, temp21820
    jg label22208
    jmp label22209
    
label22209:
    movq $0, a21606
    cmpq $1, a21606
    je label22206
    jmp label22207
    
label22208:
    movq $1, a21605
    cmpq $1, a21605
    je label22206
    jmp label22207
    
label22207:
    movq $0, a21608
    cmpq $1, a21608
    je label22204
    jmp label22205
    
label22206:
    movq $1, a21607
    cmpq $1, a21607
    je label22204
    jmp label22205
    
label22205:
    movq $0, a21610
    cmpq $1, a21610
    je label22202
    jmp label22203
    
label22204:
    movq $1, a21609
    cmpq $1, a21609
    je label22202
    jmp label22203
    
label22203:
    movq $2, a21598
    jmp label22193
    
label22202:
    cmpq $1, $3
    jg label22200
    jmp label22201
    
label22201:
    movq $2, a21612
    movq a21612, temp21827
    jmp label22199
    
label22200:
    movq $1, a21611
    movq a21611, temp21827
    jmp label22199
    
label22199:
    cmpq temp21827, $3
    jg label22197
    jmp label22198
    
label22198:
    movq $2, a21616
    movq a21616, a21598
    jmp label22193
    
label22197:
    cmpq $1, $3
    jg label22195
    jmp label22196
    
label22196:
    movq $2, a21615
    movq a21615, a21613
    jmp label22194
    
label22227:
    movq $2, a21593
    movq a21593, temp21814
    jmp label22225
    
label22226:
    movq $1, a21592
    movq a21592, temp21814
    jmp label22225
    
label22225:
    cmpq temp21814, $3
    jg label22223
    jmp label22224
    
label22224:
    movq $2, a21597
    movq a21597, a21579
    jmp label22219
    
label22223:
    cmpq $1, $3
    jg label22221
    jmp label22222
    
label22222:
    movq $2, a21596
    movq a21596, a21594
    jmp label22220
    
label22221:
    movq $1, a21595
    movq a21595, a21594
    jmp label22220
    
label22220:
    movq a21594, a21579
    jmp label22219
    
label22219:
    callq read_int
    movq %rax, temp21820
    cmpq $1, $3
    jg label22217
    jmp label22218
    
label22218:
    movq $2, a21600
    movq a21600, temp21823
    jmp label22216
    
label22217:
    movq $1, a21599
    movq a21599, temp21823
    jmp label22216
    
label22216:
    cmpq temp21823, $3
    jg label22214
    jmp label22215
    
label22215:
    movq $2, a21604
    movq a21604, temp21821
    jmp label22210
    
label22214:
    cmpq $1, $3
    jg label22212
    jmp label22213
    
label22213:
    movq $2, a21603
    movq a21603, a21601
    jmp label22211
    
label22212:
    movq $1, a21602
    movq a21602, a21601
    jmp label22211
    
label22115:
    callq read_int
    movq %rax, temp21870
    callq read_int
    movq %rax, temp21873
    cmpq $1, $3
    jg label22113
    jmp label22114
    
label22114:
    movq $2, a21676
    movq a21676, temp21876
    jmp label22112
    
label22113:
    movq $1, a21675
    movq a21675, temp21876
    jmp label22112
    
label22112:
    cmpq temp21876, $3
    jg label22110
    jmp label22111
    
label22111:
    movq $2, a21680
    movq a21680, temp21874
    jmp label22106
    
label22110:
    cmpq $1, $3
    jg label22108
    jmp label22109
    
label22109:
    movq $2, a21679
    movq a21679, a21677
    jmp label22107
    
label22108:
    movq $1, a21678
    movq a21678, a21677
    jmp label22107
    
label22107:
    movq a21677, temp21874
    jmp label22106
    
label22106:
    cmpq temp21874, temp21873
    jg label22104
    jmp label22105
    
label22105:
    movq $0, a21682
    cmpq $1, a21682
    je label22102
    jmp label22103
    
label22104:
    movq $1, a21681
    cmpq $1, a21681
    je label22102
    jmp label22103
    
label22103:
    movq $0, a21684
    cmpq $1, a21684
    je label22100
    jmp label22101
    
label22102:
    movq $1, a21683
    cmpq $1, a21683
    je label22100
    jmp label22101
    
label22101:
    movq $0, a21686
    cmpq $1, a21686
    je label22098
    jmp label22099
    
label22100:
    movq $1, a21685
    cmpq $1, a21685
    je label22098
    jmp label22099
    
label22131:
    movq $0, a21663
    cmpq $1, a21663
    je label22128
    jmp label22129
    
label22130:
    movq $1, a21662
    cmpq $1, a21662
    je label22128
    jmp label22129
    
label22129:
    movq $0, a21665
    cmpq $1, a21665
    je label22126
    jmp label22127
    
label22128:
    movq $1, a21664
    cmpq $1, a21664
    je label22126
    jmp label22127
    
label22127:
    movq $0, a21667
    cmpq $1, a21667
    je label22124
    jmp label22125
    
label22126:
    movq $1, a21666
    cmpq $1, a21666
    je label22124
    jmp label22125
    
label22125:
    movq $2, a21655
    jmp label22115
    
label22124:
    cmpq $1, $3
    jg label22122
    jmp label22123
    
label22123:
    movq $2, a21669
    movq a21669, temp21866
    jmp label22121
    
label22122:
    movq $1, a21668
    movq a21668, temp21866
    jmp label22121
    
label22121:
    cmpq temp21866, $3
    jg label22119
    jmp label22120
    
label22120:
    movq $2, a21673
    movq a21673, a21655
    jmp label22115
    
label22119:
    cmpq $1, $3
    jg label22117
    jmp label22118
    
label22118:
    movq $2, a21672
    movq a21672, a21670
    jmp label22116
    
label22117:
    movq $1, a21671
    movq a21671, a21670
    jmp label22116
    
label22116:
    movq a21670, a21655
    jmp label22115
    
label22147:
    cmpq temp21853, $3
    jg label22145
    jmp label22146
    
label22146:
    movq $2, a21654
    movq a21654, a21636
    jmp label22141
    
label22145:
    cmpq $1, $3
    jg label22143
    jmp label22144
    
label22144:
    movq $2, a21653
    movq a21653, a21651
    jmp label22142
    
label22143:
    movq $1, a21652
    movq a21652, a21651
    jmp label22142
    
label22142:
    movq a21651, a21636
    jmp label22141
    
label22141:
    callq read_int
    movq %rax, temp21859
    cmpq $1, $3
    jg label22139
    jmp label22140
    
label22140:
    movq $2, a21657
    movq a21657, temp21862
    jmp label22138
    
label22139:
    movq $1, a21656
    movq a21656, temp21862
    jmp label22138
    
label22138:
    cmpq temp21862, $3
    jg label22136
    jmp label22137
    
label22137:
    movq $2, a21661
    movq a21661, temp21860
    jmp label22132
    
label22136:
    cmpq $1, $3
    jg label22134
    jmp label22135
    
label22135:
    movq $2, a21660
    movq a21660, a21658
    jmp label22133
    
label22134:
    movq $1, a21659
    movq a21659, a21658
    jmp label22133
    
label22133:
    movq a21658, temp21860
    jmp label22132
    
label22132:
    cmpq temp21860, temp21859
    jg label22130
    jmp label22131
    
label22163:
    movq $2, a21642
    movq a21642, temp21847
    jmp label22158
    
label22162:
    cmpq $1, $3
    jg label22160
    jmp label22161
    
label22161:
    movq $2, a21641
    movq a21641, a21639
    jmp label22159
    
label22160:
    movq $1, a21640
    movq a21640, a21639
    jmp label22159
    
label22159:
    movq a21639, temp21847
    jmp label22158
    
label22158:
    cmpq temp21847, temp21846
    jg label22156
    jmp label22157
    
label22157:
    movq $0, a21644
    cmpq $1, a21644
    je label22154
    jmp label22155
    
label22156:
    movq $1, a21643
    cmpq $1, a21643
    je label22154
    jmp label22155
    
label22155:
    movq $0, a21646
    cmpq $1, a21646
    je label22152
    jmp label22153
    
label22154:
    movq $1, a21645
    cmpq $1, a21645
    je label22152
    jmp label22153
    
label22153:
    movq $0, a21648
    cmpq $1, a21648
    je label22150
    jmp label22151
    
label22152:
    movq $1, a21647
    cmpq $1, a21647
    je label22150
    jmp label22151
    
label22151:
    movq $2, a21636
    jmp label22141
    
label22150:
    cmpq $1, $3
    jg label22148
    jmp label22149
    
label22149:
    movq $2, a21650
    movq a21650, temp21853
    jmp label22147
    
label22148:
    movq $1, a21649
    movq a21649, temp21853
    jmp label22147
    
label22051:
    movq $0, a21722
    cmpq $1, a21722
    je label22048
    jmp label22049
    
label22050:
    movq $1, a21721
    cmpq $1, a21721
    je label22048
    jmp label22049
    
label22049:
    movq $0, a21724
    cmpq $1, a21724
    je label22046
    jmp label22047
    
label22048:
    movq $1, a21723
    cmpq $1, a21723
    je label22046
    jmp label22047
    
label22047:
    movq $2, a21712
    jmp label22037
    
label22046:
    cmpq $1, $3
    jg label22044
    jmp label22045
    
label22045:
    movq $2, a21726
    movq a21726, temp21906
    jmp label22043
    
label22044:
    movq $1, a21725
    movq a21725, temp21906
    jmp label22043
    
label22043:
    cmpq temp21906, $3
    jg label22041
    jmp label22042
    
label22042:
    movq $2, a21730
    movq a21730, a21712
    jmp label22037
    
label22041:
    cmpq $1, $3
    jg label22039
    jmp label22040
    
label22040:
    movq $2, a21729
    movq a21729, a21727
    jmp label22038
    
label22039:
    movq $1, a21728
    movq a21728, a21727
    jmp label22038
    
label22038:
    movq a21727, a21712
    jmp label22037
    
label22037:
    callq read_int
    movq %rax, temp21912
    cmpq $1, $3
    jg label22035
    jmp label22036
    
label22036:
    movq $2, a21733
    movq a21733, temp21915
    jmp label22034
    
label22067:
    cmpq $1, $3
    jg label22065
    jmp label22066
    
label22066:
    movq $2, a21710
    movq a21710, a21708
    jmp label22064
    
label22065:
    movq $1, a21709
    movq a21709, a21708
    jmp label22064
    
label22064:
    movq a21708, a21693
    jmp label22063
    
label22063:
    callq read_int
    movq %rax, temp21899
    cmpq $1, $3
    jg label22061
    jmp label22062
    
label22062:
    movq $2, a21714
    movq a21714, temp21902
    jmp label22060
    
label22061:
    movq $1, a21713
    movq a21713, temp21902
    jmp label22060
    
label22060:
    cmpq temp21902, $3
    jg label22058
    jmp label22059
    
label22059:
    movq $2, a21718
    movq a21718, temp21900
    jmp label22054
    
label22058:
    cmpq $1, $3
    jg label22056
    jmp label22057
    
label22057:
    movq $2, a21717
    movq a21717, a21715
    jmp label22055
    
label22056:
    movq $1, a21716
    movq a21716, a21715
    jmp label22055
    
label22055:
    movq a21715, temp21900
    jmp label22054
    
label22054:
    cmpq temp21900, temp21899
    jg label22052
    jmp label22053
    
label22053:
    movq $0, a21720
    cmpq $1, a21720
    je label22050
    jmp label22051
    
label22052:
    movq $1, a21719
    cmpq $1, a21719
    je label22050
    jmp label22051
    
label22083:
    movq $2, a21698
    movq a21698, a21696
    jmp label22081
    
label22082:
    movq $1, a21697
    movq a21697, a21696
    jmp label22081
    
label22081:
    movq a21696, temp21887
    jmp label22080
    
label22080:
    cmpq temp21887, temp21886
    jg label22078
    jmp label22079
    
label22079:
    movq $0, a21701
    cmpq $1, a21701
    je label22076
    jmp label22077
    
label22078:
    movq $1, a21700
    cmpq $1, a21700
    je label22076
    jmp label22077
    
label22077:
    movq $0, a21703
    cmpq $1, a21703
    je label22074
    jmp label22075
    
label22076:
    movq $1, a21702
    cmpq $1, a21702
    je label22074
    jmp label22075
    
label22075:
    movq $0, a21705
    cmpq $1, a21705
    je label22072
    jmp label22073
    
label22074:
    movq $1, a21704
    cmpq $1, a21704
    je label22072
    jmp label22073
    
label22073:
    movq $2, a21693
    jmp label22063
    
label22072:
    cmpq $1, $3
    jg label22070
    jmp label22071
    
label22071:
    movq $2, a21707
    movq a21707, temp21893
    jmp label22069
    
label22070:
    movq $1, a21706
    movq a21706, temp21893
    jmp label22069
    
label22069:
    cmpq temp21893, $3
    jg label22067
    jmp label22068
    
label22068:
    movq $2, a21711
    movq a21711, a21693
    jmp label22063
    
label22099:
    movq $2, a21674
    jmp label22089
    
label22098:
    cmpq $1, $3
    jg label22096
    jmp label22097
    
label22097:
    movq $2, a21688
    movq a21688, temp21880
    jmp label22095
    
label22096:
    movq $1, a21687
    movq a21687, temp21880
    jmp label22095
    
label22095:
    cmpq temp21880, $3
    jg label22093
    jmp label22094
    
label22094:
    movq $2, a21692
    movq a21692, a21674
    jmp label22089
    
label22093:
    cmpq $1, $3
    jg label22091
    jmp label22092
    
label22092:
    movq $2, a21691
    movq a21691, a21689
    jmp label22090
    
label22091:
    movq $1, a21690
    movq a21690, a21689
    jmp label22090
    
start:
    cmpq $1, $3
    jg label22269
    jmp label22270
    
label22090:
    movq a21689, a21674
    jmp label22089
    
label22089:
    callq read_int
    movq %rax, temp21886
    cmpq $1, $3
    jg label22087
    jmp label22088
    
label22088:
    movq $2, a21695
    movq a21695, temp21889
    jmp label22086
    
label22087:
    movq $1, a21694
    movq a21694, temp21889
    jmp label22086
    
label22086:
    cmpq temp21889, $3
    jg label22084
    jmp label22085
    
label22085:
    movq $2, a21699
    movq a21699, temp21887
    jmp label22080
    
label22084:
    cmpq $1, $3
    jg label22082
    jmp label22083
    
label21987:
    movq $1, a21767
    movq a21767, a21766
    jmp label21986
    
label21986:
    movq a21766, a21751
    jmp label21985
    
label21985:
    callq read_int
    movq %rax, temp21941
    cmpq $1, $3
    jg label21983
    jmp label21984
    
label21984:
    movq $2, a21772
    movq a21772, temp21944
    jmp label21982
    
label21983:
    movq $1, a21771
    movq a21771, temp21944
    jmp label21982
    
label21982:
    cmpq temp21944, $3
    jg label21980
    jmp label21981
    
label21981:
    movq $2, a21776
    movq a21776, temp21942
    jmp label21976
    
label21980:
    cmpq $1, $3
    jg label21978
    jmp label21979
    
label21979:
    movq $2, a21775
    movq a21775, a21773
    jmp label21977
    
label21978:
    movq $1, a21774
    movq a21774, a21773
    jmp label21977
    
label21977:
    movq a21773, temp21942
    jmp label21976
    
label21976:
    cmpq temp21942, temp21941
    jg label21974
    jmp label21975
    
label21975:
    movq $0, a21778
    cmpq $1, a21778
    je label21972
    jmp label21973
    
label21974:
    movq $1, a21777
    cmpq $1, a21777
    je label21972
    jmp label21973
    
label21973:
    movq $0, a21780
    cmpq $1, a21780
    je label21970
    jmp label21971
    
label21972:
    movq $1, a21779
    cmpq $1, a21779
    je label21970
    jmp label21971
    
label22003:
    movq a21754, temp21929
    jmp label22002
    
label22002:
    cmpq temp21929, temp21928
    jg label22000
    jmp label22001
    
label22001:
    movq $0, a21759
    cmpq $1, a21759
    je label21998
    jmp label21999
    
label22000:
    movq $1, a21758
    cmpq $1, a21758
    je label21998
    jmp label21999
    
label21999:
    movq $0, a21761
    cmpq $1, a21761
    je label21996
    jmp label21997
    
label21998:
    movq $1, a21760
    cmpq $1, a21760
    je label21996
    jmp label21997
    
label21997:
    movq $0, a21763
    cmpq $1, a21763
    je label21994
    jmp label21995
    
label21996:
    movq $1, a21762
    cmpq $1, a21762
    je label21994
    jmp label21995
    
label21995:
    movq $2, a21751
    jmp label21985
    
label21994:
    cmpq $1, $3
    jg label21992
    jmp label21993
    
label21993:
    movq $2, a21765
    movq a21765, temp21935
    jmp label21991
    
label21992:
    movq $1, a21764
    movq a21764, temp21935
    jmp label21991
    
label21991:
    cmpq temp21935, $3
    jg label21989
    jmp label21990
    
label21990:
    movq $2, a21769
    movq a21769, a21751
    jmp label21985
    
label21989:
    cmpq $1, $3
    jg label21987
    jmp label21988
    
label21988:
    movq $2, a21768
    movq a21768, a21766
    jmp label21986
    
label22019:
    movq $2, a21745
    movq a21745, temp21919
    jmp label22017
    
label22018:
    movq $1, a21744
    movq a21744, temp21919
    jmp label22017
    
label22017:
    cmpq temp21919, $3
    jg label22015
    jmp label22016
    
label22016:
    movq $2, a21749
    movq a21749, a21731
    jmp label22011
    
label22015:
    cmpq $1, $3
    jg label22013
    jmp label22014
    
label22014:
    movq $2, a21748
    movq a21748, a21746
    jmp label22012
    
label22013:
    movq $1, a21747
    movq a21747, a21746
    jmp label22012
    
label22012:
    movq a21746, a21731
    jmp label22011
    
label22011:
    callq read_int
    movq %rax, a21750
    callq read_int
    movq %rax, temp21928
    cmpq $1, $3
    jg label22009
    jmp label22010
    
label22010:
    movq $2, a21753
    movq a21753, temp21931
    jmp label22008
    
label22009:
    movq $1, a21752
    movq a21752, temp21931
    jmp label22008
    
label22008:
    cmpq temp21931, $3
    jg label22006
    jmp label22007
    
label22007:
    movq $2, a21757
    movq a21757, temp21929
    jmp label22002
    
label22006:
    cmpq $1, $3
    jg label22004
    jmp label22005
    
label22005:
    movq $2, a21756
    movq a21756, a21754
    jmp label22003
    
label22004:
    movq $1, a21755
    movq a21755, a21754
    jmp label22003
    
label22035:
    movq $1, a21732
    movq a21732, temp21915
    jmp label22034
    
label22034:
    cmpq temp21915, $3
    jg label22032
    jmp label22033
    
label22033:
    movq $2, a21737
    movq a21737, temp21913
    jmp label22028
    
label22032:
    cmpq $1, $3
    jg label22030
    jmp label22031
    
label22031:
    movq $2, a21736
    movq a21736, a21734
    jmp label22029
    
label22030:
    movq $1, a21735
    movq a21735, a21734
    jmp label22029
    
label22029:
    movq a21734, temp21913
    jmp label22028
    
label22028:
    cmpq temp21913, temp21912
    jg label22026
    jmp label22027
    
label22027:
    movq $0, a21739
    cmpq $1, a21739
    je label22024
    jmp label22025
    
label22026:
    movq $1, a21738
    cmpq $1, a21738
    je label22024
    jmp label22025
    
label22025:
    movq $0, a21741
    cmpq $1, a21741
    je label22022
    jmp label22023
    
label22024:
    movq $1, a21740
    cmpq $1, a21740
    je label22022
    jmp label22023
    
label22023:
    movq $0, a21743
    cmpq $1, a21743
    je label22020
    jmp label22021
    
label22022:
    movq $1, a21742
    cmpq $1, a21742
    je label22020
    jmp label22021
    
label22021:
    movq $2, a21731
    jmp label22011
    
label22020:
    cmpq $1, $3
    jg label22018
    jmp label22019
    



output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: liveness analysis @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
label21959:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21770
  a21674
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp
  temp21939)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21926
  a21598
  temp21870
  a21731
  %rsp
  temp21939)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21926
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21926
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp
  temp21923)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp
  temp21923)
 (set
  a21636
  temp21910
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  %rsp
  temp21923)
 (set
  a21636
  temp21910
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21910
  temp21897
  a21674
  a21579
  a21693
  a21617
  %rsp
  a21598
  temp21870)
 (set a21636 temp21897 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 temp21897 a21674 a21579 temp21884 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 temp21884 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 temp21884 temp21871 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 temp21871 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21598 temp21871 %rsp temp21857 a21617)
 (set a21636 a21579 a21598 %rsp temp21857 a21617)
 (set temp21844 a21579 a21598 %rsp temp21857 a21617)
 (set temp21844 a21579 a21598 a21617 %rsp)
 (set temp21844 temp21831 a21579 a21598 %rsp)
 (set temp21831 a21579 a21598 %rsp)
 (set temp21831 temp21818 a21579 %rsp)
 (set temp21818 a21579 %rsp)
 (set %rax temp21818 %rsp)
 (set %rax %rsp))
movq a21770, temp21939
movq a21751, temp21926
addq temp21939, temp21926
movq a21750, temp21923
addq temp21926, temp21923
movq a21731, temp21910
addq temp21923, temp21910
movq a21712, temp21897
addq temp21910, temp21897
movq a21693, temp21884
addq temp21897, temp21884
movq a21674, temp21871
addq temp21884, temp21871
movq temp21870, temp21857
addq temp21871, temp21857
movq a21636, temp21844
addq temp21857, temp21844
movq a21617, temp21831
addq temp21844, temp21831
movq a21598, temp21818
addq temp21831, temp21818
movq a21579, %rax
addq temp21818, %rax
jmp conclusion

label21960:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21785
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21770
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq a21785, a21770
jmp label21959

label21961:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21786
  a21674
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21785
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21786
movq a21786, a21785
jmp label21960

label21962:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21693
  a21712
  a21617
  a21787
  a21579
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21785
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21787
movq a21787, a21785
jmp label21960

label21963:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21961
jmp label21962

label21964:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21788
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21770
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21788
movq a21788, a21770
jmp label21959

label21965:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  temp21948
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21948, $3
jg label21963
jmp label21964

label21967:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21784
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  temp21948
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21784
movq a21784, temp21948
jmp label21965

label21966:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21751
  a21783
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  temp21948
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21783
movq a21783, temp21948
jmp label21965

label21969:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21770
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21770
jmp label21959

label21968:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21966
jmp label21967

label21971:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  a21782
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21782
cmpq $1, a21782
je label21968
jmp label21969

label21970:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21781
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21781
cmpq $1, a21781
je label21968
jmp label21969

label21973:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21780
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21780
cmpq $1, a21780
je label21970
jmp label21971

label21972:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  a21779
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21779
cmpq $1, a21779
je label21970
jmp label21971

label21975:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21778
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21778
cmpq $1, a21778
je label21972
jmp label21973

label21974:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21598
  temp21870
  a21777
  a21617
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21777
cmpq $1, a21777
je label21972
jmp label21973

label21976:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21942
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21942, temp21941
jg label21974
jmp label21975

label21981:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21617
  a21598
  temp21870
  a21712
  a21776
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21942
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21776
movq a21776, temp21942
jmp label21976

label21977:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21712
  a21617
  a21773
  a21693
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21942
  a21598
  temp21870
  a21731
  %rsp))
movq a21773, temp21942
jmp label21976

label21979:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21775
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21712
  a21617
  a21773
  a21693
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21775
movq a21775, a21773
jmp label21977

label21978:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21774
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21712
  a21617
  a21773
  a21693
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21774
movq a21774, a21773
jmp label21977

label21980:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21978
jmp label21979

label21982:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  temp21944
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21944, $3
jg label21980
jmp label21981

label21984:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21772
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  temp21944
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21772
movq a21772, temp21944
jmp label21982

label21983:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21693
  a21712
  a21617
  a21771
  a21579
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  temp21944
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21771
movq a21771, temp21944
jmp label21982

label21985:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  %rax
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
callq read_int
movq %rax, temp21941
cmpq $1, $3
jg label21983
jmp label21984

label21986:
    liveness
:
(list
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  a21766
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq a21766, a21751
jmp label21985

label21987:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21767
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  a21766
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21767
movq a21767, a21766
jmp label21986

label21988:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21768
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  a21766
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21768
movq a21768, a21766
jmp label21986

label21989:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21987
jmp label21988

label21995:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21751
jmp label21985

label21990:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21769
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21769
movq a21769, a21751
jmp label21985

label21991:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  temp21935
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21935, $3
jg label21989
jmp label21990

label21993:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21765
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  temp21935
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21765
movq a21765, temp21935
jmp label21991

label21992:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21764
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  temp21935
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21764
movq a21764, temp21935
jmp label21991

label21994:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21992
jmp label21993

label21997:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  a21763
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21763
cmpq $1, a21763
je label21994
jmp label21995

label21996:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21762
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21762
cmpq $1, a21762
je label21994
jmp label21995

label21999:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21598
  temp21870
  a21761
  a21617
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21761
cmpq $1, a21761
je label21996
jmp label21997

label21998:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21617
  a21598
  temp21870
  a21712
  a21760
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21760
cmpq $1, a21760
je label21996
jmp label21997

label22001:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21759
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21759
cmpq $1, a21759
je label21998
jmp label21999

label22000:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21758
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21758
cmpq $1, a21758
je label21998
jmp label21999

label22002:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  temp21929
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21929, temp21928
jg label22000
jmp label22001

label22003:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21579
  a21693
  a21712
  a21617
  a21754
  a21674
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  temp21929
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq a21754, temp21929
jmp label22002

label22005:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21756
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21579
  a21693
  a21712
  a21617
  a21754
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21756
movq a21756, a21754
jmp label22003

label22004:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21693
  a21712
  a21617
  a21755
  a21579
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21579
  a21693
  a21712
  a21617
  a21754
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21755
movq a21755, a21754
jmp label22003

label22006:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label22004
jmp label22005

label22007:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21712
  a21617
  a21757
  a21693
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  temp21929
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21757
movq a21757, temp21929
jmp label22002

label22008:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21693
  a21712
  a21617
  a21579
  temp21931
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21931, $3
jg label22006
jmp label22007

label22010:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21753
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21693
  a21712
  a21617
  a21579
  temp21931
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21753
movq a21753, temp21931
jmp label22008

label22009:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21752
  temp21928
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21693
  a21712
  a21617
  a21579
  temp21931
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21752
movq a21752, temp21931
jmp label22008

label22011:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21731 %rsp)
 (set
  a21674
  a21579
  a21693
  a21712
  a21617
  %rax
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  %rax
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
callq read_int
movq %rax, a21750
callq read_int
movq %rax, temp21928
cmpq $1, $3
jg label22009
jmp label22010

label22016:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21749 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21731 %rsp))
movq $2, a21749
movq a21749, a21731
jmp label22011

label22012:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21746 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21731 %rsp))
movq a21746, a21731
jmp label22011

label22014:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21693 a21712 a21617 %rsp a21748 a21636 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21746 %rsp a21598 temp21870))
movq $2, a21748
movq a21748, a21746
jmp label22012

label22013:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21747 %rsp)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21746 %rsp a21598 temp21870))
movq $1, a21747
movq a21747, a21746
jmp label22012

label22015:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22013
jmp label22014

label22017:
    liveness
:
(list
 (set
  a21636
  a21674
  a21579
  a21693
  temp21919
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
cmpq temp21919, $3
jg label22015
jmp label22016

label22019:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 %rsp a21598 temp21870 a21745 a21617)
 (set
  a21636
  a21674
  a21579
  a21693
  temp21919
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $2, a21745
movq a21745, temp21919
jmp label22017

label22018:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870 a21712 a21744)
 (set
  a21636
  a21674
  a21579
  a21693
  temp21919
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $1, a21744
movq a21744, temp21919
jmp label22017

label22020:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22018
jmp label22019

label22021:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21731 %rsp))
movq $2, a21731
jmp label22011

label22023:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21743 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $0, a21743
cmpq $1, a21743
je label22020
jmp label22021

label22022:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21742 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $1, a21742
cmpq $1, a21742
je label22020
jmp label22021

label22025:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21712 a21617 %rsp a21741 a21693 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $0, a21741
cmpq $1, a21741
je label22022
jmp label22023

label22024:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21740 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $1, a21740
cmpq $1, a21740
je label22022
jmp label22023

label22027:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21693 a21712 a21617 %rsp a21739 a21579 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $0, a21739
cmpq $1, a21739
je label22024
jmp label22025

label22026:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21693 a21712 a21617 %rsp a21738 a21674 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $1, a21738
cmpq $1, a21738
je label22024
jmp label22025

label22028:
    liveness
:
(list
 (set
  a21636
  temp21912
  temp21913
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
cmpq temp21913, temp21912
jg label22026
jmp label22027

label22033:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21737
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  temp21913
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $2, a21737
movq a21737, temp21913
jmp label22028

label22029:
    liveness
:
(list
 (set
  a21636
  a21734
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  temp21913
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq a21734, temp21913
jmp label22028

label22031:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21736
  temp21912
  a21598
  temp21870)
 (set
  a21636
  a21734
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $2, a21736
movq a21736, a21734
jmp label22029

label22030:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  a21735
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  a21734
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $1, a21735
movq a21735, a21734
jmp label22029

label22032:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
cmpq $1, $3
jg label22030
jmp label22031

label22034:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21693
  a21712
  a21617
  %rsp
  a21579
  temp21915
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
cmpq temp21915, $3
jg label22032
jmp label22033

label22036:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  a21733
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21693
  a21712
  a21617
  %rsp
  a21579
  temp21915
  a21598
  temp21870))
movq $2, a21733
movq a21733, temp21915
jmp label22034

label22035:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21732
  a21636
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21693
  a21712
  a21617
  %rsp
  a21579
  temp21915
  a21598
  temp21870))
movq $1, a21732
movq a21732, temp21915
jmp label22034

label22037:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21693 a21712 a21617 %rsp %rax a21636 a21598 temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
callq read_int
movq %rax, temp21912
cmpq $1, $3
jg label22035
jmp label22036

label22047:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $2, a21712
jmp label22037

label22042:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 a21730 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $2, a21730
movq a21730, a21712
jmp label22037

label22038:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21727 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq a21727, a21712
jmp label22037

label22040:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 %rsp a21598 temp21870 a21729 a21617)
 (set a21636 a21674 a21579 a21693 a21727 a21617 %rsp a21598 temp21870))
movq $2, a21729
movq a21729, a21727
jmp label22038

label22039:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21728 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21727 a21617 %rsp a21598 temp21870))
movq $1, a21728
movq a21728, a21727
jmp label22038

label22041:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22039
jmp label22040

label22043:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 temp21906 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
cmpq temp21906, $3
jg label22041
jmp label22042

label22045:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21726 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 temp21906 %rsp a21598 temp21870))
movq $2, a21726
movq a21726, temp21906
jmp label22043

label22044:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21725 a21693 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 temp21906 %rsp a21598 temp21870))
movq $1, a21725
movq a21725, temp21906
jmp label22043

label22046:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22044
jmp label22045

label22049:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21724 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $0, a21724
cmpq $1, a21724
je label22046
jmp label22047

label22048:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21723 a21579 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $1, a21723
cmpq $1, a21723
je label22046
jmp label22047

label22051:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21693 a21617 %rsp a21722 a21674 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $0, a21722
cmpq $1, a21722
je label22048
jmp label22049

label22050:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21721 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $1, a21721
cmpq $1, a21721
je label22048
jmp label22049

label22053:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21720 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $0, a21720
cmpq $1, a21720
je label22050
jmp label22051

label22052:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21719 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $1, a21719
cmpq $1, a21719
je label22050
jmp label22051

label22054:
    liveness
:
(list
 (set
  a21636
  a21674
  temp21900
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
cmpq temp21900, temp21899
jg label22052
jmp label22053

label22059:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21636
  a21718
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870)
 (set
  a21636
  a21674
  temp21900
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870))
movq $2, a21718
movq a21718, temp21900
jmp label22054

label22055:
    liveness
:
(list
 (set
  a21636
  a21674
  a21693
  a21617
  a21579
  temp21899
  a21598
  temp21870
  a21715
  %rsp)
 (set
  a21636
  a21674
  temp21900
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870))
movq a21715, temp21900
jmp label22054

label22057:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21636
  a21717
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870)
 (set
  a21636
  a21674
  a21693
  a21617
  a21579
  temp21899
  a21598
  temp21870
  a21715
  %rsp))
movq $2, a21717
movq a21717, a21715
jmp label22055

label22056:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21674
  a21693
  a21617
  %rsp
  a21716
  a21636
  a21579
  temp21899
  a21598
  temp21870)
 (set
  a21636
  a21674
  a21693
  a21617
  a21579
  temp21899
  a21598
  temp21870
  a21715
  %rsp))
movq $1, a21716
movq a21716, a21715
jmp label22055

label22058:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870))
cmpq $1, $3
jg label22056
jmp label22057

label22060:
    liveness
:
(list
 (set
  a21636
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870
  temp21902)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870))
cmpq temp21902, $3
jg label22058
jmp label22059

label22062:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21636
  a21674
  a21693
  a21617
  a21714
  %rsp
  a21579
  temp21899
  a21598
  temp21870)
 (set
  a21636
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870
  temp21902))
movq $2, a21714
movq a21714, temp21902
jmp label22060

label22061:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21636
  a21674
  a21693
  %rsp
  a21579
  temp21899
  a21598
  temp21870
  a21713
  a21617)
 (set
  a21636
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870
  temp21902))
movq $1, a21713
movq a21713, temp21902
jmp label22060

label22063:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21693 a21617 %rsp %rax a21636 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870))
callq read_int
movq %rax, temp21899
cmpq $1, $3
jg label22061
jmp label22062

label22064:
    liveness
:
(list
 (set a21636 a21674 a21579 a21708 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq a21708, a21693
jmp label22063

label22066:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21710 a21598 temp21870)
 (set a21636 a21674 a21579 a21708 a21617 %rsp a21598 temp21870))
movq $2, a21710
movq a21710, a21708
jmp label22064

label22065:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21709 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21708 a21617 %rsp a21598 temp21870))
movq $1, a21709
movq a21709, a21708
jmp label22064

label22067:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22065
jmp label22066

label22073:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $2, a21693
jmp label22063

label22068:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21711 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $2, a21711
movq a21711, a21693
jmp label22063

label22069:
    liveness
:
(list
 (set a21636 temp21893 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
cmpq temp21893, $3
jg label22067
jmp label22068

label22071:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21617 %rsp a21707 a21579 a21598 temp21870)
 (set a21636 temp21893 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21707
movq a21707, temp21893
jmp label22069

label22070:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21706 a21674 a21598 temp21870)
 (set a21636 temp21893 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21706
movq a21706, temp21893
jmp label22069

label22072:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22070
jmp label22071

label22075:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21705 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21705
cmpq $1, a21705
je label22072
jmp label22073

label22074:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21704 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21704
cmpq $1, a21704
je label22072
jmp label22073

label22077:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21703 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21703
cmpq $1, a21703
je label22074
jmp label22075

label22076:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21702 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21702
cmpq $1, a21702
je label22074
jmp label22075

label22079:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21701 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21701
cmpq $1, a21701
je label22076
jmp label22077

label22078:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21617 %rsp a21700 a21636 a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21700
cmpq $1, a21700
je label22076
jmp label22077

label22080:
    liveness
:
(list
 (set a21636 a21674 a21579 temp21887 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
cmpq temp21887, temp21886
jg label22078
jmp label22079

label22081:
    liveness
:
(list
 (set a21636 a21674 a21579 a21696 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 temp21887 a21617 %rsp a21598 temp21870 temp21886))
movq a21696, temp21887
jmp label22080

label22083:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 a21698 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21696 a21617 %rsp a21598 temp21870 temp21886))
movq $2, a21698
movq a21698, a21696
jmp label22081

label22082:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 %rsp a21598 temp21870 temp21886 a21617 a21697)
 (set a21636 a21674 a21579 a21696 a21617 %rsp a21598 temp21870 temp21886))
movq $1, a21697
movq a21697, a21696
jmp label22081

label22084:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886))
cmpq $1, $3
jg label22082
jmp label22083

label22085:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 a21598 temp21870 temp21886 %rsp a21699)
 (set a21636 a21674 a21579 temp21887 a21617 %rsp a21598 temp21870 temp21886))
movq $2, a21699
movq a21699, temp21887
jmp label22080

label22086:
    liveness
:
(list
 (set a21636 a21674 a21579 %rsp a21598 temp21870 temp21886 a21617 temp21889)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886))
cmpq temp21889, $3
jg label22084
jmp label22085

label22088:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21695 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 %rsp a21598 temp21870 temp21886 a21617 temp21889))
movq $2, a21695
movq a21695, temp21889
jmp label22086

label22087:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886 a21694)
 (set a21636 a21674 a21579 %rsp a21598 temp21870 temp21886 a21617 temp21889))
movq $1, a21694
movq a21694, temp21889
jmp label22086

label22089:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21617 %rsp %rax a21636 a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886))
callq read_int
movq %rax, temp21886
cmpq $1, $3
jg label22087
jmp label22088

label22099:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21674
jmp label22089

label22094:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21692 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21692
movq a21692, a21674
jmp label22089

label22090:
    liveness
:
(list
 (set a21636 a21689 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq a21689, a21674
jmp label22089

label22092:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21617 %rsp a21579 a21691 a21598 temp21870)
 (set a21636 a21689 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21691
movq a21691, a21689
jmp label22090

label22091:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21690 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21689 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21690
movq a21690, a21689
jmp label22090

label22093:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22091
jmp label22092

label22095:
    liveness
:
(list
 (set a21636 temp21880 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
cmpq temp21880, $3
jg label22093
jmp label22094

label22097:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21688 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 temp21880 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21688
movq a21688, temp21880
jmp label22095

label22096:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21687 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 temp21880 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21687
movq a21687, temp21880
jmp label22095

label22098:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22096
jmp label22097

label22101:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21686 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21686
cmpq $1, a21686
je label22098
jmp label22099

label22100:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21685 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21685
cmpq $1, a21685
je label22098
jmp label22099

label22103:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21579 a21617 %rsp a21636 a21684 a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21684
cmpq $1, a21684
je label22100
jmp label22101

label22102:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 a21598 temp21870 %rsp a21683)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21683
cmpq $1, a21683
je label22100
jmp label22101

label22105:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 a21682 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21682
cmpq $1, a21682
je label22102
jmp label22103

label22104:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 a21681)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21681
cmpq $1, a21681
je label22102
jmp label22103

label22106:
    liveness
:
(list
 (set a21636 a21579 temp21874 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
cmpq temp21874, temp21873
jg label22104
jmp label22105

label22111:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21680 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 temp21874 %rsp a21598 temp21870 a21617 temp21873))
movq $2, a21680
movq a21680, temp21874
jmp label22106

label22107:
    liveness
:
(list
 (set a21636 a21579 a21677 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 temp21874 %rsp a21598 temp21870 a21617 temp21873))
movq a21677, temp21874
jmp label22106

label22109:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21679 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21677 %rsp a21598 temp21870 a21617 temp21873))
movq $2, a21679
movq a21679, a21677
jmp label22107

label22108:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21678 a21617 temp21873)
 (set a21636 a21579 a21677 %rsp a21598 temp21870 a21617 temp21873))
movq $1, a21678
movq a21678, a21677
jmp label22107

label22110:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873))
cmpq $1, $3
jg label22108
jmp label22109

label22112:
    liveness
:
(list
 (set a21579 %rsp temp21876 a21636 a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873))
cmpq temp21876, $3
jg label22110
jmp label22111

label22114:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21676 %rsp a21598 temp21870 a21617 temp21873)
 (set a21579 %rsp temp21876 a21636 a21598 temp21870 a21617 temp21873))
movq $2, a21676
movq a21676, temp21876
jmp label22112

label22113:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 %rsp a21579 a21675 a21598 temp21870 a21617 temp21873)
 (set a21579 %rsp temp21876 a21636 a21598 temp21870 a21617 temp21873))
movq $1, a21675
movq a21675, temp21876
jmp label22112

label22115:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp %rax a21636)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21579 a21617 %rsp %rax a21636 a21598 temp21870)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873))
callq read_int
movq %rax, temp21870
callq read_int
movq %rax, temp21873
cmpq $1, $3
jg label22113
jmp label22114

label22125:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $2, a21655
jmp label22115

label22120:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21673 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $2, a21673
movq a21673, a21655
jmp label22115

label22116:
    liveness
:
(list
 (set a21636 a21670 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq a21670, a21655
jmp label22115

label22118:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21672 a21579 a21598 a21617 %rsp)
 (set a21636 a21670 a21579 a21598 a21617 %rsp))
movq $2, a21672
movq a21672, a21670
jmp label22116

label22117:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21671 a21579 a21598 a21617 %rsp)
 (set a21636 a21670 a21579 a21598 a21617 %rsp))
movq $1, a21671
movq a21671, a21670
jmp label22116

label22119:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22117
jmp label22118

label22121:
    liveness
:
(list
 (set a21636 temp21866 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
cmpq temp21866, $3
jg label22119
jmp label22120

label22123:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21669 a21579 a21598 a21617 %rsp)
 (set a21636 temp21866 a21579 a21598 a21617 %rsp))
movq $2, a21669
movq a21669, temp21866
jmp label22121

label22122:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp a21636 a21668)
 (set a21636 temp21866 a21579 a21598 a21617 %rsp))
movq $1, a21668
movq a21668, temp21866
jmp label22121

label22124:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22122
jmp label22123

label22127:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp a21667)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $0, a21667
cmpq $1, a21667
je label22124
jmp label22125

label22126:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 a21666 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $1, a21666
cmpq $1, a21666
je label22124
jmp label22125

label22129:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 %rsp a21617 a21665)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $0, a21665
cmpq $1, a21665
je label22126
jmp label22127

label22128:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21664 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $1, a21664
cmpq $1, a21664
je label22126
jmp label22127

label22131:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21663 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $0, a21663
cmpq $1, a21663
je label22128
jmp label22129

label22130:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21617 %rsp a21598 a21662)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $1, a21662
cmpq $1, a21662
je label22128
jmp label22129

label22132:
    liveness
:
(list
 (set a21579 a21598 a21617 temp21860 a21636 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
cmpq temp21860, temp21859
jg label22130
jmp label22131

label22137:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21661 a21598 a21617 temp21859 %rsp)
 (set a21579 a21598 a21617 temp21860 a21636 temp21859 %rsp))
movq $2, a21661
movq a21661, temp21860
jmp label22132

label22133:
    liveness
:
(list
 (set a21636 a21658 a21579 a21598 a21617 temp21859 %rsp)
 (set a21579 a21598 a21617 temp21860 a21636 temp21859 %rsp))
movq a21658, temp21860
jmp label22132

label22135:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21660 a21598 a21617 temp21859 %rsp)
 (set a21636 a21658 a21579 a21598 a21617 temp21859 %rsp))
movq $2, a21660
movq a21660, a21658
jmp label22133

label22134:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21598 a21617 a21579 a21659 temp21859 %rsp)
 (set a21636 a21658 a21579 a21598 a21617 temp21859 %rsp))
movq $1, a21659
movq a21659, a21658
jmp label22133

label22136:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp))
cmpq $1, $3
jg label22134
jmp label22135

label22138:
    liveness
:
(list
 (set a21636 temp21862 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp))
cmpq temp21862, $3
jg label22136
jmp label22137

label22140:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21657 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 temp21862 a21579 a21598 a21617 temp21859 %rsp))
movq $2, a21657
movq a21657, temp21862
jmp label22138

label22139:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21656 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 temp21862 a21579 a21598 a21617 temp21859 %rsp))
movq $1, a21656
movq a21656, temp21862
jmp label22138

label22141:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp %rax a21636)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp))
callq read_int
movq %rax, temp21859
cmpq $1, $3
jg label22139
jmp label22140

label22146:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21654 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $2, a21654
movq a21654, a21636
jmp label22141

label22142:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp a21651)
 (set a21636 a21579 a21598 a21617 %rsp))
movq a21651, a21636
jmp label22141

label22144:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21653 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp a21651))
movq $2, a21653
movq a21653, a21651
jmp label22142

label22143:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21652 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp a21651))
movq $1, a21652
movq a21652, a21651
jmp label22142

label22145:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22143
jmp label22144

label22147:
    liveness
:
(list
 (set a21579 temp21853 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
cmpq temp21853, $3
jg label22145
jmp label22146

label22149:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 a21650 %rsp)
 (set a21579 temp21853 a21598 a21617 %rsp))
movq $2, a21650
movq a21650, temp21853
jmp label22147

label22148:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 %rsp a21617 a21649)
 (set a21579 temp21853 a21598 a21617 %rsp))
movq $1, a21649
movq a21649, temp21853
jmp label22147

label22150:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22148
jmp label22149

label22151:
    liveness
:
(list (set a21579 a21598 a21617 %rsp) (set a21636 a21579 a21598 a21617 %rsp))
movq $2, a21636
jmp label22141

label22153:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21648 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $0, a21648
cmpq $1, a21648
je label22150
jmp label22151

label22152:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21647 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $1, a21647
cmpq $1, a21647
je label22150
jmp label22151

label22155:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21617 %rsp a21598 a21646)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $0, a21646
cmpq $1, a21646
je label22152
jmp label22153

label22154:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21645 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $1, a21645
cmpq $1, a21645
je label22152
jmp label22153

label22157:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21644 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $0, a21644
cmpq $1, a21644
je label22154
jmp label22155

label22156:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21598 a21617 %rsp a21579 a21643)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $1, a21643
cmpq $1, a21643
je label22154
jmp label22155

label22158:
    liveness
:
(list
 (set temp21846 temp21847 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
cmpq temp21847, temp21846
jg label22156
jmp label22157

label22163:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21642 a21579 a21598 a21617 %rsp)
 (set temp21846 temp21847 a21579 a21598 a21617 %rsp))
movq $2, a21642
movq a21642, temp21847
jmp label22158

label22159:
    liveness
:
(list
 (set temp21846 a21639 a21579 a21598 a21617 %rsp)
 (set temp21846 temp21847 a21579 a21598 a21617 %rsp))
movq a21639, temp21847
jmp label22158

label22161:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21641 a21579 a21598 a21617 %rsp)
 (set temp21846 a21639 a21579 a21598 a21617 %rsp))
movq $2, a21641
movq a21641, a21639
jmp label22159

label22160:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21640 a21579 a21598 a21617 %rsp)
 (set temp21846 a21639 a21579 a21598 a21617 %rsp))
movq $1, a21640
movq a21640, a21639
jmp label22159

label22162:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22160
jmp label22161

label22164:
    liveness
:
(list
 (set temp21846 temp21849 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp))
cmpq temp21849, $3
jg label22162
jmp label22163

label22166:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp temp21846 a21638)
 (set temp21846 temp21849 a21579 a21598 a21617 %rsp))
movq $2, a21638
movq a21638, temp21849
jmp label22164

label22165:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set a21637 temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 temp21849 a21579 a21598 a21617 %rsp))
movq $1, a21637
movq a21637, temp21849
jmp label22164

label22167:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set %rax a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp))
callq read_int
movq %rax, temp21846
cmpq $1, $3
jg label22165
jmp label22166

label22177:
    liveness
:
(list (set a21579 a21598 %rsp) (set a21579 a21598 a21617 %rsp))
movq $2, a21617
jmp label22167

label22172:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp a21635)
 (set a21579 a21598 a21617 %rsp))
movq $2, a21635
movq a21635, a21617
jmp label22167

label22168:
    liveness
:
(list (set a21579 a21598 a21632 %rsp) (set a21579 a21598 a21617 %rsp))
movq a21632, a21617
jmp label22167

label22170:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 a21634 %rsp)
 (set a21579 a21598 a21632 %rsp))
movq $2, a21634
movq a21634, a21632
jmp label22168

label22169:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 a21633 %rsp)
 (set a21579 a21598 a21632 %rsp))
movq $1, a21633
movq a21633, a21632
jmp label22168

label22171:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
cmpq $1, $3
jg label22169
jmp label22170

label22173:
    liveness
:
(list
 (set a21579 a21598 temp21840 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
cmpq temp21840, $3
jg label22171
jmp label22172

label22175:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 a21631 %rsp)
 (set a21579 a21598 temp21840 %rsp))
movq $2, a21631
movq a21631, temp21840
jmp label22173

label22174:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 %rsp a21598 a21630)
 (set a21579 a21598 temp21840 %rsp))
movq $1, a21630
movq a21630, temp21840
jmp label22173

label22176:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
cmpq $1, $3
jg label22174
jmp label22175

label22179:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21629 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $0, a21629
cmpq $1, a21629
je label22176
jmp label22177

label22178:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21628 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $1, a21628
cmpq $1, a21628
je label22176
jmp label22177

label22181:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21598 %rsp a21579 a21627)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $0, a21627
cmpq $1, a21627
je label22178
jmp label22179

label22180:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21626 a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $1, a21626
cmpq $1, a21626
je label22178
jmp label22179

label22183:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21625 a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $0, a21625
cmpq $1, a21625
je label22180
jmp label22181

label22182:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21624 a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $1, a21624
cmpq $1, a21624
je label22180
jmp label22181

label22184:
    liveness
:
(list
 (set temp21833 temp21834 a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
cmpq temp21834, temp21833
jg label22182
jmp label22183

label22189:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set a21623 temp21833 a21579 a21598 %rsp)
 (set temp21833 temp21834 a21579 a21598 %rsp))
movq $2, a21623
movq a21623, temp21834
jmp label22184

label22185:
    liveness
:
(list
 (set a21620 temp21833 a21579 a21598 %rsp)
 (set temp21833 temp21834 a21579 a21598 %rsp))
movq a21620, temp21834
jmp label22184

label22187:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set a21622 temp21833 a21579 a21598 %rsp)
 (set a21620 temp21833 a21579 a21598 %rsp))
movq $2, a21622
movq a21622, a21620
jmp label22185

label22186:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set a21621 temp21833 a21579 a21598 %rsp)
 (set a21620 temp21833 a21579 a21598 %rsp))
movq $1, a21621
movq a21621, a21620
jmp label22185

label22188:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp))
cmpq $1, $3
jg label22186
jmp label22187

label22190:
    liveness
:
(list
 (set temp21833 a21579 temp21836 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp))
cmpq temp21836, $3
jg label22188
jmp label22189

label22192:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp a21619)
 (set temp21833 a21579 temp21836 a21598 %rsp))
movq $2, a21619
movq a21619, temp21836
jmp label22190

label22191:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 a21618 %rsp)
 (set temp21833 a21579 temp21836 a21598 %rsp))
movq $1, a21618
movq a21618, temp21836
jmp label22190

label22193:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set %rax a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp))
callq read_int
movq %rax, temp21833
cmpq $1, $3
jg label22191
jmp label22192

label22194:
    liveness
:
(list (set a21579 a21613 %rsp) (set a21579 a21598 %rsp))
movq a21613, a21598
jmp label22193

label22195:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21614 %rsp) (set a21579 a21613 %rsp))
movq $1, a21614
movq a21614, a21613
jmp label22194

label22196:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21615 %rsp) (set a21579 a21613 %rsp))
movq $2, a21615
movq a21615, a21613
jmp label22194

label22197:
    liveness
:
(list (set a21579 %rsp) (set a21579 %rsp) (set a21579 %rsp))
cmpq $1, $3
jg label22195
jmp label22196

label22203:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21598 %rsp))
movq $2, a21598
jmp label22193

label22198:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21616 %rsp) (set a21579 a21598 %rsp))
movq $2, a21616
movq a21616, a21598
jmp label22193

label22199:
    liveness
:
(list (set a21579 temp21827 %rsp) (set a21579 %rsp) (set a21579 %rsp))
cmpq temp21827, $3
jg label22197
jmp label22198

label22201:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21612 %rsp) (set a21579 temp21827 %rsp))
movq $2, a21612
movq a21612, temp21827
jmp label22199

label22200:
    liveness
:
(list (set a21579 %rsp) (set %rsp a21579 a21611) (set a21579 temp21827 %rsp))
movq $1, a21611
movq a21611, temp21827
jmp label22199

label22202:
    liveness
:
(list (set a21579 %rsp) (set a21579 %rsp) (set a21579 %rsp))
cmpq $1, $3
jg label22200
jmp label22201

label22205:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21610 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $0, a21610
cmpq $1, a21610
je label22202
jmp label22203

label22204:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21609 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $1, a21609
cmpq $1, a21609
je label22202
jmp label22203

label22207:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21608 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $0, a21608
cmpq $1, a21608
je label22204
jmp label22205

label22206:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21607 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $1, a21607
cmpq $1, a21607
je label22204
jmp label22205

label22209:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21606 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $0, a21606
cmpq $1, a21606
je label22206
jmp label22207

label22208:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21605 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $1, a21605
cmpq $1, a21605
je label22206
jmp label22207

label22210:
    liveness
:
(list
 (set a21579 temp21820 temp21821 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
cmpq temp21821, temp21820
jg label22208
jmp label22209

label22211:
    liveness
:
(list (set a21579 temp21820 a21601 %rsp) (set a21579 temp21820 temp21821 %rsp))
movq a21601, temp21821
jmp label22210

label22213:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 a21603 %rsp)
 (set a21579 temp21820 a21601 %rsp))
movq $2, a21603
movq a21603, a21601
jmp label22211

label22212:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 a21602 %rsp)
 (set a21579 temp21820 a21601 %rsp))
movq $1, a21602
movq a21602, a21601
jmp label22211

label22214:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp))
cmpq $1, $3
jg label22212
jmp label22213

label22215:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21604 a21579 temp21820 %rsp)
 (set a21579 temp21820 temp21821 %rsp))
movq $2, a21604
movq a21604, temp21821
jmp label22210

label22216:
    liveness
:
(list
 (set a21579 temp21820 temp21823 %rsp)
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp))
cmpq temp21823, $3
jg label22214
jmp label22215

label22218:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 a21600 %rsp)
 (set a21579 temp21820 temp21823 %rsp))
movq $2, a21600
movq a21600, temp21823
jmp label22216

label22217:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 a21599 %rsp)
 (set a21579 temp21820 temp21823 %rsp))
movq $1, a21599
movq a21599, temp21823
jmp label22216

label22219:
    liveness
:
(list
 (set a21579 %rsp)
 (set %rax a21579 %rsp)
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp))
callq read_int
movq %rax, temp21820
cmpq $1, $3
jg label22217
jmp label22218

label22229:
    liveness
:
(list (set %rsp) (set a21579 %rsp))
movq $2, a21579
jmp label22219

label22224:
    liveness
:
(list (set %rsp) (set a21597 %rsp) (set a21579 %rsp))
movq $2, a21597
movq a21597, a21579
jmp label22219

label22220:
    liveness
:
(list (set a21594 %rsp) (set a21579 %rsp))
movq a21594, a21579
jmp label22219

label22222:
    liveness
:
(list (set %rsp) (set a21596 %rsp) (set a21594 %rsp))
movq $2, a21596
movq a21596, a21594
jmp label22220

label22221:
    liveness
:
(list (set %rsp) (set a21595 %rsp) (set a21594 %rsp))
movq $1, a21595
movq a21595, a21594
jmp label22220

label22223:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label22221
jmp label22222

label22225:
    liveness
:
(list (set temp21814 %rsp) (set %rsp) (set %rsp))
cmpq temp21814, $3
jg label22223
jmp label22224

label22227:
    liveness
:
(list (set %rsp) (set a21593 %rsp) (set temp21814 %rsp))
movq $2, a21593
movq a21593, temp21814
jmp label22225

label22226:
    liveness
:
(list (set %rsp) (set a21592 %rsp) (set temp21814 %rsp))
movq $1, a21592
movq a21592, temp21814
jmp label22225

label22228:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label22226
jmp label22227

label22230:
    liveness
:
(list (set %rsp) (set a21590 %rsp) (set %rsp) (set %rsp))
movq $1, a21590
cmpq $1, a21590
je label22228
jmp label22229

label22231:
    liveness
:
(list (set %rsp) (set a21591 %rsp) (set %rsp) (set %rsp))
movq $0, a21591
cmpq $1, a21591
je label22228
jmp label22229

label22232:
    liveness
:
(list (set %rsp) (set a21588 %rsp) (set %rsp) (set %rsp))
movq $1, a21588
cmpq $1, a21588
je label22230
jmp label22231

label22233:
    liveness
:
(list (set %rsp) (set a21589 %rsp) (set %rsp) (set %rsp))
movq $0, a21589
cmpq $1, a21589
je label22230
jmp label22231

label22234:
    liveness
:
(list (set %rsp) (set a21586 %rsp) (set %rsp) (set %rsp))
movq $1, a21586
cmpq $1, a21586
je label22232
jmp label22233

label22235:
    liveness
:
(list (set %rsp) (set a21587 %rsp) (set %rsp) (set %rsp))
movq $0, a21587
cmpq $1, a21587
je label22232
jmp label22233

label22236:
    liveness
:
(list (set temp21807 temp21808 %rsp) (set %rsp) (set %rsp))
cmpq temp21808, temp21807
jg label22234
jmp label22235

label22237:
    liveness
:
(list (set a21582 temp21807 %rsp) (set temp21807 temp21808 %rsp))
movq a21582, temp21808
jmp label22236

label22238:
    liveness
:
(list
 (set temp21807 %rsp)
 (set %rsp temp21807 a21583)
 (set a21582 temp21807 %rsp))
movq $1, a21583
movq a21583, a21582
jmp label22237

label22239:
    liveness
:
(list
 (set temp21807 %rsp)
 (set temp21807 a21584 %rsp)
 (set a21582 temp21807 %rsp))
movq $2, a21584
movq a21584, a21582
jmp label22237

label22240:
    liveness
:
(list (set temp21807 %rsp) (set temp21807 %rsp) (set temp21807 %rsp))
cmpq $1, $3
jg label22238
jmp label22239

label22241:
    liveness
:
(list
 (set temp21807 %rsp)
 (set temp21807 a21585 %rsp)
 (set temp21807 temp21808 %rsp))
movq $2, a21585
movq a21585, temp21808
jmp label22236

label22242:
    liveness
:
(list (set temp21807 temp21810 %rsp) (set temp21807 %rsp) (set temp21807 %rsp))
cmpq temp21810, $3
jg label22240
jmp label22241

label22244:
    liveness
:
(list
 (set temp21807 %rsp)
 (set a21581 temp21807 %rsp)
 (set temp21807 temp21810 %rsp))
movq $2, a21581
movq a21581, temp21810
jmp label22242

label22243:
    liveness
:
(list
 (set temp21807 %rsp)
 (set a21580 temp21807 %rsp)
 (set temp21807 temp21810 %rsp))
movq $1, a21580
movq a21580, temp21810
jmp label22242

label22246:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp21807 %rsp)
 (set temp21807 %rsp)
 (set temp21807 %rsp))
callq read_int
movq %rax, temp21807
cmpq $1, $3
jg label22243
jmp label22244

label21951:
    liveness
:
(list (set a21575 %rsp) (set %rax %rsp))
movq a21575, %rax
jmp conclusion

label21953:
    liveness
:
(list (set %rsp) (set a21577 %rsp) (set a21575 %rsp))
movq $2, a21577
movq a21577, a21575
jmp label21951

label21952:
    liveness
:
(list (set %rsp) (set a21576 %rsp) (set a21575 %rsp))
movq $1, a21576
movq a21576, a21575
jmp label21951

label21955:
    liveness
:
(list (set %rsp) (set a21578 %rsp) (set %rax %rsp))
movq $2, a21578
movq a21578, %rax
jmp conclusion

label21954:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label21952
jmp label21953

label21956:
    liveness
:
(list (set temp21803 %rsp) (set %rsp) (set %rsp))
cmpq temp21803, $3
jg label21954
jmp label21955

label21958:
    liveness
:
(list (set %rsp) (set a21574 %rsp) (set temp21803 %rsp))
movq $2, a21574
movq a21574, temp21803
jmp label21956

label21957:
    liveness
:
(list (set %rsp) (set a21573 %rsp) (set temp21803 %rsp))
movq $1, a21573
movq a21573, temp21803
jmp label21956

label22245:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label21957
jmp label21958

label22247:
    liveness
:
(list (set x21560 %rsp) (set %rsp) (set %rsp))
cmpq $1, x21560
je label22245
jmp label22246

label22248:
    liveness
:
(list (set %rsp) (set x21560 %rsp))
movq $1, x21560
jmp label22247

label22249:
    liveness
:
(list (set %rsp) (set x21560 %rsp))
movq $0, x21560
jmp label22247

label22250:
    liveness
:
(list (set temp21790 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp21790
jg label22248
jmp label22249

label22251:
    liveness
:
(list (set %rsp) (set temp21790 %rsp))
movq $8, temp21790
jmp label22250

label22252:
    liveness
:
(list (set %rsp) (set temp21790 %rsp))
movq $9, temp21790
jmp label22250

label22253:
    liveness
:
(list (set temp21797 temp21792 %rsp) (set %rsp) (set %rsp))
cmpq temp21797, temp21792
jge label22251
jmp label22252

label22254:
    liveness
:
(list (set temp21792 a21569 %rsp) (set temp21797 temp21792 %rsp))
movq a21569, temp21797
jmp label22253

label22255:
    liveness
:
(list
 (set temp21792 %rsp)
 (set temp21792 a21570 %rsp)
 (set temp21792 a21569 %rsp))
movq $1, a21570
movq a21570, a21569
jmp label22254

label22256:
    liveness
:
(list
 (set temp21792 %rsp)
 (set temp21792 a21571 %rsp)
 (set temp21792 a21569 %rsp))
movq $2, a21571
movq a21571, a21569
jmp label22254

label22257:
    liveness
:
(list (set temp21792 %rsp) (set temp21792 %rsp) (set temp21792 %rsp))
cmpq $1, $3
jg label22255
jmp label22256

label22258:
    liveness
:
(list
 (set temp21792 %rsp)
 (set a21572 temp21792 %rsp)
 (set temp21797 temp21792 %rsp))
movq $2, a21572
movq a21572, temp21797
jmp label22253

label22259:
    liveness
:
(list (set temp21799 temp21792 %rsp) (set temp21792 %rsp) (set temp21792 %rsp))
cmpq temp21799, $3
jg label22257
jmp label22258

label22260:
    liveness
:
(list
 (set temp21792 %rsp)
 (set a21567 temp21792 %rsp)
 (set temp21799 temp21792 %rsp))
movq $1, a21567
movq a21567, temp21799
jmp label22259

label22261:
    liveness
:
(list
 (set temp21792 %rsp)
 (set %rsp temp21792 a21568)
 (set temp21799 temp21792 %rsp))
movq $2, a21568
movq a21568, temp21799
jmp label22259

label22262:
    liveness
:
(list (set temp21792 %rsp) (set temp21792 %rsp) (set temp21792 %rsp))
cmpq $1, $3
jg label22260
jmp label22261

label22263:
    liveness
:
(list (set a21563 %rsp) (set temp21792 %rsp))
movq a21563, temp21792
jmp label22262

label22264:
    liveness
:
(list (set %rsp) (set a21564 %rsp) (set a21563 %rsp))
movq $1, a21564
movq a21564, a21563
jmp label22263

label22265:
    liveness
:
(list (set %rsp) (set a21565 %rsp) (set a21563 %rsp))
movq $2, a21565
movq a21565, a21563
jmp label22263

label22266:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label22264
jmp label22265

label22267:
    liveness
:
(list (set %rsp) (set a21566 %rsp) (set temp21792 %rsp))
movq $2, a21566
movq a21566, temp21792
jmp label22262

label22268:
    liveness
:
(list (set temp21794 %rsp) (set %rsp) (set %rsp))
cmpq temp21794, $3
jg label22266
jmp label22267

label22269:
    liveness
:
(list (set %rsp) (set a21561 %rsp) (set temp21794 %rsp))
movq $1, a21561
movq a21561, temp21794
jmp label22268

label22270:
    liveness
:
(list (set %rsp) (set a21562 %rsp) (set temp21794 %rsp))
movq $2, a21562
movq a21562, temp21794
jmp label22268

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label22269
jmp label22270




type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
label21959:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21770
  a21674
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp
  temp21939)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21926
  a21598
  temp21870
  a21731
  %rsp
  temp21939)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21926
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21926
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp
  temp21923)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp
  temp21923)
 (set
  a21636
  temp21910
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  %rsp
  temp21923)
 (set
  a21636
  temp21910
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21910
  temp21897
  a21674
  a21579
  a21693
  a21617
  %rsp
  a21598
  temp21870)
 (set a21636 temp21897 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 temp21897 a21674 a21579 temp21884 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 temp21884 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 temp21884 temp21871 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 temp21871 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21598 temp21871 %rsp temp21857 a21617)
 (set a21636 a21579 a21598 %rsp temp21857 a21617)
 (set temp21844 a21579 a21598 %rsp temp21857 a21617)
 (set temp21844 a21579 a21598 a21617 %rsp)
 (set temp21844 temp21831 a21579 a21598 %rsp)
 (set temp21831 a21579 a21598 %rsp)
 (set temp21831 temp21818 a21579 %rsp)
 (set temp21818 a21579 %rsp)
 (set %rax temp21818 %rsp)
 (set %rax %rsp))
movq a21770, temp21939
movq a21751, temp21926
addq temp21939, temp21926
movq a21750, temp21923
addq temp21926, temp21923
movq a21731, temp21910
addq temp21923, temp21910
movq a21712, temp21897
addq temp21910, temp21897
movq a21693, temp21884
addq temp21897, temp21884
movq a21674, temp21871
addq temp21884, temp21871
movq temp21870, temp21857
addq temp21871, temp21857
movq a21636, temp21844
addq temp21857, temp21844
movq a21617, temp21831
addq temp21844, temp21831
movq a21598, temp21818
addq temp21831, temp21818
movq a21579, %rax
addq temp21818, %rax
jmp conclusion

label21960:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21785
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21770
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq a21785, a21770
jmp label21959

label21961:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21786
  a21674
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21785
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21786
movq a21786, a21785
jmp label21960

label21962:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21693
  a21712
  a21617
  a21787
  a21579
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21785
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21787
movq a21787, a21785
jmp label21960

label21963:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21961
jmp label21962

label21964:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21788
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21770
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21788
movq a21788, a21770
jmp label21959

label21965:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  temp21948
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21948, $3
jg label21963
jmp label21964

label21967:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21784
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  temp21948
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21784
movq a21784, temp21948
jmp label21965

label21966:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21751
  a21783
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  temp21948
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21783
movq a21783, temp21948
jmp label21965

label21969:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21579
  a21693
  a21712
  a21617
  a21770
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21770
jmp label21959

label21968:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21966
jmp label21967

label21971:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  a21782
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21782
cmpq $1, a21782
je label21968
jmp label21969

label21970:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21781
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21781
cmpq $1, a21781
je label21968
jmp label21969

label21973:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21780
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21780
cmpq $1, a21780
je label21970
jmp label21971

label21972:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  a21779
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21779
cmpq $1, a21779
je label21970
jmp label21971

label21975:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21778
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21778
cmpq $1, a21778
je label21972
jmp label21973

label21974:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21598
  temp21870
  a21777
  a21617
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21777
cmpq $1, a21777
je label21972
jmp label21973

label21976:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21942
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21942, temp21941
jg label21974
jmp label21975

label21981:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21617
  a21598
  temp21870
  a21712
  a21776
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21942
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21776
movq a21776, temp21942
jmp label21976

label21977:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21712
  a21617
  a21773
  a21693
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  temp21942
  a21598
  temp21870
  a21731
  %rsp))
movq a21773, temp21942
jmp label21976

label21979:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21775
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21712
  a21617
  a21773
  a21693
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21775
movq a21775, a21773
jmp label21977

label21978:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21774
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21712
  a21617
  a21773
  a21693
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21774
movq a21774, a21773
jmp label21977

label21980:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21978
jmp label21979

label21982:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  temp21944
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21944, $3
jg label21980
jmp label21981

label21984:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21772
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  temp21944
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21772
movq a21772, temp21944
jmp label21982

label21983:
    liveness
:
(list
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21693
  a21712
  a21617
  a21771
  a21579
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  temp21944
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21771
movq a21771, temp21944
jmp label21982

label21985:
    liveness
:
(list
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  %rax
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  temp21941
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
callq read_int
movq %rax, temp21941
cmpq $1, $3
jg label21983
jmp label21984

label21986:
    liveness
:
(list
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  a21766
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq a21766, a21751
jmp label21985

label21987:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21767
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  a21766
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21767
movq a21767, a21766
jmp label21986

label21988:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21768
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  a21750
  a21766
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21768
movq a21768, a21766
jmp label21986

label21989:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21987
jmp label21988

label21995:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21751
jmp label21985

label21990:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21769
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21751
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21769
movq a21769, a21751
jmp label21985

label21991:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  temp21935
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21935, $3
jg label21989
jmp label21990

label21993:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21765
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  temp21935
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21765
movq a21765, temp21935
jmp label21991

label21992:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21764
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  temp21935
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21764
movq a21764, temp21935
jmp label21991

label21994:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label21992
jmp label21993

label21997:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  a21763
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21763
cmpq $1, a21763
je label21994
jmp label21995

label21996:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21762
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21762
cmpq $1, a21762
je label21994
jmp label21995

label21999:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21598
  temp21870
  a21761
  a21617
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21761
cmpq $1, a21761
je label21996
jmp label21997

label21998:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21617
  a21598
  temp21870
  a21712
  a21760
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21760
cmpq $1, a21760
je label21996
jmp label21997

label22001:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21759
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $0, a21759
cmpq $1, a21759
je label21998
jmp label21999

label22000:
    liveness
:
(list
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21758
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21758
cmpq $1, a21758
je label21998
jmp label21999

label22002:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  temp21929
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21929, temp21928
jg label22000
jmp label22001

label22003:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21579
  a21693
  a21712
  a21617
  a21754
  a21674
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  temp21929
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq a21754, temp21929
jmp label22002

label22005:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21756
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21579
  a21693
  a21712
  a21617
  a21754
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21756
movq a21756, a21754
jmp label22003

label22004:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21693
  a21712
  a21617
  a21755
  a21579
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21579
  a21693
  a21712
  a21617
  a21754
  a21674
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21755
movq a21755, a21754
jmp label22003

label22006:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq $1, $3
jg label22004
jmp label22005

label22007:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21712
  a21617
  a21757
  a21693
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  temp21929
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21757
movq a21757, temp21929
jmp label22002

label22008:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21693
  a21712
  a21617
  a21579
  temp21931
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
cmpq temp21931, $3
jg label22006
jmp label22007

label22010:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21753
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21693
  a21712
  a21617
  a21579
  temp21931
  a21598
  temp21870
  a21731
  %rsp))
movq $2, a21753
movq a21753, temp21931
jmp label22008

label22009:
    liveness
:
(list
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21752
  temp21928
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21693
  a21712
  a21617
  a21579
  temp21931
  a21598
  temp21870
  a21731
  %rsp))
movq $1, a21752
movq a21752, temp21931
jmp label22008

label22011:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21731 %rsp)
 (set
  a21674
  a21579
  a21693
  a21712
  a21617
  %rax
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21750
  a21674
  a21579
  a21693
  a21712
  a21617
  %rax
  a21636
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp)
 (set
  a21636
  a21750
  temp21928
  a21674
  a21579
  a21693
  a21712
  a21617
  a21598
  temp21870
  a21731
  %rsp))
callq read_int
movq %rax, a21750
callq read_int
movq %rax, temp21928
cmpq $1, $3
jg label22009
jmp label22010

label22016:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21749 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21731 %rsp))
movq $2, a21749
movq a21749, a21731
jmp label22011

label22012:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21746 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21731 %rsp))
movq a21746, a21731
jmp label22011

label22014:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21693 a21712 a21617 %rsp a21748 a21636 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21746 %rsp a21598 temp21870))
movq $2, a21748
movq a21748, a21746
jmp label22012

label22013:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21747 %rsp)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21746 %rsp a21598 temp21870))
movq $1, a21747
movq a21747, a21746
jmp label22012

label22015:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22013
jmp label22014

label22017:
    liveness
:
(list
 (set
  a21636
  a21674
  a21579
  a21693
  temp21919
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
cmpq temp21919, $3
jg label22015
jmp label22016

label22019:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 %rsp a21598 temp21870 a21745 a21617)
 (set
  a21636
  a21674
  a21579
  a21693
  temp21919
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $2, a21745
movq a21745, temp21919
jmp label22017

label22018:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870 a21712 a21744)
 (set
  a21636
  a21674
  a21579
  a21693
  temp21919
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $1, a21744
movq a21744, temp21919
jmp label22017

label22020:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22018
jmp label22019

label22021:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 a21598 temp21870 a21731 %rsp))
movq $2, a21731
jmp label22011

label22023:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21743 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $0, a21743
cmpq $1, a21743
je label22020
jmp label22021

label22022:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21742 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $1, a21742
cmpq $1, a21742
je label22020
jmp label22021

label22025:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21712 a21617 %rsp a21741 a21693 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $0, a21741
cmpq $1, a21741
je label22022
jmp label22023

label22024:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21740 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $1, a21740
cmpq $1, a21740
je label22022
jmp label22023

label22027:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21693 a21712 a21617 %rsp a21739 a21579 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $0, a21739
cmpq $1, a21739
je label22024
jmp label22025

label22026:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21693 a21712 a21617 %rsp a21738 a21674 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $1, a21738
cmpq $1, a21738
je label22024
jmp label22025

label22028:
    liveness
:
(list
 (set
  a21636
  temp21912
  temp21913
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
cmpq temp21913, temp21912
jg label22026
jmp label22027

label22033:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21737
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  temp21913
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $2, a21737
movq a21737, temp21913
jmp label22028

label22029:
    liveness
:
(list
 (set
  a21636
  a21734
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  temp21913
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq a21734, temp21913
jmp label22028

label22031:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21736
  temp21912
  a21598
  temp21870)
 (set
  a21636
  a21734
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $2, a21736
movq a21736, a21734
jmp label22029

label22030:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  a21735
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  a21734
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
movq $1, a21735
movq a21735, a21734
jmp label22029

label22032:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
cmpq $1, $3
jg label22030
jmp label22031

label22034:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21693
  a21712
  a21617
  %rsp
  a21579
  temp21915
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
cmpq temp21915, $3
jg label22032
jmp label22033

label22036:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  a21733
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21693
  a21712
  a21617
  %rsp
  a21579
  temp21915
  a21598
  temp21870))
movq $2, a21733
movq a21733, temp21915
jmp label22034

label22035:
    liveness
:
(list
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21732
  a21636
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21693
  a21712
  a21617
  %rsp
  a21579
  temp21915
  a21598
  temp21870))
movq $1, a21732
movq a21732, temp21915
jmp label22034

label22037:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21693 a21712 a21617 %rsp %rax a21636 a21598 temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870)
 (set
  a21636
  temp21912
  a21674
  a21579
  a21693
  a21712
  a21617
  %rsp
  a21598
  temp21870))
callq read_int
movq %rax, temp21912
cmpq $1, $3
jg label22035
jmp label22036

label22047:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $2, a21712
jmp label22037

label22042:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 a21730 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq $2, a21730
movq a21730, a21712
jmp label22037

label22038:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21727 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21712 a21617 %rsp a21598 temp21870))
movq a21727, a21712
jmp label22037

label22040:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 %rsp a21598 temp21870 a21729 a21617)
 (set a21636 a21674 a21579 a21693 a21727 a21617 %rsp a21598 temp21870))
movq $2, a21729
movq a21729, a21727
jmp label22038

label22039:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21728 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21727 a21617 %rsp a21598 temp21870))
movq $1, a21728
movq a21728, a21727
jmp label22038

label22041:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22039
jmp label22040

label22043:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 temp21906 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
cmpq temp21906, $3
jg label22041
jmp label22042

label22045:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21726 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 temp21906 %rsp a21598 temp21870))
movq $2, a21726
movq a21726, temp21906
jmp label22043

label22044:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21725 a21693 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 temp21906 %rsp a21598 temp21870))
movq $1, a21725
movq a21725, temp21906
jmp label22043

label22046:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22044
jmp label22045

label22049:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21724 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $0, a21724
cmpq $1, a21724
je label22046
jmp label22047

label22048:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21723 a21579 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $1, a21723
cmpq $1, a21723
je label22046
jmp label22047

label22051:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21693 a21617 %rsp a21722 a21674 a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $0, a21722
cmpq $1, a21722
je label22048
jmp label22049

label22050:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21721 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $1, a21721
cmpq $1, a21721
je label22048
jmp label22049

label22053:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21720 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $0, a21720
cmpq $1, a21720
je label22050
jmp label22051

label22052:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21719 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $1, a21719
cmpq $1, a21719
je label22050
jmp label22051

label22054:
    liveness
:
(list
 (set
  a21636
  a21674
  temp21900
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
cmpq temp21900, temp21899
jg label22052
jmp label22053

label22059:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21636
  a21718
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870)
 (set
  a21636
  a21674
  temp21900
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870))
movq $2, a21718
movq a21718, temp21900
jmp label22054

label22055:
    liveness
:
(list
 (set
  a21636
  a21674
  a21693
  a21617
  a21579
  temp21899
  a21598
  temp21870
  a21715
  %rsp)
 (set
  a21636
  a21674
  temp21900
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870))
movq a21715, temp21900
jmp label22054

label22057:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21636
  a21717
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870)
 (set
  a21636
  a21674
  a21693
  a21617
  a21579
  temp21899
  a21598
  temp21870
  a21715
  %rsp))
movq $2, a21717
movq a21717, a21715
jmp label22055

label22056:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21674
  a21693
  a21617
  %rsp
  a21716
  a21636
  a21579
  temp21899
  a21598
  temp21870)
 (set
  a21636
  a21674
  a21693
  a21617
  a21579
  temp21899
  a21598
  temp21870
  a21715
  %rsp))
movq $1, a21716
movq a21716, a21715
jmp label22055

label22058:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870))
cmpq $1, $3
jg label22056
jmp label22057

label22060:
    liveness
:
(list
 (set
  a21636
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870
  temp21902)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870))
cmpq temp21902, $3
jg label22058
jmp label22059

label22062:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21636
  a21674
  a21693
  a21617
  a21714
  %rsp
  a21579
  temp21899
  a21598
  temp21870)
 (set
  a21636
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870
  temp21902))
movq $2, a21714
movq a21714, temp21902
jmp label22060

label22061:
    liveness
:
(list
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set
  a21636
  a21674
  a21693
  %rsp
  a21579
  temp21899
  a21598
  temp21870
  a21713
  a21617)
 (set
  a21636
  a21674
  a21693
  a21617
  %rsp
  a21579
  temp21899
  a21598
  temp21870
  temp21902))
movq $1, a21713
movq a21713, temp21902
jmp label22060

label22063:
    liveness
:
(list
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21693 a21617 %rsp %rax a21636 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870)
 (set a21636 a21674 a21693 a21617 %rsp a21579 temp21899 a21598 temp21870))
callq read_int
movq %rax, temp21899
cmpq $1, $3
jg label22061
jmp label22062

label22064:
    liveness
:
(list
 (set a21636 a21674 a21579 a21708 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq a21708, a21693
jmp label22063

label22066:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21710 a21598 temp21870)
 (set a21636 a21674 a21579 a21708 a21617 %rsp a21598 temp21870))
movq $2, a21710
movq a21710, a21708
jmp label22064

label22065:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21709 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21708 a21617 %rsp a21598 temp21870))
movq $1, a21709
movq a21709, a21708
jmp label22064

label22067:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22065
jmp label22066

label22073:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $2, a21693
jmp label22063

label22068:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21711 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21693 a21617 %rsp a21598 temp21870))
movq $2, a21711
movq a21711, a21693
jmp label22063

label22069:
    liveness
:
(list
 (set a21636 temp21893 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
cmpq temp21893, $3
jg label22067
jmp label22068

label22071:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21617 %rsp a21707 a21579 a21598 temp21870)
 (set a21636 temp21893 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21707
movq a21707, temp21893
jmp label22069

label22070:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21706 a21674 a21598 temp21870)
 (set a21636 temp21893 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21706
movq a21706, temp21893
jmp label22069

label22072:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22070
jmp label22071

label22075:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21705 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21705
cmpq $1, a21705
je label22072
jmp label22073

label22074:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21704 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21704
cmpq $1, a21704
je label22072
jmp label22073

label22077:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21703 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21703
cmpq $1, a21703
je label22074
jmp label22075

label22076:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21702 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21702
cmpq $1, a21702
je label22074
jmp label22075

label22079:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21701 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21701
cmpq $1, a21701
je label22076
jmp label22077

label22078:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21617 %rsp a21700 a21636 a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21700
cmpq $1, a21700
je label22076
jmp label22077

label22080:
    liveness
:
(list
 (set a21636 a21674 a21579 temp21887 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
cmpq temp21887, temp21886
jg label22078
jmp label22079

label22081:
    liveness
:
(list
 (set a21636 a21674 a21579 a21696 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 temp21887 a21617 %rsp a21598 temp21870 temp21886))
movq a21696, temp21887
jmp label22080

label22083:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 a21698 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21696 a21617 %rsp a21598 temp21870 temp21886))
movq $2, a21698
movq a21698, a21696
jmp label22081

label22082:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 %rsp a21598 temp21870 temp21886 a21617 a21697)
 (set a21636 a21674 a21579 a21696 a21617 %rsp a21598 temp21870 temp21886))
movq $1, a21697
movq a21697, a21696
jmp label22081

label22084:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886))
cmpq $1, $3
jg label22082
jmp label22083

label22085:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 a21598 temp21870 temp21886 %rsp a21699)
 (set a21636 a21674 a21579 temp21887 a21617 %rsp a21598 temp21870 temp21886))
movq $2, a21699
movq a21699, temp21887
jmp label22080

label22086:
    liveness
:
(list
 (set a21636 a21674 a21579 %rsp a21598 temp21870 temp21886 a21617 temp21889)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886))
cmpq temp21889, $3
jg label22084
jmp label22085

label22088:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21695 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 %rsp a21598 temp21870 temp21886 a21617 temp21889))
movq $2, a21695
movq a21695, temp21889
jmp label22086

label22087:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886 a21694)
 (set a21636 a21674 a21579 %rsp a21598 temp21870 temp21886 a21617 temp21889))
movq $1, a21694
movq a21694, temp21889
jmp label22086

label22089:
    liveness
:
(list
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870)
 (set a21674 a21579 a21617 %rsp %rax a21636 a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870 temp21886))
callq read_int
movq %rax, temp21886
cmpq $1, $3
jg label22087
jmp label22088

label22099:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21674
jmp label22089

label22094:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21692 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21692
movq a21692, a21674
jmp label22089

label22090:
    liveness
:
(list
 (set a21636 a21689 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21674 a21579 a21617 %rsp a21598 temp21870))
movq a21689, a21674
jmp label22089

label22092:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21617 %rsp a21579 a21691 a21598 temp21870)
 (set a21636 a21689 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21691
movq a21691, a21689
jmp label22090

label22091:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21690 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21689 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21690
movq a21690, a21689
jmp label22090

label22093:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22091
jmp label22092

label22095:
    liveness
:
(list
 (set a21636 temp21880 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
cmpq temp21880, $3
jg label22093
jmp label22094

label22097:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21688 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 temp21880 a21579 a21617 %rsp a21598 temp21870))
movq $2, a21688
movq a21688, temp21880
jmp label22095

label22096:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21687 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 temp21880 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21687
movq a21687, temp21880
jmp label22095

label22098:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
cmpq $1, $3
jg label22096
jmp label22097

label22101:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21686 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21686
cmpq $1, a21686
je label22098
jmp label22099

label22100:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21685 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21685
cmpq $1, a21685
je label22098
jmp label22099

label22103:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21579 a21617 %rsp a21636 a21684 a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21684
cmpq $1, a21684
je label22100
jmp label22101

label22102:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 a21598 temp21870 %rsp a21683)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21683
cmpq $1, a21683
je label22100
jmp label22101

label22105:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 a21682 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $0, a21682
cmpq $1, a21682
je label22102
jmp label22103

label22104:
    liveness
:
(list
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 a21681)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
movq $1, a21681
cmpq $1, a21681
je label22102
jmp label22103

label22106:
    liveness
:
(list
 (set a21636 a21579 temp21874 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21636 a21579 a21617 %rsp a21598 temp21870))
cmpq temp21874, temp21873
jg label22104
jmp label22105

label22111:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21680 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 temp21874 %rsp a21598 temp21870 a21617 temp21873))
movq $2, a21680
movq a21680, temp21874
jmp label22106

label22107:
    liveness
:
(list
 (set a21636 a21579 a21677 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 temp21874 %rsp a21598 temp21870 a21617 temp21873))
movq a21677, temp21874
jmp label22106

label22109:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21679 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21677 %rsp a21598 temp21870 a21617 temp21873))
movq $2, a21679
movq a21679, a21677
jmp label22107

label22108:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21678 a21617 temp21873)
 (set a21636 a21579 a21677 %rsp a21598 temp21870 a21617 temp21873))
movq $1, a21678
movq a21678, a21677
jmp label22107

label22110:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873))
cmpq $1, $3
jg label22108
jmp label22109

label22112:
    liveness
:
(list
 (set a21579 %rsp temp21876 a21636 a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873))
cmpq temp21876, $3
jg label22110
jmp label22111

label22114:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 a21676 %rsp a21598 temp21870 a21617 temp21873)
 (set a21579 %rsp temp21876 a21636 a21598 temp21870 a21617 temp21873))
movq $2, a21676
movq a21676, temp21876
jmp label22112

label22113:
    liveness
:
(list
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 %rsp a21579 a21675 a21598 temp21870 a21617 temp21873)
 (set a21579 %rsp temp21876 a21636 a21598 temp21870 a21617 temp21873))
movq $1, a21675
movq a21675, temp21876
jmp label22112

label22115:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp %rax a21636)
 (set a21636 a21579 a21617 %rsp a21598 temp21870)
 (set a21579 a21617 %rsp %rax a21636 a21598 temp21870)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873)
 (set a21636 a21579 %rsp a21598 temp21870 a21617 temp21873))
callq read_int
movq %rax, temp21870
callq read_int
movq %rax, temp21873
cmpq $1, $3
jg label22113
jmp label22114

label22125:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $2, a21655
jmp label22115

label22120:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21673 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $2, a21673
movq a21673, a21655
jmp label22115

label22116:
    liveness
:
(list
 (set a21636 a21670 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq a21670, a21655
jmp label22115

label22118:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21672 a21579 a21598 a21617 %rsp)
 (set a21636 a21670 a21579 a21598 a21617 %rsp))
movq $2, a21672
movq a21672, a21670
jmp label22116

label22117:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21671 a21579 a21598 a21617 %rsp)
 (set a21636 a21670 a21579 a21598 a21617 %rsp))
movq $1, a21671
movq a21671, a21670
jmp label22116

label22119:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22117
jmp label22118

label22121:
    liveness
:
(list
 (set a21636 temp21866 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
cmpq temp21866, $3
jg label22119
jmp label22120

label22123:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21669 a21579 a21598 a21617 %rsp)
 (set a21636 temp21866 a21579 a21598 a21617 %rsp))
movq $2, a21669
movq a21669, temp21866
jmp label22121

label22122:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp a21636 a21668)
 (set a21636 temp21866 a21579 a21598 a21617 %rsp))
movq $1, a21668
movq a21668, temp21866
jmp label22121

label22124:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22122
jmp label22123

label22127:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp a21667)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $0, a21667
cmpq $1, a21667
je label22124
jmp label22125

label22126:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 a21666 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $1, a21666
cmpq $1, a21666
je label22124
jmp label22125

label22129:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 %rsp a21617 a21665)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $0, a21665
cmpq $1, a21665
je label22126
jmp label22127

label22128:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21664 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $1, a21664
cmpq $1, a21664
je label22126
jmp label22127

label22131:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21663 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $0, a21663
cmpq $1, a21663
je label22128
jmp label22129

label22130:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21617 %rsp a21598 a21662)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $1, a21662
cmpq $1, a21662
je label22128
jmp label22129

label22132:
    liveness
:
(list
 (set a21579 a21598 a21617 temp21860 a21636 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
cmpq temp21860, temp21859
jg label22130
jmp label22131

label22137:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21661 a21598 a21617 temp21859 %rsp)
 (set a21579 a21598 a21617 temp21860 a21636 temp21859 %rsp))
movq $2, a21661
movq a21661, temp21860
jmp label22132

label22133:
    liveness
:
(list
 (set a21636 a21658 a21579 a21598 a21617 temp21859 %rsp)
 (set a21579 a21598 a21617 temp21860 a21636 temp21859 %rsp))
movq a21658, temp21860
jmp label22132

label22135:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21660 a21598 a21617 temp21859 %rsp)
 (set a21636 a21658 a21579 a21598 a21617 temp21859 %rsp))
movq $2, a21660
movq a21660, a21658
jmp label22133

label22134:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21598 a21617 a21579 a21659 temp21859 %rsp)
 (set a21636 a21658 a21579 a21598 a21617 temp21859 %rsp))
movq $1, a21659
movq a21659, a21658
jmp label22133

label22136:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp))
cmpq $1, $3
jg label22134
jmp label22135

label22138:
    liveness
:
(list
 (set a21636 temp21862 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp))
cmpq temp21862, $3
jg label22136
jmp label22137

label22140:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21657 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 temp21862 a21579 a21598 a21617 temp21859 %rsp))
movq $2, a21657
movq a21657, temp21862
jmp label22138

label22139:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21656 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 temp21862 a21579 a21598 a21617 temp21859 %rsp))
movq $1, a21656
movq a21656, temp21862
jmp label22138

label22141:
    liveness
:
(list
 (set a21636 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp %rax a21636)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp)
 (set a21636 a21579 a21598 a21617 temp21859 %rsp))
callq read_int
movq %rax, temp21859
cmpq $1, $3
jg label22139
jmp label22140

label22146:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21654 a21579 a21598 a21617 %rsp)
 (set a21636 a21579 a21598 a21617 %rsp))
movq $2, a21654
movq a21654, a21636
jmp label22141

label22142:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp a21651)
 (set a21636 a21579 a21598 a21617 %rsp))
movq a21651, a21636
jmp label22141

label22144:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21653 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp a21651))
movq $2, a21653
movq a21653, a21651
jmp label22142

label22143:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21652 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp a21651))
movq $1, a21652
movq a21652, a21651
jmp label22142

label22145:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22143
jmp label22144

label22147:
    liveness
:
(list
 (set a21579 temp21853 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
cmpq temp21853, $3
jg label22145
jmp label22146

label22149:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 a21650 %rsp)
 (set a21579 temp21853 a21598 a21617 %rsp))
movq $2, a21650
movq a21650, temp21853
jmp label22147

label22148:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 %rsp a21617 a21649)
 (set a21579 temp21853 a21598 a21617 %rsp))
movq $1, a21649
movq a21649, temp21853
jmp label22147

label22150:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22148
jmp label22149

label22151:
    liveness
:
(list (set a21579 a21598 a21617 %rsp) (set a21636 a21579 a21598 a21617 %rsp))
movq $2, a21636
jmp label22141

label22153:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21648 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $0, a21648
cmpq $1, a21648
je label22150
jmp label22151

label22152:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21647 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $1, a21647
cmpq $1, a21647
je label22150
jmp label22151

label22155:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21617 %rsp a21598 a21646)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $0, a21646
cmpq $1, a21646
je label22152
jmp label22153

label22154:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21645 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $1, a21645
cmpq $1, a21645
je label22152
jmp label22153

label22157:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21644 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $0, a21644
cmpq $1, a21644
je label22154
jmp label22155

label22156:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set a21598 a21617 %rsp a21579 a21643)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
movq $1, a21643
cmpq $1, a21643
je label22154
jmp label22155

label22158:
    liveness
:
(list
 (set temp21846 temp21847 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp))
cmpq temp21847, temp21846
jg label22156
jmp label22157

label22163:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21642 a21579 a21598 a21617 %rsp)
 (set temp21846 temp21847 a21579 a21598 a21617 %rsp))
movq $2, a21642
movq a21642, temp21847
jmp label22158

label22159:
    liveness
:
(list
 (set temp21846 a21639 a21579 a21598 a21617 %rsp)
 (set temp21846 temp21847 a21579 a21598 a21617 %rsp))
movq a21639, temp21847
jmp label22158

label22161:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21641 a21579 a21598 a21617 %rsp)
 (set temp21846 a21639 a21579 a21598 a21617 %rsp))
movq $2, a21641
movq a21641, a21639
jmp label22159

label22160:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21640 a21579 a21598 a21617 %rsp)
 (set temp21846 a21639 a21579 a21598 a21617 %rsp))
movq $1, a21640
movq a21640, a21639
jmp label22159

label22162:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp))
cmpq $1, $3
jg label22160
jmp label22161

label22164:
    liveness
:
(list
 (set temp21846 temp21849 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp))
cmpq temp21849, $3
jg label22162
jmp label22163

label22166:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set a21579 a21598 a21617 %rsp temp21846 a21638)
 (set temp21846 temp21849 a21579 a21598 a21617 %rsp))
movq $2, a21638
movq a21638, temp21849
jmp label22164

label22165:
    liveness
:
(list
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set a21637 temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 temp21849 a21579 a21598 a21617 %rsp))
movq $1, a21637
movq a21637, temp21849
jmp label22164

label22167:
    liveness
:
(list
 (set a21579 a21598 a21617 %rsp)
 (set %rax a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp)
 (set temp21846 a21579 a21598 a21617 %rsp))
callq read_int
movq %rax, temp21846
cmpq $1, $3
jg label22165
jmp label22166

label22177:
    liveness
:
(list (set a21579 a21598 %rsp) (set a21579 a21598 a21617 %rsp))
movq $2, a21617
jmp label22167

label22172:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp a21635)
 (set a21579 a21598 a21617 %rsp))
movq $2, a21635
movq a21635, a21617
jmp label22167

label22168:
    liveness
:
(list (set a21579 a21598 a21632 %rsp) (set a21579 a21598 a21617 %rsp))
movq a21632, a21617
jmp label22167

label22170:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 a21634 %rsp)
 (set a21579 a21598 a21632 %rsp))
movq $2, a21634
movq a21634, a21632
jmp label22168

label22169:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 a21633 %rsp)
 (set a21579 a21598 a21632 %rsp))
movq $1, a21633
movq a21633, a21632
jmp label22168

label22171:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
cmpq $1, $3
jg label22169
jmp label22170

label22173:
    liveness
:
(list
 (set a21579 a21598 temp21840 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
cmpq temp21840, $3
jg label22171
jmp label22172

label22175:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 a21631 %rsp)
 (set a21579 a21598 temp21840 %rsp))
movq $2, a21631
movq a21631, temp21840
jmp label22173

label22174:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 %rsp a21598 a21630)
 (set a21579 a21598 temp21840 %rsp))
movq $1, a21630
movq a21630, temp21840
jmp label22173

label22176:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
cmpq $1, $3
jg label22174
jmp label22175

label22179:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21629 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $0, a21629
cmpq $1, a21629
je label22176
jmp label22177

label22178:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21579 a21628 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $1, a21628
cmpq $1, a21628
je label22176
jmp label22177

label22181:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21598 %rsp a21579 a21627)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $0, a21627
cmpq $1, a21627
je label22178
jmp label22179

label22180:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21626 a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $1, a21626
cmpq $1, a21626
je label22178
jmp label22179

label22183:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21625 a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $0, a21625
cmpq $1, a21625
je label22180
jmp label22181

label22182:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set a21624 a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
movq $1, a21624
cmpq $1, a21624
je label22180
jmp label22181

label22184:
    liveness
:
(list
 (set temp21833 temp21834 a21579 a21598 %rsp)
 (set a21579 a21598 %rsp)
 (set a21579 a21598 %rsp))
cmpq temp21834, temp21833
jg label22182
jmp label22183

label22189:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set a21623 temp21833 a21579 a21598 %rsp)
 (set temp21833 temp21834 a21579 a21598 %rsp))
movq $2, a21623
movq a21623, temp21834
jmp label22184

label22185:
    liveness
:
(list
 (set a21620 temp21833 a21579 a21598 %rsp)
 (set temp21833 temp21834 a21579 a21598 %rsp))
movq a21620, temp21834
jmp label22184

label22187:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set a21622 temp21833 a21579 a21598 %rsp)
 (set a21620 temp21833 a21579 a21598 %rsp))
movq $2, a21622
movq a21622, a21620
jmp label22185

label22186:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set a21621 temp21833 a21579 a21598 %rsp)
 (set a21620 temp21833 a21579 a21598 %rsp))
movq $1, a21621
movq a21621, a21620
jmp label22185

label22188:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp))
cmpq $1, $3
jg label22186
jmp label22187

label22190:
    liveness
:
(list
 (set temp21833 a21579 temp21836 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp))
cmpq temp21836, $3
jg label22188
jmp label22189

label22192:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp a21619)
 (set temp21833 a21579 temp21836 a21598 %rsp))
movq $2, a21619
movq a21619, temp21836
jmp label22190

label22191:
    liveness
:
(list
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 a21618 %rsp)
 (set temp21833 a21579 temp21836 a21598 %rsp))
movq $1, a21618
movq a21618, temp21836
jmp label22190

label22193:
    liveness
:
(list
 (set a21579 a21598 %rsp)
 (set %rax a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp)
 (set temp21833 a21579 a21598 %rsp))
callq read_int
movq %rax, temp21833
cmpq $1, $3
jg label22191
jmp label22192

label22194:
    liveness
:
(list (set a21579 a21613 %rsp) (set a21579 a21598 %rsp))
movq a21613, a21598
jmp label22193

label22195:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21614 %rsp) (set a21579 a21613 %rsp))
movq $1, a21614
movq a21614, a21613
jmp label22194

label22196:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21615 %rsp) (set a21579 a21613 %rsp))
movq $2, a21615
movq a21615, a21613
jmp label22194

label22197:
    liveness
:
(list (set a21579 %rsp) (set a21579 %rsp) (set a21579 %rsp))
cmpq $1, $3
jg label22195
jmp label22196

label22203:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21598 %rsp))
movq $2, a21598
jmp label22193

label22198:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21616 %rsp) (set a21579 a21598 %rsp))
movq $2, a21616
movq a21616, a21598
jmp label22193

label22199:
    liveness
:
(list (set a21579 temp21827 %rsp) (set a21579 %rsp) (set a21579 %rsp))
cmpq temp21827, $3
jg label22197
jmp label22198

label22201:
    liveness
:
(list (set a21579 %rsp) (set a21579 a21612 %rsp) (set a21579 temp21827 %rsp))
movq $2, a21612
movq a21612, temp21827
jmp label22199

label22200:
    liveness
:
(list (set a21579 %rsp) (set %rsp a21579 a21611) (set a21579 temp21827 %rsp))
movq $1, a21611
movq a21611, temp21827
jmp label22199

label22202:
    liveness
:
(list (set a21579 %rsp) (set a21579 %rsp) (set a21579 %rsp))
cmpq $1, $3
jg label22200
jmp label22201

label22205:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21610 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $0, a21610
cmpq $1, a21610
je label22202
jmp label22203

label22204:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21609 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $1, a21609
cmpq $1, a21609
je label22202
jmp label22203

label22207:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21608 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $0, a21608
cmpq $1, a21608
je label22204
jmp label22205

label22206:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21607 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $1, a21607
cmpq $1, a21607
je label22204
jmp label22205

label22209:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21606 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $0, a21606
cmpq $1, a21606
je label22206
jmp label22207

label22208:
    liveness
:
(list
 (set a21579 %rsp)
 (set a21605 a21579 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
movq $1, a21605
cmpq $1, a21605
je label22206
jmp label22207

label22210:
    liveness
:
(list
 (set a21579 temp21820 temp21821 %rsp)
 (set a21579 %rsp)
 (set a21579 %rsp))
cmpq temp21821, temp21820
jg label22208
jmp label22209

label22211:
    liveness
:
(list (set a21579 temp21820 a21601 %rsp) (set a21579 temp21820 temp21821 %rsp))
movq a21601, temp21821
jmp label22210

label22213:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 a21603 %rsp)
 (set a21579 temp21820 a21601 %rsp))
movq $2, a21603
movq a21603, a21601
jmp label22211

label22212:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 a21602 %rsp)
 (set a21579 temp21820 a21601 %rsp))
movq $1, a21602
movq a21602, a21601
jmp label22211

label22214:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp))
cmpq $1, $3
jg label22212
jmp label22213

label22215:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21604 a21579 temp21820 %rsp)
 (set a21579 temp21820 temp21821 %rsp))
movq $2, a21604
movq a21604, temp21821
jmp label22210

label22216:
    liveness
:
(list
 (set a21579 temp21820 temp21823 %rsp)
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp))
cmpq temp21823, $3
jg label22214
jmp label22215

label22218:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 a21600 %rsp)
 (set a21579 temp21820 temp21823 %rsp))
movq $2, a21600
movq a21600, temp21823
jmp label22216

label22217:
    liveness
:
(list
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 a21599 %rsp)
 (set a21579 temp21820 temp21823 %rsp))
movq $1, a21599
movq a21599, temp21823
jmp label22216

label22219:
    liveness
:
(list
 (set a21579 %rsp)
 (set %rax a21579 %rsp)
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp)
 (set a21579 temp21820 %rsp))
callq read_int
movq %rax, temp21820
cmpq $1, $3
jg label22217
jmp label22218

label22229:
    liveness
:
(list (set %rsp) (set a21579 %rsp))
movq $2, a21579
jmp label22219

label22224:
    liveness
:
(list (set %rsp) (set a21597 %rsp) (set a21579 %rsp))
movq $2, a21597
movq a21597, a21579
jmp label22219

label22220:
    liveness
:
(list (set a21594 %rsp) (set a21579 %rsp))
movq a21594, a21579
jmp label22219

label22222:
    liveness
:
(list (set %rsp) (set a21596 %rsp) (set a21594 %rsp))
movq $2, a21596
movq a21596, a21594
jmp label22220

label22221:
    liveness
:
(list (set %rsp) (set a21595 %rsp) (set a21594 %rsp))
movq $1, a21595
movq a21595, a21594
jmp label22220

label22223:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label22221
jmp label22222

label22225:
    liveness
:
(list (set temp21814 %rsp) (set %rsp) (set %rsp))
cmpq temp21814, $3
jg label22223
jmp label22224

label22227:
    liveness
:
(list (set %rsp) (set a21593 %rsp) (set temp21814 %rsp))
movq $2, a21593
movq a21593, temp21814
jmp label22225

label22226:
    liveness
:
(list (set %rsp) (set a21592 %rsp) (set temp21814 %rsp))
movq $1, a21592
movq a21592, temp21814
jmp label22225

label22228:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label22226
jmp label22227

label22230:
    liveness
:
(list (set %rsp) (set a21590 %rsp) (set %rsp) (set %rsp))
movq $1, a21590
cmpq $1, a21590
je label22228
jmp label22229

label22231:
    liveness
:
(list (set %rsp) (set a21591 %rsp) (set %rsp) (set %rsp))
movq $0, a21591
cmpq $1, a21591
je label22228
jmp label22229

label22232:
    liveness
:
(list (set %rsp) (set a21588 %rsp) (set %rsp) (set %rsp))
movq $1, a21588
cmpq $1, a21588
je label22230
jmp label22231

label22233:
    liveness
:
(list (set %rsp) (set a21589 %rsp) (set %rsp) (set %rsp))
movq $0, a21589
cmpq $1, a21589
je label22230
jmp label22231

label22234:
    liveness
:
(list (set %rsp) (set a21586 %rsp) (set %rsp) (set %rsp))
movq $1, a21586
cmpq $1, a21586
je label22232
jmp label22233

label22235:
    liveness
:
(list (set %rsp) (set a21587 %rsp) (set %rsp) (set %rsp))
movq $0, a21587
cmpq $1, a21587
je label22232
jmp label22233

label22236:
    liveness
:
(list (set temp21807 temp21808 %rsp) (set %rsp) (set %rsp))
cmpq temp21808, temp21807
jg label22234
jmp label22235

label22237:
    liveness
:
(list (set a21582 temp21807 %rsp) (set temp21807 temp21808 %rsp))
movq a21582, temp21808
jmp label22236

label22238:
    liveness
:
(list
 (set temp21807 %rsp)
 (set %rsp temp21807 a21583)
 (set a21582 temp21807 %rsp))
movq $1, a21583
movq a21583, a21582
jmp label22237

label22239:
    liveness
:
(list
 (set temp21807 %rsp)
 (set temp21807 a21584 %rsp)
 (set a21582 temp21807 %rsp))
movq $2, a21584
movq a21584, a21582
jmp label22237

label22240:
    liveness
:
(list (set temp21807 %rsp) (set temp21807 %rsp) (set temp21807 %rsp))
cmpq $1, $3
jg label22238
jmp label22239

label22241:
    liveness
:
(list
 (set temp21807 %rsp)
 (set temp21807 a21585 %rsp)
 (set temp21807 temp21808 %rsp))
movq $2, a21585
movq a21585, temp21808
jmp label22236

label22242:
    liveness
:
(list (set temp21807 temp21810 %rsp) (set temp21807 %rsp) (set temp21807 %rsp))
cmpq temp21810, $3
jg label22240
jmp label22241

label22244:
    liveness
:
(list
 (set temp21807 %rsp)
 (set a21581 temp21807 %rsp)
 (set temp21807 temp21810 %rsp))
movq $2, a21581
movq a21581, temp21810
jmp label22242

label22243:
    liveness
:
(list
 (set temp21807 %rsp)
 (set a21580 temp21807 %rsp)
 (set temp21807 temp21810 %rsp))
movq $1, a21580
movq a21580, temp21810
jmp label22242

label22246:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp21807 %rsp)
 (set temp21807 %rsp)
 (set temp21807 %rsp))
callq read_int
movq %rax, temp21807
cmpq $1, $3
jg label22243
jmp label22244

label21951:
    liveness
:
(list (set a21575 %rsp) (set %rax %rsp))
movq a21575, %rax
jmp conclusion

label21953:
    liveness
:
(list (set %rsp) (set a21577 %rsp) (set a21575 %rsp))
movq $2, a21577
movq a21577, a21575
jmp label21951

label21952:
    liveness
:
(list (set %rsp) (set a21576 %rsp) (set a21575 %rsp))
movq $1, a21576
movq a21576, a21575
jmp label21951

label21955:
    liveness
:
(list (set %rsp) (set a21578 %rsp) (set %rax %rsp))
movq $2, a21578
movq a21578, %rax
jmp conclusion

label21954:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label21952
jmp label21953

label21956:
    liveness
:
(list (set temp21803 %rsp) (set %rsp) (set %rsp))
cmpq temp21803, $3
jg label21954
jmp label21955

label21958:
    liveness
:
(list (set %rsp) (set a21574 %rsp) (set temp21803 %rsp))
movq $2, a21574
movq a21574, temp21803
jmp label21956

label21957:
    liveness
:
(list (set %rsp) (set a21573 %rsp) (set temp21803 %rsp))
movq $1, a21573
movq a21573, temp21803
jmp label21956

label22245:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label21957
jmp label21958

label22247:
    liveness
:
(list (set x21560 %rsp) (set %rsp) (set %rsp))
cmpq $1, x21560
je label22245
jmp label22246

label22248:
    liveness
:
(list (set %rsp) (set x21560 %rsp))
movq $1, x21560
jmp label22247

label22249:
    liveness
:
(list (set %rsp) (set x21560 %rsp))
movq $0, x21560
jmp label22247

label22250:
    liveness
:
(list (set temp21790 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp21790
jg label22248
jmp label22249

label22251:
    liveness
:
(list (set %rsp) (set temp21790 %rsp))
movq $8, temp21790
jmp label22250

label22252:
    liveness
:
(list (set %rsp) (set temp21790 %rsp))
movq $9, temp21790
jmp label22250

label22253:
    liveness
:
(list (set temp21797 temp21792 %rsp) (set %rsp) (set %rsp))
cmpq temp21797, temp21792
jge label22251
jmp label22252

label22254:
    liveness
:
(list (set temp21792 a21569 %rsp) (set temp21797 temp21792 %rsp))
movq a21569, temp21797
jmp label22253

label22255:
    liveness
:
(list
 (set temp21792 %rsp)
 (set temp21792 a21570 %rsp)
 (set temp21792 a21569 %rsp))
movq $1, a21570
movq a21570, a21569
jmp label22254

label22256:
    liveness
:
(list
 (set temp21792 %rsp)
 (set temp21792 a21571 %rsp)
 (set temp21792 a21569 %rsp))
movq $2, a21571
movq a21571, a21569
jmp label22254

label22257:
    liveness
:
(list (set temp21792 %rsp) (set temp21792 %rsp) (set temp21792 %rsp))
cmpq $1, $3
jg label22255
jmp label22256

label22258:
    liveness
:
(list
 (set temp21792 %rsp)
 (set a21572 temp21792 %rsp)
 (set temp21797 temp21792 %rsp))
movq $2, a21572
movq a21572, temp21797
jmp label22253

label22259:
    liveness
:
(list (set temp21799 temp21792 %rsp) (set temp21792 %rsp) (set temp21792 %rsp))
cmpq temp21799, $3
jg label22257
jmp label22258

label22260:
    liveness
:
(list
 (set temp21792 %rsp)
 (set a21567 temp21792 %rsp)
 (set temp21799 temp21792 %rsp))
movq $1, a21567
movq a21567, temp21799
jmp label22259

label22261:
    liveness
:
(list
 (set temp21792 %rsp)
 (set %rsp temp21792 a21568)
 (set temp21799 temp21792 %rsp))
movq $2, a21568
movq a21568, temp21799
jmp label22259

label22262:
    liveness
:
(list (set temp21792 %rsp) (set temp21792 %rsp) (set temp21792 %rsp))
cmpq $1, $3
jg label22260
jmp label22261

label22263:
    liveness
:
(list (set a21563 %rsp) (set temp21792 %rsp))
movq a21563, temp21792
jmp label22262

label22264:
    liveness
:
(list (set %rsp) (set a21564 %rsp) (set a21563 %rsp))
movq $1, a21564
movq a21564, a21563
jmp label22263

label22265:
    liveness
:
(list (set %rsp) (set a21565 %rsp) (set a21563 %rsp))
movq $2, a21565
movq a21565, a21563
jmp label22263

label22266:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label22264
jmp label22265

label22267:
    liveness
:
(list (set %rsp) (set a21566 %rsp) (set temp21792 %rsp))
movq $2, a21566
movq a21566, temp21792
jmp label22262

label22268:
    liveness
:
(list (set temp21794 %rsp) (set %rsp) (set %rsp))
cmpq temp21794, $3
jg label22266
jmp label22267

label22269:
    liveness
:
(list (set %rsp) (set a21561 %rsp) (set temp21794 %rsp))
movq $1, a21561
movq a21561, temp21794
jmp label22268

label22270:
    liveness
:
(list (set %rsp) (set a21562 %rsp) (set temp21794 %rsp))
movq $2, a21562
movq a21562, temp21794
jmp label22268

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label22269
jmp label22270




output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: build interference @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21653 a21651)
 (list temp21910 a21731)
 (list a21652 a21651)
 (list a21655 a21670)
 (list a21655 a21673)
 (list a21654 a21636)
 (list a21657 temp21862)
 (list temp21915 a21732)
 (list temp21915 a21733)
 (list a21656 temp21862)
 (list a21659 a21658)
 (list temp21913 a21734)
 (list temp21913 a21737)
 (list a21658 temp21860)
 (list a21658 a21659)
 (list a21658 a21660)
 (list a21661 temp21860)
 (list temp21919 a21744)
 (list temp21919 a21745)
 (list a21660 a21658)
 (list temp21923 a21750)
 (list a21637 temp21849)
 (list a21636 temp21844)
 (list a21636 a21654)
 (list a21636 a21651)
 (list a21639 temp21847)
 (list a21639 a21640)
 (list a21639 a21641)
 (list a21638 temp21849)
 (list temp21893 a21706)
 (list temp21893 a21707)
 (list a21641 a21639)
 (list a21640 a21639)
 (list a21642 temp21847)
 (list temp21897 a21712)
 (list temp21902 a21713)
 (list temp21902 a21714)
 (list temp21900 a21718)
 (list temp21900 a21715)
 (list a21649 temp21853)
 (list temp21906 a21725)
 (list temp21906 a21726)
 (list a21651 a21653)
 (list a21651 a21636)
 (list a21651 a21652)
 (list a21650 temp21853)
 (list temp21942 a21773)
 (list temp21942 a21776)
 (list a21687 temp21880)
 (list a21689 a21691)
 (list a21689 a21674)
 (list a21689 a21690)
 (list a21688 temp21880)
 (list temp21944 a21771)
 (list temp21944 a21772)
 (list a21691 a21689)
 (list a21690 a21689)
 (list a21693 a21711)
 (list a21693 a21708)
 (list a21693 temp21884)
 (list a21692 a21674)
 (list temp21948 a21783)
 (list temp21948 a21784)
 (list a21695 temp21889)
 (list a21694 temp21889)
 (list a21697 a21696)
 (list a21696 temp21887)
 (list a21696 a21697)
 (list a21696 a21698)
 (list a21699 temp21887)
 (list a21698 a21696)
 (list temp21926 a21751)
 (list a21669 temp21866)
 (list a21668 temp21866)
 (list a21671 a21670)
 (list a21670 a21672)
 (list a21670 a21655)
 (list a21670 a21671)
 (list a21673 a21655)
 (list temp21931 a21752)
 (list temp21931 a21753)
 (list a21672 a21670)
 (list a21675 temp21876)
 (list temp21929 a21754)
 (list temp21929 a21757)
 (list a21674 a21689)
 (list a21674 a21692)
 (list a21674 temp21871)
 (list a21677 a21678)
 (list a21677 a21679)
 (list a21677 temp21874)
 (list temp21935 a21764)
 (list temp21935 a21765)
 (list a21676 temp21876)
 (list a21679 a21677)
 (list a21678 a21677)
 (list temp21939 a21770)
 (list a21680 temp21874)
 (list temp21847 a21639)
 (list temp21847 a21642)
 (list temp21844 a21636)
 (list a21593 temp21814)
 (list a21592 temp21814)
 (list a21595 a21594)
 (list a21594 a21596)
 (list a21594 a21579)
 (list a21594 a21595)
 (list temp21849 a21637)
 (list temp21849 a21638)
 (list a21597 a21579)
 (list a21596 a21594)
 (list a21599 temp21823)
 (list temp21853 a21649)
 (list temp21853 a21650)
 (list a21598 temp21818)
 (list a21598 a21613)
 (list a21598 a21616)
 (list a21601 temp21821)
 (list a21601 a21602)
 (list a21601 a21603)
 (list a21600 temp21823)
 (list a21603 a21601)
 (list a21602 a21601)
 (list temp21857 temp21870)
 (list a21573 temp21803)
 (list a21572 temp21797)
 (list temp21831 a21617)
 (list a21575 a21576)
 (list a21575 a21577)
 (list a21574 temp21803)
 (list a21577 a21575)
 (list temp21834 a21620)
 (list temp21834 a21623)
 (list a21576 a21575)
 (list a21579 a21594)
 (list a21579 a21597)
 (list a21581 temp21810)
 (list a21580 temp21810)
 (list a21583 a21582)
 (list temp21836 a21618)
 (list temp21836 a21619)
 (list a21582 a21583)
 (list a21582 temp21808)
 (list a21582 a21584)
 (list a21585 temp21808)
 (list a21584 a21582)
 (list temp21840 a21630)
 (list temp21840 a21631)
 (list a21621 a21620)
 (list a21620 a21621)
 (list a21620 a21622)
 (list a21620 temp21834)
 (list a21623 temp21834)
 (list temp21876 a21675)
 (list temp21876 a21676)
 (list a21622 a21620)
 (list temp21880 a21687)
 (list temp21880 a21688)
 (list temp21887 a21696)
 (list temp21887 a21699)
 (list a21631 temp21840)
 (list temp21884 a21693)
 (list a21630 temp21840)
 (list a21633 a21632)
 (list a21632 a21634)
 (list a21632 a21617)
 (list a21632 a21633)
 (list a21635 a21617)
 (list a21634 a21632)
 (list temp21889 a21694)
 (list temp21889 a21695)
 (list temp21862 a21656)
 (list temp21862 a21657)
 (list a21604 temp21821)
 (list temp21860 a21658)
 (list temp21860 a21661)
 (list temp21866 a21668)
 (list temp21866 a21669)
 (list a21611 temp21827)
 (list a21613 a21615)
 (list a21613 a21598)
 (list a21613 a21614)
 (list temp21870 temp21857)
 (list a21612 temp21827)
 (list temp21871 a21674)
 (list a21615 a21613)
 (list a21614 a21613)
 (list a21617 temp21831)
 (list a21617 a21632)
 (list a21617 a21635)
 (list temp21874 a21677)
 (list temp21874 a21680)
 (list a21616 a21598)
 (list a21619 temp21836)
 (list a21618 temp21836)
 (list a21783 temp21948)
 (list a21786 a21785)
 (list a21787 a21785)
 (list a21784 temp21948)
 (list a21785 a21787)
 (list a21785 a21770)
 (list a21785 a21786)
 (list a21788 a21770)
 (list temp21794 a21561)
 (list temp21794 a21562)
 (list temp21792 a21563)
 (list temp21792 a21566)
 (list a21766 a21768)
 (list a21766 a21751)
 (list a21766 a21767)
 (list a21767 a21766)
 (list a21764 temp21935)
 (list a21765 temp21935)
 (list a21770 a21785)
 (list a21770 a21788)
 (list a21770 temp21939)
 (list a21771 temp21944)
 (list a21768 a21766)
 (list a21769 a21751)
 (list a21774 a21773)
 (list a21775 a21773)
 (list a21772 temp21944)
 (list a21773 temp21942)
 (list a21773 a21774)
 (list a21773 a21775)
 (list a21776 temp21942)
 (list temp21814 a21592)
 (list temp21814 a21593)
 (list a21561 temp21794)
 (list temp21818 a21598)
 (list a21563 a21564)
 (list a21563 a21565)
 (list a21563 temp21792)
 (list a21562 temp21794)
 (list a21565 a21563)
 (list a21564 a21563)
 (list temp21823 a21599)
 (list temp21823 a21600)
 (list a21567 temp21799)
 (list a21566 temp21792)
 (list temp21821 a21604)
 (list temp21821 a21601)
 (list a21569 temp21797)
 (list a21569 a21570)
 (list a21569 a21571)
 (list a21568 temp21799)
 (list temp21827 a21611)
 (list temp21827 a21612)
 (list a21571 a21569)
 (list a21570 a21569)
 (list temp21799 a21567)
 (list temp21799 a21568)
 (list temp21797 a21572)
 (list temp21797 a21569)
 (list temp21803 a21573)
 (list temp21803 a21574)
 (list temp21810 a21580)
 (list temp21810 a21581)
 (list temp21808 a21582)
 (list temp21808 a21585)
 (list a21718 temp21900)
 (list a21716 a21715)
 (list a21717 a21715)
 (list a21726 temp21906)
 (list a21727 a21729)
 (list a21727 a21712)
 (list a21727 a21728)
 (list a21725 temp21906)
 (list a21730 a21712)
 (list a21731 a21749)
 (list a21731 temp21910)
 (list a21731 a21746)
 (list a21728 a21727)
 (list a21729 a21727)
 (list a21706 temp21893)
 (list a21707 temp21893)
 (list a21710 a21708)
 (list a21711 a21693)
 (list a21708 a21710)
 (list a21708 a21709)
 (list a21708 a21693)
 (list a21709 a21708)
 (list a21714 temp21902)
 (list a21715 a21716)
 (list a21715 a21717)
 (list a21715 temp21900)
 (list a21712 temp21897)
 (list a21712 a21727)
 (list a21712 a21730)
 (list a21713 temp21902)
 (list a21750 temp21923)
 (list a21751 a21769)
 (list a21751 a21766)
 (list a21751 temp21926)
 (list a21748 a21746)
 (list a21749 a21731)
 (list a21754 temp21929)
 (list a21754 a21755)
 (list a21754 a21756)
 (list a21755 a21754)
 (list a21752 temp21931)
 (list a21753 temp21931)
 (list a21756 a21754)
 (list a21757 temp21929)
 (list a21734 a21735)
 (list a21734 a21736)
 (list a21734 temp21913)
 (list a21735 a21734)
 (list a21732 temp21915)
 (list a21733 temp21915)
 (list a21736 a21734)
 (list a21737 temp21913)
 (list a21746 a21748)
 (list a21746 a21731)
 (list a21746 a21747)
 (list a21747 a21746)
 (list a21744 temp21919)
 (list a21745 temp21919))
label21959:
    movq a21770, temp21939
    movq a21751, temp21926
    addq temp21939, temp21926
    movq a21750, temp21923
    addq temp21926, temp21923
    movq a21731, temp21910
    addq temp21923, temp21910
    movq a21712, temp21897
    addq temp21910, temp21897
    movq a21693, temp21884
    addq temp21897, temp21884
    movq a21674, temp21871
    addq temp21884, temp21871
    movq temp21870, temp21857
    addq temp21871, temp21857
    movq a21636, temp21844
    addq temp21857, temp21844
    movq a21617, temp21831
    addq temp21844, temp21831
    movq a21598, temp21818
    addq temp21831, temp21818
    movq a21579, %rax
    addq temp21818, %rax
    jmp conclusion
    
label21960:
    movq a21785, a21770
    jmp label21959
    
label21961:
    movq $1, a21786
    movq a21786, a21785
    jmp label21960
    
label21962:
    movq $2, a21787
    movq a21787, a21785
    jmp label21960
    
label21963:
    cmpq $1, $3
    jg label21961
    jmp label21962
    
label21964:
    movq $2, a21788
    movq a21788, a21770
    jmp label21959
    
label21965:
    cmpq temp21948, $3
    jg label21963
    jmp label21964
    
label21967:
    movq $2, a21784
    movq a21784, temp21948
    jmp label21965
    
label21966:
    movq $1, a21783
    movq a21783, temp21948
    jmp label21965
    
label21969:
    movq $2, a21770
    jmp label21959
    
label21968:
    cmpq $1, $3
    jg label21966
    jmp label21967
    
label21971:
    movq $0, a21782
    cmpq $1, a21782
    je label21968
    jmp label21969
    
label21970:
    movq $1, a21781
    cmpq $1, a21781
    je label21968
    jmp label21969
    
label21973:
    movq $0, a21780
    cmpq $1, a21780
    je label21970
    jmp label21971
    
label21972:
    movq $1, a21779
    cmpq $1, a21779
    je label21970
    jmp label21971
    
label21975:
    movq $0, a21778
    cmpq $1, a21778
    je label21972
    jmp label21973
    
label21974:
    movq $1, a21777
    cmpq $1, a21777
    je label21972
    jmp label21973
    
label21976:
    cmpq temp21942, temp21941
    jg label21974
    jmp label21975
    
label21981:
    movq $2, a21776
    movq a21776, temp21942
    jmp label21976
    
label21977:
    movq a21773, temp21942
    jmp label21976
    
label21979:
    movq $2, a21775
    movq a21775, a21773
    jmp label21977
    
label21978:
    movq $1, a21774
    movq a21774, a21773
    jmp label21977
    
label21980:
    cmpq $1, $3
    jg label21978
    jmp label21979
    
label21982:
    cmpq temp21944, $3
    jg label21980
    jmp label21981
    
label21984:
    movq $2, a21772
    movq a21772, temp21944
    jmp label21982
    
label21983:
    movq $1, a21771
    movq a21771, temp21944
    jmp label21982
    
label21985:
    callq read_int
    movq %rax, temp21941
    cmpq $1, $3
    jg label21983
    jmp label21984
    
label21986:
    movq a21766, a21751
    jmp label21985
    
label21987:
    movq $1, a21767
    movq a21767, a21766
    jmp label21986
    
label21988:
    movq $2, a21768
    movq a21768, a21766
    jmp label21986
    
label21989:
    cmpq $1, $3
    jg label21987
    jmp label21988
    
label21995:
    movq $2, a21751
    jmp label21985
    
label21990:
    movq $2, a21769
    movq a21769, a21751
    jmp label21985
    
label21991:
    cmpq temp21935, $3
    jg label21989
    jmp label21990
    
label21993:
    movq $2, a21765
    movq a21765, temp21935
    jmp label21991
    
label21992:
    movq $1, a21764
    movq a21764, temp21935
    jmp label21991
    
label21994:
    cmpq $1, $3
    jg label21992
    jmp label21993
    
label21997:
    movq $0, a21763
    cmpq $1, a21763
    je label21994
    jmp label21995
    
label21996:
    movq $1, a21762
    cmpq $1, a21762
    je label21994
    jmp label21995
    
label21999:
    movq $0, a21761
    cmpq $1, a21761
    je label21996
    jmp label21997
    
label21998:
    movq $1, a21760
    cmpq $1, a21760
    je label21996
    jmp label21997
    
label22001:
    movq $0, a21759
    cmpq $1, a21759
    je label21998
    jmp label21999
    
label22000:
    movq $1, a21758
    cmpq $1, a21758
    je label21998
    jmp label21999
    
label22002:
    cmpq temp21929, temp21928
    jg label22000
    jmp label22001
    
label22003:
    movq a21754, temp21929
    jmp label22002
    
label22005:
    movq $2, a21756
    movq a21756, a21754
    jmp label22003
    
label22004:
    movq $1, a21755
    movq a21755, a21754
    jmp label22003
    
label22006:
    cmpq $1, $3
    jg label22004
    jmp label22005
    
label22007:
    movq $2, a21757
    movq a21757, temp21929
    jmp label22002
    
label22008:
    cmpq temp21931, $3
    jg label22006
    jmp label22007
    
label22010:
    movq $2, a21753
    movq a21753, temp21931
    jmp label22008
    
label22009:
    movq $1, a21752
    movq a21752, temp21931
    jmp label22008
    
label22011:
    callq read_int
    movq %rax, a21750
    callq read_int
    movq %rax, temp21928
    cmpq $1, $3
    jg label22009
    jmp label22010
    
label22016:
    movq $2, a21749
    movq a21749, a21731
    jmp label22011
    
label22012:
    movq a21746, a21731
    jmp label22011
    
label22014:
    movq $2, a21748
    movq a21748, a21746
    jmp label22012
    
label22013:
    movq $1, a21747
    movq a21747, a21746
    jmp label22012
    
label22015:
    cmpq $1, $3
    jg label22013
    jmp label22014
    
label22017:
    cmpq temp21919, $3
    jg label22015
    jmp label22016
    
label22019:
    movq $2, a21745
    movq a21745, temp21919
    jmp label22017
    
label22018:
    movq $1, a21744
    movq a21744, temp21919
    jmp label22017
    
label22020:
    cmpq $1, $3
    jg label22018
    jmp label22019
    
label22021:
    movq $2, a21731
    jmp label22011
    
label22023:
    movq $0, a21743
    cmpq $1, a21743
    je label22020
    jmp label22021
    
label22022:
    movq $1, a21742
    cmpq $1, a21742
    je label22020
    jmp label22021
    
label22025:
    movq $0, a21741
    cmpq $1, a21741
    je label22022
    jmp label22023
    
label22024:
    movq $1, a21740
    cmpq $1, a21740
    je label22022
    jmp label22023
    
label22027:
    movq $0, a21739
    cmpq $1, a21739
    je label22024
    jmp label22025
    
label22026:
    movq $1, a21738
    cmpq $1, a21738
    je label22024
    jmp label22025
    
label22028:
    cmpq temp21913, temp21912
    jg label22026
    jmp label22027
    
label22033:
    movq $2, a21737
    movq a21737, temp21913
    jmp label22028
    
label22029:
    movq a21734, temp21913
    jmp label22028
    
label22031:
    movq $2, a21736
    movq a21736, a21734
    jmp label22029
    
label22030:
    movq $1, a21735
    movq a21735, a21734
    jmp label22029
    
label22032:
    cmpq $1, $3
    jg label22030
    jmp label22031
    
label22034:
    cmpq temp21915, $3
    jg label22032
    jmp label22033
    
label22036:
    movq $2, a21733
    movq a21733, temp21915
    jmp label22034
    
label22035:
    movq $1, a21732
    movq a21732, temp21915
    jmp label22034
    
label22037:
    callq read_int
    movq %rax, temp21912
    cmpq $1, $3
    jg label22035
    jmp label22036
    
label22047:
    movq $2, a21712
    jmp label22037
    
label22042:
    movq $2, a21730
    movq a21730, a21712
    jmp label22037
    
label22038:
    movq a21727, a21712
    jmp label22037
    
label22040:
    movq $2, a21729
    movq a21729, a21727
    jmp label22038
    
label22039:
    movq $1, a21728
    movq a21728, a21727
    jmp label22038
    
label22041:
    cmpq $1, $3
    jg label22039
    jmp label22040
    
label22043:
    cmpq temp21906, $3
    jg label22041
    jmp label22042
    
label22045:
    movq $2, a21726
    movq a21726, temp21906
    jmp label22043
    
label22044:
    movq $1, a21725
    movq a21725, temp21906
    jmp label22043
    
label22046:
    cmpq $1, $3
    jg label22044
    jmp label22045
    
label22049:
    movq $0, a21724
    cmpq $1, a21724
    je label22046
    jmp label22047
    
label22048:
    movq $1, a21723
    cmpq $1, a21723
    je label22046
    jmp label22047
    
label22051:
    movq $0, a21722
    cmpq $1, a21722
    je label22048
    jmp label22049
    
label22050:
    movq $1, a21721
    cmpq $1, a21721
    je label22048
    jmp label22049
    
label22053:
    movq $0, a21720
    cmpq $1, a21720
    je label22050
    jmp label22051
    
label22052:
    movq $1, a21719
    cmpq $1, a21719
    je label22050
    jmp label22051
    
label22054:
    cmpq temp21900, temp21899
    jg label22052
    jmp label22053
    
label22059:
    movq $2, a21718
    movq a21718, temp21900
    jmp label22054
    
label22055:
    movq a21715, temp21900
    jmp label22054
    
label22057:
    movq $2, a21717
    movq a21717, a21715
    jmp label22055
    
label22056:
    movq $1, a21716
    movq a21716, a21715
    jmp label22055
    
label22058:
    cmpq $1, $3
    jg label22056
    jmp label22057
    
label22060:
    cmpq temp21902, $3
    jg label22058
    jmp label22059
    
label22062:
    movq $2, a21714
    movq a21714, temp21902
    jmp label22060
    
label22061:
    movq $1, a21713
    movq a21713, temp21902
    jmp label22060
    
label22063:
    callq read_int
    movq %rax, temp21899
    cmpq $1, $3
    jg label22061
    jmp label22062
    
label22064:
    movq a21708, a21693
    jmp label22063
    
label22066:
    movq $2, a21710
    movq a21710, a21708
    jmp label22064
    
label22065:
    movq $1, a21709
    movq a21709, a21708
    jmp label22064
    
label22067:
    cmpq $1, $3
    jg label22065
    jmp label22066
    
label22073:
    movq $2, a21693
    jmp label22063
    
label22068:
    movq $2, a21711
    movq a21711, a21693
    jmp label22063
    
label22069:
    cmpq temp21893, $3
    jg label22067
    jmp label22068
    
label22071:
    movq $2, a21707
    movq a21707, temp21893
    jmp label22069
    
label22070:
    movq $1, a21706
    movq a21706, temp21893
    jmp label22069
    
label22072:
    cmpq $1, $3
    jg label22070
    jmp label22071
    
label22075:
    movq $0, a21705
    cmpq $1, a21705
    je label22072
    jmp label22073
    
label22074:
    movq $1, a21704
    cmpq $1, a21704
    je label22072
    jmp label22073
    
label22077:
    movq $0, a21703
    cmpq $1, a21703
    je label22074
    jmp label22075
    
label22076:
    movq $1, a21702
    cmpq $1, a21702
    je label22074
    jmp label22075
    
label22079:
    movq $0, a21701
    cmpq $1, a21701
    je label22076
    jmp label22077
    
label22078:
    movq $1, a21700
    cmpq $1, a21700
    je label22076
    jmp label22077
    
label22080:
    cmpq temp21887, temp21886
    jg label22078
    jmp label22079
    
label22081:
    movq a21696, temp21887
    jmp label22080
    
label22083:
    movq $2, a21698
    movq a21698, a21696
    jmp label22081
    
label22082:
    movq $1, a21697
    movq a21697, a21696
    jmp label22081
    
label22084:
    cmpq $1, $3
    jg label22082
    jmp label22083
    
label22085:
    movq $2, a21699
    movq a21699, temp21887
    jmp label22080
    
label22086:
    cmpq temp21889, $3
    jg label22084
    jmp label22085
    
label22088:
    movq $2, a21695
    movq a21695, temp21889
    jmp label22086
    
label22087:
    movq $1, a21694
    movq a21694, temp21889
    jmp label22086
    
label22089:
    callq read_int
    movq %rax, temp21886
    cmpq $1, $3
    jg label22087
    jmp label22088
    
label22099:
    movq $2, a21674
    jmp label22089
    
label22094:
    movq $2, a21692
    movq a21692, a21674
    jmp label22089
    
label22090:
    movq a21689, a21674
    jmp label22089
    
label22092:
    movq $2, a21691
    movq a21691, a21689
    jmp label22090
    
label22091:
    movq $1, a21690
    movq a21690, a21689
    jmp label22090
    
label22093:
    cmpq $1, $3
    jg label22091
    jmp label22092
    
label22095:
    cmpq temp21880, $3
    jg label22093
    jmp label22094
    
label22097:
    movq $2, a21688
    movq a21688, temp21880
    jmp label22095
    
label22096:
    movq $1, a21687
    movq a21687, temp21880
    jmp label22095
    
label22098:
    cmpq $1, $3
    jg label22096
    jmp label22097
    
label22101:
    movq $0, a21686
    cmpq $1, a21686
    je label22098
    jmp label22099
    
label22100:
    movq $1, a21685
    cmpq $1, a21685
    je label22098
    jmp label22099
    
label22103:
    movq $0, a21684
    cmpq $1, a21684
    je label22100
    jmp label22101
    
label22102:
    movq $1, a21683
    cmpq $1, a21683
    je label22100
    jmp label22101
    
label22105:
    movq $0, a21682
    cmpq $1, a21682
    je label22102
    jmp label22103
    
label22104:
    movq $1, a21681
    cmpq $1, a21681
    je label22102
    jmp label22103
    
label22106:
    cmpq temp21874, temp21873
    jg label22104
    jmp label22105
    
label22111:
    movq $2, a21680
    movq a21680, temp21874
    jmp label22106
    
label22107:
    movq a21677, temp21874
    jmp label22106
    
label22109:
    movq $2, a21679
    movq a21679, a21677
    jmp label22107
    
label22108:
    movq $1, a21678
    movq a21678, a21677
    jmp label22107
    
label22110:
    cmpq $1, $3
    jg label22108
    jmp label22109
    
label22112:
    cmpq temp21876, $3
    jg label22110
    jmp label22111
    
label22114:
    movq $2, a21676
    movq a21676, temp21876
    jmp label22112
    
label22113:
    movq $1, a21675
    movq a21675, temp21876
    jmp label22112
    
label22115:
    callq read_int
    movq %rax, temp21870
    callq read_int
    movq %rax, temp21873
    cmpq $1, $3
    jg label22113
    jmp label22114
    
label22125:
    movq $2, a21655
    jmp label22115
    
label22120:
    movq $2, a21673
    movq a21673, a21655
    jmp label22115
    
label22116:
    movq a21670, a21655
    jmp label22115
    
label22118:
    movq $2, a21672
    movq a21672, a21670
    jmp label22116
    
label22117:
    movq $1, a21671
    movq a21671, a21670
    jmp label22116
    
label22119:
    cmpq $1, $3
    jg label22117
    jmp label22118
    
label22121:
    cmpq temp21866, $3
    jg label22119
    jmp label22120
    
label22123:
    movq $2, a21669
    movq a21669, temp21866
    jmp label22121
    
label22122:
    movq $1, a21668
    movq a21668, temp21866
    jmp label22121
    
label22124:
    cmpq $1, $3
    jg label22122
    jmp label22123
    
label22127:
    movq $0, a21667
    cmpq $1, a21667
    je label22124
    jmp label22125
    
label22126:
    movq $1, a21666
    cmpq $1, a21666
    je label22124
    jmp label22125
    
label22129:
    movq $0, a21665
    cmpq $1, a21665
    je label22126
    jmp label22127
    
label22128:
    movq $1, a21664
    cmpq $1, a21664
    je label22126
    jmp label22127
    
label22131:
    movq $0, a21663
    cmpq $1, a21663
    je label22128
    jmp label22129
    
label22130:
    movq $1, a21662
    cmpq $1, a21662
    je label22128
    jmp label22129
    
label22132:
    cmpq temp21860, temp21859
    jg label22130
    jmp label22131
    
label22137:
    movq $2, a21661
    movq a21661, temp21860
    jmp label22132
    
label22133:
    movq a21658, temp21860
    jmp label22132
    
label22135:
    movq $2, a21660
    movq a21660, a21658
    jmp label22133
    
label22134:
    movq $1, a21659
    movq a21659, a21658
    jmp label22133
    
label22136:
    cmpq $1, $3
    jg label22134
    jmp label22135
    
label22138:
    cmpq temp21862, $3
    jg label22136
    jmp label22137
    
label22140:
    movq $2, a21657
    movq a21657, temp21862
    jmp label22138
    
label22139:
    movq $1, a21656
    movq a21656, temp21862
    jmp label22138
    
label22141:
    callq read_int
    movq %rax, temp21859
    cmpq $1, $3
    jg label22139
    jmp label22140
    
label22146:
    movq $2, a21654
    movq a21654, a21636
    jmp label22141
    
label22142:
    movq a21651, a21636
    jmp label22141
    
label22144:
    movq $2, a21653
    movq a21653, a21651
    jmp label22142
    
label22143:
    movq $1, a21652
    movq a21652, a21651
    jmp label22142
    
label22145:
    cmpq $1, $3
    jg label22143
    jmp label22144
    
label22147:
    cmpq temp21853, $3
    jg label22145
    jmp label22146
    
label22149:
    movq $2, a21650
    movq a21650, temp21853
    jmp label22147
    
label22148:
    movq $1, a21649
    movq a21649, temp21853
    jmp label22147
    
label22150:
    cmpq $1, $3
    jg label22148
    jmp label22149
    
label22151:
    movq $2, a21636
    jmp label22141
    
label22153:
    movq $0, a21648
    cmpq $1, a21648
    je label22150
    jmp label22151
    
label22152:
    movq $1, a21647
    cmpq $1, a21647
    je label22150
    jmp label22151
    
label22155:
    movq $0, a21646
    cmpq $1, a21646
    je label22152
    jmp label22153
    
label22154:
    movq $1, a21645
    cmpq $1, a21645
    je label22152
    jmp label22153
    
label22157:
    movq $0, a21644
    cmpq $1, a21644
    je label22154
    jmp label22155
    
label22156:
    movq $1, a21643
    cmpq $1, a21643
    je label22154
    jmp label22155
    
label22158:
    cmpq temp21847, temp21846
    jg label22156
    jmp label22157
    
label22163:
    movq $2, a21642
    movq a21642, temp21847
    jmp label22158
    
label22159:
    movq a21639, temp21847
    jmp label22158
    
label22161:
    movq $2, a21641
    movq a21641, a21639
    jmp label22159
    
label22160:
    movq $1, a21640
    movq a21640, a21639
    jmp label22159
    
label22162:
    cmpq $1, $3
    jg label22160
    jmp label22161
    
label22164:
    cmpq temp21849, $3
    jg label22162
    jmp label22163
    
label22166:
    movq $2, a21638
    movq a21638, temp21849
    jmp label22164
    
label22165:
    movq $1, a21637
    movq a21637, temp21849
    jmp label22164
    
label22167:
    callq read_int
    movq %rax, temp21846
    cmpq $1, $3
    jg label22165
    jmp label22166
    
label22177:
    movq $2, a21617
    jmp label22167
    
label22172:
    movq $2, a21635
    movq a21635, a21617
    jmp label22167
    
label22168:
    movq a21632, a21617
    jmp label22167
    
label22170:
    movq $2, a21634
    movq a21634, a21632
    jmp label22168
    
label22169:
    movq $1, a21633
    movq a21633, a21632
    jmp label22168
    
label22171:
    cmpq $1, $3
    jg label22169
    jmp label22170
    
label22173:
    cmpq temp21840, $3
    jg label22171
    jmp label22172
    
label22175:
    movq $2, a21631
    movq a21631, temp21840
    jmp label22173
    
label22174:
    movq $1, a21630
    movq a21630, temp21840
    jmp label22173
    
label22176:
    cmpq $1, $3
    jg label22174
    jmp label22175
    
label22179:
    movq $0, a21629
    cmpq $1, a21629
    je label22176
    jmp label22177
    
label22178:
    movq $1, a21628
    cmpq $1, a21628
    je label22176
    jmp label22177
    
label22181:
    movq $0, a21627
    cmpq $1, a21627
    je label22178
    jmp label22179
    
label22180:
    movq $1, a21626
    cmpq $1, a21626
    je label22178
    jmp label22179
    
label22183:
    movq $0, a21625
    cmpq $1, a21625
    je label22180
    jmp label22181
    
label22182:
    movq $1, a21624
    cmpq $1, a21624
    je label22180
    jmp label22181
    
label22184:
    cmpq temp21834, temp21833
    jg label22182
    jmp label22183
    
label22189:
    movq $2, a21623
    movq a21623, temp21834
    jmp label22184
    
label22185:
    movq a21620, temp21834
    jmp label22184
    
label22187:
    movq $2, a21622
    movq a21622, a21620
    jmp label22185
    
label22186:
    movq $1, a21621
    movq a21621, a21620
    jmp label22185
    
label22188:
    cmpq $1, $3
    jg label22186
    jmp label22187
    
label22190:
    cmpq temp21836, $3
    jg label22188
    jmp label22189
    
label22192:
    movq $2, a21619
    movq a21619, temp21836
    jmp label22190
    
label22191:
    movq $1, a21618
    movq a21618, temp21836
    jmp label22190
    
label22193:
    callq read_int
    movq %rax, temp21833
    cmpq $1, $3
    jg label22191
    jmp label22192
    
label22194:
    movq a21613, a21598
    jmp label22193
    
label22195:
    movq $1, a21614
    movq a21614, a21613
    jmp label22194
    
label22196:
    movq $2, a21615
    movq a21615, a21613
    jmp label22194
    
label22197:
    cmpq $1, $3
    jg label22195
    jmp label22196
    
label22203:
    movq $2, a21598
    jmp label22193
    
label22198:
    movq $2, a21616
    movq a21616, a21598
    jmp label22193
    
label22199:
    cmpq temp21827, $3
    jg label22197
    jmp label22198
    
label22201:
    movq $2, a21612
    movq a21612, temp21827
    jmp label22199
    
label22200:
    movq $1, a21611
    movq a21611, temp21827
    jmp label22199
    
label22202:
    cmpq $1, $3
    jg label22200
    jmp label22201
    
label22205:
    movq $0, a21610
    cmpq $1, a21610
    je label22202
    jmp label22203
    
label22204:
    movq $1, a21609
    cmpq $1, a21609
    je label22202
    jmp label22203
    
label22207:
    movq $0, a21608
    cmpq $1, a21608
    je label22204
    jmp label22205
    
label22206:
    movq $1, a21607
    cmpq $1, a21607
    je label22204
    jmp label22205
    
label22209:
    movq $0, a21606
    cmpq $1, a21606
    je label22206
    jmp label22207
    
label22208:
    movq $1, a21605
    cmpq $1, a21605
    je label22206
    jmp label22207
    
label22210:
    cmpq temp21821, temp21820
    jg label22208
    jmp label22209
    
label22211:
    movq a21601, temp21821
    jmp label22210
    
label22213:
    movq $2, a21603
    movq a21603, a21601
    jmp label22211
    
label22212:
    movq $1, a21602
    movq a21602, a21601
    jmp label22211
    
label22214:
    cmpq $1, $3
    jg label22212
    jmp label22213
    
label22215:
    movq $2, a21604
    movq a21604, temp21821
    jmp label22210
    
label22216:
    cmpq temp21823, $3
    jg label22214
    jmp label22215
    
label22218:
    movq $2, a21600
    movq a21600, temp21823
    jmp label22216
    
label22217:
    movq $1, a21599
    movq a21599, temp21823
    jmp label22216
    
label22219:
    callq read_int
    movq %rax, temp21820
    cmpq $1, $3
    jg label22217
    jmp label22218
    
label22229:
    movq $2, a21579
    jmp label22219
    
label22224:
    movq $2, a21597
    movq a21597, a21579
    jmp label22219
    
label22220:
    movq a21594, a21579
    jmp label22219
    
label22222:
    movq $2, a21596
    movq a21596, a21594
    jmp label22220
    
label22221:
    movq $1, a21595
    movq a21595, a21594
    jmp label22220
    
label22223:
    cmpq $1, $3
    jg label22221
    jmp label22222
    
label22225:
    cmpq temp21814, $3
    jg label22223
    jmp label22224
    
label22227:
    movq $2, a21593
    movq a21593, temp21814
    jmp label22225
    
label22226:
    movq $1, a21592
    movq a21592, temp21814
    jmp label22225
    
label22228:
    cmpq $1, $3
    jg label22226
    jmp label22227
    
label22230:
    movq $1, a21590
    cmpq $1, a21590
    je label22228
    jmp label22229
    
label22231:
    movq $0, a21591
    cmpq $1, a21591
    je label22228
    jmp label22229
    
label22232:
    movq $1, a21588
    cmpq $1, a21588
    je label22230
    jmp label22231
    
label22233:
    movq $0, a21589
    cmpq $1, a21589
    je label22230
    jmp label22231
    
label22234:
    movq $1, a21586
    cmpq $1, a21586
    je label22232
    jmp label22233
    
label22235:
    movq $0, a21587
    cmpq $1, a21587
    je label22232
    jmp label22233
    
label22236:
    cmpq temp21808, temp21807
    jg label22234
    jmp label22235
    
label22237:
    movq a21582, temp21808
    jmp label22236
    
label22238:
    movq $1, a21583
    movq a21583, a21582
    jmp label22237
    
label22239:
    movq $2, a21584
    movq a21584, a21582
    jmp label22237
    
label22240:
    cmpq $1, $3
    jg label22238
    jmp label22239
    
label22241:
    movq $2, a21585
    movq a21585, temp21808
    jmp label22236
    
label22242:
    cmpq temp21810, $3
    jg label22240
    jmp label22241
    
label22244:
    movq $2, a21581
    movq a21581, temp21810
    jmp label22242
    
label22243:
    movq $1, a21580
    movq a21580, temp21810
    jmp label22242
    
label22246:
    callq read_int
    movq %rax, temp21807
    cmpq $1, $3
    jg label22243
    jmp label22244
    
label21951:
    movq a21575, %rax
    jmp conclusion
    
label21953:
    movq $2, a21577
    movq a21577, a21575
    jmp label21951
    
label21952:
    movq $1, a21576
    movq a21576, a21575
    jmp label21951
    
label21955:
    movq $2, a21578
    movq a21578, %rax
    jmp conclusion
    
label21954:
    cmpq $1, $3
    jg label21952
    jmp label21953
    
label21956:
    cmpq temp21803, $3
    jg label21954
    jmp label21955
    
label21958:
    movq $2, a21574
    movq a21574, temp21803
    jmp label21956
    
label21957:
    movq $1, a21573
    movq a21573, temp21803
    jmp label21956
    
label22245:
    cmpq $1, $3
    jg label21957
    jmp label21958
    
label22247:
    cmpq $1, x21560
    je label22245
    jmp label22246
    
label22248:
    movq $1, x21560
    jmp label22247
    
label22249:
    movq $0, x21560
    jmp label22247
    
label22250:
    cmpq $8, temp21790
    jg label22248
    jmp label22249
    
label22251:
    movq $8, temp21790
    jmp label22250
    
label22252:
    movq $9, temp21790
    jmp label22250
    
label22253:
    cmpq temp21797, temp21792
    jge label22251
    jmp label22252
    
label22254:
    movq a21569, temp21797
    jmp label22253
    
label22255:
    movq $1, a21570
    movq a21570, a21569
    jmp label22254
    
label22256:
    movq $2, a21571
    movq a21571, a21569
    jmp label22254
    
label22257:
    cmpq $1, $3
    jg label22255
    jmp label22256
    
label22258:
    movq $2, a21572
    movq a21572, temp21797
    jmp label22253
    
label22259:
    cmpq temp21799, $3
    jg label22257
    jmp label22258
    
label22260:
    movq $1, a21567
    movq a21567, temp21799
    jmp label22259
    
label22261:
    movq $2, a21568
    movq a21568, temp21799
    jmp label22259
    
label22262:
    cmpq $1, $3
    jg label22260
    jmp label22261
    
label22263:
    movq a21563, temp21792
    jmp label22262
    
label22264:
    movq $1, a21564
    movq a21564, a21563
    jmp label22263
    
label22265:
    movq $2, a21565
    movq a21565, a21563
    jmp label22263
    
label22266:
    cmpq $1, $3
    jg label22264
    jmp label22265
    
label22267:
    movq $2, a21566
    movq a21566, temp21792
    jmp label22262
    
label22268:
    cmpq temp21794, $3
    jg label22266
    jmp label22267
    
label22269:
    movq $1, a21561
    movq a21561, temp21794
    jmp label22268
    
label22270:
    movq $2, a21562
    movq a21562, temp21794
    jmp label22268
    
start:
    cmpq $1, $3
    jg label22269
    jmp label22270
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21653 a21651)
 (list temp21910 a21731)
 (list a21652 a21651)
 (list a21655 a21670)
 (list a21655 a21673)
 (list a21654 a21636)
 (list a21657 temp21862)
 (list temp21915 a21732)
 (list temp21915 a21733)
 (list a21656 temp21862)
 (list a21659 a21658)
 (list temp21913 a21734)
 (list temp21913 a21737)
 (list a21658 temp21860)
 (list a21658 a21659)
 (list a21658 a21660)
 (list a21661 temp21860)
 (list temp21919 a21744)
 (list temp21919 a21745)
 (list a21660 a21658)
 (list temp21923 a21750)
 (list a21637 temp21849)
 (list a21636 temp21844)
 (list a21636 a21654)
 (list a21636 a21651)
 (list a21639 temp21847)
 (list a21639 a21640)
 (list a21639 a21641)
 (list a21638 temp21849)
 (list temp21893 a21706)
 (list temp21893 a21707)
 (list a21641 a21639)
 (list a21640 a21639)
 (list a21642 temp21847)
 (list temp21897 a21712)
 (list temp21902 a21713)
 (list temp21902 a21714)
 (list temp21900 a21718)
 (list temp21900 a21715)
 (list a21649 temp21853)
 (list temp21906 a21725)
 (list temp21906 a21726)
 (list a21651 a21653)
 (list a21651 a21636)
 (list a21651 a21652)
 (list a21650 temp21853)
 (list temp21942 a21773)
 (list temp21942 a21776)
 (list a21687 temp21880)
 (list a21689 a21691)
 (list a21689 a21674)
 (list a21689 a21690)
 (list a21688 temp21880)
 (list temp21944 a21771)
 (list temp21944 a21772)
 (list a21691 a21689)
 (list a21690 a21689)
 (list a21693 a21711)
 (list a21693 a21708)
 (list a21693 temp21884)
 (list a21692 a21674)
 (list temp21948 a21783)
 (list temp21948 a21784)
 (list a21695 temp21889)
 (list a21694 temp21889)
 (list a21697 a21696)
 (list a21696 temp21887)
 (list a21696 a21697)
 (list a21696 a21698)
 (list a21699 temp21887)
 (list a21698 a21696)
 (list temp21926 a21751)
 (list a21669 temp21866)
 (list a21668 temp21866)
 (list a21671 a21670)
 (list a21670 a21672)
 (list a21670 a21655)
 (list a21670 a21671)
 (list a21673 a21655)
 (list temp21931 a21752)
 (list temp21931 a21753)
 (list a21672 a21670)
 (list a21675 temp21876)
 (list temp21929 a21754)
 (list temp21929 a21757)
 (list a21674 a21689)
 (list a21674 a21692)
 (list a21674 temp21871)
 (list a21677 a21678)
 (list a21677 a21679)
 (list a21677 temp21874)
 (list temp21935 a21764)
 (list temp21935 a21765)
 (list a21676 temp21876)
 (list a21679 a21677)
 (list a21678 a21677)
 (list temp21939 a21770)
 (list a21680 temp21874)
 (list temp21847 a21639)
 (list temp21847 a21642)
 (list temp21844 a21636)
 (list a21593 temp21814)
 (list a21592 temp21814)
 (list a21595 a21594)
 (list a21594 a21596)
 (list a21594 a21579)
 (list a21594 a21595)
 (list temp21849 a21637)
 (list temp21849 a21638)
 (list a21597 a21579)
 (list a21596 a21594)
 (list a21599 temp21823)
 (list temp21853 a21649)
 (list temp21853 a21650)
 (list a21598 temp21818)
 (list a21598 a21613)
 (list a21598 a21616)
 (list a21601 temp21821)
 (list a21601 a21602)
 (list a21601 a21603)
 (list a21600 temp21823)
 (list a21603 a21601)
 (list a21602 a21601)
 (list temp21857 temp21870)
 (list a21573 temp21803)
 (list a21572 temp21797)
 (list temp21831 a21617)
 (list a21575 a21576)
 (list a21575 a21577)
 (list a21574 temp21803)
 (list a21577 a21575)
 (list temp21834 a21620)
 (list temp21834 a21623)
 (list a21576 a21575)
 (list a21579 a21594)
 (list a21579 a21597)
 (list a21581 temp21810)
 (list a21580 temp21810)
 (list a21583 a21582)
 (list temp21836 a21618)
 (list temp21836 a21619)
 (list a21582 a21583)
 (list a21582 temp21808)
 (list a21582 a21584)
 (list a21585 temp21808)
 (list a21584 a21582)
 (list temp21840 a21630)
 (list temp21840 a21631)
 (list a21621 a21620)
 (list a21620 a21621)
 (list a21620 a21622)
 (list a21620 temp21834)
 (list a21623 temp21834)
 (list temp21876 a21675)
 (list temp21876 a21676)
 (list a21622 a21620)
 (list temp21880 a21687)
 (list temp21880 a21688)
 (list temp21887 a21696)
 (list temp21887 a21699)
 (list a21631 temp21840)
 (list temp21884 a21693)
 (list a21630 temp21840)
 (list a21633 a21632)
 (list a21632 a21634)
 (list a21632 a21617)
 (list a21632 a21633)
 (list a21635 a21617)
 (list a21634 a21632)
 (list temp21889 a21694)
 (list temp21889 a21695)
 (list temp21862 a21656)
 (list temp21862 a21657)
 (list a21604 temp21821)
 (list temp21860 a21658)
 (list temp21860 a21661)
 (list temp21866 a21668)
 (list temp21866 a21669)
 (list a21611 temp21827)
 (list a21613 a21615)
 (list a21613 a21598)
 (list a21613 a21614)
 (list temp21870 temp21857)
 (list a21612 temp21827)
 (list temp21871 a21674)
 (list a21615 a21613)
 (list a21614 a21613)
 (list a21617 temp21831)
 (list a21617 a21632)
 (list a21617 a21635)
 (list temp21874 a21677)
 (list temp21874 a21680)
 (list a21616 a21598)
 (list a21619 temp21836)
 (list a21618 temp21836)
 (list a21783 temp21948)
 (list a21786 a21785)
 (list a21787 a21785)
 (list a21784 temp21948)
 (list a21785 a21787)
 (list a21785 a21770)
 (list a21785 a21786)
 (list a21788 a21770)
 (list temp21794 a21561)
 (list temp21794 a21562)
 (list temp21792 a21563)
 (list temp21792 a21566)
 (list a21766 a21768)
 (list a21766 a21751)
 (list a21766 a21767)
 (list a21767 a21766)
 (list a21764 temp21935)
 (list a21765 temp21935)
 (list a21770 a21785)
 (list a21770 a21788)
 (list a21770 temp21939)
 (list a21771 temp21944)
 (list a21768 a21766)
 (list a21769 a21751)
 (list a21774 a21773)
 (list a21775 a21773)
 (list a21772 temp21944)
 (list a21773 temp21942)
 (list a21773 a21774)
 (list a21773 a21775)
 (list a21776 temp21942)
 (list temp21814 a21592)
 (list temp21814 a21593)
 (list a21561 temp21794)
 (list temp21818 a21598)
 (list a21563 a21564)
 (list a21563 a21565)
 (list a21563 temp21792)
 (list a21562 temp21794)
 (list a21565 a21563)
 (list a21564 a21563)
 (list temp21823 a21599)
 (list temp21823 a21600)
 (list a21567 temp21799)
 (list a21566 temp21792)
 (list temp21821 a21604)
 (list temp21821 a21601)
 (list a21569 temp21797)
 (list a21569 a21570)
 (list a21569 a21571)
 (list a21568 temp21799)
 (list temp21827 a21611)
 (list temp21827 a21612)
 (list a21571 a21569)
 (list a21570 a21569)
 (list temp21799 a21567)
 (list temp21799 a21568)
 (list temp21797 a21572)
 (list temp21797 a21569)
 (list temp21803 a21573)
 (list temp21803 a21574)
 (list temp21810 a21580)
 (list temp21810 a21581)
 (list temp21808 a21582)
 (list temp21808 a21585)
 (list a21718 temp21900)
 (list a21716 a21715)
 (list a21717 a21715)
 (list a21726 temp21906)
 (list a21727 a21729)
 (list a21727 a21712)
 (list a21727 a21728)
 (list a21725 temp21906)
 (list a21730 a21712)
 (list a21731 a21749)
 (list a21731 temp21910)
 (list a21731 a21746)
 (list a21728 a21727)
 (list a21729 a21727)
 (list a21706 temp21893)
 (list a21707 temp21893)
 (list a21710 a21708)
 (list a21711 a21693)
 (list a21708 a21710)
 (list a21708 a21709)
 (list a21708 a21693)
 (list a21709 a21708)
 (list a21714 temp21902)
 (list a21715 a21716)
 (list a21715 a21717)
 (list a21715 temp21900)
 (list a21712 temp21897)
 (list a21712 a21727)
 (list a21712 a21730)
 (list a21713 temp21902)
 (list a21750 temp21923)
 (list a21751 a21769)
 (list a21751 a21766)
 (list a21751 temp21926)
 (list a21748 a21746)
 (list a21749 a21731)
 (list a21754 temp21929)
 (list a21754 a21755)
 (list a21754 a21756)
 (list a21755 a21754)
 (list a21752 temp21931)
 (list a21753 temp21931)
 (list a21756 a21754)
 (list a21757 temp21929)
 (list a21734 a21735)
 (list a21734 a21736)
 (list a21734 temp21913)
 (list a21735 a21734)
 (list a21732 temp21915)
 (list a21733 temp21915)
 (list a21736 a21734)
 (list a21737 temp21913)
 (list a21746 a21748)
 (list a21746 a21731)
 (list a21746 a21747)
 (list a21747 a21746)
 (list a21744 temp21919)
 (list a21745 temp21919))
label21959:
    movq a21770, temp21939
    movq a21751, temp21926
    addq temp21939, temp21926
    movq a21750, temp21923
    addq temp21926, temp21923
    movq a21731, temp21910
    addq temp21923, temp21910
    movq a21712, temp21897
    addq temp21910, temp21897
    movq a21693, temp21884
    addq temp21897, temp21884
    movq a21674, temp21871
    addq temp21884, temp21871
    movq temp21870, temp21857
    addq temp21871, temp21857
    movq a21636, temp21844
    addq temp21857, temp21844
    movq a21617, temp21831
    addq temp21844, temp21831
    movq a21598, temp21818
    addq temp21831, temp21818
    movq a21579, %rax
    addq temp21818, %rax
    jmp conclusion
    
label21960:
    movq a21785, a21770
    jmp label21959
    
label21961:
    movq $1, a21786
    movq a21786, a21785
    jmp label21960
    
label21962:
    movq $2, a21787
    movq a21787, a21785
    jmp label21960
    
label21963:
    cmpq $1, $3
    jg label21961
    jmp label21962
    
label21964:
    movq $2, a21788
    movq a21788, a21770
    jmp label21959
    
label21965:
    cmpq temp21948, $3
    jg label21963
    jmp label21964
    
label21967:
    movq $2, a21784
    movq a21784, temp21948
    jmp label21965
    
label21966:
    movq $1, a21783
    movq a21783, temp21948
    jmp label21965
    
label21969:
    movq $2, a21770
    jmp label21959
    
label21968:
    cmpq $1, $3
    jg label21966
    jmp label21967
    
label21971:
    movq $0, a21782
    cmpq $1, a21782
    je label21968
    jmp label21969
    
label21970:
    movq $1, a21781
    cmpq $1, a21781
    je label21968
    jmp label21969
    
label21973:
    movq $0, a21780
    cmpq $1, a21780
    je label21970
    jmp label21971
    
label21972:
    movq $1, a21779
    cmpq $1, a21779
    je label21970
    jmp label21971
    
label21975:
    movq $0, a21778
    cmpq $1, a21778
    je label21972
    jmp label21973
    
label21974:
    movq $1, a21777
    cmpq $1, a21777
    je label21972
    jmp label21973
    
label21976:
    cmpq temp21942, temp21941
    jg label21974
    jmp label21975
    
label21981:
    movq $2, a21776
    movq a21776, temp21942
    jmp label21976
    
label21977:
    movq a21773, temp21942
    jmp label21976
    
label21979:
    movq $2, a21775
    movq a21775, a21773
    jmp label21977
    
label21978:
    movq $1, a21774
    movq a21774, a21773
    jmp label21977
    
label21980:
    cmpq $1, $3
    jg label21978
    jmp label21979
    
label21982:
    cmpq temp21944, $3
    jg label21980
    jmp label21981
    
label21984:
    movq $2, a21772
    movq a21772, temp21944
    jmp label21982
    
label21983:
    movq $1, a21771
    movq a21771, temp21944
    jmp label21982
    
label21985:
    callq read_int
    movq %rax, temp21941
    cmpq $1, $3
    jg label21983
    jmp label21984
    
label21986:
    movq a21766, a21751
    jmp label21985
    
label21987:
    movq $1, a21767
    movq a21767, a21766
    jmp label21986
    
label21988:
    movq $2, a21768
    movq a21768, a21766
    jmp label21986
    
label21989:
    cmpq $1, $3
    jg label21987
    jmp label21988
    
label21995:
    movq $2, a21751
    jmp label21985
    
label21990:
    movq $2, a21769
    movq a21769, a21751
    jmp label21985
    
label21991:
    cmpq temp21935, $3
    jg label21989
    jmp label21990
    
label21993:
    movq $2, a21765
    movq a21765, temp21935
    jmp label21991
    
label21992:
    movq $1, a21764
    movq a21764, temp21935
    jmp label21991
    
label21994:
    cmpq $1, $3
    jg label21992
    jmp label21993
    
label21997:
    movq $0, a21763
    cmpq $1, a21763
    je label21994
    jmp label21995
    
label21996:
    movq $1, a21762
    cmpq $1, a21762
    je label21994
    jmp label21995
    
label21999:
    movq $0, a21761
    cmpq $1, a21761
    je label21996
    jmp label21997
    
label21998:
    movq $1, a21760
    cmpq $1, a21760
    je label21996
    jmp label21997
    
label22001:
    movq $0, a21759
    cmpq $1, a21759
    je label21998
    jmp label21999
    
label22000:
    movq $1, a21758
    cmpq $1, a21758
    je label21998
    jmp label21999
    
label22002:
    cmpq temp21929, temp21928
    jg label22000
    jmp label22001
    
label22003:
    movq a21754, temp21929
    jmp label22002
    
label22005:
    movq $2, a21756
    movq a21756, a21754
    jmp label22003
    
label22004:
    movq $1, a21755
    movq a21755, a21754
    jmp label22003
    
label22006:
    cmpq $1, $3
    jg label22004
    jmp label22005
    
label22007:
    movq $2, a21757
    movq a21757, temp21929
    jmp label22002
    
label22008:
    cmpq temp21931, $3
    jg label22006
    jmp label22007
    
label22010:
    movq $2, a21753
    movq a21753, temp21931
    jmp label22008
    
label22009:
    movq $1, a21752
    movq a21752, temp21931
    jmp label22008
    
label22011:
    callq read_int
    movq %rax, a21750
    callq read_int
    movq %rax, temp21928
    cmpq $1, $3
    jg label22009
    jmp label22010
    
label22016:
    movq $2, a21749
    movq a21749, a21731
    jmp label22011
    
label22012:
    movq a21746, a21731
    jmp label22011
    
label22014:
    movq $2, a21748
    movq a21748, a21746
    jmp label22012
    
label22013:
    movq $1, a21747
    movq a21747, a21746
    jmp label22012
    
label22015:
    cmpq $1, $3
    jg label22013
    jmp label22014
    
label22017:
    cmpq temp21919, $3
    jg label22015
    jmp label22016
    
label22019:
    movq $2, a21745
    movq a21745, temp21919
    jmp label22017
    
label22018:
    movq $1, a21744
    movq a21744, temp21919
    jmp label22017
    
label22020:
    cmpq $1, $3
    jg label22018
    jmp label22019
    
label22021:
    movq $2, a21731
    jmp label22011
    
label22023:
    movq $0, a21743
    cmpq $1, a21743
    je label22020
    jmp label22021
    
label22022:
    movq $1, a21742
    cmpq $1, a21742
    je label22020
    jmp label22021
    
label22025:
    movq $0, a21741
    cmpq $1, a21741
    je label22022
    jmp label22023
    
label22024:
    movq $1, a21740
    cmpq $1, a21740
    je label22022
    jmp label22023
    
label22027:
    movq $0, a21739
    cmpq $1, a21739
    je label22024
    jmp label22025
    
label22026:
    movq $1, a21738
    cmpq $1, a21738
    je label22024
    jmp label22025
    
label22028:
    cmpq temp21913, temp21912
    jg label22026
    jmp label22027
    
label22033:
    movq $2, a21737
    movq a21737, temp21913
    jmp label22028
    
label22029:
    movq a21734, temp21913
    jmp label22028
    
label22031:
    movq $2, a21736
    movq a21736, a21734
    jmp label22029
    
label22030:
    movq $1, a21735
    movq a21735, a21734
    jmp label22029
    
label22032:
    cmpq $1, $3
    jg label22030
    jmp label22031
    
label22034:
    cmpq temp21915, $3
    jg label22032
    jmp label22033
    
label22036:
    movq $2, a21733
    movq a21733, temp21915
    jmp label22034
    
label22035:
    movq $1, a21732
    movq a21732, temp21915
    jmp label22034
    
label22037:
    callq read_int
    movq %rax, temp21912
    cmpq $1, $3
    jg label22035
    jmp label22036
    
label22047:
    movq $2, a21712
    jmp label22037
    
label22042:
    movq $2, a21730
    movq a21730, a21712
    jmp label22037
    
label22038:
    movq a21727, a21712
    jmp label22037
    
label22040:
    movq $2, a21729
    movq a21729, a21727
    jmp label22038
    
label22039:
    movq $1, a21728
    movq a21728, a21727
    jmp label22038
    
label22041:
    cmpq $1, $3
    jg label22039
    jmp label22040
    
label22043:
    cmpq temp21906, $3
    jg label22041
    jmp label22042
    
label22045:
    movq $2, a21726
    movq a21726, temp21906
    jmp label22043
    
label22044:
    movq $1, a21725
    movq a21725, temp21906
    jmp label22043
    
label22046:
    cmpq $1, $3
    jg label22044
    jmp label22045
    
label22049:
    movq $0, a21724
    cmpq $1, a21724
    je label22046
    jmp label22047
    
label22048:
    movq $1, a21723
    cmpq $1, a21723
    je label22046
    jmp label22047
    
label22051:
    movq $0, a21722
    cmpq $1, a21722
    je label22048
    jmp label22049
    
label22050:
    movq $1, a21721
    cmpq $1, a21721
    je label22048
    jmp label22049
    
label22053:
    movq $0, a21720
    cmpq $1, a21720
    je label22050
    jmp label22051
    
label22052:
    movq $1, a21719
    cmpq $1, a21719
    je label22050
    jmp label22051
    
label22054:
    cmpq temp21900, temp21899
    jg label22052
    jmp label22053
    
label22059:
    movq $2, a21718
    movq a21718, temp21900
    jmp label22054
    
label22055:
    movq a21715, temp21900
    jmp label22054
    
label22057:
    movq $2, a21717
    movq a21717, a21715
    jmp label22055
    
label22056:
    movq $1, a21716
    movq a21716, a21715
    jmp label22055
    
label22058:
    cmpq $1, $3
    jg label22056
    jmp label22057
    
label22060:
    cmpq temp21902, $3
    jg label22058
    jmp label22059
    
label22062:
    movq $2, a21714
    movq a21714, temp21902
    jmp label22060
    
label22061:
    movq $1, a21713
    movq a21713, temp21902
    jmp label22060
    
label22063:
    callq read_int
    movq %rax, temp21899
    cmpq $1, $3
    jg label22061
    jmp label22062
    
label22064:
    movq a21708, a21693
    jmp label22063
    
label22066:
    movq $2, a21710
    movq a21710, a21708
    jmp label22064
    
label22065:
    movq $1, a21709
    movq a21709, a21708
    jmp label22064
    
label22067:
    cmpq $1, $3
    jg label22065
    jmp label22066
    
label22073:
    movq $2, a21693
    jmp label22063
    
label22068:
    movq $2, a21711
    movq a21711, a21693
    jmp label22063
    
label22069:
    cmpq temp21893, $3
    jg label22067
    jmp label22068
    
label22071:
    movq $2, a21707
    movq a21707, temp21893
    jmp label22069
    
label22070:
    movq $1, a21706
    movq a21706, temp21893
    jmp label22069
    
label22072:
    cmpq $1, $3
    jg label22070
    jmp label22071
    
label22075:
    movq $0, a21705
    cmpq $1, a21705
    je label22072
    jmp label22073
    
label22074:
    movq $1, a21704
    cmpq $1, a21704
    je label22072
    jmp label22073
    
label22077:
    movq $0, a21703
    cmpq $1, a21703
    je label22074
    jmp label22075
    
label22076:
    movq $1, a21702
    cmpq $1, a21702
    je label22074
    jmp label22075
    
label22079:
    movq $0, a21701
    cmpq $1, a21701
    je label22076
    jmp label22077
    
label22078:
    movq $1, a21700
    cmpq $1, a21700
    je label22076
    jmp label22077
    
label22080:
    cmpq temp21887, temp21886
    jg label22078
    jmp label22079
    
label22081:
    movq a21696, temp21887
    jmp label22080
    
label22083:
    movq $2, a21698
    movq a21698, a21696
    jmp label22081
    
label22082:
    movq $1, a21697
    movq a21697, a21696
    jmp label22081
    
label22084:
    cmpq $1, $3
    jg label22082
    jmp label22083
    
label22085:
    movq $2, a21699
    movq a21699, temp21887
    jmp label22080
    
label22086:
    cmpq temp21889, $3
    jg label22084
    jmp label22085
    
label22088:
    movq $2, a21695
    movq a21695, temp21889
    jmp label22086
    
label22087:
    movq $1, a21694
    movq a21694, temp21889
    jmp label22086
    
label22089:
    callq read_int
    movq %rax, temp21886
    cmpq $1, $3
    jg label22087
    jmp label22088
    
label22099:
    movq $2, a21674
    jmp label22089
    
label22094:
    movq $2, a21692
    movq a21692, a21674
    jmp label22089
    
label22090:
    movq a21689, a21674
    jmp label22089
    
label22092:
    movq $2, a21691
    movq a21691, a21689
    jmp label22090
    
label22091:
    movq $1, a21690
    movq a21690, a21689
    jmp label22090
    
label22093:
    cmpq $1, $3
    jg label22091
    jmp label22092
    
label22095:
    cmpq temp21880, $3
    jg label22093
    jmp label22094
    
label22097:
    movq $2, a21688
    movq a21688, temp21880
    jmp label22095
    
label22096:
    movq $1, a21687
    movq a21687, temp21880
    jmp label22095
    
label22098:
    cmpq $1, $3
    jg label22096
    jmp label22097
    
label22101:
    movq $0, a21686
    cmpq $1, a21686
    je label22098
    jmp label22099
    
label22100:
    movq $1, a21685
    cmpq $1, a21685
    je label22098
    jmp label22099
    
label22103:
    movq $0, a21684
    cmpq $1, a21684
    je label22100
    jmp label22101
    
label22102:
    movq $1, a21683
    cmpq $1, a21683
    je label22100
    jmp label22101
    
label22105:
    movq $0, a21682
    cmpq $1, a21682
    je label22102
    jmp label22103
    
label22104:
    movq $1, a21681
    cmpq $1, a21681
    je label22102
    jmp label22103
    
label22106:
    cmpq temp21874, temp21873
    jg label22104
    jmp label22105
    
label22111:
    movq $2, a21680
    movq a21680, temp21874
    jmp label22106
    
label22107:
    movq a21677, temp21874
    jmp label22106
    
label22109:
    movq $2, a21679
    movq a21679, a21677
    jmp label22107
    
label22108:
    movq $1, a21678
    movq a21678, a21677
    jmp label22107
    
label22110:
    cmpq $1, $3
    jg label22108
    jmp label22109
    
label22112:
    cmpq temp21876, $3
    jg label22110
    jmp label22111
    
label22114:
    movq $2, a21676
    movq a21676, temp21876
    jmp label22112
    
label22113:
    movq $1, a21675
    movq a21675, temp21876
    jmp label22112
    
label22115:
    callq read_int
    movq %rax, temp21870
    callq read_int
    movq %rax, temp21873
    cmpq $1, $3
    jg label22113
    jmp label22114
    
label22125:
    movq $2, a21655
    jmp label22115
    
label22120:
    movq $2, a21673
    movq a21673, a21655
    jmp label22115
    
label22116:
    movq a21670, a21655
    jmp label22115
    
label22118:
    movq $2, a21672
    movq a21672, a21670
    jmp label22116
    
label22117:
    movq $1, a21671
    movq a21671, a21670
    jmp label22116
    
label22119:
    cmpq $1, $3
    jg label22117
    jmp label22118
    
label22121:
    cmpq temp21866, $3
    jg label22119
    jmp label22120
    
label22123:
    movq $2, a21669
    movq a21669, temp21866
    jmp label22121
    
label22122:
    movq $1, a21668
    movq a21668, temp21866
    jmp label22121
    
label22124:
    cmpq $1, $3
    jg label22122
    jmp label22123
    
label22127:
    movq $0, a21667
    cmpq $1, a21667
    je label22124
    jmp label22125
    
label22126:
    movq $1, a21666
    cmpq $1, a21666
    je label22124
    jmp label22125
    
label22129:
    movq $0, a21665
    cmpq $1, a21665
    je label22126
    jmp label22127
    
label22128:
    movq $1, a21664
    cmpq $1, a21664
    je label22126
    jmp label22127
    
label22131:
    movq $0, a21663
    cmpq $1, a21663
    je label22128
    jmp label22129
    
label22130:
    movq $1, a21662
    cmpq $1, a21662
    je label22128
    jmp label22129
    
label22132:
    cmpq temp21860, temp21859
    jg label22130
    jmp label22131
    
label22137:
    movq $2, a21661
    movq a21661, temp21860
    jmp label22132
    
label22133:
    movq a21658, temp21860
    jmp label22132
    
label22135:
    movq $2, a21660
    movq a21660, a21658
    jmp label22133
    
label22134:
    movq $1, a21659
    movq a21659, a21658
    jmp label22133
    
label22136:
    cmpq $1, $3
    jg label22134
    jmp label22135
    
label22138:
    cmpq temp21862, $3
    jg label22136
    jmp label22137
    
label22140:
    movq $2, a21657
    movq a21657, temp21862
    jmp label22138
    
label22139:
    movq $1, a21656
    movq a21656, temp21862
    jmp label22138
    
label22141:
    callq read_int
    movq %rax, temp21859
    cmpq $1, $3
    jg label22139
    jmp label22140
    
label22146:
    movq $2, a21654
    movq a21654, a21636
    jmp label22141
    
label22142:
    movq a21651, a21636
    jmp label22141
    
label22144:
    movq $2, a21653
    movq a21653, a21651
    jmp label22142
    
label22143:
    movq $1, a21652
    movq a21652, a21651
    jmp label22142
    
label22145:
    cmpq $1, $3
    jg label22143
    jmp label22144
    
label22147:
    cmpq temp21853, $3
    jg label22145
    jmp label22146
    
label22149:
    movq $2, a21650
    movq a21650, temp21853
    jmp label22147
    
label22148:
    movq $1, a21649
    movq a21649, temp21853
    jmp label22147
    
label22150:
    cmpq $1, $3
    jg label22148
    jmp label22149
    
label22151:
    movq $2, a21636
    jmp label22141
    
label22153:
    movq $0, a21648
    cmpq $1, a21648
    je label22150
    jmp label22151
    
label22152:
    movq $1, a21647
    cmpq $1, a21647
    je label22150
    jmp label22151
    
label22155:
    movq $0, a21646
    cmpq $1, a21646
    je label22152
    jmp label22153
    
label22154:
    movq $1, a21645
    cmpq $1, a21645
    je label22152
    jmp label22153
    
label22157:
    movq $0, a21644
    cmpq $1, a21644
    je label22154
    jmp label22155
    
label22156:
    movq $1, a21643
    cmpq $1, a21643
    je label22154
    jmp label22155
    
label22158:
    cmpq temp21847, temp21846
    jg label22156
    jmp label22157
    
label22163:
    movq $2, a21642
    movq a21642, temp21847
    jmp label22158
    
label22159:
    movq a21639, temp21847
    jmp label22158
    
label22161:
    movq $2, a21641
    movq a21641, a21639
    jmp label22159
    
label22160:
    movq $1, a21640
    movq a21640, a21639
    jmp label22159
    
label22162:
    cmpq $1, $3
    jg label22160
    jmp label22161
    
label22164:
    cmpq temp21849, $3
    jg label22162
    jmp label22163
    
label22166:
    movq $2, a21638
    movq a21638, temp21849
    jmp label22164
    
label22165:
    movq $1, a21637
    movq a21637, temp21849
    jmp label22164
    
label22167:
    callq read_int
    movq %rax, temp21846
    cmpq $1, $3
    jg label22165
    jmp label22166
    
label22177:
    movq $2, a21617
    jmp label22167
    
label22172:
    movq $2, a21635
    movq a21635, a21617
    jmp label22167
    
label22168:
    movq a21632, a21617
    jmp label22167
    
label22170:
    movq $2, a21634
    movq a21634, a21632
    jmp label22168
    
label22169:
    movq $1, a21633
    movq a21633, a21632
    jmp label22168
    
label22171:
    cmpq $1, $3
    jg label22169
    jmp label22170
    
label22173:
    cmpq temp21840, $3
    jg label22171
    jmp label22172
    
label22175:
    movq $2, a21631
    movq a21631, temp21840
    jmp label22173
    
label22174:
    movq $1, a21630
    movq a21630, temp21840
    jmp label22173
    
label22176:
    cmpq $1, $3
    jg label22174
    jmp label22175
    
label22179:
    movq $0, a21629
    cmpq $1, a21629
    je label22176
    jmp label22177
    
label22178:
    movq $1, a21628
    cmpq $1, a21628
    je label22176
    jmp label22177
    
label22181:
    movq $0, a21627
    cmpq $1, a21627
    je label22178
    jmp label22179
    
label22180:
    movq $1, a21626
    cmpq $1, a21626
    je label22178
    jmp label22179
    
label22183:
    movq $0, a21625
    cmpq $1, a21625
    je label22180
    jmp label22181
    
label22182:
    movq $1, a21624
    cmpq $1, a21624
    je label22180
    jmp label22181
    
label22184:
    cmpq temp21834, temp21833
    jg label22182
    jmp label22183
    
label22189:
    movq $2, a21623
    movq a21623, temp21834
    jmp label22184
    
label22185:
    movq a21620, temp21834
    jmp label22184
    
label22187:
    movq $2, a21622
    movq a21622, a21620
    jmp label22185
    
label22186:
    movq $1, a21621
    movq a21621, a21620
    jmp label22185
    
label22188:
    cmpq $1, $3
    jg label22186
    jmp label22187
    
label22190:
    cmpq temp21836, $3
    jg label22188
    jmp label22189
    
label22192:
    movq $2, a21619
    movq a21619, temp21836
    jmp label22190
    
label22191:
    movq $1, a21618
    movq a21618, temp21836
    jmp label22190
    
label22193:
    callq read_int
    movq %rax, temp21833
    cmpq $1, $3
    jg label22191
    jmp label22192
    
label22194:
    movq a21613, a21598
    jmp label22193
    
label22195:
    movq $1, a21614
    movq a21614, a21613
    jmp label22194
    
label22196:
    movq $2, a21615
    movq a21615, a21613
    jmp label22194
    
label22197:
    cmpq $1, $3
    jg label22195
    jmp label22196
    
label22203:
    movq $2, a21598
    jmp label22193
    
label22198:
    movq $2, a21616
    movq a21616, a21598
    jmp label22193
    
label22199:
    cmpq temp21827, $3
    jg label22197
    jmp label22198
    
label22201:
    movq $2, a21612
    movq a21612, temp21827
    jmp label22199
    
label22200:
    movq $1, a21611
    movq a21611, temp21827
    jmp label22199
    
label22202:
    cmpq $1, $3
    jg label22200
    jmp label22201
    
label22205:
    movq $0, a21610
    cmpq $1, a21610
    je label22202
    jmp label22203
    
label22204:
    movq $1, a21609
    cmpq $1, a21609
    je label22202
    jmp label22203
    
label22207:
    movq $0, a21608
    cmpq $1, a21608
    je label22204
    jmp label22205
    
label22206:
    movq $1, a21607
    cmpq $1, a21607
    je label22204
    jmp label22205
    
label22209:
    movq $0, a21606
    cmpq $1, a21606
    je label22206
    jmp label22207
    
label22208:
    movq $1, a21605
    cmpq $1, a21605
    je label22206
    jmp label22207
    
label22210:
    cmpq temp21821, temp21820
    jg label22208
    jmp label22209
    
label22211:
    movq a21601, temp21821
    jmp label22210
    
label22213:
    movq $2, a21603
    movq a21603, a21601
    jmp label22211
    
label22212:
    movq $1, a21602
    movq a21602, a21601
    jmp label22211
    
label22214:
    cmpq $1, $3
    jg label22212
    jmp label22213
    
label22215:
    movq $2, a21604
    movq a21604, temp21821
    jmp label22210
    
label22216:
    cmpq temp21823, $3
    jg label22214
    jmp label22215
    
label22218:
    movq $2, a21600
    movq a21600, temp21823
    jmp label22216
    
label22217:
    movq $1, a21599
    movq a21599, temp21823
    jmp label22216
    
label22219:
    callq read_int
    movq %rax, temp21820
    cmpq $1, $3
    jg label22217
    jmp label22218
    
label22229:
    movq $2, a21579
    jmp label22219
    
label22224:
    movq $2, a21597
    movq a21597, a21579
    jmp label22219
    
label22220:
    movq a21594, a21579
    jmp label22219
    
label22222:
    movq $2, a21596
    movq a21596, a21594
    jmp label22220
    
label22221:
    movq $1, a21595
    movq a21595, a21594
    jmp label22220
    
label22223:
    cmpq $1, $3
    jg label22221
    jmp label22222
    
label22225:
    cmpq temp21814, $3
    jg label22223
    jmp label22224
    
label22227:
    movq $2, a21593
    movq a21593, temp21814
    jmp label22225
    
label22226:
    movq $1, a21592
    movq a21592, temp21814
    jmp label22225
    
label22228:
    cmpq $1, $3
    jg label22226
    jmp label22227
    
label22230:
    movq $1, a21590
    cmpq $1, a21590
    je label22228
    jmp label22229
    
label22231:
    movq $0, a21591
    cmpq $1, a21591
    je label22228
    jmp label22229
    
label22232:
    movq $1, a21588
    cmpq $1, a21588
    je label22230
    jmp label22231
    
label22233:
    movq $0, a21589
    cmpq $1, a21589
    je label22230
    jmp label22231
    
label22234:
    movq $1, a21586
    cmpq $1, a21586
    je label22232
    jmp label22233
    
label22235:
    movq $0, a21587
    cmpq $1, a21587
    je label22232
    jmp label22233
    
label22236:
    cmpq temp21808, temp21807
    jg label22234
    jmp label22235
    
label22237:
    movq a21582, temp21808
    jmp label22236
    
label22238:
    movq $1, a21583
    movq a21583, a21582
    jmp label22237
    
label22239:
    movq $2, a21584
    movq a21584, a21582
    jmp label22237
    
label22240:
    cmpq $1, $3
    jg label22238
    jmp label22239
    
label22241:
    movq $2, a21585
    movq a21585, temp21808
    jmp label22236
    
label22242:
    cmpq temp21810, $3
    jg label22240
    jmp label22241
    
label22244:
    movq $2, a21581
    movq a21581, temp21810
    jmp label22242
    
label22243:
    movq $1, a21580
    movq a21580, temp21810
    jmp label22242
    
label22246:
    callq read_int
    movq %rax, temp21807
    cmpq $1, $3
    jg label22243
    jmp label22244
    
label21951:
    movq a21575, %rax
    jmp conclusion
    
label21953:
    movq $2, a21577
    movq a21577, a21575
    jmp label21951
    
label21952:
    movq $1, a21576
    movq a21576, a21575
    jmp label21951
    
label21955:
    movq $2, a21578
    movq a21578, %rax
    jmp conclusion
    
label21954:
    cmpq $1, $3
    jg label21952
    jmp label21953
    
label21956:
    cmpq temp21803, $3
    jg label21954
    jmp label21955
    
label21958:
    movq $2, a21574
    movq a21574, temp21803
    jmp label21956
    
label21957:
    movq $1, a21573
    movq a21573, temp21803
    jmp label21956
    
label22245:
    cmpq $1, $3
    jg label21957
    jmp label21958
    
label22247:
    cmpq $1, x21560
    je label22245
    jmp label22246
    
label22248:
    movq $1, x21560
    jmp label22247
    
label22249:
    movq $0, x21560
    jmp label22247
    
label22250:
    cmpq $8, temp21790
    jg label22248
    jmp label22249
    
label22251:
    movq $8, temp21790
    jmp label22250
    
label22252:
    movq $9, temp21790
    jmp label22250
    
label22253:
    cmpq temp21797, temp21792
    jge label22251
    jmp label22252
    
label22254:
    movq a21569, temp21797
    jmp label22253
    
label22255:
    movq $1, a21570
    movq a21570, a21569
    jmp label22254
    
label22256:
    movq $2, a21571
    movq a21571, a21569
    jmp label22254
    
label22257:
    cmpq $1, $3
    jg label22255
    jmp label22256
    
label22258:
    movq $2, a21572
    movq a21572, temp21797
    jmp label22253
    
label22259:
    cmpq temp21799, $3
    jg label22257
    jmp label22258
    
label22260:
    movq $1, a21567
    movq a21567, temp21799
    jmp label22259
    
label22261:
    movq $2, a21568
    movq a21568, temp21799
    jmp label22259
    
label22262:
    cmpq $1, $3
    jg label22260
    jmp label22261
    
label22263:
    movq a21563, temp21792
    jmp label22262
    
label22264:
    movq $1, a21564
    movq a21564, a21563
    jmp label22263
    
label22265:
    movq $2, a21565
    movq a21565, a21563
    jmp label22263
    
label22266:
    cmpq $1, $3
    jg label22264
    jmp label22265
    
label22267:
    movq $2, a21566
    movq a21566, temp21792
    jmp label22262
    
label22268:
    cmpq temp21794, $3
    jg label22266
    jmp label22267
    
label22269:
    movq $1, a21561
    movq a21561, temp21794
    jmp label22268
    
label22270:
    movq $2, a21562
    movq a21562, temp21794
    jmp label22268
    
start:
    cmpq $1, $3
    jg label22269
    jmp label22270
    



output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: allocate registers @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21653 a21651)
 (list temp21910 a21731)
 (list a21652 a21651)
 (list a21655 a21670)
 (list a21655 a21673)
 (list a21654 a21636)
 (list a21657 temp21862)
 (list temp21915 a21732)
 (list temp21915 a21733)
 (list a21656 temp21862)
 (list a21659 a21658)
 (list temp21913 a21734)
 (list temp21913 a21737)
 (list a21658 temp21860)
 (list a21658 a21659)
 (list a21658 a21660)
 (list a21661 temp21860)
 (list temp21919 a21744)
 (list temp21919 a21745)
 (list a21660 a21658)
 (list temp21923 a21750)
 (list a21637 temp21849)
 (list a21636 temp21844)
 (list a21636 a21654)
 (list a21636 a21651)
 (list a21639 temp21847)
 (list a21639 a21640)
 (list a21639 a21641)
 (list a21638 temp21849)
 (list temp21893 a21706)
 (list temp21893 a21707)
 (list a21641 a21639)
 (list a21640 a21639)
 (list a21642 temp21847)
 (list temp21897 a21712)
 (list temp21902 a21713)
 (list temp21902 a21714)
 (list temp21900 a21718)
 (list temp21900 a21715)
 (list a21649 temp21853)
 (list temp21906 a21725)
 (list temp21906 a21726)
 (list a21651 a21653)
 (list a21651 a21636)
 (list a21651 a21652)
 (list a21650 temp21853)
 (list temp21942 a21773)
 (list temp21942 a21776)
 (list a21687 temp21880)
 (list a21689 a21691)
 (list a21689 a21674)
 (list a21689 a21690)
 (list a21688 temp21880)
 (list temp21944 a21771)
 (list temp21944 a21772)
 (list a21691 a21689)
 (list a21690 a21689)
 (list a21693 a21711)
 (list a21693 a21708)
 (list a21693 temp21884)
 (list a21692 a21674)
 (list temp21948 a21783)
 (list temp21948 a21784)
 (list a21695 temp21889)
 (list a21694 temp21889)
 (list a21697 a21696)
 (list a21696 temp21887)
 (list a21696 a21697)
 (list a21696 a21698)
 (list a21699 temp21887)
 (list a21698 a21696)
 (list temp21926 a21751)
 (list a21669 temp21866)
 (list a21668 temp21866)
 (list a21671 a21670)
 (list a21670 a21672)
 (list a21670 a21655)
 (list a21670 a21671)
 (list a21673 a21655)
 (list temp21931 a21752)
 (list temp21931 a21753)
 (list a21672 a21670)
 (list a21675 temp21876)
 (list temp21929 a21754)
 (list temp21929 a21757)
 (list a21674 a21689)
 (list a21674 a21692)
 (list a21674 temp21871)
 (list a21677 a21678)
 (list a21677 a21679)
 (list a21677 temp21874)
 (list temp21935 a21764)
 (list temp21935 a21765)
 (list a21676 temp21876)
 (list a21679 a21677)
 (list a21678 a21677)
 (list temp21939 a21770)
 (list a21680 temp21874)
 (list temp21847 a21639)
 (list temp21847 a21642)
 (list temp21844 a21636)
 (list a21593 temp21814)
 (list a21592 temp21814)
 (list a21595 a21594)
 (list a21594 a21596)
 (list a21594 a21579)
 (list a21594 a21595)
 (list temp21849 a21637)
 (list temp21849 a21638)
 (list a21597 a21579)
 (list a21596 a21594)
 (list a21599 temp21823)
 (list temp21853 a21649)
 (list temp21853 a21650)
 (list a21598 temp21818)
 (list a21598 a21613)
 (list a21598 a21616)
 (list a21601 temp21821)
 (list a21601 a21602)
 (list a21601 a21603)
 (list a21600 temp21823)
 (list a21603 a21601)
 (list a21602 a21601)
 (list temp21857 temp21870)
 (list a21573 temp21803)
 (list a21572 temp21797)
 (list temp21831 a21617)
 (list a21575 a21576)
 (list a21575 a21577)
 (list a21574 temp21803)
 (list a21577 a21575)
 (list temp21834 a21620)
 (list temp21834 a21623)
 (list a21576 a21575)
 (list a21579 a21594)
 (list a21579 a21597)
 (list a21581 temp21810)
 (list a21580 temp21810)
 (list a21583 a21582)
 (list temp21836 a21618)
 (list temp21836 a21619)
 (list a21582 a21583)
 (list a21582 temp21808)
 (list a21582 a21584)
 (list a21585 temp21808)
 (list a21584 a21582)
 (list temp21840 a21630)
 (list temp21840 a21631)
 (list a21621 a21620)
 (list a21620 a21621)
 (list a21620 a21622)
 (list a21620 temp21834)
 (list a21623 temp21834)
 (list temp21876 a21675)
 (list temp21876 a21676)
 (list a21622 a21620)
 (list temp21880 a21687)
 (list temp21880 a21688)
 (list temp21887 a21696)
 (list temp21887 a21699)
 (list a21631 temp21840)
 (list temp21884 a21693)
 (list a21630 temp21840)
 (list a21633 a21632)
 (list a21632 a21634)
 (list a21632 a21617)
 (list a21632 a21633)
 (list a21635 a21617)
 (list a21634 a21632)
 (list temp21889 a21694)
 (list temp21889 a21695)
 (list temp21862 a21656)
 (list temp21862 a21657)
 (list a21604 temp21821)
 (list temp21860 a21658)
 (list temp21860 a21661)
 (list temp21866 a21668)
 (list temp21866 a21669)
 (list a21611 temp21827)
 (list a21613 a21615)
 (list a21613 a21598)
 (list a21613 a21614)
 (list temp21870 temp21857)
 (list a21612 temp21827)
 (list temp21871 a21674)
 (list a21615 a21613)
 (list a21614 a21613)
 (list a21617 temp21831)
 (list a21617 a21632)
 (list a21617 a21635)
 (list temp21874 a21677)
 (list temp21874 a21680)
 (list a21616 a21598)
 (list a21619 temp21836)
 (list a21618 temp21836)
 (list a21783 temp21948)
 (list a21786 a21785)
 (list a21787 a21785)
 (list a21784 temp21948)
 (list a21785 a21787)
 (list a21785 a21770)
 (list a21785 a21786)
 (list a21788 a21770)
 (list temp21794 a21561)
 (list temp21794 a21562)
 (list temp21792 a21563)
 (list temp21792 a21566)
 (list a21766 a21768)
 (list a21766 a21751)
 (list a21766 a21767)
 (list a21767 a21766)
 (list a21764 temp21935)
 (list a21765 temp21935)
 (list a21770 a21785)
 (list a21770 a21788)
 (list a21770 temp21939)
 (list a21771 temp21944)
 (list a21768 a21766)
 (list a21769 a21751)
 (list a21774 a21773)
 (list a21775 a21773)
 (list a21772 temp21944)
 (list a21773 temp21942)
 (list a21773 a21774)
 (list a21773 a21775)
 (list a21776 temp21942)
 (list temp21814 a21592)
 (list temp21814 a21593)
 (list a21561 temp21794)
 (list temp21818 a21598)
 (list a21563 a21564)
 (list a21563 a21565)
 (list a21563 temp21792)
 (list a21562 temp21794)
 (list a21565 a21563)
 (list a21564 a21563)
 (list temp21823 a21599)
 (list temp21823 a21600)
 (list a21567 temp21799)
 (list a21566 temp21792)
 (list temp21821 a21604)
 (list temp21821 a21601)
 (list a21569 temp21797)
 (list a21569 a21570)
 (list a21569 a21571)
 (list a21568 temp21799)
 (list temp21827 a21611)
 (list temp21827 a21612)
 (list a21571 a21569)
 (list a21570 a21569)
 (list temp21799 a21567)
 (list temp21799 a21568)
 (list temp21797 a21572)
 (list temp21797 a21569)
 (list temp21803 a21573)
 (list temp21803 a21574)
 (list temp21810 a21580)
 (list temp21810 a21581)
 (list temp21808 a21582)
 (list temp21808 a21585)
 (list a21718 temp21900)
 (list a21716 a21715)
 (list a21717 a21715)
 (list a21726 temp21906)
 (list a21727 a21729)
 (list a21727 a21712)
 (list a21727 a21728)
 (list a21725 temp21906)
 (list a21730 a21712)
 (list a21731 a21749)
 (list a21731 temp21910)
 (list a21731 a21746)
 (list a21728 a21727)
 (list a21729 a21727)
 (list a21706 temp21893)
 (list a21707 temp21893)
 (list a21710 a21708)
 (list a21711 a21693)
 (list a21708 a21710)
 (list a21708 a21709)
 (list a21708 a21693)
 (list a21709 a21708)
 (list a21714 temp21902)
 (list a21715 a21716)
 (list a21715 a21717)
 (list a21715 temp21900)
 (list a21712 temp21897)
 (list a21712 a21727)
 (list a21712 a21730)
 (list a21713 temp21902)
 (list a21750 temp21923)
 (list a21751 a21769)
 (list a21751 a21766)
 (list a21751 temp21926)
 (list a21748 a21746)
 (list a21749 a21731)
 (list a21754 temp21929)
 (list a21754 a21755)
 (list a21754 a21756)
 (list a21755 a21754)
 (list a21752 temp21931)
 (list a21753 temp21931)
 (list a21756 a21754)
 (list a21757 temp21929)
 (list a21734 a21735)
 (list a21734 a21736)
 (list a21734 temp21913)
 (list a21735 a21734)
 (list a21732 temp21915)
 (list a21733 temp21915)
 (list a21736 a21734)
 (list a21737 temp21913)
 (list a21746 a21748)
 (list a21746 a21731)
 (list a21746 a21747)
 (list a21747 a21746)
 (list a21744 temp21919)
 (list a21745 temp21919))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdx 1)
 (cons %r11 -4)
 (cons a21579 7)
 (cons a21636 8)
 (cons a21617 9)
 (cons a21598 10)
 (cons a21712 11)
 (cons a21693 12)
 (cons a21674 13)
 (cons a21751 14)
 (cons a21750 15)
 (cons a21731 16)
 (cons temp21870 17)
 (cons a21771 0)
 (cons temp21941 1)
 (cons a21773 0)
 (cons temp21942 0)
 (cons a21772 0)
 (cons a21775 0)
 (cons a21774 0)
 (cons a21776 0)
 (cons temp21944 0)
 (cons a21783 0)
 (cons temp21939 0)
 (cons temp21926 1)
 (cons a21781 0)
 (cons a21779 0)
 (cons a21786 0)
 (cons a21778 0)
 (cons a21780 0)
 (cons a21782 0)
 (cons a21785 0)
 (cons a21784 0)
 (cons a21787 0)
 (cons a21788 0)
 (cons temp21948 0)
 (cons a21777 0)
 (cons a21770 0)
 (cons temp21923 0)
 (cons a21757 0)
 (cons temp21928 1)
 (cons a21753 0)
 (cons a21752 0)
 (cons a21755 0)
 (cons a21754 0)
 (cons a21756 0)
 (cons temp21929 0)
 (cons temp21931 0)
 (cons a21762 0)
 (cons a21759 0)
 (cons a21761 0)
 (cons a21758 0)
 (cons a21763 0)
 (cons a21760 0)
 (cons a21764 0)
 (cons a21767 0)
 (cons a21765 0)
 (cons a21769 0)
 (cons temp21935 0)
 (cons a21768 0)
 (cons a21766 0)
 (cons temp21910 1)
 (cons temp21897 0)
 (cons a21749 0)
 (cons a21740 0)
 (cons a21741 0)
 (cons a21734 0)
 (cons temp21912 1)
 (cons a21733 0)
 (cons a21732 0)
 (cons a21735 0)
 (cons a21737 0)
 (cons temp21913 0)
 (cons temp21915 0)
 (cons a21736 0)
 (cons a21739 0)
 (cons a21738 0)
 (cons a21745 0)
 (cons a21744 0)
 (cons a21747 0)
 (cons a21746 0)
 (cons a21748 0)
 (cons a21743 0)
 (cons temp21919 0)
 (cons a21742 0)
 (cons a21718 0)
 (cons temp21899 1)
 (cons a21714 0)
 (cons a21715 0)
 (cons a21713 0)
 (cons a21717 0)
 (cons temp21900 0)
 (cons temp21902 0)
 (cons a21716 0)
 (cons a21719 0)
 (cons a21720 0)
 (cons a21721 0)
 (cons a21723 0)
 (cons a21722 0)
 (cons a21727 0)
 (cons a21726 0)
 (cons a21724 0)
 (cons a21725 0)
 (cons temp21906 0)
 (cons a21730 0)
 (cons a21728 0)
 (cons a21729 0)
 (cons temp21884 1)
 (cons temp21871 0)
 (cons a21702 0)
 (cons a21703 0)
 (cons a21700 0)
 (cons a21707 0)
 (cons a21710 0)
 (cons a21711 0)
 (cons a21705 0)
 (cons a21701 0)
 (cons a21704 0)
 (cons a21706 0)
 (cons a21699 0)
 (cons temp21886 1)
 (cons a21694 0)
 (cons a21695 0)
 (cons temp21887 0)
 (cons temp21889 0)
 (cons a21698 0)
 (cons a21696 0)
 (cons a21697 0)
 (cons temp21893 0)
 (cons a21709 0)
 (cons a21708 0)
 (cons temp21874 0)
 (cons temp21873 1)
 (cons a21675 0)
 (cons a21678 0)
 (cons a21679 0)
 (cons a21680 0)
 (cons a21676 0)
 (cons a21677 0)
 (cons temp21876 0)
 (cons a21682 0)
 (cons a21687 0)
 (cons a21690 0)
 (cons a21684 0)
 (cons a21688 0)
 (cons a21686 0)
 (cons a21692 0)
 (cons a21691 0)
 (cons temp21857 1)
 (cons temp21880 0)
 (cons a21681 0)
 (cons a21683 0)
 (cons a21685 0)
 (cons a21689 0)
 (cons a21664 0)
 (cons temp21862 0)
 (cons temp21859 1)
 (cons a21658 0)
 (cons a21659 0)
 (cons a21656 0)
 (cons a21657 0)
 (cons a21660 0)
 (cons a21661 0)
 (cons temp21860 0)
 (cons a21662 0)
 (cons a21666 0)
 (cons a21671 0)
 (cons a21668 0)
 (cons a21670 0)
 (cons a21669 0)
 (cons temp21866 0)
 (cons a21663 0)
 (cons temp21844 0)
 (cons a21655 0)
 (cons a21673 0)
 (cons a21667 0)
 (cons a21665 0)
 (cons a21672 0)
 (cons a21649 0)
 (cons a21646 0)
 (cons a21650 0)
 (cons a21644 0)
 (cons a21651 0)
 (cons a21648 0)
 (cons a21641 0)
 (cons temp21846 1)
 (cons a21638 0)
 (cons a21640 0)
 (cons temp21847 0)
 (cons temp21849 0)
 (cons a21639 0)
 (cons a21637 0)
 (cons a21642 0)
 (cons a21652 0)
 (cons temp21853 0)
 (cons a21647 0)
 (cons a21654 0)
 (cons a21643 0)
 (cons a21645 0)
 (cons temp21831 1)
 (cons temp21818 0)
 (cons a21653 0)
 (cons a21620 0)
 (cons temp21833 1)
 (cons a21622 0)
 (cons a21623 0)
 (cons a21619 0)
 (cons temp21834 0)
 (cons a21621 0)
 (cons temp21836 0)
 (cons a21618 0)
 (cons a21629 0)
 (cons a21627 0)
 (cons a21628 0)
 (cons a21633 0)
 (cons a21625 0)
 (cons a21635 0)
 (cons a21630 0)
 (cons a21632 0)
 (cons temp21840 0)
 (cons a21624 0)
 (cons a21631 0)
 (cons a21626 0)
 (cons a21634 0)
 (cons a21610 0)
 (cons a21608 0)
 (cons a21607 0)
 (cons a21606 0)
 (cons a21616 0)
 (cons a21599 0)
 (cons temp21820 1)
 (cons a21604 0)
 (cons a21602 0)
 (cons a21603 0)
 (cons temp21821 0)
 (cons temp21823 0)
 (cons a21600 0)
 (cons a21601 0)
 (cons temp21827 0)
 (cons a21612 0)
 (cons a21609 0)
 (cons a21605 0)
 (cons a21615 0)
 (cons a21613 0)
 (cons a21614 0)
 (cons a21611 0)
 (cons temp21797 0)
 (cons temp21792 1)
 (cons a21572 0)
 (cons a21570 0)
 (cons a21567 0)
 (cons a21571 0)
 (cons a21568 0)
 (cons a21569 0)
 (cons temp21799 0)
 (cons a21573 0)
 (cons a21575 0)
 (cons a21583 0)
 (cons temp21807 1)
 (cons a21582 0)
 (cons a21585 0)
 (cons temp21810 0)
 (cons a21580 0)
 (cons a21581 0)
 (cons a21584 0)
 (cons temp21808 0)
 (cons a21597 0)
 (cons a21563 0)
 (cons a21562 0)
 (cons a21566 0)
 (cons a21591 0)
 (cons a21590 0)
 (cons a21587 0)
 (cons a21589 0)
 (cons a21564 0)
 (cons a21593 0)
 (cons a21577 0)
 (cons temp21803 0)
 (cons a21574 0)
 (cons temp21814 0)
 (cons a21596 0)
 (cons temp21790 0)
 (cons x21560 0)
 (cons a21594 0)
 (cons a21576 0)
 (cons a21595 0)
 (cons a21578 0)
 (cons a21561 0)
 (cons a21588 0)
 (cons a21586 0)
 (cons temp21794 0)
 (cons a21592 0)
 (cons a21565 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21959:
    movq %rcx, %rcx
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %rbx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21960:
    movq %rcx, %rcx
    jmp label21959
    
label21961:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21960
    
label21962:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21960
    
label21963:
    cmpq $1, $3
    jg label21961
    jmp label21962
    
label21964:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21959
    
label21965:
    cmpq %rcx, $3
    jg label21963
    jmp label21964
    
label21967:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21965
    
label21966:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21965
    
label21969:
    movq $2, %rcx
    jmp label21959
    
label21968:
    cmpq $1, $3
    jg label21966
    jmp label21967
    
label21971:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21970:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21973:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21972:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21975:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21974:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21976:
    cmpq %rcx, %rdx
    jg label21974
    jmp label21975
    
label21981:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21976
    
label21977:
    movq %rcx, %rcx
    jmp label21976
    
label21979:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21977
    
label21978:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21977
    
label21980:
    cmpq $1, $3
    jg label21978
    jmp label21979
    
label21982:
    cmpq %rcx, $3
    jg label21980
    jmp label21981
    
label21984:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21982
    
label21983:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21982
    
label21985:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label21983
    jmp label21984
    
label21986:
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21987:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21986
    
label21988:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21986
    
label21989:
    cmpq $1, $3
    jg label21987
    jmp label21988
    
label21995:
    movq $2, -72(%rbp)
    jmp label21985
    
label21990:
    movq $2, %rcx
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21991:
    cmpq %rcx, $3
    jg label21989
    jmp label21990
    
label21993:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21991
    
label21992:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21991
    
label21994:
    cmpq $1, $3
    jg label21992
    jmp label21993
    
label21997:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21996:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21999:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label21998:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label22001:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22000:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22002:
    cmpq %rcx, %rdx
    jg label22000
    jmp label22001
    
label22003:
    movq %rcx, %rcx
    jmp label22002
    
label22005:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22003
    
label22004:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22003
    
label22006:
    cmpq $1, $3
    jg label22004
    jmp label22005
    
label22007:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22002
    
label22008:
    cmpq %rcx, $3
    jg label22006
    jmp label22007
    
label22010:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22008
    
label22009:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22008
    
label22011:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22009
    jmp label22010
    
label22016:
    movq $2, %rcx
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22012:
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22014:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22012
    
label22013:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22012
    
label22015:
    cmpq $1, $3
    jg label22013
    jmp label22014
    
label22017:
    cmpq %rcx, $3
    jg label22015
    jmp label22016
    
label22019:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22017
    
label22018:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22017
    
label22020:
    cmpq $1, $3
    jg label22018
    jmp label22019
    
label22021:
    movq $2, -88(%rbp)
    jmp label22011
    
label22023:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22022:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22025:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22024:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22027:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22026:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22028:
    cmpq %rcx, %rdx
    jg label22026
    jmp label22027
    
label22033:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22028
    
label22029:
    movq %rcx, %rcx
    jmp label22028
    
label22031:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22029
    
label22030:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22029
    
label22032:
    cmpq $1, $3
    jg label22030
    jmp label22031
    
label22034:
    cmpq %rcx, $3
    jg label22032
    jmp label22033
    
label22036:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22034
    
label22035:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22034
    
label22037:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22035
    jmp label22036
    
label22047:
    movq $2, -48(%rbp)
    jmp label22037
    
label22042:
    movq $2, %rcx
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22038:
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22040:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22038
    
label22039:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22038
    
label22041:
    cmpq $1, $3
    jg label22039
    jmp label22040
    
label22043:
    cmpq %rcx, $3
    jg label22041
    jmp label22042
    
label22045:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22043
    
label22044:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22043
    
label22046:
    cmpq $1, $3
    jg label22044
    jmp label22045
    
label22049:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22048:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22051:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22050:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22053:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22052:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22054:
    cmpq %rcx, %rdx
    jg label22052
    jmp label22053
    
label22059:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22054
    
label22055:
    movq %rcx, %rcx
    jmp label22054
    
label22057:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22055
    
label22056:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22055
    
label22058:
    cmpq $1, $3
    jg label22056
    jmp label22057
    
label22060:
    cmpq %rcx, $3
    jg label22058
    jmp label22059
    
label22062:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22060
    
label22061:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22060
    
label22063:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22061
    jmp label22062
    
label22064:
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22066:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22064
    
label22065:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22064
    
label22067:
    cmpq $1, $3
    jg label22065
    jmp label22066
    
label22073:
    movq $2, -56(%rbp)
    jmp label22063
    
label22068:
    movq $2, %rcx
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22069:
    cmpq %rcx, $3
    jg label22067
    jmp label22068
    
label22071:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22069
    
label22070:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22069
    
label22072:
    cmpq $1, $3
    jg label22070
    jmp label22071
    
label22075:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22074:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22077:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22076:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22079:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22078:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22080:
    cmpq %rcx, %rdx
    jg label22078
    jmp label22079
    
label22081:
    movq %rcx, %rcx
    jmp label22080
    
label22083:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22081
    
label22082:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22081
    
label22084:
    cmpq $1, $3
    jg label22082
    jmp label22083
    
label22085:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22080
    
label22086:
    cmpq %rcx, $3
    jg label22084
    jmp label22085
    
label22088:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22086
    
label22087:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22086
    
label22089:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22087
    jmp label22088
    
label22099:
    movq $2, -64(%rbp)
    jmp label22089
    
label22094:
    movq $2, %rcx
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22090:
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22092:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22090
    
label22091:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22090
    
label22093:
    cmpq $1, $3
    jg label22091
    jmp label22092
    
label22095:
    cmpq %rcx, $3
    jg label22093
    jmp label22094
    
label22097:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22095
    
label22096:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22095
    
label22098:
    cmpq $1, $3
    jg label22096
    jmp label22097
    
label22101:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22100:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22103:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22102:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22105:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22104:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22106:
    cmpq %rcx, %rdx
    jg label22104
    jmp label22105
    
label22111:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22106
    
label22107:
    movq %rcx, %rcx
    jmp label22106
    
label22109:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22107
    
label22108:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22107
    
label22110:
    cmpq $1, $3
    jg label22108
    jmp label22109
    
label22112:
    cmpq %rcx, $3
    jg label22110
    jmp label22111
    
label22114:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22112
    
label22113:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22112
    
label22115:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22113
    jmp label22114
    
label22125:
    movq $2, %rcx
    jmp label22115
    
label22120:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22115
    
label22116:
    movq %rcx, %rcx
    jmp label22115
    
label22118:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22116
    
label22117:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22116
    
label22119:
    cmpq $1, $3
    jg label22117
    jmp label22118
    
label22121:
    cmpq %rcx, $3
    jg label22119
    jmp label22120
    
label22123:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22121
    
label22122:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22121
    
label22124:
    cmpq $1, $3
    jg label22122
    jmp label22123
    
label22127:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22126:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22129:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22128:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22131:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22130:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22132:
    cmpq %rcx, %rdx
    jg label22130
    jmp label22131
    
label22137:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22132
    
label22133:
    movq %rcx, %rcx
    jmp label22132
    
label22135:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22133
    
label22134:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22133
    
label22136:
    cmpq $1, $3
    jg label22134
    jmp label22135
    
label22138:
    cmpq %rcx, $3
    jg label22136
    jmp label22137
    
label22140:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22138
    
label22139:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22138
    
label22141:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22139
    jmp label22140
    
label22146:
    movq $2, %rcx
    movq %rcx, %r12
    jmp label22141
    
label22142:
    movq %rcx, %r12
    jmp label22141
    
label22144:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22142
    
label22143:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22142
    
label22145:
    cmpq $1, $3
    jg label22143
    jmp label22144
    
label22147:
    cmpq %rcx, $3
    jg label22145
    jmp label22146
    
label22149:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22147
    
label22148:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22147
    
label22150:
    cmpq $1, $3
    jg label22148
    jmp label22149
    
label22151:
    movq $2, %r12
    jmp label22141
    
label22153:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22152:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22155:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22154:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22157:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22156:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22158:
    cmpq %rcx, %rdx
    jg label22156
    jmp label22157
    
label22163:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22158
    
label22159:
    movq %rcx, %rcx
    jmp label22158
    
label22161:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22159
    
label22160:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22159
    
label22162:
    cmpq $1, $3
    jg label22160
    jmp label22161
    
label22164:
    cmpq %rcx, $3
    jg label22162
    jmp label22163
    
label22166:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22164
    
label22165:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22164
    
label22167:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22165
    jmp label22166
    
label22177:
    movq $2, %r13
    jmp label22167
    
label22172:
    movq $2, %rcx
    movq %rcx, %r13
    jmp label22167
    
label22168:
    movq %rcx, %r13
    jmp label22167
    
label22170:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22168
    
label22169:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22168
    
label22171:
    cmpq $1, $3
    jg label22169
    jmp label22170
    
label22173:
    cmpq %rcx, $3
    jg label22171
    jmp label22172
    
label22175:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22173
    
label22174:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22173
    
label22176:
    cmpq $1, $3
    jg label22174
    jmp label22175
    
label22179:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22178:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22181:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22180:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22183:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22182:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22184:
    cmpq %rcx, %rdx
    jg label22182
    jmp label22183
    
label22189:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22184
    
label22185:
    movq %rcx, %rcx
    jmp label22184
    
label22187:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22185
    
label22186:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22185
    
label22188:
    cmpq $1, $3
    jg label22186
    jmp label22187
    
label22190:
    cmpq %rcx, $3
    jg label22188
    jmp label22189
    
label22192:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22190
    
label22191:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22190
    
label22193:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22191
    jmp label22192
    
label22194:
    movq %rcx, %r14
    jmp label22193
    
label22195:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22194
    
label22196:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22194
    
label22197:
    cmpq $1, $3
    jg label22195
    jmp label22196
    
label22203:
    movq $2, %r14
    jmp label22193
    
label22198:
    movq $2, %rcx
    movq %rcx, %r14
    jmp label22193
    
label22199:
    cmpq %rcx, $3
    jg label22197
    jmp label22198
    
label22201:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22199
    
label22200:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22199
    
label22202:
    cmpq $1, $3
    jg label22200
    jmp label22201
    
label22205:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22204:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22207:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22206:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22209:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22208:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22210:
    cmpq %rcx, %rdx
    jg label22208
    jmp label22209
    
label22211:
    movq %rcx, %rcx
    jmp label22210
    
label22213:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22211
    
label22212:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22211
    
label22214:
    cmpq $1, $3
    jg label22212
    jmp label22213
    
label22215:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22210
    
label22216:
    cmpq %rcx, $3
    jg label22214
    jmp label22215
    
label22218:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22216
    
label22217:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22216
    
label22219:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22217
    jmp label22218
    
label22229:
    movq $2, %rbx
    jmp label22219
    
label22224:
    movq $2, %rcx
    movq %rcx, %rbx
    jmp label22219
    
label22220:
    movq %rcx, %rbx
    jmp label22219
    
label22222:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22220
    
label22221:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22220
    
label22223:
    cmpq $1, $3
    jg label22221
    jmp label22222
    
label22225:
    cmpq %rcx, $3
    jg label22223
    jmp label22224
    
label22227:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22225
    
label22226:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22225
    
label22228:
    cmpq $1, $3
    jg label22226
    jmp label22227
    
label22230:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22231:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22232:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22233:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22234:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22235:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22236:
    cmpq %rcx, %rdx
    jg label22234
    jmp label22235
    
label22237:
    movq %rcx, %rcx
    jmp label22236
    
label22238:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22237
    
label22239:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22237
    
label22240:
    cmpq $1, $3
    jg label22238
    jmp label22239
    
label22241:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22236
    
label22242:
    cmpq %rcx, $3
    jg label22240
    jmp label22241
    
label22244:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22242
    
label22243:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22242
    
label22246:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22243
    jmp label22244
    
label21951:
    movq %rcx, %rax
    jmp conclusion
    
label21953:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21951
    
label21952:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21951
    
label21955:
    movq $2, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label21954:
    cmpq $1, $3
    jg label21952
    jmp label21953
    
label21956:
    cmpq %rcx, $3
    jg label21954
    jmp label21955
    
label21958:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21956
    
label21957:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21956
    
label22245:
    cmpq $1, $3
    jg label21957
    jmp label21958
    
label22247:
    cmpq $1, %rcx
    je label22245
    jmp label22246
    
label22248:
    movq $1, %rcx
    jmp label22247
    
label22249:
    movq $0, %rcx
    jmp label22247
    
label22250:
    cmpq $8, %rcx
    jg label22248
    jmp label22249
    
label22251:
    movq $8, %rcx
    jmp label22250
    
label22252:
    movq $9, %rcx
    jmp label22250
    
label22253:
    cmpq %rcx, %rdx
    jge label22251
    jmp label22252
    
label22254:
    movq %rcx, %rcx
    jmp label22253
    
label22255:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22254
    
label22256:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22254
    
label22257:
    cmpq $1, $3
    jg label22255
    jmp label22256
    
label22258:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22253
    
label22259:
    cmpq %rcx, $3
    jg label22257
    jmp label22258
    
label22260:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22259
    
label22261:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22259
    
label22262:
    cmpq $1, $3
    jg label22260
    jmp label22261
    
label22263:
    movq %rcx, %rdx
    jmp label22262
    
label22264:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22263
    
label22265:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22263
    
label22266:
    cmpq $1, $3
    jg label22264
    jmp label22265
    
label22267:
    movq $2, %rcx
    movq %rcx, %rdx
    jmp label22262
    
label22268:
    cmpq %rcx, $3
    jg label22266
    jmp label22267
    
label22269:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22268
    
label22270:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22268
    
start:
    cmpq $1, $3
    jg label22269
    jmp label22270
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21653 a21651)
 (list temp21910 a21731)
 (list a21652 a21651)
 (list a21655 a21670)
 (list a21655 a21673)
 (list a21654 a21636)
 (list a21657 temp21862)
 (list temp21915 a21732)
 (list temp21915 a21733)
 (list a21656 temp21862)
 (list a21659 a21658)
 (list temp21913 a21734)
 (list temp21913 a21737)
 (list a21658 temp21860)
 (list a21658 a21659)
 (list a21658 a21660)
 (list a21661 temp21860)
 (list temp21919 a21744)
 (list temp21919 a21745)
 (list a21660 a21658)
 (list temp21923 a21750)
 (list a21637 temp21849)
 (list a21636 temp21844)
 (list a21636 a21654)
 (list a21636 a21651)
 (list a21639 temp21847)
 (list a21639 a21640)
 (list a21639 a21641)
 (list a21638 temp21849)
 (list temp21893 a21706)
 (list temp21893 a21707)
 (list a21641 a21639)
 (list a21640 a21639)
 (list a21642 temp21847)
 (list temp21897 a21712)
 (list temp21902 a21713)
 (list temp21902 a21714)
 (list temp21900 a21718)
 (list temp21900 a21715)
 (list a21649 temp21853)
 (list temp21906 a21725)
 (list temp21906 a21726)
 (list a21651 a21653)
 (list a21651 a21636)
 (list a21651 a21652)
 (list a21650 temp21853)
 (list temp21942 a21773)
 (list temp21942 a21776)
 (list a21687 temp21880)
 (list a21689 a21691)
 (list a21689 a21674)
 (list a21689 a21690)
 (list a21688 temp21880)
 (list temp21944 a21771)
 (list temp21944 a21772)
 (list a21691 a21689)
 (list a21690 a21689)
 (list a21693 a21711)
 (list a21693 a21708)
 (list a21693 temp21884)
 (list a21692 a21674)
 (list temp21948 a21783)
 (list temp21948 a21784)
 (list a21695 temp21889)
 (list a21694 temp21889)
 (list a21697 a21696)
 (list a21696 temp21887)
 (list a21696 a21697)
 (list a21696 a21698)
 (list a21699 temp21887)
 (list a21698 a21696)
 (list temp21926 a21751)
 (list a21669 temp21866)
 (list a21668 temp21866)
 (list a21671 a21670)
 (list a21670 a21672)
 (list a21670 a21655)
 (list a21670 a21671)
 (list a21673 a21655)
 (list temp21931 a21752)
 (list temp21931 a21753)
 (list a21672 a21670)
 (list a21675 temp21876)
 (list temp21929 a21754)
 (list temp21929 a21757)
 (list a21674 a21689)
 (list a21674 a21692)
 (list a21674 temp21871)
 (list a21677 a21678)
 (list a21677 a21679)
 (list a21677 temp21874)
 (list temp21935 a21764)
 (list temp21935 a21765)
 (list a21676 temp21876)
 (list a21679 a21677)
 (list a21678 a21677)
 (list temp21939 a21770)
 (list a21680 temp21874)
 (list temp21847 a21639)
 (list temp21847 a21642)
 (list temp21844 a21636)
 (list a21593 temp21814)
 (list a21592 temp21814)
 (list a21595 a21594)
 (list a21594 a21596)
 (list a21594 a21579)
 (list a21594 a21595)
 (list temp21849 a21637)
 (list temp21849 a21638)
 (list a21597 a21579)
 (list a21596 a21594)
 (list a21599 temp21823)
 (list temp21853 a21649)
 (list temp21853 a21650)
 (list a21598 temp21818)
 (list a21598 a21613)
 (list a21598 a21616)
 (list a21601 temp21821)
 (list a21601 a21602)
 (list a21601 a21603)
 (list a21600 temp21823)
 (list a21603 a21601)
 (list a21602 a21601)
 (list temp21857 temp21870)
 (list a21573 temp21803)
 (list a21572 temp21797)
 (list temp21831 a21617)
 (list a21575 a21576)
 (list a21575 a21577)
 (list a21574 temp21803)
 (list a21577 a21575)
 (list temp21834 a21620)
 (list temp21834 a21623)
 (list a21576 a21575)
 (list a21579 a21594)
 (list a21579 a21597)
 (list a21581 temp21810)
 (list a21580 temp21810)
 (list a21583 a21582)
 (list temp21836 a21618)
 (list temp21836 a21619)
 (list a21582 a21583)
 (list a21582 temp21808)
 (list a21582 a21584)
 (list a21585 temp21808)
 (list a21584 a21582)
 (list temp21840 a21630)
 (list temp21840 a21631)
 (list a21621 a21620)
 (list a21620 a21621)
 (list a21620 a21622)
 (list a21620 temp21834)
 (list a21623 temp21834)
 (list temp21876 a21675)
 (list temp21876 a21676)
 (list a21622 a21620)
 (list temp21880 a21687)
 (list temp21880 a21688)
 (list temp21887 a21696)
 (list temp21887 a21699)
 (list a21631 temp21840)
 (list temp21884 a21693)
 (list a21630 temp21840)
 (list a21633 a21632)
 (list a21632 a21634)
 (list a21632 a21617)
 (list a21632 a21633)
 (list a21635 a21617)
 (list a21634 a21632)
 (list temp21889 a21694)
 (list temp21889 a21695)
 (list temp21862 a21656)
 (list temp21862 a21657)
 (list a21604 temp21821)
 (list temp21860 a21658)
 (list temp21860 a21661)
 (list temp21866 a21668)
 (list temp21866 a21669)
 (list a21611 temp21827)
 (list a21613 a21615)
 (list a21613 a21598)
 (list a21613 a21614)
 (list temp21870 temp21857)
 (list a21612 temp21827)
 (list temp21871 a21674)
 (list a21615 a21613)
 (list a21614 a21613)
 (list a21617 temp21831)
 (list a21617 a21632)
 (list a21617 a21635)
 (list temp21874 a21677)
 (list temp21874 a21680)
 (list a21616 a21598)
 (list a21619 temp21836)
 (list a21618 temp21836)
 (list a21783 temp21948)
 (list a21786 a21785)
 (list a21787 a21785)
 (list a21784 temp21948)
 (list a21785 a21787)
 (list a21785 a21770)
 (list a21785 a21786)
 (list a21788 a21770)
 (list temp21794 a21561)
 (list temp21794 a21562)
 (list temp21792 a21563)
 (list temp21792 a21566)
 (list a21766 a21768)
 (list a21766 a21751)
 (list a21766 a21767)
 (list a21767 a21766)
 (list a21764 temp21935)
 (list a21765 temp21935)
 (list a21770 a21785)
 (list a21770 a21788)
 (list a21770 temp21939)
 (list a21771 temp21944)
 (list a21768 a21766)
 (list a21769 a21751)
 (list a21774 a21773)
 (list a21775 a21773)
 (list a21772 temp21944)
 (list a21773 temp21942)
 (list a21773 a21774)
 (list a21773 a21775)
 (list a21776 temp21942)
 (list temp21814 a21592)
 (list temp21814 a21593)
 (list a21561 temp21794)
 (list temp21818 a21598)
 (list a21563 a21564)
 (list a21563 a21565)
 (list a21563 temp21792)
 (list a21562 temp21794)
 (list a21565 a21563)
 (list a21564 a21563)
 (list temp21823 a21599)
 (list temp21823 a21600)
 (list a21567 temp21799)
 (list a21566 temp21792)
 (list temp21821 a21604)
 (list temp21821 a21601)
 (list a21569 temp21797)
 (list a21569 a21570)
 (list a21569 a21571)
 (list a21568 temp21799)
 (list temp21827 a21611)
 (list temp21827 a21612)
 (list a21571 a21569)
 (list a21570 a21569)
 (list temp21799 a21567)
 (list temp21799 a21568)
 (list temp21797 a21572)
 (list temp21797 a21569)
 (list temp21803 a21573)
 (list temp21803 a21574)
 (list temp21810 a21580)
 (list temp21810 a21581)
 (list temp21808 a21582)
 (list temp21808 a21585)
 (list a21718 temp21900)
 (list a21716 a21715)
 (list a21717 a21715)
 (list a21726 temp21906)
 (list a21727 a21729)
 (list a21727 a21712)
 (list a21727 a21728)
 (list a21725 temp21906)
 (list a21730 a21712)
 (list a21731 a21749)
 (list a21731 temp21910)
 (list a21731 a21746)
 (list a21728 a21727)
 (list a21729 a21727)
 (list a21706 temp21893)
 (list a21707 temp21893)
 (list a21710 a21708)
 (list a21711 a21693)
 (list a21708 a21710)
 (list a21708 a21709)
 (list a21708 a21693)
 (list a21709 a21708)
 (list a21714 temp21902)
 (list a21715 a21716)
 (list a21715 a21717)
 (list a21715 temp21900)
 (list a21712 temp21897)
 (list a21712 a21727)
 (list a21712 a21730)
 (list a21713 temp21902)
 (list a21750 temp21923)
 (list a21751 a21769)
 (list a21751 a21766)
 (list a21751 temp21926)
 (list a21748 a21746)
 (list a21749 a21731)
 (list a21754 temp21929)
 (list a21754 a21755)
 (list a21754 a21756)
 (list a21755 a21754)
 (list a21752 temp21931)
 (list a21753 temp21931)
 (list a21756 a21754)
 (list a21757 temp21929)
 (list a21734 a21735)
 (list a21734 a21736)
 (list a21734 temp21913)
 (list a21735 a21734)
 (list a21732 temp21915)
 (list a21733 temp21915)
 (list a21736 a21734)
 (list a21737 temp21913)
 (list a21746 a21748)
 (list a21746 a21731)
 (list a21746 a21747)
 (list a21747 a21746)
 (list a21744 temp21919)
 (list a21745 temp21919))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdx 1)
 (cons %r11 -4)
 (cons a21579 7)
 (cons a21636 8)
 (cons a21617 9)
 (cons a21598 10)
 (cons a21712 11)
 (cons a21693 12)
 (cons a21674 13)
 (cons a21751 14)
 (cons a21750 15)
 (cons a21731 16)
 (cons temp21870 17)
 (cons a21771 0)
 (cons temp21941 1)
 (cons a21773 0)
 (cons temp21942 0)
 (cons a21772 0)
 (cons a21775 0)
 (cons a21774 0)
 (cons a21776 0)
 (cons temp21944 0)
 (cons a21783 0)
 (cons temp21939 0)
 (cons temp21926 1)
 (cons a21781 0)
 (cons a21779 0)
 (cons a21786 0)
 (cons a21778 0)
 (cons a21780 0)
 (cons a21782 0)
 (cons a21785 0)
 (cons a21784 0)
 (cons a21787 0)
 (cons a21788 0)
 (cons temp21948 0)
 (cons a21777 0)
 (cons a21770 0)
 (cons temp21923 0)
 (cons a21757 0)
 (cons temp21928 1)
 (cons a21753 0)
 (cons a21752 0)
 (cons a21755 0)
 (cons a21754 0)
 (cons a21756 0)
 (cons temp21929 0)
 (cons temp21931 0)
 (cons a21762 0)
 (cons a21759 0)
 (cons a21761 0)
 (cons a21758 0)
 (cons a21763 0)
 (cons a21760 0)
 (cons a21764 0)
 (cons a21767 0)
 (cons a21765 0)
 (cons a21769 0)
 (cons temp21935 0)
 (cons a21768 0)
 (cons a21766 0)
 (cons temp21910 1)
 (cons temp21897 0)
 (cons a21749 0)
 (cons a21740 0)
 (cons a21741 0)
 (cons a21734 0)
 (cons temp21912 1)
 (cons a21733 0)
 (cons a21732 0)
 (cons a21735 0)
 (cons a21737 0)
 (cons temp21913 0)
 (cons temp21915 0)
 (cons a21736 0)
 (cons a21739 0)
 (cons a21738 0)
 (cons a21745 0)
 (cons a21744 0)
 (cons a21747 0)
 (cons a21746 0)
 (cons a21748 0)
 (cons a21743 0)
 (cons temp21919 0)
 (cons a21742 0)
 (cons a21718 0)
 (cons temp21899 1)
 (cons a21714 0)
 (cons a21715 0)
 (cons a21713 0)
 (cons a21717 0)
 (cons temp21900 0)
 (cons temp21902 0)
 (cons a21716 0)
 (cons a21719 0)
 (cons a21720 0)
 (cons a21721 0)
 (cons a21723 0)
 (cons a21722 0)
 (cons a21727 0)
 (cons a21726 0)
 (cons a21724 0)
 (cons a21725 0)
 (cons temp21906 0)
 (cons a21730 0)
 (cons a21728 0)
 (cons a21729 0)
 (cons temp21884 1)
 (cons temp21871 0)
 (cons a21702 0)
 (cons a21703 0)
 (cons a21700 0)
 (cons a21707 0)
 (cons a21710 0)
 (cons a21711 0)
 (cons a21705 0)
 (cons a21701 0)
 (cons a21704 0)
 (cons a21706 0)
 (cons a21699 0)
 (cons temp21886 1)
 (cons a21694 0)
 (cons a21695 0)
 (cons temp21887 0)
 (cons temp21889 0)
 (cons a21698 0)
 (cons a21696 0)
 (cons a21697 0)
 (cons temp21893 0)
 (cons a21709 0)
 (cons a21708 0)
 (cons temp21874 0)
 (cons temp21873 1)
 (cons a21675 0)
 (cons a21678 0)
 (cons a21679 0)
 (cons a21680 0)
 (cons a21676 0)
 (cons a21677 0)
 (cons temp21876 0)
 (cons a21682 0)
 (cons a21687 0)
 (cons a21690 0)
 (cons a21684 0)
 (cons a21688 0)
 (cons a21686 0)
 (cons a21692 0)
 (cons a21691 0)
 (cons temp21857 1)
 (cons temp21880 0)
 (cons a21681 0)
 (cons a21683 0)
 (cons a21685 0)
 (cons a21689 0)
 (cons a21664 0)
 (cons temp21862 0)
 (cons temp21859 1)
 (cons a21658 0)
 (cons a21659 0)
 (cons a21656 0)
 (cons a21657 0)
 (cons a21660 0)
 (cons a21661 0)
 (cons temp21860 0)
 (cons a21662 0)
 (cons a21666 0)
 (cons a21671 0)
 (cons a21668 0)
 (cons a21670 0)
 (cons a21669 0)
 (cons temp21866 0)
 (cons a21663 0)
 (cons temp21844 0)
 (cons a21655 0)
 (cons a21673 0)
 (cons a21667 0)
 (cons a21665 0)
 (cons a21672 0)
 (cons a21649 0)
 (cons a21646 0)
 (cons a21650 0)
 (cons a21644 0)
 (cons a21651 0)
 (cons a21648 0)
 (cons a21641 0)
 (cons temp21846 1)
 (cons a21638 0)
 (cons a21640 0)
 (cons temp21847 0)
 (cons temp21849 0)
 (cons a21639 0)
 (cons a21637 0)
 (cons a21642 0)
 (cons a21652 0)
 (cons temp21853 0)
 (cons a21647 0)
 (cons a21654 0)
 (cons a21643 0)
 (cons a21645 0)
 (cons temp21831 1)
 (cons temp21818 0)
 (cons a21653 0)
 (cons a21620 0)
 (cons temp21833 1)
 (cons a21622 0)
 (cons a21623 0)
 (cons a21619 0)
 (cons temp21834 0)
 (cons a21621 0)
 (cons temp21836 0)
 (cons a21618 0)
 (cons a21629 0)
 (cons a21627 0)
 (cons a21628 0)
 (cons a21633 0)
 (cons a21625 0)
 (cons a21635 0)
 (cons a21630 0)
 (cons a21632 0)
 (cons temp21840 0)
 (cons a21624 0)
 (cons a21631 0)
 (cons a21626 0)
 (cons a21634 0)
 (cons a21610 0)
 (cons a21608 0)
 (cons a21607 0)
 (cons a21606 0)
 (cons a21616 0)
 (cons a21599 0)
 (cons temp21820 1)
 (cons a21604 0)
 (cons a21602 0)
 (cons a21603 0)
 (cons temp21821 0)
 (cons temp21823 0)
 (cons a21600 0)
 (cons a21601 0)
 (cons temp21827 0)
 (cons a21612 0)
 (cons a21609 0)
 (cons a21605 0)
 (cons a21615 0)
 (cons a21613 0)
 (cons a21614 0)
 (cons a21611 0)
 (cons temp21797 0)
 (cons temp21792 1)
 (cons a21572 0)
 (cons a21570 0)
 (cons a21567 0)
 (cons a21571 0)
 (cons a21568 0)
 (cons a21569 0)
 (cons temp21799 0)
 (cons a21573 0)
 (cons a21575 0)
 (cons a21583 0)
 (cons temp21807 1)
 (cons a21582 0)
 (cons a21585 0)
 (cons temp21810 0)
 (cons a21580 0)
 (cons a21581 0)
 (cons a21584 0)
 (cons temp21808 0)
 (cons a21597 0)
 (cons a21563 0)
 (cons a21562 0)
 (cons a21566 0)
 (cons a21591 0)
 (cons a21590 0)
 (cons a21587 0)
 (cons a21589 0)
 (cons a21564 0)
 (cons a21593 0)
 (cons a21577 0)
 (cons temp21803 0)
 (cons a21574 0)
 (cons temp21814 0)
 (cons a21596 0)
 (cons temp21790 0)
 (cons x21560 0)
 (cons a21594 0)
 (cons a21576 0)
 (cons a21595 0)
 (cons a21578 0)
 (cons a21561 0)
 (cons a21588 0)
 (cons a21586 0)
 (cons temp21794 0)
 (cons a21592 0)
 (cons a21565 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21959:
    movq %rcx, %rcx
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %rbx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21960:
    movq %rcx, %rcx
    jmp label21959
    
label21961:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21960
    
label21962:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21960
    
label21963:
    cmpq $1, $3
    jg label21961
    jmp label21962
    
label21964:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21959
    
label21965:
    cmpq %rcx, $3
    jg label21963
    jmp label21964
    
label21967:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21965
    
label21966:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21965
    
label21969:
    movq $2, %rcx
    jmp label21959
    
label21968:
    cmpq $1, $3
    jg label21966
    jmp label21967
    
label21971:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21970:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21973:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21972:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21975:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21974:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21976:
    cmpq %rcx, %rdx
    jg label21974
    jmp label21975
    
label21981:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21976
    
label21977:
    movq %rcx, %rcx
    jmp label21976
    
label21979:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21977
    
label21978:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21977
    
label21980:
    cmpq $1, $3
    jg label21978
    jmp label21979
    
label21982:
    cmpq %rcx, $3
    jg label21980
    jmp label21981
    
label21984:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21982
    
label21983:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21982
    
label21985:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label21983
    jmp label21984
    
label21986:
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21987:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21986
    
label21988:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21986
    
label21989:
    cmpq $1, $3
    jg label21987
    jmp label21988
    
label21995:
    movq $2, -72(%rbp)
    jmp label21985
    
label21990:
    movq $2, %rcx
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21991:
    cmpq %rcx, $3
    jg label21989
    jmp label21990
    
label21993:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21991
    
label21992:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21991
    
label21994:
    cmpq $1, $3
    jg label21992
    jmp label21993
    
label21997:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21996:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21999:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label21998:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label22001:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22000:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22002:
    cmpq %rcx, %rdx
    jg label22000
    jmp label22001
    
label22003:
    movq %rcx, %rcx
    jmp label22002
    
label22005:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22003
    
label22004:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22003
    
label22006:
    cmpq $1, $3
    jg label22004
    jmp label22005
    
label22007:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22002
    
label22008:
    cmpq %rcx, $3
    jg label22006
    jmp label22007
    
label22010:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22008
    
label22009:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22008
    
label22011:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22009
    jmp label22010
    
label22016:
    movq $2, %rcx
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22012:
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22014:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22012
    
label22013:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22012
    
label22015:
    cmpq $1, $3
    jg label22013
    jmp label22014
    
label22017:
    cmpq %rcx, $3
    jg label22015
    jmp label22016
    
label22019:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22017
    
label22018:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22017
    
label22020:
    cmpq $1, $3
    jg label22018
    jmp label22019
    
label22021:
    movq $2, -88(%rbp)
    jmp label22011
    
label22023:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22022:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22025:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22024:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22027:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22026:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22028:
    cmpq %rcx, %rdx
    jg label22026
    jmp label22027
    
label22033:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22028
    
label22029:
    movq %rcx, %rcx
    jmp label22028
    
label22031:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22029
    
label22030:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22029
    
label22032:
    cmpq $1, $3
    jg label22030
    jmp label22031
    
label22034:
    cmpq %rcx, $3
    jg label22032
    jmp label22033
    
label22036:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22034
    
label22035:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22034
    
label22037:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22035
    jmp label22036
    
label22047:
    movq $2, -48(%rbp)
    jmp label22037
    
label22042:
    movq $2, %rcx
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22038:
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22040:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22038
    
label22039:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22038
    
label22041:
    cmpq $1, $3
    jg label22039
    jmp label22040
    
label22043:
    cmpq %rcx, $3
    jg label22041
    jmp label22042
    
label22045:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22043
    
label22044:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22043
    
label22046:
    cmpq $1, $3
    jg label22044
    jmp label22045
    
label22049:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22048:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22051:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22050:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22053:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22052:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22054:
    cmpq %rcx, %rdx
    jg label22052
    jmp label22053
    
label22059:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22054
    
label22055:
    movq %rcx, %rcx
    jmp label22054
    
label22057:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22055
    
label22056:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22055
    
label22058:
    cmpq $1, $3
    jg label22056
    jmp label22057
    
label22060:
    cmpq %rcx, $3
    jg label22058
    jmp label22059
    
label22062:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22060
    
label22061:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22060
    
label22063:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22061
    jmp label22062
    
label22064:
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22066:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22064
    
label22065:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22064
    
label22067:
    cmpq $1, $3
    jg label22065
    jmp label22066
    
label22073:
    movq $2, -56(%rbp)
    jmp label22063
    
label22068:
    movq $2, %rcx
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22069:
    cmpq %rcx, $3
    jg label22067
    jmp label22068
    
label22071:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22069
    
label22070:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22069
    
label22072:
    cmpq $1, $3
    jg label22070
    jmp label22071
    
label22075:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22074:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22077:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22076:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22079:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22078:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22080:
    cmpq %rcx, %rdx
    jg label22078
    jmp label22079
    
label22081:
    movq %rcx, %rcx
    jmp label22080
    
label22083:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22081
    
label22082:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22081
    
label22084:
    cmpq $1, $3
    jg label22082
    jmp label22083
    
label22085:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22080
    
label22086:
    cmpq %rcx, $3
    jg label22084
    jmp label22085
    
label22088:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22086
    
label22087:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22086
    
label22089:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22087
    jmp label22088
    
label22099:
    movq $2, -64(%rbp)
    jmp label22089
    
label22094:
    movq $2, %rcx
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22090:
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22092:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22090
    
label22091:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22090
    
label22093:
    cmpq $1, $3
    jg label22091
    jmp label22092
    
label22095:
    cmpq %rcx, $3
    jg label22093
    jmp label22094
    
label22097:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22095
    
label22096:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22095
    
label22098:
    cmpq $1, $3
    jg label22096
    jmp label22097
    
label22101:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22100:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22103:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22102:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22105:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22104:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22106:
    cmpq %rcx, %rdx
    jg label22104
    jmp label22105
    
label22111:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22106
    
label22107:
    movq %rcx, %rcx
    jmp label22106
    
label22109:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22107
    
label22108:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22107
    
label22110:
    cmpq $1, $3
    jg label22108
    jmp label22109
    
label22112:
    cmpq %rcx, $3
    jg label22110
    jmp label22111
    
label22114:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22112
    
label22113:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22112
    
label22115:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22113
    jmp label22114
    
label22125:
    movq $2, %rcx
    jmp label22115
    
label22120:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22115
    
label22116:
    movq %rcx, %rcx
    jmp label22115
    
label22118:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22116
    
label22117:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22116
    
label22119:
    cmpq $1, $3
    jg label22117
    jmp label22118
    
label22121:
    cmpq %rcx, $3
    jg label22119
    jmp label22120
    
label22123:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22121
    
label22122:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22121
    
label22124:
    cmpq $1, $3
    jg label22122
    jmp label22123
    
label22127:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22126:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22129:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22128:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22131:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22130:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22132:
    cmpq %rcx, %rdx
    jg label22130
    jmp label22131
    
label22137:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22132
    
label22133:
    movq %rcx, %rcx
    jmp label22132
    
label22135:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22133
    
label22134:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22133
    
label22136:
    cmpq $1, $3
    jg label22134
    jmp label22135
    
label22138:
    cmpq %rcx, $3
    jg label22136
    jmp label22137
    
label22140:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22138
    
label22139:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22138
    
label22141:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22139
    jmp label22140
    
label22146:
    movq $2, %rcx
    movq %rcx, %r12
    jmp label22141
    
label22142:
    movq %rcx, %r12
    jmp label22141
    
label22144:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22142
    
label22143:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22142
    
label22145:
    cmpq $1, $3
    jg label22143
    jmp label22144
    
label22147:
    cmpq %rcx, $3
    jg label22145
    jmp label22146
    
label22149:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22147
    
label22148:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22147
    
label22150:
    cmpq $1, $3
    jg label22148
    jmp label22149
    
label22151:
    movq $2, %r12
    jmp label22141
    
label22153:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22152:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22155:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22154:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22157:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22156:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22158:
    cmpq %rcx, %rdx
    jg label22156
    jmp label22157
    
label22163:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22158
    
label22159:
    movq %rcx, %rcx
    jmp label22158
    
label22161:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22159
    
label22160:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22159
    
label22162:
    cmpq $1, $3
    jg label22160
    jmp label22161
    
label22164:
    cmpq %rcx, $3
    jg label22162
    jmp label22163
    
label22166:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22164
    
label22165:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22164
    
label22167:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22165
    jmp label22166
    
label22177:
    movq $2, %r13
    jmp label22167
    
label22172:
    movq $2, %rcx
    movq %rcx, %r13
    jmp label22167
    
label22168:
    movq %rcx, %r13
    jmp label22167
    
label22170:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22168
    
label22169:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22168
    
label22171:
    cmpq $1, $3
    jg label22169
    jmp label22170
    
label22173:
    cmpq %rcx, $3
    jg label22171
    jmp label22172
    
label22175:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22173
    
label22174:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22173
    
label22176:
    cmpq $1, $3
    jg label22174
    jmp label22175
    
label22179:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22178:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22181:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22180:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22183:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22182:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22184:
    cmpq %rcx, %rdx
    jg label22182
    jmp label22183
    
label22189:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22184
    
label22185:
    movq %rcx, %rcx
    jmp label22184
    
label22187:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22185
    
label22186:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22185
    
label22188:
    cmpq $1, $3
    jg label22186
    jmp label22187
    
label22190:
    cmpq %rcx, $3
    jg label22188
    jmp label22189
    
label22192:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22190
    
label22191:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22190
    
label22193:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22191
    jmp label22192
    
label22194:
    movq %rcx, %r14
    jmp label22193
    
label22195:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22194
    
label22196:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22194
    
label22197:
    cmpq $1, $3
    jg label22195
    jmp label22196
    
label22203:
    movq $2, %r14
    jmp label22193
    
label22198:
    movq $2, %rcx
    movq %rcx, %r14
    jmp label22193
    
label22199:
    cmpq %rcx, $3
    jg label22197
    jmp label22198
    
label22201:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22199
    
label22200:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22199
    
label22202:
    cmpq $1, $3
    jg label22200
    jmp label22201
    
label22205:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22204:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22207:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22206:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22209:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22208:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22210:
    cmpq %rcx, %rdx
    jg label22208
    jmp label22209
    
label22211:
    movq %rcx, %rcx
    jmp label22210
    
label22213:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22211
    
label22212:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22211
    
label22214:
    cmpq $1, $3
    jg label22212
    jmp label22213
    
label22215:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22210
    
label22216:
    cmpq %rcx, $3
    jg label22214
    jmp label22215
    
label22218:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22216
    
label22217:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22216
    
label22219:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22217
    jmp label22218
    
label22229:
    movq $2, %rbx
    jmp label22219
    
label22224:
    movq $2, %rcx
    movq %rcx, %rbx
    jmp label22219
    
label22220:
    movq %rcx, %rbx
    jmp label22219
    
label22222:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22220
    
label22221:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22220
    
label22223:
    cmpq $1, $3
    jg label22221
    jmp label22222
    
label22225:
    cmpq %rcx, $3
    jg label22223
    jmp label22224
    
label22227:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22225
    
label22226:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22225
    
label22228:
    cmpq $1, $3
    jg label22226
    jmp label22227
    
label22230:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22231:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22232:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22233:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22234:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22235:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22236:
    cmpq %rcx, %rdx
    jg label22234
    jmp label22235
    
label22237:
    movq %rcx, %rcx
    jmp label22236
    
label22238:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22237
    
label22239:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22237
    
label22240:
    cmpq $1, $3
    jg label22238
    jmp label22239
    
label22241:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22236
    
label22242:
    cmpq %rcx, $3
    jg label22240
    jmp label22241
    
label22244:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22242
    
label22243:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22242
    
label22246:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label22243
    jmp label22244
    
label21951:
    movq %rcx, %rax
    jmp conclusion
    
label21953:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21951
    
label21952:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21951
    
label21955:
    movq $2, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label21954:
    cmpq $1, $3
    jg label21952
    jmp label21953
    
label21956:
    cmpq %rcx, $3
    jg label21954
    jmp label21955
    
label21958:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label21956
    
label21957:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label21956
    
label22245:
    cmpq $1, $3
    jg label21957
    jmp label21958
    
label22247:
    cmpq $1, %rcx
    je label22245
    jmp label22246
    
label22248:
    movq $1, %rcx
    jmp label22247
    
label22249:
    movq $0, %rcx
    jmp label22247
    
label22250:
    cmpq $8, %rcx
    jg label22248
    jmp label22249
    
label22251:
    movq $8, %rcx
    jmp label22250
    
label22252:
    movq $9, %rcx
    jmp label22250
    
label22253:
    cmpq %rcx, %rdx
    jge label22251
    jmp label22252
    
label22254:
    movq %rcx, %rcx
    jmp label22253
    
label22255:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22254
    
label22256:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22254
    
label22257:
    cmpq $1, $3
    jg label22255
    jmp label22256
    
label22258:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22253
    
label22259:
    cmpq %rcx, $3
    jg label22257
    jmp label22258
    
label22260:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22259
    
label22261:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22259
    
label22262:
    cmpq $1, $3
    jg label22260
    jmp label22261
    
label22263:
    movq %rcx, %rdx
    jmp label22262
    
label22264:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22263
    
label22265:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22263
    
label22266:
    cmpq $1, $3
    jg label22264
    jmp label22265
    
label22267:
    movq $2, %rcx
    movq %rcx, %rdx
    jmp label22262
    
label22268:
    cmpq %rcx, $3
    jg label22266
    jmp label22267
    
label22269:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label22268
    
label22270:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label22268
    
start:
    cmpq $1, $3
    jg label22269
    jmp label22270
    



output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: patch instructions @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21653 a21651)
 (list temp21910 a21731)
 (list a21652 a21651)
 (list a21655 a21670)
 (list a21655 a21673)
 (list a21654 a21636)
 (list a21657 temp21862)
 (list temp21915 a21732)
 (list temp21915 a21733)
 (list a21656 temp21862)
 (list a21659 a21658)
 (list temp21913 a21734)
 (list temp21913 a21737)
 (list a21658 temp21860)
 (list a21658 a21659)
 (list a21658 a21660)
 (list a21661 temp21860)
 (list temp21919 a21744)
 (list temp21919 a21745)
 (list a21660 a21658)
 (list temp21923 a21750)
 (list a21637 temp21849)
 (list a21636 temp21844)
 (list a21636 a21654)
 (list a21636 a21651)
 (list a21639 temp21847)
 (list a21639 a21640)
 (list a21639 a21641)
 (list a21638 temp21849)
 (list temp21893 a21706)
 (list temp21893 a21707)
 (list a21641 a21639)
 (list a21640 a21639)
 (list a21642 temp21847)
 (list temp21897 a21712)
 (list temp21902 a21713)
 (list temp21902 a21714)
 (list temp21900 a21718)
 (list temp21900 a21715)
 (list a21649 temp21853)
 (list temp21906 a21725)
 (list temp21906 a21726)
 (list a21651 a21653)
 (list a21651 a21636)
 (list a21651 a21652)
 (list a21650 temp21853)
 (list temp21942 a21773)
 (list temp21942 a21776)
 (list a21687 temp21880)
 (list a21689 a21691)
 (list a21689 a21674)
 (list a21689 a21690)
 (list a21688 temp21880)
 (list temp21944 a21771)
 (list temp21944 a21772)
 (list a21691 a21689)
 (list a21690 a21689)
 (list a21693 a21711)
 (list a21693 a21708)
 (list a21693 temp21884)
 (list a21692 a21674)
 (list temp21948 a21783)
 (list temp21948 a21784)
 (list a21695 temp21889)
 (list a21694 temp21889)
 (list a21697 a21696)
 (list a21696 temp21887)
 (list a21696 a21697)
 (list a21696 a21698)
 (list a21699 temp21887)
 (list a21698 a21696)
 (list temp21926 a21751)
 (list a21669 temp21866)
 (list a21668 temp21866)
 (list a21671 a21670)
 (list a21670 a21672)
 (list a21670 a21655)
 (list a21670 a21671)
 (list a21673 a21655)
 (list temp21931 a21752)
 (list temp21931 a21753)
 (list a21672 a21670)
 (list a21675 temp21876)
 (list temp21929 a21754)
 (list temp21929 a21757)
 (list a21674 a21689)
 (list a21674 a21692)
 (list a21674 temp21871)
 (list a21677 a21678)
 (list a21677 a21679)
 (list a21677 temp21874)
 (list temp21935 a21764)
 (list temp21935 a21765)
 (list a21676 temp21876)
 (list a21679 a21677)
 (list a21678 a21677)
 (list temp21939 a21770)
 (list a21680 temp21874)
 (list temp21847 a21639)
 (list temp21847 a21642)
 (list temp21844 a21636)
 (list a21593 temp21814)
 (list a21592 temp21814)
 (list a21595 a21594)
 (list a21594 a21596)
 (list a21594 a21579)
 (list a21594 a21595)
 (list temp21849 a21637)
 (list temp21849 a21638)
 (list a21597 a21579)
 (list a21596 a21594)
 (list a21599 temp21823)
 (list temp21853 a21649)
 (list temp21853 a21650)
 (list a21598 temp21818)
 (list a21598 a21613)
 (list a21598 a21616)
 (list a21601 temp21821)
 (list a21601 a21602)
 (list a21601 a21603)
 (list a21600 temp21823)
 (list a21603 a21601)
 (list a21602 a21601)
 (list temp21857 temp21870)
 (list a21573 temp21803)
 (list a21572 temp21797)
 (list temp21831 a21617)
 (list a21575 a21576)
 (list a21575 a21577)
 (list a21574 temp21803)
 (list a21577 a21575)
 (list temp21834 a21620)
 (list temp21834 a21623)
 (list a21576 a21575)
 (list a21579 a21594)
 (list a21579 a21597)
 (list a21581 temp21810)
 (list a21580 temp21810)
 (list a21583 a21582)
 (list temp21836 a21618)
 (list temp21836 a21619)
 (list a21582 a21583)
 (list a21582 temp21808)
 (list a21582 a21584)
 (list a21585 temp21808)
 (list a21584 a21582)
 (list temp21840 a21630)
 (list temp21840 a21631)
 (list a21621 a21620)
 (list a21620 a21621)
 (list a21620 a21622)
 (list a21620 temp21834)
 (list a21623 temp21834)
 (list temp21876 a21675)
 (list temp21876 a21676)
 (list a21622 a21620)
 (list temp21880 a21687)
 (list temp21880 a21688)
 (list temp21887 a21696)
 (list temp21887 a21699)
 (list a21631 temp21840)
 (list temp21884 a21693)
 (list a21630 temp21840)
 (list a21633 a21632)
 (list a21632 a21634)
 (list a21632 a21617)
 (list a21632 a21633)
 (list a21635 a21617)
 (list a21634 a21632)
 (list temp21889 a21694)
 (list temp21889 a21695)
 (list temp21862 a21656)
 (list temp21862 a21657)
 (list a21604 temp21821)
 (list temp21860 a21658)
 (list temp21860 a21661)
 (list temp21866 a21668)
 (list temp21866 a21669)
 (list a21611 temp21827)
 (list a21613 a21615)
 (list a21613 a21598)
 (list a21613 a21614)
 (list temp21870 temp21857)
 (list a21612 temp21827)
 (list temp21871 a21674)
 (list a21615 a21613)
 (list a21614 a21613)
 (list a21617 temp21831)
 (list a21617 a21632)
 (list a21617 a21635)
 (list temp21874 a21677)
 (list temp21874 a21680)
 (list a21616 a21598)
 (list a21619 temp21836)
 (list a21618 temp21836)
 (list a21783 temp21948)
 (list a21786 a21785)
 (list a21787 a21785)
 (list a21784 temp21948)
 (list a21785 a21787)
 (list a21785 a21770)
 (list a21785 a21786)
 (list a21788 a21770)
 (list temp21794 a21561)
 (list temp21794 a21562)
 (list temp21792 a21563)
 (list temp21792 a21566)
 (list a21766 a21768)
 (list a21766 a21751)
 (list a21766 a21767)
 (list a21767 a21766)
 (list a21764 temp21935)
 (list a21765 temp21935)
 (list a21770 a21785)
 (list a21770 a21788)
 (list a21770 temp21939)
 (list a21771 temp21944)
 (list a21768 a21766)
 (list a21769 a21751)
 (list a21774 a21773)
 (list a21775 a21773)
 (list a21772 temp21944)
 (list a21773 temp21942)
 (list a21773 a21774)
 (list a21773 a21775)
 (list a21776 temp21942)
 (list temp21814 a21592)
 (list temp21814 a21593)
 (list a21561 temp21794)
 (list temp21818 a21598)
 (list a21563 a21564)
 (list a21563 a21565)
 (list a21563 temp21792)
 (list a21562 temp21794)
 (list a21565 a21563)
 (list a21564 a21563)
 (list temp21823 a21599)
 (list temp21823 a21600)
 (list a21567 temp21799)
 (list a21566 temp21792)
 (list temp21821 a21604)
 (list temp21821 a21601)
 (list a21569 temp21797)
 (list a21569 a21570)
 (list a21569 a21571)
 (list a21568 temp21799)
 (list temp21827 a21611)
 (list temp21827 a21612)
 (list a21571 a21569)
 (list a21570 a21569)
 (list temp21799 a21567)
 (list temp21799 a21568)
 (list temp21797 a21572)
 (list temp21797 a21569)
 (list temp21803 a21573)
 (list temp21803 a21574)
 (list temp21810 a21580)
 (list temp21810 a21581)
 (list temp21808 a21582)
 (list temp21808 a21585)
 (list a21718 temp21900)
 (list a21716 a21715)
 (list a21717 a21715)
 (list a21726 temp21906)
 (list a21727 a21729)
 (list a21727 a21712)
 (list a21727 a21728)
 (list a21725 temp21906)
 (list a21730 a21712)
 (list a21731 a21749)
 (list a21731 temp21910)
 (list a21731 a21746)
 (list a21728 a21727)
 (list a21729 a21727)
 (list a21706 temp21893)
 (list a21707 temp21893)
 (list a21710 a21708)
 (list a21711 a21693)
 (list a21708 a21710)
 (list a21708 a21709)
 (list a21708 a21693)
 (list a21709 a21708)
 (list a21714 temp21902)
 (list a21715 a21716)
 (list a21715 a21717)
 (list a21715 temp21900)
 (list a21712 temp21897)
 (list a21712 a21727)
 (list a21712 a21730)
 (list a21713 temp21902)
 (list a21750 temp21923)
 (list a21751 a21769)
 (list a21751 a21766)
 (list a21751 temp21926)
 (list a21748 a21746)
 (list a21749 a21731)
 (list a21754 temp21929)
 (list a21754 a21755)
 (list a21754 a21756)
 (list a21755 a21754)
 (list a21752 temp21931)
 (list a21753 temp21931)
 (list a21756 a21754)
 (list a21757 temp21929)
 (list a21734 a21735)
 (list a21734 a21736)
 (list a21734 temp21913)
 (list a21735 a21734)
 (list a21732 temp21915)
 (list a21733 temp21915)
 (list a21736 a21734)
 (list a21737 temp21913)
 (list a21746 a21748)
 (list a21746 a21731)
 (list a21746 a21747)
 (list a21747 a21746)
 (list a21744 temp21919)
 (list a21745 temp21919))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdx 1)
 (cons %r11 -4)
 (cons a21579 7)
 (cons a21636 8)
 (cons a21617 9)
 (cons a21598 10)
 (cons a21712 11)
 (cons a21693 12)
 (cons a21674 13)
 (cons a21751 14)
 (cons a21750 15)
 (cons a21731 16)
 (cons temp21870 17)
 (cons a21771 0)
 (cons temp21941 1)
 (cons a21773 0)
 (cons temp21942 0)
 (cons a21772 0)
 (cons a21775 0)
 (cons a21774 0)
 (cons a21776 0)
 (cons temp21944 0)
 (cons a21783 0)
 (cons temp21939 0)
 (cons temp21926 1)
 (cons a21781 0)
 (cons a21779 0)
 (cons a21786 0)
 (cons a21778 0)
 (cons a21780 0)
 (cons a21782 0)
 (cons a21785 0)
 (cons a21784 0)
 (cons a21787 0)
 (cons a21788 0)
 (cons temp21948 0)
 (cons a21777 0)
 (cons a21770 0)
 (cons temp21923 0)
 (cons a21757 0)
 (cons temp21928 1)
 (cons a21753 0)
 (cons a21752 0)
 (cons a21755 0)
 (cons a21754 0)
 (cons a21756 0)
 (cons temp21929 0)
 (cons temp21931 0)
 (cons a21762 0)
 (cons a21759 0)
 (cons a21761 0)
 (cons a21758 0)
 (cons a21763 0)
 (cons a21760 0)
 (cons a21764 0)
 (cons a21767 0)
 (cons a21765 0)
 (cons a21769 0)
 (cons temp21935 0)
 (cons a21768 0)
 (cons a21766 0)
 (cons temp21910 1)
 (cons temp21897 0)
 (cons a21749 0)
 (cons a21740 0)
 (cons a21741 0)
 (cons a21734 0)
 (cons temp21912 1)
 (cons a21733 0)
 (cons a21732 0)
 (cons a21735 0)
 (cons a21737 0)
 (cons temp21913 0)
 (cons temp21915 0)
 (cons a21736 0)
 (cons a21739 0)
 (cons a21738 0)
 (cons a21745 0)
 (cons a21744 0)
 (cons a21747 0)
 (cons a21746 0)
 (cons a21748 0)
 (cons a21743 0)
 (cons temp21919 0)
 (cons a21742 0)
 (cons a21718 0)
 (cons temp21899 1)
 (cons a21714 0)
 (cons a21715 0)
 (cons a21713 0)
 (cons a21717 0)
 (cons temp21900 0)
 (cons temp21902 0)
 (cons a21716 0)
 (cons a21719 0)
 (cons a21720 0)
 (cons a21721 0)
 (cons a21723 0)
 (cons a21722 0)
 (cons a21727 0)
 (cons a21726 0)
 (cons a21724 0)
 (cons a21725 0)
 (cons temp21906 0)
 (cons a21730 0)
 (cons a21728 0)
 (cons a21729 0)
 (cons temp21884 1)
 (cons temp21871 0)
 (cons a21702 0)
 (cons a21703 0)
 (cons a21700 0)
 (cons a21707 0)
 (cons a21710 0)
 (cons a21711 0)
 (cons a21705 0)
 (cons a21701 0)
 (cons a21704 0)
 (cons a21706 0)
 (cons a21699 0)
 (cons temp21886 1)
 (cons a21694 0)
 (cons a21695 0)
 (cons temp21887 0)
 (cons temp21889 0)
 (cons a21698 0)
 (cons a21696 0)
 (cons a21697 0)
 (cons temp21893 0)
 (cons a21709 0)
 (cons a21708 0)
 (cons temp21874 0)
 (cons temp21873 1)
 (cons a21675 0)
 (cons a21678 0)
 (cons a21679 0)
 (cons a21680 0)
 (cons a21676 0)
 (cons a21677 0)
 (cons temp21876 0)
 (cons a21682 0)
 (cons a21687 0)
 (cons a21690 0)
 (cons a21684 0)
 (cons a21688 0)
 (cons a21686 0)
 (cons a21692 0)
 (cons a21691 0)
 (cons temp21857 1)
 (cons temp21880 0)
 (cons a21681 0)
 (cons a21683 0)
 (cons a21685 0)
 (cons a21689 0)
 (cons a21664 0)
 (cons temp21862 0)
 (cons temp21859 1)
 (cons a21658 0)
 (cons a21659 0)
 (cons a21656 0)
 (cons a21657 0)
 (cons a21660 0)
 (cons a21661 0)
 (cons temp21860 0)
 (cons a21662 0)
 (cons a21666 0)
 (cons a21671 0)
 (cons a21668 0)
 (cons a21670 0)
 (cons a21669 0)
 (cons temp21866 0)
 (cons a21663 0)
 (cons temp21844 0)
 (cons a21655 0)
 (cons a21673 0)
 (cons a21667 0)
 (cons a21665 0)
 (cons a21672 0)
 (cons a21649 0)
 (cons a21646 0)
 (cons a21650 0)
 (cons a21644 0)
 (cons a21651 0)
 (cons a21648 0)
 (cons a21641 0)
 (cons temp21846 1)
 (cons a21638 0)
 (cons a21640 0)
 (cons temp21847 0)
 (cons temp21849 0)
 (cons a21639 0)
 (cons a21637 0)
 (cons a21642 0)
 (cons a21652 0)
 (cons temp21853 0)
 (cons a21647 0)
 (cons a21654 0)
 (cons a21643 0)
 (cons a21645 0)
 (cons temp21831 1)
 (cons temp21818 0)
 (cons a21653 0)
 (cons a21620 0)
 (cons temp21833 1)
 (cons a21622 0)
 (cons a21623 0)
 (cons a21619 0)
 (cons temp21834 0)
 (cons a21621 0)
 (cons temp21836 0)
 (cons a21618 0)
 (cons a21629 0)
 (cons a21627 0)
 (cons a21628 0)
 (cons a21633 0)
 (cons a21625 0)
 (cons a21635 0)
 (cons a21630 0)
 (cons a21632 0)
 (cons temp21840 0)
 (cons a21624 0)
 (cons a21631 0)
 (cons a21626 0)
 (cons a21634 0)
 (cons a21610 0)
 (cons a21608 0)
 (cons a21607 0)
 (cons a21606 0)
 (cons a21616 0)
 (cons a21599 0)
 (cons temp21820 1)
 (cons a21604 0)
 (cons a21602 0)
 (cons a21603 0)
 (cons temp21821 0)
 (cons temp21823 0)
 (cons a21600 0)
 (cons a21601 0)
 (cons temp21827 0)
 (cons a21612 0)
 (cons a21609 0)
 (cons a21605 0)
 (cons a21615 0)
 (cons a21613 0)
 (cons a21614 0)
 (cons a21611 0)
 (cons temp21797 0)
 (cons temp21792 1)
 (cons a21572 0)
 (cons a21570 0)
 (cons a21567 0)
 (cons a21571 0)
 (cons a21568 0)
 (cons a21569 0)
 (cons temp21799 0)
 (cons a21573 0)
 (cons a21575 0)
 (cons a21583 0)
 (cons temp21807 1)
 (cons a21582 0)
 (cons a21585 0)
 (cons temp21810 0)
 (cons a21580 0)
 (cons a21581 0)
 (cons a21584 0)
 (cons temp21808 0)
 (cons a21597 0)
 (cons a21563 0)
 (cons a21562 0)
 (cons a21566 0)
 (cons a21591 0)
 (cons a21590 0)
 (cons a21587 0)
 (cons a21589 0)
 (cons a21564 0)
 (cons a21593 0)
 (cons a21577 0)
 (cons temp21803 0)
 (cons a21574 0)
 (cons temp21814 0)
 (cons a21596 0)
 (cons temp21790 0)
 (cons x21560 0)
 (cons a21594 0)
 (cons a21576 0)
 (cons a21595 0)
 (cons a21578 0)
 (cons a21561 0)
 (cons a21588 0)
 (cons a21586 0)
 (cons temp21794 0)
 (cons a21592 0)
 (cons a21565 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21959:
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %rbx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21960:
    jmp label21959
    
label21961:
    movq $1, %rcx
    jmp label21960
    
label21962:
    movq $2, %rcx
    jmp label21960
    
label21963:
    movq $3, %rax
    cmpq $1, %rax
    jg label21961
    jmp label21962
    
label21964:
    movq $2, %rcx
    jmp label21959
    
label21965:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21963
    jmp label21964
    
label21967:
    movq $2, %rcx
    jmp label21965
    
label21966:
    movq $1, %rcx
    jmp label21965
    
label21969:
    movq $2, %rcx
    jmp label21959
    
label21968:
    movq $3, %rax
    cmpq $1, %rax
    jg label21966
    jmp label21967
    
label21971:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21970:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21973:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21972:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21975:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21974:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21976:
    cmpq %rcx, %rdx
    jg label21974
    jmp label21975
    
label21981:
    movq $2, %rcx
    jmp label21976
    
label21977:
    jmp label21976
    
label21979:
    movq $2, %rcx
    jmp label21977
    
label21978:
    movq $1, %rcx
    jmp label21977
    
label21980:
    movq $3, %rax
    cmpq $1, %rax
    jg label21978
    jmp label21979
    
label21982:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21980
    jmp label21981
    
label21984:
    movq $2, %rcx
    jmp label21982
    
label21983:
    movq $1, %rcx
    jmp label21982
    
label21985:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label21983
    jmp label21984
    
label21986:
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21987:
    movq $1, %rcx
    jmp label21986
    
label21988:
    movq $2, %rcx
    jmp label21986
    
label21989:
    movq $3, %rax
    cmpq $1, %rax
    jg label21987
    jmp label21988
    
label21995:
    movq $2, -72(%rbp)
    jmp label21985
    
label21990:
    movq $2, %rcx
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21991:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21989
    jmp label21990
    
label21993:
    movq $2, %rcx
    jmp label21991
    
label21992:
    movq $1, %rcx
    jmp label21991
    
label21994:
    movq $3, %rax
    cmpq $1, %rax
    jg label21992
    jmp label21993
    
label21997:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21996:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21999:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label21998:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label22001:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22000:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22002:
    cmpq %rcx, %rdx
    jg label22000
    jmp label22001
    
label22003:
    jmp label22002
    
label22005:
    movq $2, %rcx
    jmp label22003
    
label22004:
    movq $1, %rcx
    jmp label22003
    
label22006:
    movq $3, %rax
    cmpq $1, %rax
    jg label22004
    jmp label22005
    
label22007:
    movq $2, %rcx
    jmp label22002
    
label22008:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22006
    jmp label22007
    
label22010:
    movq $2, %rcx
    jmp label22008
    
label22009:
    movq $1, %rcx
    jmp label22008
    
label22011:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22009
    jmp label22010
    
label22016:
    movq $2, %rcx
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22012:
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22014:
    movq $2, %rcx
    jmp label22012
    
label22013:
    movq $1, %rcx
    jmp label22012
    
label22015:
    movq $3, %rax
    cmpq $1, %rax
    jg label22013
    jmp label22014
    
label22017:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22015
    jmp label22016
    
label22019:
    movq $2, %rcx
    jmp label22017
    
label22018:
    movq $1, %rcx
    jmp label22017
    
label22020:
    movq $3, %rax
    cmpq $1, %rax
    jg label22018
    jmp label22019
    
label22021:
    movq $2, -88(%rbp)
    jmp label22011
    
label22023:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22022:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22025:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22024:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22027:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22026:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22028:
    cmpq %rcx, %rdx
    jg label22026
    jmp label22027
    
label22033:
    movq $2, %rcx
    jmp label22028
    
label22029:
    jmp label22028
    
label22031:
    movq $2, %rcx
    jmp label22029
    
label22030:
    movq $1, %rcx
    jmp label22029
    
label22032:
    movq $3, %rax
    cmpq $1, %rax
    jg label22030
    jmp label22031
    
label22034:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22032
    jmp label22033
    
label22036:
    movq $2, %rcx
    jmp label22034
    
label22035:
    movq $1, %rcx
    jmp label22034
    
label22037:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22035
    jmp label22036
    
label22047:
    movq $2, -48(%rbp)
    jmp label22037
    
label22042:
    movq $2, %rcx
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22038:
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22040:
    movq $2, %rcx
    jmp label22038
    
label22039:
    movq $1, %rcx
    jmp label22038
    
label22041:
    movq $3, %rax
    cmpq $1, %rax
    jg label22039
    jmp label22040
    
label22043:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22041
    jmp label22042
    
label22045:
    movq $2, %rcx
    jmp label22043
    
label22044:
    movq $1, %rcx
    jmp label22043
    
label22046:
    movq $3, %rax
    cmpq $1, %rax
    jg label22044
    jmp label22045
    
label22049:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22048:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22051:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22050:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22053:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22052:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22054:
    cmpq %rcx, %rdx
    jg label22052
    jmp label22053
    
label22059:
    movq $2, %rcx
    jmp label22054
    
label22055:
    jmp label22054
    
label22057:
    movq $2, %rcx
    jmp label22055
    
label22056:
    movq $1, %rcx
    jmp label22055
    
label22058:
    movq $3, %rax
    cmpq $1, %rax
    jg label22056
    jmp label22057
    
label22060:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22058
    jmp label22059
    
label22062:
    movq $2, %rcx
    jmp label22060
    
label22061:
    movq $1, %rcx
    jmp label22060
    
label22063:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22061
    jmp label22062
    
label22064:
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22066:
    movq $2, %rcx
    jmp label22064
    
label22065:
    movq $1, %rcx
    jmp label22064
    
label22067:
    movq $3, %rax
    cmpq $1, %rax
    jg label22065
    jmp label22066
    
label22073:
    movq $2, -56(%rbp)
    jmp label22063
    
label22068:
    movq $2, %rcx
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22069:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22067
    jmp label22068
    
label22071:
    movq $2, %rcx
    jmp label22069
    
label22070:
    movq $1, %rcx
    jmp label22069
    
label22072:
    movq $3, %rax
    cmpq $1, %rax
    jg label22070
    jmp label22071
    
label22075:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22074:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22077:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22076:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22079:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22078:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22080:
    cmpq %rcx, %rdx
    jg label22078
    jmp label22079
    
label22081:
    jmp label22080
    
label22083:
    movq $2, %rcx
    jmp label22081
    
label22082:
    movq $1, %rcx
    jmp label22081
    
label22084:
    movq $3, %rax
    cmpq $1, %rax
    jg label22082
    jmp label22083
    
label22085:
    movq $2, %rcx
    jmp label22080
    
label22086:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22084
    jmp label22085
    
label22088:
    movq $2, %rcx
    jmp label22086
    
label22087:
    movq $1, %rcx
    jmp label22086
    
label22089:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22087
    jmp label22088
    
label22099:
    movq $2, -64(%rbp)
    jmp label22089
    
label22094:
    movq $2, %rcx
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22090:
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22092:
    movq $2, %rcx
    jmp label22090
    
label22091:
    movq $1, %rcx
    jmp label22090
    
label22093:
    movq $3, %rax
    cmpq $1, %rax
    jg label22091
    jmp label22092
    
label22095:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22093
    jmp label22094
    
label22097:
    movq $2, %rcx
    jmp label22095
    
label22096:
    movq $1, %rcx
    jmp label22095
    
label22098:
    movq $3, %rax
    cmpq $1, %rax
    jg label22096
    jmp label22097
    
label22101:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22100:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22103:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22102:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22105:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22104:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22106:
    cmpq %rcx, %rdx
    jg label22104
    jmp label22105
    
label22111:
    movq $2, %rcx
    jmp label22106
    
label22107:
    jmp label22106
    
label22109:
    movq $2, %rcx
    jmp label22107
    
label22108:
    movq $1, %rcx
    jmp label22107
    
label22110:
    movq $3, %rax
    cmpq $1, %rax
    jg label22108
    jmp label22109
    
label22112:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22110
    jmp label22111
    
label22114:
    movq $2, %rcx
    jmp label22112
    
label22113:
    movq $1, %rcx
    jmp label22112
    
label22115:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22113
    jmp label22114
    
label22125:
    movq $2, %rcx
    jmp label22115
    
label22120:
    movq $2, %rcx
    jmp label22115
    
label22116:
    jmp label22115
    
label22118:
    movq $2, %rcx
    jmp label22116
    
label22117:
    movq $1, %rcx
    jmp label22116
    
label22119:
    movq $3, %rax
    cmpq $1, %rax
    jg label22117
    jmp label22118
    
label22121:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22119
    jmp label22120
    
label22123:
    movq $2, %rcx
    jmp label22121
    
label22122:
    movq $1, %rcx
    jmp label22121
    
label22124:
    movq $3, %rax
    cmpq $1, %rax
    jg label22122
    jmp label22123
    
label22127:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22126:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22129:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22128:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22131:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22130:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22132:
    cmpq %rcx, %rdx
    jg label22130
    jmp label22131
    
label22137:
    movq $2, %rcx
    jmp label22132
    
label22133:
    jmp label22132
    
label22135:
    movq $2, %rcx
    jmp label22133
    
label22134:
    movq $1, %rcx
    jmp label22133
    
label22136:
    movq $3, %rax
    cmpq $1, %rax
    jg label22134
    jmp label22135
    
label22138:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22136
    jmp label22137
    
label22140:
    movq $2, %rcx
    jmp label22138
    
label22139:
    movq $1, %rcx
    jmp label22138
    
label22141:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22139
    jmp label22140
    
label22146:
    movq $2, %rcx
    movq %rcx, %r12
    jmp label22141
    
label22142:
    movq %rcx, %r12
    jmp label22141
    
label22144:
    movq $2, %rcx
    jmp label22142
    
label22143:
    movq $1, %rcx
    jmp label22142
    
label22145:
    movq $3, %rax
    cmpq $1, %rax
    jg label22143
    jmp label22144
    
label22147:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22145
    jmp label22146
    
label22149:
    movq $2, %rcx
    jmp label22147
    
label22148:
    movq $1, %rcx
    jmp label22147
    
label22150:
    movq $3, %rax
    cmpq $1, %rax
    jg label22148
    jmp label22149
    
label22151:
    movq $2, %r12
    jmp label22141
    
label22153:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22152:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22155:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22154:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22157:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22156:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22158:
    cmpq %rcx, %rdx
    jg label22156
    jmp label22157
    
label22163:
    movq $2, %rcx
    jmp label22158
    
label22159:
    jmp label22158
    
label22161:
    movq $2, %rcx
    jmp label22159
    
label22160:
    movq $1, %rcx
    jmp label22159
    
label22162:
    movq $3, %rax
    cmpq $1, %rax
    jg label22160
    jmp label22161
    
label22164:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22162
    jmp label22163
    
label22166:
    movq $2, %rcx
    jmp label22164
    
label22165:
    movq $1, %rcx
    jmp label22164
    
label22167:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22165
    jmp label22166
    
label22177:
    movq $2, %r13
    jmp label22167
    
label22172:
    movq $2, %rcx
    movq %rcx, %r13
    jmp label22167
    
label22168:
    movq %rcx, %r13
    jmp label22167
    
label22170:
    movq $2, %rcx
    jmp label22168
    
label22169:
    movq $1, %rcx
    jmp label22168
    
label22171:
    movq $3, %rax
    cmpq $1, %rax
    jg label22169
    jmp label22170
    
label22173:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22171
    jmp label22172
    
label22175:
    movq $2, %rcx
    jmp label22173
    
label22174:
    movq $1, %rcx
    jmp label22173
    
label22176:
    movq $3, %rax
    cmpq $1, %rax
    jg label22174
    jmp label22175
    
label22179:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22178:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22181:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22180:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22183:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22182:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22184:
    cmpq %rcx, %rdx
    jg label22182
    jmp label22183
    
label22189:
    movq $2, %rcx
    jmp label22184
    
label22185:
    jmp label22184
    
label22187:
    movq $2, %rcx
    jmp label22185
    
label22186:
    movq $1, %rcx
    jmp label22185
    
label22188:
    movq $3, %rax
    cmpq $1, %rax
    jg label22186
    jmp label22187
    
label22190:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22188
    jmp label22189
    
label22192:
    movq $2, %rcx
    jmp label22190
    
label22191:
    movq $1, %rcx
    jmp label22190
    
label22193:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22191
    jmp label22192
    
label22194:
    movq %rcx, %r14
    jmp label22193
    
label22195:
    movq $1, %rcx
    jmp label22194
    
label22196:
    movq $2, %rcx
    jmp label22194
    
label22197:
    movq $3, %rax
    cmpq $1, %rax
    jg label22195
    jmp label22196
    
label22203:
    movq $2, %r14
    jmp label22193
    
label22198:
    movq $2, %rcx
    movq %rcx, %r14
    jmp label22193
    
label22199:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22197
    jmp label22198
    
label22201:
    movq $2, %rcx
    jmp label22199
    
label22200:
    movq $1, %rcx
    jmp label22199
    
label22202:
    movq $3, %rax
    cmpq $1, %rax
    jg label22200
    jmp label22201
    
label22205:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22204:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22207:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22206:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22209:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22208:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22210:
    cmpq %rcx, %rdx
    jg label22208
    jmp label22209
    
label22211:
    jmp label22210
    
label22213:
    movq $2, %rcx
    jmp label22211
    
label22212:
    movq $1, %rcx
    jmp label22211
    
label22214:
    movq $3, %rax
    cmpq $1, %rax
    jg label22212
    jmp label22213
    
label22215:
    movq $2, %rcx
    jmp label22210
    
label22216:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22214
    jmp label22215
    
label22218:
    movq $2, %rcx
    jmp label22216
    
label22217:
    movq $1, %rcx
    jmp label22216
    
label22219:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22217
    jmp label22218
    
label22229:
    movq $2, %rbx
    jmp label22219
    
label22224:
    movq $2, %rcx
    movq %rcx, %rbx
    jmp label22219
    
label22220:
    movq %rcx, %rbx
    jmp label22219
    
label22222:
    movq $2, %rcx
    jmp label22220
    
label22221:
    movq $1, %rcx
    jmp label22220
    
label22223:
    movq $3, %rax
    cmpq $1, %rax
    jg label22221
    jmp label22222
    
label22225:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22223
    jmp label22224
    
label22227:
    movq $2, %rcx
    jmp label22225
    
label22226:
    movq $1, %rcx
    jmp label22225
    
label22228:
    movq $3, %rax
    cmpq $1, %rax
    jg label22226
    jmp label22227
    
label22230:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22231:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22232:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22233:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22234:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22235:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22236:
    cmpq %rcx, %rdx
    jg label22234
    jmp label22235
    
label22237:
    jmp label22236
    
label22238:
    movq $1, %rcx
    jmp label22237
    
label22239:
    movq $2, %rcx
    jmp label22237
    
label22240:
    movq $3, %rax
    cmpq $1, %rax
    jg label22238
    jmp label22239
    
label22241:
    movq $2, %rcx
    jmp label22236
    
label22242:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22240
    jmp label22241
    
label22244:
    movq $2, %rcx
    jmp label22242
    
label22243:
    movq $1, %rcx
    jmp label22242
    
label22246:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22243
    jmp label22244
    
label21951:
    movq %rcx, %rax
    jmp conclusion
    
label21953:
    movq $2, %rcx
    jmp label21951
    
label21952:
    movq $1, %rcx
    jmp label21951
    
label21955:
    movq $2, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label21954:
    movq $3, %rax
    cmpq $1, %rax
    jg label21952
    jmp label21953
    
label21956:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21954
    jmp label21955
    
label21958:
    movq $2, %rcx
    jmp label21956
    
label21957:
    movq $1, %rcx
    jmp label21956
    
label22245:
    movq $3, %rax
    cmpq $1, %rax
    jg label21957
    jmp label21958
    
label22247:
    cmpq $1, %rcx
    je label22245
    jmp label22246
    
label22248:
    movq $1, %rcx
    jmp label22247
    
label22249:
    movq $0, %rcx
    jmp label22247
    
label22250:
    cmpq $8, %rcx
    jg label22248
    jmp label22249
    
label22251:
    movq $8, %rcx
    jmp label22250
    
label22252:
    movq $9, %rcx
    jmp label22250
    
label22253:
    cmpq %rcx, %rdx
    jge label22251
    jmp label22252
    
label22254:
    jmp label22253
    
label22255:
    movq $1, %rcx
    jmp label22254
    
label22256:
    movq $2, %rcx
    jmp label22254
    
label22257:
    movq $3, %rax
    cmpq $1, %rax
    jg label22255
    jmp label22256
    
label22258:
    movq $2, %rcx
    jmp label22253
    
label22259:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22257
    jmp label22258
    
label22260:
    movq $1, %rcx
    jmp label22259
    
label22261:
    movq $2, %rcx
    jmp label22259
    
label22262:
    movq $3, %rax
    cmpq $1, %rax
    jg label22260
    jmp label22261
    
label22263:
    movq %rcx, %rdx
    jmp label22262
    
label22264:
    movq $1, %rcx
    jmp label22263
    
label22265:
    movq $2, %rcx
    jmp label22263
    
label22266:
    movq $3, %rax
    cmpq $1, %rax
    jg label22264
    jmp label22265
    
label22267:
    movq $2, %rcx
    movq %rcx, %rdx
    jmp label22262
    
label22268:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22266
    jmp label22267
    
label22269:
    movq $1, %rcx
    jmp label22268
    
label22270:
    movq $2, %rcx
    jmp label22268
    
start:
    movq $3, %rax
    cmpq $1, %rax
    jg label22269
    jmp label22270
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21653 a21651)
 (list temp21910 a21731)
 (list a21652 a21651)
 (list a21655 a21670)
 (list a21655 a21673)
 (list a21654 a21636)
 (list a21657 temp21862)
 (list temp21915 a21732)
 (list temp21915 a21733)
 (list a21656 temp21862)
 (list a21659 a21658)
 (list temp21913 a21734)
 (list temp21913 a21737)
 (list a21658 temp21860)
 (list a21658 a21659)
 (list a21658 a21660)
 (list a21661 temp21860)
 (list temp21919 a21744)
 (list temp21919 a21745)
 (list a21660 a21658)
 (list temp21923 a21750)
 (list a21637 temp21849)
 (list a21636 temp21844)
 (list a21636 a21654)
 (list a21636 a21651)
 (list a21639 temp21847)
 (list a21639 a21640)
 (list a21639 a21641)
 (list a21638 temp21849)
 (list temp21893 a21706)
 (list temp21893 a21707)
 (list a21641 a21639)
 (list a21640 a21639)
 (list a21642 temp21847)
 (list temp21897 a21712)
 (list temp21902 a21713)
 (list temp21902 a21714)
 (list temp21900 a21718)
 (list temp21900 a21715)
 (list a21649 temp21853)
 (list temp21906 a21725)
 (list temp21906 a21726)
 (list a21651 a21653)
 (list a21651 a21636)
 (list a21651 a21652)
 (list a21650 temp21853)
 (list temp21942 a21773)
 (list temp21942 a21776)
 (list a21687 temp21880)
 (list a21689 a21691)
 (list a21689 a21674)
 (list a21689 a21690)
 (list a21688 temp21880)
 (list temp21944 a21771)
 (list temp21944 a21772)
 (list a21691 a21689)
 (list a21690 a21689)
 (list a21693 a21711)
 (list a21693 a21708)
 (list a21693 temp21884)
 (list a21692 a21674)
 (list temp21948 a21783)
 (list temp21948 a21784)
 (list a21695 temp21889)
 (list a21694 temp21889)
 (list a21697 a21696)
 (list a21696 temp21887)
 (list a21696 a21697)
 (list a21696 a21698)
 (list a21699 temp21887)
 (list a21698 a21696)
 (list temp21926 a21751)
 (list a21669 temp21866)
 (list a21668 temp21866)
 (list a21671 a21670)
 (list a21670 a21672)
 (list a21670 a21655)
 (list a21670 a21671)
 (list a21673 a21655)
 (list temp21931 a21752)
 (list temp21931 a21753)
 (list a21672 a21670)
 (list a21675 temp21876)
 (list temp21929 a21754)
 (list temp21929 a21757)
 (list a21674 a21689)
 (list a21674 a21692)
 (list a21674 temp21871)
 (list a21677 a21678)
 (list a21677 a21679)
 (list a21677 temp21874)
 (list temp21935 a21764)
 (list temp21935 a21765)
 (list a21676 temp21876)
 (list a21679 a21677)
 (list a21678 a21677)
 (list temp21939 a21770)
 (list a21680 temp21874)
 (list temp21847 a21639)
 (list temp21847 a21642)
 (list temp21844 a21636)
 (list a21593 temp21814)
 (list a21592 temp21814)
 (list a21595 a21594)
 (list a21594 a21596)
 (list a21594 a21579)
 (list a21594 a21595)
 (list temp21849 a21637)
 (list temp21849 a21638)
 (list a21597 a21579)
 (list a21596 a21594)
 (list a21599 temp21823)
 (list temp21853 a21649)
 (list temp21853 a21650)
 (list a21598 temp21818)
 (list a21598 a21613)
 (list a21598 a21616)
 (list a21601 temp21821)
 (list a21601 a21602)
 (list a21601 a21603)
 (list a21600 temp21823)
 (list a21603 a21601)
 (list a21602 a21601)
 (list temp21857 temp21870)
 (list a21573 temp21803)
 (list a21572 temp21797)
 (list temp21831 a21617)
 (list a21575 a21576)
 (list a21575 a21577)
 (list a21574 temp21803)
 (list a21577 a21575)
 (list temp21834 a21620)
 (list temp21834 a21623)
 (list a21576 a21575)
 (list a21579 a21594)
 (list a21579 a21597)
 (list a21581 temp21810)
 (list a21580 temp21810)
 (list a21583 a21582)
 (list temp21836 a21618)
 (list temp21836 a21619)
 (list a21582 a21583)
 (list a21582 temp21808)
 (list a21582 a21584)
 (list a21585 temp21808)
 (list a21584 a21582)
 (list temp21840 a21630)
 (list temp21840 a21631)
 (list a21621 a21620)
 (list a21620 a21621)
 (list a21620 a21622)
 (list a21620 temp21834)
 (list a21623 temp21834)
 (list temp21876 a21675)
 (list temp21876 a21676)
 (list a21622 a21620)
 (list temp21880 a21687)
 (list temp21880 a21688)
 (list temp21887 a21696)
 (list temp21887 a21699)
 (list a21631 temp21840)
 (list temp21884 a21693)
 (list a21630 temp21840)
 (list a21633 a21632)
 (list a21632 a21634)
 (list a21632 a21617)
 (list a21632 a21633)
 (list a21635 a21617)
 (list a21634 a21632)
 (list temp21889 a21694)
 (list temp21889 a21695)
 (list temp21862 a21656)
 (list temp21862 a21657)
 (list a21604 temp21821)
 (list temp21860 a21658)
 (list temp21860 a21661)
 (list temp21866 a21668)
 (list temp21866 a21669)
 (list a21611 temp21827)
 (list a21613 a21615)
 (list a21613 a21598)
 (list a21613 a21614)
 (list temp21870 temp21857)
 (list a21612 temp21827)
 (list temp21871 a21674)
 (list a21615 a21613)
 (list a21614 a21613)
 (list a21617 temp21831)
 (list a21617 a21632)
 (list a21617 a21635)
 (list temp21874 a21677)
 (list temp21874 a21680)
 (list a21616 a21598)
 (list a21619 temp21836)
 (list a21618 temp21836)
 (list a21783 temp21948)
 (list a21786 a21785)
 (list a21787 a21785)
 (list a21784 temp21948)
 (list a21785 a21787)
 (list a21785 a21770)
 (list a21785 a21786)
 (list a21788 a21770)
 (list temp21794 a21561)
 (list temp21794 a21562)
 (list temp21792 a21563)
 (list temp21792 a21566)
 (list a21766 a21768)
 (list a21766 a21751)
 (list a21766 a21767)
 (list a21767 a21766)
 (list a21764 temp21935)
 (list a21765 temp21935)
 (list a21770 a21785)
 (list a21770 a21788)
 (list a21770 temp21939)
 (list a21771 temp21944)
 (list a21768 a21766)
 (list a21769 a21751)
 (list a21774 a21773)
 (list a21775 a21773)
 (list a21772 temp21944)
 (list a21773 temp21942)
 (list a21773 a21774)
 (list a21773 a21775)
 (list a21776 temp21942)
 (list temp21814 a21592)
 (list temp21814 a21593)
 (list a21561 temp21794)
 (list temp21818 a21598)
 (list a21563 a21564)
 (list a21563 a21565)
 (list a21563 temp21792)
 (list a21562 temp21794)
 (list a21565 a21563)
 (list a21564 a21563)
 (list temp21823 a21599)
 (list temp21823 a21600)
 (list a21567 temp21799)
 (list a21566 temp21792)
 (list temp21821 a21604)
 (list temp21821 a21601)
 (list a21569 temp21797)
 (list a21569 a21570)
 (list a21569 a21571)
 (list a21568 temp21799)
 (list temp21827 a21611)
 (list temp21827 a21612)
 (list a21571 a21569)
 (list a21570 a21569)
 (list temp21799 a21567)
 (list temp21799 a21568)
 (list temp21797 a21572)
 (list temp21797 a21569)
 (list temp21803 a21573)
 (list temp21803 a21574)
 (list temp21810 a21580)
 (list temp21810 a21581)
 (list temp21808 a21582)
 (list temp21808 a21585)
 (list a21718 temp21900)
 (list a21716 a21715)
 (list a21717 a21715)
 (list a21726 temp21906)
 (list a21727 a21729)
 (list a21727 a21712)
 (list a21727 a21728)
 (list a21725 temp21906)
 (list a21730 a21712)
 (list a21731 a21749)
 (list a21731 temp21910)
 (list a21731 a21746)
 (list a21728 a21727)
 (list a21729 a21727)
 (list a21706 temp21893)
 (list a21707 temp21893)
 (list a21710 a21708)
 (list a21711 a21693)
 (list a21708 a21710)
 (list a21708 a21709)
 (list a21708 a21693)
 (list a21709 a21708)
 (list a21714 temp21902)
 (list a21715 a21716)
 (list a21715 a21717)
 (list a21715 temp21900)
 (list a21712 temp21897)
 (list a21712 a21727)
 (list a21712 a21730)
 (list a21713 temp21902)
 (list a21750 temp21923)
 (list a21751 a21769)
 (list a21751 a21766)
 (list a21751 temp21926)
 (list a21748 a21746)
 (list a21749 a21731)
 (list a21754 temp21929)
 (list a21754 a21755)
 (list a21754 a21756)
 (list a21755 a21754)
 (list a21752 temp21931)
 (list a21753 temp21931)
 (list a21756 a21754)
 (list a21757 temp21929)
 (list a21734 a21735)
 (list a21734 a21736)
 (list a21734 temp21913)
 (list a21735 a21734)
 (list a21732 temp21915)
 (list a21733 temp21915)
 (list a21736 a21734)
 (list a21737 temp21913)
 (list a21746 a21748)
 (list a21746 a21731)
 (list a21746 a21747)
 (list a21747 a21746)
 (list a21744 temp21919)
 (list a21745 temp21919))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdx 1)
 (cons %r11 -4)
 (cons a21579 7)
 (cons a21636 8)
 (cons a21617 9)
 (cons a21598 10)
 (cons a21712 11)
 (cons a21693 12)
 (cons a21674 13)
 (cons a21751 14)
 (cons a21750 15)
 (cons a21731 16)
 (cons temp21870 17)
 (cons a21771 0)
 (cons temp21941 1)
 (cons a21773 0)
 (cons temp21942 0)
 (cons a21772 0)
 (cons a21775 0)
 (cons a21774 0)
 (cons a21776 0)
 (cons temp21944 0)
 (cons a21783 0)
 (cons temp21939 0)
 (cons temp21926 1)
 (cons a21781 0)
 (cons a21779 0)
 (cons a21786 0)
 (cons a21778 0)
 (cons a21780 0)
 (cons a21782 0)
 (cons a21785 0)
 (cons a21784 0)
 (cons a21787 0)
 (cons a21788 0)
 (cons temp21948 0)
 (cons a21777 0)
 (cons a21770 0)
 (cons temp21923 0)
 (cons a21757 0)
 (cons temp21928 1)
 (cons a21753 0)
 (cons a21752 0)
 (cons a21755 0)
 (cons a21754 0)
 (cons a21756 0)
 (cons temp21929 0)
 (cons temp21931 0)
 (cons a21762 0)
 (cons a21759 0)
 (cons a21761 0)
 (cons a21758 0)
 (cons a21763 0)
 (cons a21760 0)
 (cons a21764 0)
 (cons a21767 0)
 (cons a21765 0)
 (cons a21769 0)
 (cons temp21935 0)
 (cons a21768 0)
 (cons a21766 0)
 (cons temp21910 1)
 (cons temp21897 0)
 (cons a21749 0)
 (cons a21740 0)
 (cons a21741 0)
 (cons a21734 0)
 (cons temp21912 1)
 (cons a21733 0)
 (cons a21732 0)
 (cons a21735 0)
 (cons a21737 0)
 (cons temp21913 0)
 (cons temp21915 0)
 (cons a21736 0)
 (cons a21739 0)
 (cons a21738 0)
 (cons a21745 0)
 (cons a21744 0)
 (cons a21747 0)
 (cons a21746 0)
 (cons a21748 0)
 (cons a21743 0)
 (cons temp21919 0)
 (cons a21742 0)
 (cons a21718 0)
 (cons temp21899 1)
 (cons a21714 0)
 (cons a21715 0)
 (cons a21713 0)
 (cons a21717 0)
 (cons temp21900 0)
 (cons temp21902 0)
 (cons a21716 0)
 (cons a21719 0)
 (cons a21720 0)
 (cons a21721 0)
 (cons a21723 0)
 (cons a21722 0)
 (cons a21727 0)
 (cons a21726 0)
 (cons a21724 0)
 (cons a21725 0)
 (cons temp21906 0)
 (cons a21730 0)
 (cons a21728 0)
 (cons a21729 0)
 (cons temp21884 1)
 (cons temp21871 0)
 (cons a21702 0)
 (cons a21703 0)
 (cons a21700 0)
 (cons a21707 0)
 (cons a21710 0)
 (cons a21711 0)
 (cons a21705 0)
 (cons a21701 0)
 (cons a21704 0)
 (cons a21706 0)
 (cons a21699 0)
 (cons temp21886 1)
 (cons a21694 0)
 (cons a21695 0)
 (cons temp21887 0)
 (cons temp21889 0)
 (cons a21698 0)
 (cons a21696 0)
 (cons a21697 0)
 (cons temp21893 0)
 (cons a21709 0)
 (cons a21708 0)
 (cons temp21874 0)
 (cons temp21873 1)
 (cons a21675 0)
 (cons a21678 0)
 (cons a21679 0)
 (cons a21680 0)
 (cons a21676 0)
 (cons a21677 0)
 (cons temp21876 0)
 (cons a21682 0)
 (cons a21687 0)
 (cons a21690 0)
 (cons a21684 0)
 (cons a21688 0)
 (cons a21686 0)
 (cons a21692 0)
 (cons a21691 0)
 (cons temp21857 1)
 (cons temp21880 0)
 (cons a21681 0)
 (cons a21683 0)
 (cons a21685 0)
 (cons a21689 0)
 (cons a21664 0)
 (cons temp21862 0)
 (cons temp21859 1)
 (cons a21658 0)
 (cons a21659 0)
 (cons a21656 0)
 (cons a21657 0)
 (cons a21660 0)
 (cons a21661 0)
 (cons temp21860 0)
 (cons a21662 0)
 (cons a21666 0)
 (cons a21671 0)
 (cons a21668 0)
 (cons a21670 0)
 (cons a21669 0)
 (cons temp21866 0)
 (cons a21663 0)
 (cons temp21844 0)
 (cons a21655 0)
 (cons a21673 0)
 (cons a21667 0)
 (cons a21665 0)
 (cons a21672 0)
 (cons a21649 0)
 (cons a21646 0)
 (cons a21650 0)
 (cons a21644 0)
 (cons a21651 0)
 (cons a21648 0)
 (cons a21641 0)
 (cons temp21846 1)
 (cons a21638 0)
 (cons a21640 0)
 (cons temp21847 0)
 (cons temp21849 0)
 (cons a21639 0)
 (cons a21637 0)
 (cons a21642 0)
 (cons a21652 0)
 (cons temp21853 0)
 (cons a21647 0)
 (cons a21654 0)
 (cons a21643 0)
 (cons a21645 0)
 (cons temp21831 1)
 (cons temp21818 0)
 (cons a21653 0)
 (cons a21620 0)
 (cons temp21833 1)
 (cons a21622 0)
 (cons a21623 0)
 (cons a21619 0)
 (cons temp21834 0)
 (cons a21621 0)
 (cons temp21836 0)
 (cons a21618 0)
 (cons a21629 0)
 (cons a21627 0)
 (cons a21628 0)
 (cons a21633 0)
 (cons a21625 0)
 (cons a21635 0)
 (cons a21630 0)
 (cons a21632 0)
 (cons temp21840 0)
 (cons a21624 0)
 (cons a21631 0)
 (cons a21626 0)
 (cons a21634 0)
 (cons a21610 0)
 (cons a21608 0)
 (cons a21607 0)
 (cons a21606 0)
 (cons a21616 0)
 (cons a21599 0)
 (cons temp21820 1)
 (cons a21604 0)
 (cons a21602 0)
 (cons a21603 0)
 (cons temp21821 0)
 (cons temp21823 0)
 (cons a21600 0)
 (cons a21601 0)
 (cons temp21827 0)
 (cons a21612 0)
 (cons a21609 0)
 (cons a21605 0)
 (cons a21615 0)
 (cons a21613 0)
 (cons a21614 0)
 (cons a21611 0)
 (cons temp21797 0)
 (cons temp21792 1)
 (cons a21572 0)
 (cons a21570 0)
 (cons a21567 0)
 (cons a21571 0)
 (cons a21568 0)
 (cons a21569 0)
 (cons temp21799 0)
 (cons a21573 0)
 (cons a21575 0)
 (cons a21583 0)
 (cons temp21807 1)
 (cons a21582 0)
 (cons a21585 0)
 (cons temp21810 0)
 (cons a21580 0)
 (cons a21581 0)
 (cons a21584 0)
 (cons temp21808 0)
 (cons a21597 0)
 (cons a21563 0)
 (cons a21562 0)
 (cons a21566 0)
 (cons a21591 0)
 (cons a21590 0)
 (cons a21587 0)
 (cons a21589 0)
 (cons a21564 0)
 (cons a21593 0)
 (cons a21577 0)
 (cons temp21803 0)
 (cons a21574 0)
 (cons temp21814 0)
 (cons a21596 0)
 (cons temp21790 0)
 (cons x21560 0)
 (cons a21594 0)
 (cons a21576 0)
 (cons a21595 0)
 (cons a21578 0)
 (cons a21561 0)
 (cons a21588 0)
 (cons a21586 0)
 (cons temp21794 0)
 (cons a21592 0)
 (cons a21565 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21959:
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %rbx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21960:
    jmp label21959
    
label21961:
    movq $1, %rcx
    jmp label21960
    
label21962:
    movq $2, %rcx
    jmp label21960
    
label21963:
    movq $3, %rax
    cmpq $1, %rax
    jg label21961
    jmp label21962
    
label21964:
    movq $2, %rcx
    jmp label21959
    
label21965:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21963
    jmp label21964
    
label21967:
    movq $2, %rcx
    jmp label21965
    
label21966:
    movq $1, %rcx
    jmp label21965
    
label21969:
    movq $2, %rcx
    jmp label21959
    
label21968:
    movq $3, %rax
    cmpq $1, %rax
    jg label21966
    jmp label21967
    
label21971:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21970:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21973:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21972:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21975:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21974:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21976:
    cmpq %rcx, %rdx
    jg label21974
    jmp label21975
    
label21981:
    movq $2, %rcx
    jmp label21976
    
label21977:
    jmp label21976
    
label21979:
    movq $2, %rcx
    jmp label21977
    
label21978:
    movq $1, %rcx
    jmp label21977
    
label21980:
    movq $3, %rax
    cmpq $1, %rax
    jg label21978
    jmp label21979
    
label21982:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21980
    jmp label21981
    
label21984:
    movq $2, %rcx
    jmp label21982
    
label21983:
    movq $1, %rcx
    jmp label21982
    
label21985:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label21983
    jmp label21984
    
label21986:
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21987:
    movq $1, %rcx
    jmp label21986
    
label21988:
    movq $2, %rcx
    jmp label21986
    
label21989:
    movq $3, %rax
    cmpq $1, %rax
    jg label21987
    jmp label21988
    
label21995:
    movq $2, -72(%rbp)
    jmp label21985
    
label21990:
    movq $2, %rcx
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21991:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21989
    jmp label21990
    
label21993:
    movq $2, %rcx
    jmp label21991
    
label21992:
    movq $1, %rcx
    jmp label21991
    
label21994:
    movq $3, %rax
    cmpq $1, %rax
    jg label21992
    jmp label21993
    
label21997:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21996:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21999:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label21998:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label22001:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22000:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22002:
    cmpq %rcx, %rdx
    jg label22000
    jmp label22001
    
label22003:
    jmp label22002
    
label22005:
    movq $2, %rcx
    jmp label22003
    
label22004:
    movq $1, %rcx
    jmp label22003
    
label22006:
    movq $3, %rax
    cmpq $1, %rax
    jg label22004
    jmp label22005
    
label22007:
    movq $2, %rcx
    jmp label22002
    
label22008:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22006
    jmp label22007
    
label22010:
    movq $2, %rcx
    jmp label22008
    
label22009:
    movq $1, %rcx
    jmp label22008
    
label22011:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22009
    jmp label22010
    
label22016:
    movq $2, %rcx
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22012:
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22014:
    movq $2, %rcx
    jmp label22012
    
label22013:
    movq $1, %rcx
    jmp label22012
    
label22015:
    movq $3, %rax
    cmpq $1, %rax
    jg label22013
    jmp label22014
    
label22017:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22015
    jmp label22016
    
label22019:
    movq $2, %rcx
    jmp label22017
    
label22018:
    movq $1, %rcx
    jmp label22017
    
label22020:
    movq $3, %rax
    cmpq $1, %rax
    jg label22018
    jmp label22019
    
label22021:
    movq $2, -88(%rbp)
    jmp label22011
    
label22023:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22022:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22025:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22024:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22027:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22026:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22028:
    cmpq %rcx, %rdx
    jg label22026
    jmp label22027
    
label22033:
    movq $2, %rcx
    jmp label22028
    
label22029:
    jmp label22028
    
label22031:
    movq $2, %rcx
    jmp label22029
    
label22030:
    movq $1, %rcx
    jmp label22029
    
label22032:
    movq $3, %rax
    cmpq $1, %rax
    jg label22030
    jmp label22031
    
label22034:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22032
    jmp label22033
    
label22036:
    movq $2, %rcx
    jmp label22034
    
label22035:
    movq $1, %rcx
    jmp label22034
    
label22037:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22035
    jmp label22036
    
label22047:
    movq $2, -48(%rbp)
    jmp label22037
    
label22042:
    movq $2, %rcx
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22038:
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22040:
    movq $2, %rcx
    jmp label22038
    
label22039:
    movq $1, %rcx
    jmp label22038
    
label22041:
    movq $3, %rax
    cmpq $1, %rax
    jg label22039
    jmp label22040
    
label22043:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22041
    jmp label22042
    
label22045:
    movq $2, %rcx
    jmp label22043
    
label22044:
    movq $1, %rcx
    jmp label22043
    
label22046:
    movq $3, %rax
    cmpq $1, %rax
    jg label22044
    jmp label22045
    
label22049:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22048:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22051:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22050:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22053:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22052:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22054:
    cmpq %rcx, %rdx
    jg label22052
    jmp label22053
    
label22059:
    movq $2, %rcx
    jmp label22054
    
label22055:
    jmp label22054
    
label22057:
    movq $2, %rcx
    jmp label22055
    
label22056:
    movq $1, %rcx
    jmp label22055
    
label22058:
    movq $3, %rax
    cmpq $1, %rax
    jg label22056
    jmp label22057
    
label22060:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22058
    jmp label22059
    
label22062:
    movq $2, %rcx
    jmp label22060
    
label22061:
    movq $1, %rcx
    jmp label22060
    
label22063:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22061
    jmp label22062
    
label22064:
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22066:
    movq $2, %rcx
    jmp label22064
    
label22065:
    movq $1, %rcx
    jmp label22064
    
label22067:
    movq $3, %rax
    cmpq $1, %rax
    jg label22065
    jmp label22066
    
label22073:
    movq $2, -56(%rbp)
    jmp label22063
    
label22068:
    movq $2, %rcx
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22069:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22067
    jmp label22068
    
label22071:
    movq $2, %rcx
    jmp label22069
    
label22070:
    movq $1, %rcx
    jmp label22069
    
label22072:
    movq $3, %rax
    cmpq $1, %rax
    jg label22070
    jmp label22071
    
label22075:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22074:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22077:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22076:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22079:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22078:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22080:
    cmpq %rcx, %rdx
    jg label22078
    jmp label22079
    
label22081:
    jmp label22080
    
label22083:
    movq $2, %rcx
    jmp label22081
    
label22082:
    movq $1, %rcx
    jmp label22081
    
label22084:
    movq $3, %rax
    cmpq $1, %rax
    jg label22082
    jmp label22083
    
label22085:
    movq $2, %rcx
    jmp label22080
    
label22086:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22084
    jmp label22085
    
label22088:
    movq $2, %rcx
    jmp label22086
    
label22087:
    movq $1, %rcx
    jmp label22086
    
label22089:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22087
    jmp label22088
    
label22099:
    movq $2, -64(%rbp)
    jmp label22089
    
label22094:
    movq $2, %rcx
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22090:
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22092:
    movq $2, %rcx
    jmp label22090
    
label22091:
    movq $1, %rcx
    jmp label22090
    
label22093:
    movq $3, %rax
    cmpq $1, %rax
    jg label22091
    jmp label22092
    
label22095:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22093
    jmp label22094
    
label22097:
    movq $2, %rcx
    jmp label22095
    
label22096:
    movq $1, %rcx
    jmp label22095
    
label22098:
    movq $3, %rax
    cmpq $1, %rax
    jg label22096
    jmp label22097
    
label22101:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22100:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22103:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22102:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22105:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22104:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22106:
    cmpq %rcx, %rdx
    jg label22104
    jmp label22105
    
label22111:
    movq $2, %rcx
    jmp label22106
    
label22107:
    jmp label22106
    
label22109:
    movq $2, %rcx
    jmp label22107
    
label22108:
    movq $1, %rcx
    jmp label22107
    
label22110:
    movq $3, %rax
    cmpq $1, %rax
    jg label22108
    jmp label22109
    
label22112:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22110
    jmp label22111
    
label22114:
    movq $2, %rcx
    jmp label22112
    
label22113:
    movq $1, %rcx
    jmp label22112
    
label22115:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22113
    jmp label22114
    
label22125:
    movq $2, %rcx
    jmp label22115
    
label22120:
    movq $2, %rcx
    jmp label22115
    
label22116:
    jmp label22115
    
label22118:
    movq $2, %rcx
    jmp label22116
    
label22117:
    movq $1, %rcx
    jmp label22116
    
label22119:
    movq $3, %rax
    cmpq $1, %rax
    jg label22117
    jmp label22118
    
label22121:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22119
    jmp label22120
    
label22123:
    movq $2, %rcx
    jmp label22121
    
label22122:
    movq $1, %rcx
    jmp label22121
    
label22124:
    movq $3, %rax
    cmpq $1, %rax
    jg label22122
    jmp label22123
    
label22127:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22126:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22129:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22128:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22131:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22130:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22132:
    cmpq %rcx, %rdx
    jg label22130
    jmp label22131
    
label22137:
    movq $2, %rcx
    jmp label22132
    
label22133:
    jmp label22132
    
label22135:
    movq $2, %rcx
    jmp label22133
    
label22134:
    movq $1, %rcx
    jmp label22133
    
label22136:
    movq $3, %rax
    cmpq $1, %rax
    jg label22134
    jmp label22135
    
label22138:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22136
    jmp label22137
    
label22140:
    movq $2, %rcx
    jmp label22138
    
label22139:
    movq $1, %rcx
    jmp label22138
    
label22141:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22139
    jmp label22140
    
label22146:
    movq $2, %rcx
    movq %rcx, %r12
    jmp label22141
    
label22142:
    movq %rcx, %r12
    jmp label22141
    
label22144:
    movq $2, %rcx
    jmp label22142
    
label22143:
    movq $1, %rcx
    jmp label22142
    
label22145:
    movq $3, %rax
    cmpq $1, %rax
    jg label22143
    jmp label22144
    
label22147:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22145
    jmp label22146
    
label22149:
    movq $2, %rcx
    jmp label22147
    
label22148:
    movq $1, %rcx
    jmp label22147
    
label22150:
    movq $3, %rax
    cmpq $1, %rax
    jg label22148
    jmp label22149
    
label22151:
    movq $2, %r12
    jmp label22141
    
label22153:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22152:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22155:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22154:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22157:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22156:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22158:
    cmpq %rcx, %rdx
    jg label22156
    jmp label22157
    
label22163:
    movq $2, %rcx
    jmp label22158
    
label22159:
    jmp label22158
    
label22161:
    movq $2, %rcx
    jmp label22159
    
label22160:
    movq $1, %rcx
    jmp label22159
    
label22162:
    movq $3, %rax
    cmpq $1, %rax
    jg label22160
    jmp label22161
    
label22164:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22162
    jmp label22163
    
label22166:
    movq $2, %rcx
    jmp label22164
    
label22165:
    movq $1, %rcx
    jmp label22164
    
label22167:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22165
    jmp label22166
    
label22177:
    movq $2, %r13
    jmp label22167
    
label22172:
    movq $2, %rcx
    movq %rcx, %r13
    jmp label22167
    
label22168:
    movq %rcx, %r13
    jmp label22167
    
label22170:
    movq $2, %rcx
    jmp label22168
    
label22169:
    movq $1, %rcx
    jmp label22168
    
label22171:
    movq $3, %rax
    cmpq $1, %rax
    jg label22169
    jmp label22170
    
label22173:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22171
    jmp label22172
    
label22175:
    movq $2, %rcx
    jmp label22173
    
label22174:
    movq $1, %rcx
    jmp label22173
    
label22176:
    movq $3, %rax
    cmpq $1, %rax
    jg label22174
    jmp label22175
    
label22179:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22178:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22181:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22180:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22183:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22182:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22184:
    cmpq %rcx, %rdx
    jg label22182
    jmp label22183
    
label22189:
    movq $2, %rcx
    jmp label22184
    
label22185:
    jmp label22184
    
label22187:
    movq $2, %rcx
    jmp label22185
    
label22186:
    movq $1, %rcx
    jmp label22185
    
label22188:
    movq $3, %rax
    cmpq $1, %rax
    jg label22186
    jmp label22187
    
label22190:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22188
    jmp label22189
    
label22192:
    movq $2, %rcx
    jmp label22190
    
label22191:
    movq $1, %rcx
    jmp label22190
    
label22193:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22191
    jmp label22192
    
label22194:
    movq %rcx, %r14
    jmp label22193
    
label22195:
    movq $1, %rcx
    jmp label22194
    
label22196:
    movq $2, %rcx
    jmp label22194
    
label22197:
    movq $3, %rax
    cmpq $1, %rax
    jg label22195
    jmp label22196
    
label22203:
    movq $2, %r14
    jmp label22193
    
label22198:
    movq $2, %rcx
    movq %rcx, %r14
    jmp label22193
    
label22199:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22197
    jmp label22198
    
label22201:
    movq $2, %rcx
    jmp label22199
    
label22200:
    movq $1, %rcx
    jmp label22199
    
label22202:
    movq $3, %rax
    cmpq $1, %rax
    jg label22200
    jmp label22201
    
label22205:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22204:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22207:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22206:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22209:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22208:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22210:
    cmpq %rcx, %rdx
    jg label22208
    jmp label22209
    
label22211:
    jmp label22210
    
label22213:
    movq $2, %rcx
    jmp label22211
    
label22212:
    movq $1, %rcx
    jmp label22211
    
label22214:
    movq $3, %rax
    cmpq $1, %rax
    jg label22212
    jmp label22213
    
label22215:
    movq $2, %rcx
    jmp label22210
    
label22216:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22214
    jmp label22215
    
label22218:
    movq $2, %rcx
    jmp label22216
    
label22217:
    movq $1, %rcx
    jmp label22216
    
label22219:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22217
    jmp label22218
    
label22229:
    movq $2, %rbx
    jmp label22219
    
label22224:
    movq $2, %rcx
    movq %rcx, %rbx
    jmp label22219
    
label22220:
    movq %rcx, %rbx
    jmp label22219
    
label22222:
    movq $2, %rcx
    jmp label22220
    
label22221:
    movq $1, %rcx
    jmp label22220
    
label22223:
    movq $3, %rax
    cmpq $1, %rax
    jg label22221
    jmp label22222
    
label22225:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22223
    jmp label22224
    
label22227:
    movq $2, %rcx
    jmp label22225
    
label22226:
    movq $1, %rcx
    jmp label22225
    
label22228:
    movq $3, %rax
    cmpq $1, %rax
    jg label22226
    jmp label22227
    
label22230:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22231:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22232:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22233:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22234:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22235:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22236:
    cmpq %rcx, %rdx
    jg label22234
    jmp label22235
    
label22237:
    jmp label22236
    
label22238:
    movq $1, %rcx
    jmp label22237
    
label22239:
    movq $2, %rcx
    jmp label22237
    
label22240:
    movq $3, %rax
    cmpq $1, %rax
    jg label22238
    jmp label22239
    
label22241:
    movq $2, %rcx
    jmp label22236
    
label22242:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22240
    jmp label22241
    
label22244:
    movq $2, %rcx
    jmp label22242
    
label22243:
    movq $1, %rcx
    jmp label22242
    
label22246:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22243
    jmp label22244
    
label21951:
    movq %rcx, %rax
    jmp conclusion
    
label21953:
    movq $2, %rcx
    jmp label21951
    
label21952:
    movq $1, %rcx
    jmp label21951
    
label21955:
    movq $2, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label21954:
    movq $3, %rax
    cmpq $1, %rax
    jg label21952
    jmp label21953
    
label21956:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21954
    jmp label21955
    
label21958:
    movq $2, %rcx
    jmp label21956
    
label21957:
    movq $1, %rcx
    jmp label21956
    
label22245:
    movq $3, %rax
    cmpq $1, %rax
    jg label21957
    jmp label21958
    
label22247:
    cmpq $1, %rcx
    je label22245
    jmp label22246
    
label22248:
    movq $1, %rcx
    jmp label22247
    
label22249:
    movq $0, %rcx
    jmp label22247
    
label22250:
    cmpq $8, %rcx
    jg label22248
    jmp label22249
    
label22251:
    movq $8, %rcx
    jmp label22250
    
label22252:
    movq $9, %rcx
    jmp label22250
    
label22253:
    cmpq %rcx, %rdx
    jge label22251
    jmp label22252
    
label22254:
    jmp label22253
    
label22255:
    movq $1, %rcx
    jmp label22254
    
label22256:
    movq $2, %rcx
    jmp label22254
    
label22257:
    movq $3, %rax
    cmpq $1, %rax
    jg label22255
    jmp label22256
    
label22258:
    movq $2, %rcx
    jmp label22253
    
label22259:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22257
    jmp label22258
    
label22260:
    movq $1, %rcx
    jmp label22259
    
label22261:
    movq $2, %rcx
    jmp label22259
    
label22262:
    movq $3, %rax
    cmpq $1, %rax
    jg label22260
    jmp label22261
    
label22263:
    movq %rcx, %rdx
    jmp label22262
    
label22264:
    movq $1, %rcx
    jmp label22263
    
label22265:
    movq $2, %rcx
    jmp label22263
    
label22266:
    movq $3, %rax
    cmpq $1, %rax
    jg label22264
    jmp label22265
    
label22267:
    movq $2, %rcx
    movq %rcx, %rdx
    jmp label22262
    
label22268:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22266
    jmp label22267
    
label22269:
    movq $1, %rcx
    jmp label22268
    
label22270:
    movq $2, %rcx
    jmp label22268
    
start:
    movq $3, %rax
    cmpq $1, %rax
    jg label22269
    jmp label22270
    



output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


running pass: prelude-and-conclusion @ utilities.rkt:2049

pass output:  @ utilities.rkt:2052
(strip-has-type new-p^):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21653 a21651)
 (list temp21910 a21731)
 (list a21652 a21651)
 (list a21655 a21670)
 (list a21655 a21673)
 (list a21654 a21636)
 (list a21657 temp21862)
 (list temp21915 a21732)
 (list temp21915 a21733)
 (list a21656 temp21862)
 (list a21659 a21658)
 (list temp21913 a21734)
 (list temp21913 a21737)
 (list a21658 temp21860)
 (list a21658 a21659)
 (list a21658 a21660)
 (list a21661 temp21860)
 (list temp21919 a21744)
 (list temp21919 a21745)
 (list a21660 a21658)
 (list temp21923 a21750)
 (list a21637 temp21849)
 (list a21636 temp21844)
 (list a21636 a21654)
 (list a21636 a21651)
 (list a21639 temp21847)
 (list a21639 a21640)
 (list a21639 a21641)
 (list a21638 temp21849)
 (list temp21893 a21706)
 (list temp21893 a21707)
 (list a21641 a21639)
 (list a21640 a21639)
 (list a21642 temp21847)
 (list temp21897 a21712)
 (list temp21902 a21713)
 (list temp21902 a21714)
 (list temp21900 a21718)
 (list temp21900 a21715)
 (list a21649 temp21853)
 (list temp21906 a21725)
 (list temp21906 a21726)
 (list a21651 a21653)
 (list a21651 a21636)
 (list a21651 a21652)
 (list a21650 temp21853)
 (list temp21942 a21773)
 (list temp21942 a21776)
 (list a21687 temp21880)
 (list a21689 a21691)
 (list a21689 a21674)
 (list a21689 a21690)
 (list a21688 temp21880)
 (list temp21944 a21771)
 (list temp21944 a21772)
 (list a21691 a21689)
 (list a21690 a21689)
 (list a21693 a21711)
 (list a21693 a21708)
 (list a21693 temp21884)
 (list a21692 a21674)
 (list temp21948 a21783)
 (list temp21948 a21784)
 (list a21695 temp21889)
 (list a21694 temp21889)
 (list a21697 a21696)
 (list a21696 temp21887)
 (list a21696 a21697)
 (list a21696 a21698)
 (list a21699 temp21887)
 (list a21698 a21696)
 (list temp21926 a21751)
 (list a21669 temp21866)
 (list a21668 temp21866)
 (list a21671 a21670)
 (list a21670 a21672)
 (list a21670 a21655)
 (list a21670 a21671)
 (list a21673 a21655)
 (list temp21931 a21752)
 (list temp21931 a21753)
 (list a21672 a21670)
 (list a21675 temp21876)
 (list temp21929 a21754)
 (list temp21929 a21757)
 (list a21674 a21689)
 (list a21674 a21692)
 (list a21674 temp21871)
 (list a21677 a21678)
 (list a21677 a21679)
 (list a21677 temp21874)
 (list temp21935 a21764)
 (list temp21935 a21765)
 (list a21676 temp21876)
 (list a21679 a21677)
 (list a21678 a21677)
 (list temp21939 a21770)
 (list a21680 temp21874)
 (list temp21847 a21639)
 (list temp21847 a21642)
 (list temp21844 a21636)
 (list a21593 temp21814)
 (list a21592 temp21814)
 (list a21595 a21594)
 (list a21594 a21596)
 (list a21594 a21579)
 (list a21594 a21595)
 (list temp21849 a21637)
 (list temp21849 a21638)
 (list a21597 a21579)
 (list a21596 a21594)
 (list a21599 temp21823)
 (list temp21853 a21649)
 (list temp21853 a21650)
 (list a21598 temp21818)
 (list a21598 a21613)
 (list a21598 a21616)
 (list a21601 temp21821)
 (list a21601 a21602)
 (list a21601 a21603)
 (list a21600 temp21823)
 (list a21603 a21601)
 (list a21602 a21601)
 (list temp21857 temp21870)
 (list a21573 temp21803)
 (list a21572 temp21797)
 (list temp21831 a21617)
 (list a21575 a21576)
 (list a21575 a21577)
 (list a21574 temp21803)
 (list a21577 a21575)
 (list temp21834 a21620)
 (list temp21834 a21623)
 (list a21576 a21575)
 (list a21579 a21594)
 (list a21579 a21597)
 (list a21581 temp21810)
 (list a21580 temp21810)
 (list a21583 a21582)
 (list temp21836 a21618)
 (list temp21836 a21619)
 (list a21582 a21583)
 (list a21582 temp21808)
 (list a21582 a21584)
 (list a21585 temp21808)
 (list a21584 a21582)
 (list temp21840 a21630)
 (list temp21840 a21631)
 (list a21621 a21620)
 (list a21620 a21621)
 (list a21620 a21622)
 (list a21620 temp21834)
 (list a21623 temp21834)
 (list temp21876 a21675)
 (list temp21876 a21676)
 (list a21622 a21620)
 (list temp21880 a21687)
 (list temp21880 a21688)
 (list temp21887 a21696)
 (list temp21887 a21699)
 (list a21631 temp21840)
 (list temp21884 a21693)
 (list a21630 temp21840)
 (list a21633 a21632)
 (list a21632 a21634)
 (list a21632 a21617)
 (list a21632 a21633)
 (list a21635 a21617)
 (list a21634 a21632)
 (list temp21889 a21694)
 (list temp21889 a21695)
 (list temp21862 a21656)
 (list temp21862 a21657)
 (list a21604 temp21821)
 (list temp21860 a21658)
 (list temp21860 a21661)
 (list temp21866 a21668)
 (list temp21866 a21669)
 (list a21611 temp21827)
 (list a21613 a21615)
 (list a21613 a21598)
 (list a21613 a21614)
 (list temp21870 temp21857)
 (list a21612 temp21827)
 (list temp21871 a21674)
 (list a21615 a21613)
 (list a21614 a21613)
 (list a21617 temp21831)
 (list a21617 a21632)
 (list a21617 a21635)
 (list temp21874 a21677)
 (list temp21874 a21680)
 (list a21616 a21598)
 (list a21619 temp21836)
 (list a21618 temp21836)
 (list a21783 temp21948)
 (list a21786 a21785)
 (list a21787 a21785)
 (list a21784 temp21948)
 (list a21785 a21787)
 (list a21785 a21770)
 (list a21785 a21786)
 (list a21788 a21770)
 (list temp21794 a21561)
 (list temp21794 a21562)
 (list temp21792 a21563)
 (list temp21792 a21566)
 (list a21766 a21768)
 (list a21766 a21751)
 (list a21766 a21767)
 (list a21767 a21766)
 (list a21764 temp21935)
 (list a21765 temp21935)
 (list a21770 a21785)
 (list a21770 a21788)
 (list a21770 temp21939)
 (list a21771 temp21944)
 (list a21768 a21766)
 (list a21769 a21751)
 (list a21774 a21773)
 (list a21775 a21773)
 (list a21772 temp21944)
 (list a21773 temp21942)
 (list a21773 a21774)
 (list a21773 a21775)
 (list a21776 temp21942)
 (list temp21814 a21592)
 (list temp21814 a21593)
 (list a21561 temp21794)
 (list temp21818 a21598)
 (list a21563 a21564)
 (list a21563 a21565)
 (list a21563 temp21792)
 (list a21562 temp21794)
 (list a21565 a21563)
 (list a21564 a21563)
 (list temp21823 a21599)
 (list temp21823 a21600)
 (list a21567 temp21799)
 (list a21566 temp21792)
 (list temp21821 a21604)
 (list temp21821 a21601)
 (list a21569 temp21797)
 (list a21569 a21570)
 (list a21569 a21571)
 (list a21568 temp21799)
 (list temp21827 a21611)
 (list temp21827 a21612)
 (list a21571 a21569)
 (list a21570 a21569)
 (list temp21799 a21567)
 (list temp21799 a21568)
 (list temp21797 a21572)
 (list temp21797 a21569)
 (list temp21803 a21573)
 (list temp21803 a21574)
 (list temp21810 a21580)
 (list temp21810 a21581)
 (list temp21808 a21582)
 (list temp21808 a21585)
 (list a21718 temp21900)
 (list a21716 a21715)
 (list a21717 a21715)
 (list a21726 temp21906)
 (list a21727 a21729)
 (list a21727 a21712)
 (list a21727 a21728)
 (list a21725 temp21906)
 (list a21730 a21712)
 (list a21731 a21749)
 (list a21731 temp21910)
 (list a21731 a21746)
 (list a21728 a21727)
 (list a21729 a21727)
 (list a21706 temp21893)
 (list a21707 temp21893)
 (list a21710 a21708)
 (list a21711 a21693)
 (list a21708 a21710)
 (list a21708 a21709)
 (list a21708 a21693)
 (list a21709 a21708)
 (list a21714 temp21902)
 (list a21715 a21716)
 (list a21715 a21717)
 (list a21715 temp21900)
 (list a21712 temp21897)
 (list a21712 a21727)
 (list a21712 a21730)
 (list a21713 temp21902)
 (list a21750 temp21923)
 (list a21751 a21769)
 (list a21751 a21766)
 (list a21751 temp21926)
 (list a21748 a21746)
 (list a21749 a21731)
 (list a21754 temp21929)
 (list a21754 a21755)
 (list a21754 a21756)
 (list a21755 a21754)
 (list a21752 temp21931)
 (list a21753 temp21931)
 (list a21756 a21754)
 (list a21757 temp21929)
 (list a21734 a21735)
 (list a21734 a21736)
 (list a21734 temp21913)
 (list a21735 a21734)
 (list a21732 temp21915)
 (list a21733 temp21915)
 (list a21736 a21734)
 (list a21737 temp21913)
 (list a21746 a21748)
 (list a21746 a21731)
 (list a21746 a21747)
 (list a21747 a21746)
 (list a21744 temp21919)
 (list a21745 temp21919))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdx 1)
 (cons %r11 -4)
 (cons a21579 7)
 (cons a21636 8)
 (cons a21617 9)
 (cons a21598 10)
 (cons a21712 11)
 (cons a21693 12)
 (cons a21674 13)
 (cons a21751 14)
 (cons a21750 15)
 (cons a21731 16)
 (cons temp21870 17)
 (cons a21771 0)
 (cons temp21941 1)
 (cons a21773 0)
 (cons temp21942 0)
 (cons a21772 0)
 (cons a21775 0)
 (cons a21774 0)
 (cons a21776 0)
 (cons temp21944 0)
 (cons a21783 0)
 (cons temp21939 0)
 (cons temp21926 1)
 (cons a21781 0)
 (cons a21779 0)
 (cons a21786 0)
 (cons a21778 0)
 (cons a21780 0)
 (cons a21782 0)
 (cons a21785 0)
 (cons a21784 0)
 (cons a21787 0)
 (cons a21788 0)
 (cons temp21948 0)
 (cons a21777 0)
 (cons a21770 0)
 (cons temp21923 0)
 (cons a21757 0)
 (cons temp21928 1)
 (cons a21753 0)
 (cons a21752 0)
 (cons a21755 0)
 (cons a21754 0)
 (cons a21756 0)
 (cons temp21929 0)
 (cons temp21931 0)
 (cons a21762 0)
 (cons a21759 0)
 (cons a21761 0)
 (cons a21758 0)
 (cons a21763 0)
 (cons a21760 0)
 (cons a21764 0)
 (cons a21767 0)
 (cons a21765 0)
 (cons a21769 0)
 (cons temp21935 0)
 (cons a21768 0)
 (cons a21766 0)
 (cons temp21910 1)
 (cons temp21897 0)
 (cons a21749 0)
 (cons a21740 0)
 (cons a21741 0)
 (cons a21734 0)
 (cons temp21912 1)
 (cons a21733 0)
 (cons a21732 0)
 (cons a21735 0)
 (cons a21737 0)
 (cons temp21913 0)
 (cons temp21915 0)
 (cons a21736 0)
 (cons a21739 0)
 (cons a21738 0)
 (cons a21745 0)
 (cons a21744 0)
 (cons a21747 0)
 (cons a21746 0)
 (cons a21748 0)
 (cons a21743 0)
 (cons temp21919 0)
 (cons a21742 0)
 (cons a21718 0)
 (cons temp21899 1)
 (cons a21714 0)
 (cons a21715 0)
 (cons a21713 0)
 (cons a21717 0)
 (cons temp21900 0)
 (cons temp21902 0)
 (cons a21716 0)
 (cons a21719 0)
 (cons a21720 0)
 (cons a21721 0)
 (cons a21723 0)
 (cons a21722 0)
 (cons a21727 0)
 (cons a21726 0)
 (cons a21724 0)
 (cons a21725 0)
 (cons temp21906 0)
 (cons a21730 0)
 (cons a21728 0)
 (cons a21729 0)
 (cons temp21884 1)
 (cons temp21871 0)
 (cons a21702 0)
 (cons a21703 0)
 (cons a21700 0)
 (cons a21707 0)
 (cons a21710 0)
 (cons a21711 0)
 (cons a21705 0)
 (cons a21701 0)
 (cons a21704 0)
 (cons a21706 0)
 (cons a21699 0)
 (cons temp21886 1)
 (cons a21694 0)
 (cons a21695 0)
 (cons temp21887 0)
 (cons temp21889 0)
 (cons a21698 0)
 (cons a21696 0)
 (cons a21697 0)
 (cons temp21893 0)
 (cons a21709 0)
 (cons a21708 0)
 (cons temp21874 0)
 (cons temp21873 1)
 (cons a21675 0)
 (cons a21678 0)
 (cons a21679 0)
 (cons a21680 0)
 (cons a21676 0)
 (cons a21677 0)
 (cons temp21876 0)
 (cons a21682 0)
 (cons a21687 0)
 (cons a21690 0)
 (cons a21684 0)
 (cons a21688 0)
 (cons a21686 0)
 (cons a21692 0)
 (cons a21691 0)
 (cons temp21857 1)
 (cons temp21880 0)
 (cons a21681 0)
 (cons a21683 0)
 (cons a21685 0)
 (cons a21689 0)
 (cons a21664 0)
 (cons temp21862 0)
 (cons temp21859 1)
 (cons a21658 0)
 (cons a21659 0)
 (cons a21656 0)
 (cons a21657 0)
 (cons a21660 0)
 (cons a21661 0)
 (cons temp21860 0)
 (cons a21662 0)
 (cons a21666 0)
 (cons a21671 0)
 (cons a21668 0)
 (cons a21670 0)
 (cons a21669 0)
 (cons temp21866 0)
 (cons a21663 0)
 (cons temp21844 0)
 (cons a21655 0)
 (cons a21673 0)
 (cons a21667 0)
 (cons a21665 0)
 (cons a21672 0)
 (cons a21649 0)
 (cons a21646 0)
 (cons a21650 0)
 (cons a21644 0)
 (cons a21651 0)
 (cons a21648 0)
 (cons a21641 0)
 (cons temp21846 1)
 (cons a21638 0)
 (cons a21640 0)
 (cons temp21847 0)
 (cons temp21849 0)
 (cons a21639 0)
 (cons a21637 0)
 (cons a21642 0)
 (cons a21652 0)
 (cons temp21853 0)
 (cons a21647 0)
 (cons a21654 0)
 (cons a21643 0)
 (cons a21645 0)
 (cons temp21831 1)
 (cons temp21818 0)
 (cons a21653 0)
 (cons a21620 0)
 (cons temp21833 1)
 (cons a21622 0)
 (cons a21623 0)
 (cons a21619 0)
 (cons temp21834 0)
 (cons a21621 0)
 (cons temp21836 0)
 (cons a21618 0)
 (cons a21629 0)
 (cons a21627 0)
 (cons a21628 0)
 (cons a21633 0)
 (cons a21625 0)
 (cons a21635 0)
 (cons a21630 0)
 (cons a21632 0)
 (cons temp21840 0)
 (cons a21624 0)
 (cons a21631 0)
 (cons a21626 0)
 (cons a21634 0)
 (cons a21610 0)
 (cons a21608 0)
 (cons a21607 0)
 (cons a21606 0)
 (cons a21616 0)
 (cons a21599 0)
 (cons temp21820 1)
 (cons a21604 0)
 (cons a21602 0)
 (cons a21603 0)
 (cons temp21821 0)
 (cons temp21823 0)
 (cons a21600 0)
 (cons a21601 0)
 (cons temp21827 0)
 (cons a21612 0)
 (cons a21609 0)
 (cons a21605 0)
 (cons a21615 0)
 (cons a21613 0)
 (cons a21614 0)
 (cons a21611 0)
 (cons temp21797 0)
 (cons temp21792 1)
 (cons a21572 0)
 (cons a21570 0)
 (cons a21567 0)
 (cons a21571 0)
 (cons a21568 0)
 (cons a21569 0)
 (cons temp21799 0)
 (cons a21573 0)
 (cons a21575 0)
 (cons a21583 0)
 (cons temp21807 1)
 (cons a21582 0)
 (cons a21585 0)
 (cons temp21810 0)
 (cons a21580 0)
 (cons a21581 0)
 (cons a21584 0)
 (cons temp21808 0)
 (cons a21597 0)
 (cons a21563 0)
 (cons a21562 0)
 (cons a21566 0)
 (cons a21591 0)
 (cons a21590 0)
 (cons a21587 0)
 (cons a21589 0)
 (cons a21564 0)
 (cons a21593 0)
 (cons a21577 0)
 (cons temp21803 0)
 (cons a21574 0)
 (cons temp21814 0)
 (cons a21596 0)
 (cons temp21790 0)
 (cons x21560 0)
 (cons a21594 0)
 (cons a21576 0)
 (cons a21595 0)
 (cons a21578 0)
 (cons a21561 0)
 (cons a21588 0)
 (cons a21586 0)
 (cons temp21794 0)
 (cons a21592 0)
 (cons a21565 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21959:
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %rbx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21960:
    jmp label21959
    
label21961:
    movq $1, %rcx
    jmp label21960
    
label21962:
    movq $2, %rcx
    jmp label21960
    
label21963:
    movq $3, %rax
    cmpq $1, %rax
    jg label21961
    jmp label21962
    
label21964:
    movq $2, %rcx
    jmp label21959
    
label21965:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21963
    jmp label21964
    
label21967:
    movq $2, %rcx
    jmp label21965
    
label21966:
    movq $1, %rcx
    jmp label21965
    
label21969:
    movq $2, %rcx
    jmp label21959
    
label21968:
    movq $3, %rax
    cmpq $1, %rax
    jg label21966
    jmp label21967
    
label21971:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21970:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21973:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21972:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21975:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21974:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21976:
    cmpq %rcx, %rdx
    jg label21974
    jmp label21975
    
label21981:
    movq $2, %rcx
    jmp label21976
    
label21977:
    jmp label21976
    
label21979:
    movq $2, %rcx
    jmp label21977
    
label21978:
    movq $1, %rcx
    jmp label21977
    
label21980:
    movq $3, %rax
    cmpq $1, %rax
    jg label21978
    jmp label21979
    
label21982:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21980
    jmp label21981
    
label21984:
    movq $2, %rcx
    jmp label21982
    
label21983:
    movq $1, %rcx
    jmp label21982
    
label21985:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label21983
    jmp label21984
    
label21986:
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21987:
    movq $1, %rcx
    jmp label21986
    
label21988:
    movq $2, %rcx
    jmp label21986
    
label21989:
    movq $3, %rax
    cmpq $1, %rax
    jg label21987
    jmp label21988
    
label21995:
    movq $2, -72(%rbp)
    jmp label21985
    
label21990:
    movq $2, %rcx
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21991:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21989
    jmp label21990
    
label21993:
    movq $2, %rcx
    jmp label21991
    
label21992:
    movq $1, %rcx
    jmp label21991
    
label21994:
    movq $3, %rax
    cmpq $1, %rax
    jg label21992
    jmp label21993
    
label21997:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21996:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21999:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label21998:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label22001:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22000:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22002:
    cmpq %rcx, %rdx
    jg label22000
    jmp label22001
    
label22003:
    jmp label22002
    
label22005:
    movq $2, %rcx
    jmp label22003
    
label22004:
    movq $1, %rcx
    jmp label22003
    
label22006:
    movq $3, %rax
    cmpq $1, %rax
    jg label22004
    jmp label22005
    
label22007:
    movq $2, %rcx
    jmp label22002
    
label22008:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22006
    jmp label22007
    
label22010:
    movq $2, %rcx
    jmp label22008
    
label22009:
    movq $1, %rcx
    jmp label22008
    
label22011:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22009
    jmp label22010
    
label22016:
    movq $2, %rcx
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22012:
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22014:
    movq $2, %rcx
    jmp label22012
    
label22013:
    movq $1, %rcx
    jmp label22012
    
label22015:
    movq $3, %rax
    cmpq $1, %rax
    jg label22013
    jmp label22014
    
label22017:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22015
    jmp label22016
    
label22019:
    movq $2, %rcx
    jmp label22017
    
label22018:
    movq $1, %rcx
    jmp label22017
    
label22020:
    movq $3, %rax
    cmpq $1, %rax
    jg label22018
    jmp label22019
    
label22021:
    movq $2, -88(%rbp)
    jmp label22011
    
label22023:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22022:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22025:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22024:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22027:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22026:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22028:
    cmpq %rcx, %rdx
    jg label22026
    jmp label22027
    
label22033:
    movq $2, %rcx
    jmp label22028
    
label22029:
    jmp label22028
    
label22031:
    movq $2, %rcx
    jmp label22029
    
label22030:
    movq $1, %rcx
    jmp label22029
    
label22032:
    movq $3, %rax
    cmpq $1, %rax
    jg label22030
    jmp label22031
    
label22034:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22032
    jmp label22033
    
label22036:
    movq $2, %rcx
    jmp label22034
    
label22035:
    movq $1, %rcx
    jmp label22034
    
label22037:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22035
    jmp label22036
    
label22047:
    movq $2, -48(%rbp)
    jmp label22037
    
label22042:
    movq $2, %rcx
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22038:
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22040:
    movq $2, %rcx
    jmp label22038
    
label22039:
    movq $1, %rcx
    jmp label22038
    
label22041:
    movq $3, %rax
    cmpq $1, %rax
    jg label22039
    jmp label22040
    
label22043:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22041
    jmp label22042
    
label22045:
    movq $2, %rcx
    jmp label22043
    
label22044:
    movq $1, %rcx
    jmp label22043
    
label22046:
    movq $3, %rax
    cmpq $1, %rax
    jg label22044
    jmp label22045
    
label22049:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22048:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22051:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22050:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22053:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22052:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22054:
    cmpq %rcx, %rdx
    jg label22052
    jmp label22053
    
label22059:
    movq $2, %rcx
    jmp label22054
    
label22055:
    jmp label22054
    
label22057:
    movq $2, %rcx
    jmp label22055
    
label22056:
    movq $1, %rcx
    jmp label22055
    
label22058:
    movq $3, %rax
    cmpq $1, %rax
    jg label22056
    jmp label22057
    
label22060:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22058
    jmp label22059
    
label22062:
    movq $2, %rcx
    jmp label22060
    
label22061:
    movq $1, %rcx
    jmp label22060
    
label22063:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22061
    jmp label22062
    
label22064:
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22066:
    movq $2, %rcx
    jmp label22064
    
label22065:
    movq $1, %rcx
    jmp label22064
    
label22067:
    movq $3, %rax
    cmpq $1, %rax
    jg label22065
    jmp label22066
    
label22073:
    movq $2, -56(%rbp)
    jmp label22063
    
label22068:
    movq $2, %rcx
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22069:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22067
    jmp label22068
    
label22071:
    movq $2, %rcx
    jmp label22069
    
label22070:
    movq $1, %rcx
    jmp label22069
    
label22072:
    movq $3, %rax
    cmpq $1, %rax
    jg label22070
    jmp label22071
    
label22075:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22074:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22077:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22076:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22079:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22078:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22080:
    cmpq %rcx, %rdx
    jg label22078
    jmp label22079
    
label22081:
    jmp label22080
    
label22083:
    movq $2, %rcx
    jmp label22081
    
label22082:
    movq $1, %rcx
    jmp label22081
    
label22084:
    movq $3, %rax
    cmpq $1, %rax
    jg label22082
    jmp label22083
    
label22085:
    movq $2, %rcx
    jmp label22080
    
label22086:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22084
    jmp label22085
    
label22088:
    movq $2, %rcx
    jmp label22086
    
label22087:
    movq $1, %rcx
    jmp label22086
    
label22089:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22087
    jmp label22088
    
label22099:
    movq $2, -64(%rbp)
    jmp label22089
    
label22094:
    movq $2, %rcx
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22090:
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22092:
    movq $2, %rcx
    jmp label22090
    
label22091:
    movq $1, %rcx
    jmp label22090
    
label22093:
    movq $3, %rax
    cmpq $1, %rax
    jg label22091
    jmp label22092
    
label22095:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22093
    jmp label22094
    
label22097:
    movq $2, %rcx
    jmp label22095
    
label22096:
    movq $1, %rcx
    jmp label22095
    
label22098:
    movq $3, %rax
    cmpq $1, %rax
    jg label22096
    jmp label22097
    
label22101:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22100:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22103:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22102:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22105:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22104:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22106:
    cmpq %rcx, %rdx
    jg label22104
    jmp label22105
    
label22111:
    movq $2, %rcx
    jmp label22106
    
label22107:
    jmp label22106
    
label22109:
    movq $2, %rcx
    jmp label22107
    
label22108:
    movq $1, %rcx
    jmp label22107
    
label22110:
    movq $3, %rax
    cmpq $1, %rax
    jg label22108
    jmp label22109
    
label22112:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22110
    jmp label22111
    
label22114:
    movq $2, %rcx
    jmp label22112
    
label22113:
    movq $1, %rcx
    jmp label22112
    
label22115:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22113
    jmp label22114
    
label22125:
    movq $2, %rcx
    jmp label22115
    
label22120:
    movq $2, %rcx
    jmp label22115
    
label22116:
    jmp label22115
    
label22118:
    movq $2, %rcx
    jmp label22116
    
label22117:
    movq $1, %rcx
    jmp label22116
    
label22119:
    movq $3, %rax
    cmpq $1, %rax
    jg label22117
    jmp label22118
    
label22121:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22119
    jmp label22120
    
label22123:
    movq $2, %rcx
    jmp label22121
    
label22122:
    movq $1, %rcx
    jmp label22121
    
label22124:
    movq $3, %rax
    cmpq $1, %rax
    jg label22122
    jmp label22123
    
label22127:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22126:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22129:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22128:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22131:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22130:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22132:
    cmpq %rcx, %rdx
    jg label22130
    jmp label22131
    
label22137:
    movq $2, %rcx
    jmp label22132
    
label22133:
    jmp label22132
    
label22135:
    movq $2, %rcx
    jmp label22133
    
label22134:
    movq $1, %rcx
    jmp label22133
    
label22136:
    movq $3, %rax
    cmpq $1, %rax
    jg label22134
    jmp label22135
    
label22138:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22136
    jmp label22137
    
label22140:
    movq $2, %rcx
    jmp label22138
    
label22139:
    movq $1, %rcx
    jmp label22138
    
label22141:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22139
    jmp label22140
    
label22146:
    movq $2, %rcx
    movq %rcx, %r12
    jmp label22141
    
label22142:
    movq %rcx, %r12
    jmp label22141
    
label22144:
    movq $2, %rcx
    jmp label22142
    
label22143:
    movq $1, %rcx
    jmp label22142
    
label22145:
    movq $3, %rax
    cmpq $1, %rax
    jg label22143
    jmp label22144
    
label22147:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22145
    jmp label22146
    
label22149:
    movq $2, %rcx
    jmp label22147
    
label22148:
    movq $1, %rcx
    jmp label22147
    
label22150:
    movq $3, %rax
    cmpq $1, %rax
    jg label22148
    jmp label22149
    
label22151:
    movq $2, %r12
    jmp label22141
    
label22153:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22152:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22155:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22154:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22157:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22156:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22158:
    cmpq %rcx, %rdx
    jg label22156
    jmp label22157
    
label22163:
    movq $2, %rcx
    jmp label22158
    
label22159:
    jmp label22158
    
label22161:
    movq $2, %rcx
    jmp label22159
    
label22160:
    movq $1, %rcx
    jmp label22159
    
label22162:
    movq $3, %rax
    cmpq $1, %rax
    jg label22160
    jmp label22161
    
label22164:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22162
    jmp label22163
    
label22166:
    movq $2, %rcx
    jmp label22164
    
label22165:
    movq $1, %rcx
    jmp label22164
    
label22167:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22165
    jmp label22166
    
label22177:
    movq $2, %r13
    jmp label22167
    
label22172:
    movq $2, %rcx
    movq %rcx, %r13
    jmp label22167
    
label22168:
    movq %rcx, %r13
    jmp label22167
    
label22170:
    movq $2, %rcx
    jmp label22168
    
label22169:
    movq $1, %rcx
    jmp label22168
    
label22171:
    movq $3, %rax
    cmpq $1, %rax
    jg label22169
    jmp label22170
    
label22173:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22171
    jmp label22172
    
label22175:
    movq $2, %rcx
    jmp label22173
    
label22174:
    movq $1, %rcx
    jmp label22173
    
label22176:
    movq $3, %rax
    cmpq $1, %rax
    jg label22174
    jmp label22175
    
label22179:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22178:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22181:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22180:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22183:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22182:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22184:
    cmpq %rcx, %rdx
    jg label22182
    jmp label22183
    
label22189:
    movq $2, %rcx
    jmp label22184
    
label22185:
    jmp label22184
    
label22187:
    movq $2, %rcx
    jmp label22185
    
label22186:
    movq $1, %rcx
    jmp label22185
    
label22188:
    movq $3, %rax
    cmpq $1, %rax
    jg label22186
    jmp label22187
    
label22190:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22188
    jmp label22189
    
label22192:
    movq $2, %rcx
    jmp label22190
    
label22191:
    movq $1, %rcx
    jmp label22190
    
label22193:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22191
    jmp label22192
    
label22194:
    movq %rcx, %r14
    jmp label22193
    
label22195:
    movq $1, %rcx
    jmp label22194
    
label22196:
    movq $2, %rcx
    jmp label22194
    
label22197:
    movq $3, %rax
    cmpq $1, %rax
    jg label22195
    jmp label22196
    
label22203:
    movq $2, %r14
    jmp label22193
    
label22198:
    movq $2, %rcx
    movq %rcx, %r14
    jmp label22193
    
label22199:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22197
    jmp label22198
    
label22201:
    movq $2, %rcx
    jmp label22199
    
label22200:
    movq $1, %rcx
    jmp label22199
    
label22202:
    movq $3, %rax
    cmpq $1, %rax
    jg label22200
    jmp label22201
    
label22205:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22204:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22207:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22206:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22209:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22208:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22210:
    cmpq %rcx, %rdx
    jg label22208
    jmp label22209
    
label22211:
    jmp label22210
    
label22213:
    movq $2, %rcx
    jmp label22211
    
label22212:
    movq $1, %rcx
    jmp label22211
    
label22214:
    movq $3, %rax
    cmpq $1, %rax
    jg label22212
    jmp label22213
    
label22215:
    movq $2, %rcx
    jmp label22210
    
label22216:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22214
    jmp label22215
    
label22218:
    movq $2, %rcx
    jmp label22216
    
label22217:
    movq $1, %rcx
    jmp label22216
    
label22219:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22217
    jmp label22218
    
label22229:
    movq $2, %rbx
    jmp label22219
    
label22224:
    movq $2, %rcx
    movq %rcx, %rbx
    jmp label22219
    
label22220:
    movq %rcx, %rbx
    jmp label22219
    
label22222:
    movq $2, %rcx
    jmp label22220
    
label22221:
    movq $1, %rcx
    jmp label22220
    
label22223:
    movq $3, %rax
    cmpq $1, %rax
    jg label22221
    jmp label22222
    
label22225:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22223
    jmp label22224
    
label22227:
    movq $2, %rcx
    jmp label22225
    
label22226:
    movq $1, %rcx
    jmp label22225
    
label22228:
    movq $3, %rax
    cmpq $1, %rax
    jg label22226
    jmp label22227
    
label22230:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22231:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22232:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22233:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22234:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22235:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22236:
    cmpq %rcx, %rdx
    jg label22234
    jmp label22235
    
label22237:
    jmp label22236
    
label22238:
    movq $1, %rcx
    jmp label22237
    
label22239:
    movq $2, %rcx
    jmp label22237
    
label22240:
    movq $3, %rax
    cmpq $1, %rax
    jg label22238
    jmp label22239
    
label22241:
    movq $2, %rcx
    jmp label22236
    
label22242:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22240
    jmp label22241
    
label22244:
    movq $2, %rcx
    jmp label22242
    
label22243:
    movq $1, %rcx
    jmp label22242
    
label22246:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22243
    jmp label22244
    
label21951:
    movq %rcx, %rax
    jmp conclusion
    
label21953:
    movq $2, %rcx
    jmp label21951
    
label21952:
    movq $1, %rcx
    jmp label21951
    
label21955:
    movq $2, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label21954:
    movq $3, %rax
    cmpq $1, %rax
    jg label21952
    jmp label21953
    
label21956:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21954
    jmp label21955
    
label21958:
    movq $2, %rcx
    jmp label21956
    
label21957:
    movq $1, %rcx
    jmp label21956
    
label22245:
    movq $3, %rax
    cmpq $1, %rax
    jg label21957
    jmp label21958
    
label22247:
    cmpq $1, %rcx
    je label22245
    jmp label22246
    
label22248:
    movq $1, %rcx
    jmp label22247
    
label22249:
    movq $0, %rcx
    jmp label22247
    
label22250:
    cmpq $8, %rcx
    jg label22248
    jmp label22249
    
label22251:
    movq $8, %rcx
    jmp label22250
    
label22252:
    movq $9, %rcx
    jmp label22250
    
label22253:
    cmpq %rcx, %rdx
    jge label22251
    jmp label22252
    
label22254:
    jmp label22253
    
label22255:
    movq $1, %rcx
    jmp label22254
    
label22256:
    movq $2, %rcx
    jmp label22254
    
label22257:
    movq $3, %rax
    cmpq $1, %rax
    jg label22255
    jmp label22256
    
label22258:
    movq $2, %rcx
    jmp label22253
    
label22259:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22257
    jmp label22258
    
label22260:
    movq $1, %rcx
    jmp label22259
    
label22261:
    movq $2, %rcx
    jmp label22259
    
label22262:
    movq $3, %rax
    cmpq $1, %rax
    jg label22260
    jmp label22261
    
label22263:
    movq %rcx, %rdx
    jmp label22262
    
label22264:
    movq $1, %rcx
    jmp label22263
    
label22265:
    movq $2, %rcx
    jmp label22263
    
label22266:
    movq $3, %rax
    cmpq $1, %rax
    jg label22264
    jmp label22265
    
label22267:
    movq $2, %rcx
    movq %rcx, %rdx
    jmp label22262
    
label22268:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22266
    jmp label22267
    
label22269:
    movq $1, %rcx
    jmp label22268
    
label22270:
    movq $2, %rcx
    jmp label22268
    
start:
    movq $3, %rax
    cmpq $1, %rax
    jg label22269
    jmp label22270
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



type-check output:  @ utilities.rkt:2057
(strip-has-type new-p):
program:
locals-types:
    temp21923 : 'Integer, temp21919 : 'Integer, temp21915 : 'Integer, temp21912 : 'Integer, temp21913 : 'Integer, temp21910 : 'Integer, temp21939 : 'Integer, temp21935 : 'Integer, temp21931 : 'Integer, temp21928 : 'Integer, temp21929 : 'Integer, temp21926 : 'Integer, temp21948 : 'Integer, temp21944 : 'Integer, temp21942 : 'Integer, temp21941 : 'Integer, temp21859 : 'Integer, temp21857 : 'Integer, temp21853 : 'Integer, temp21849 : 'Integer, temp21846 : 'Integer, temp21847 : 'Integer, temp21844 : 'Integer, temp21874 : 'Integer, temp21873 : 'Integer, temp21870 : 'Integer, temp21871 : 'Integer, temp21866 : 'Integer, temp21862 : 'Integer, temp21860 : 'Integer, temp21889 : 'Integer, temp21886 : 'Integer, temp21887 : 'Integer, temp21884 : 'Integer, temp21880 : 'Integer, temp21876 : 'Integer, temp21906 : 'Integer, temp21902 : 'Integer, temp21900 : 'Integer, temp21899 : 'Integer, temp21897 : 'Integer, temp21893 : 'Integer, temp21794 : 'Integer, temp21792 : 'Integer, temp21790 : 'Integer, a21788 : 'Integer, a21786 : 'Integer, a21787 : 'Integer, a21784 : 'Integer, a21785 : 'Integer, a21782 : 'Boolean, a21783 : 'Integer, a21780 : 'Boolean, a21781 : 'Boolean, temp21810 : 'Integer, temp21808 : 'Integer, temp21807 : 'Integer, temp21803 : 'Integer, temp21799 : 'Integer, temp21797 : 'Integer, temp21827 : 'Integer, temp21823 : 'Integer, temp21820 : 'Integer, temp21821 : 'Integer, temp21818 : 'Integer, temp21814 : 'Integer, temp21840 : 'Integer, temp21836 : 'Integer, temp21834 : 'Integer, temp21833 : 'Integer, temp21831 : 'Integer, a21730 : 'Integer, a21731 : 'Integer, a21728 : 'Integer, a21729 : 'Integer, a21726 : 'Integer, a21727 : 'Integer, a21724 : 'Boolean, a21725 : 'Integer, a21722 : 'Boolean, a21723 : 'Boolean, a21720 : 'Boolean, a21721 : 'Boolean, a21718 : 'Integer, a21719 : 'Boolean, a21716 : 'Integer, a21717 : 'Integer, a21746 : 'Integer, a21747 : 'Integer, a21744 : 'Integer, a21745 : 'Integer, a21742 : 'Boolean, a21743 : 'Boolean, a21740 : 'Boolean, a21741 : 'Boolean, a21738 : 'Boolean, a21739 : 'Boolean, a21736 : 'Integer, a21737 : 'Integer, a21734 : 'Integer, a21735 : 'Integer, a21732 : 'Integer, a21733 : 'Integer, a21762 : 'Boolean, a21763 : 'Boolean, a21760 : 'Boolean, a21761 : 'Boolean, a21758 : 'Boolean, a21759 : 'Boolean, a21756 : 'Integer, a21757 : 'Integer, a21754 : 'Integer, a21755 : 'Integer, a21752 : 'Integer, a21753 : 'Integer, a21750 : 'Integer, a21751 : 'Integer, a21748 : 'Integer, a21749 : 'Integer, a21778 : 'Boolean, a21779 : 'Boolean, a21776 : 'Integer, a21777 : 'Boolean, a21774 : 'Integer, a21775 : 'Integer, a21772 : 'Integer, a21773 : 'Integer, a21770 : 'Integer, a21771 : 'Integer, a21768 : 'Integer, a21769 : 'Integer, a21766 : 'Integer, a21767 : 'Integer, a21764 : 'Integer, a21765 : 'Integer, a21665 : 'Boolean, a21664 : 'Boolean, a21667 : 'Boolean, a21666 : 'Boolean, a21661 : 'Integer, a21660 : 'Integer, a21663 : 'Boolean, a21662 : 'Boolean, a21657 : 'Integer, a21656 : 'Integer, a21659 : 'Integer, a21658 : 'Integer, a21653 : 'Integer, a21652 : 'Integer, a21655 : 'Integer, a21654 : 'Integer, a21681 : 'Boolean, a21680 : 'Integer, a21683 : 'Boolean, a21682 : 'Boolean, a21677 : 'Integer, a21676 : 'Integer, a21679 : 'Integer, a21678 : 'Integer, a21673 : 'Integer, a21672 : 'Integer, a21675 : 'Integer, a21674 : 'Integer, a21669 : 'Integer, a21668 : 'Integer, a21671 : 'Integer, a21670 : 'Integer, a21697 : 'Integer, a21696 : 'Integer, a21699 : 'Integer, a21698 : 'Integer, a21693 : 'Integer, a21692 : 'Integer, a21695 : 'Integer, a21694 : 'Integer, a21689 : 'Integer, a21688 : 'Integer, a21691 : 'Integer, a21690 : 'Integer, a21685 : 'Boolean, a21684 : 'Boolean, a21687 : 'Integer, a21686 : 'Boolean, a21713 : 'Integer, a21712 : 'Integer, a21715 : 'Integer, a21714 : 'Integer, a21709 : 'Integer, a21708 : 'Integer, a21711 : 'Integer, a21710 : 'Integer, a21705 : 'Boolean, a21704 : 'Boolean, a21707 : 'Integer, a21706 : 'Integer, a21701 : 'Boolean, a21700 : 'Boolean, a21703 : 'Boolean, a21702 : 'Boolean, a21601 : 'Integer, a21600 : 'Integer, a21603 : 'Integer, a21602 : 'Integer, a21597 : 'Integer, a21596 : 'Integer, a21599 : 'Integer, a21598 : 'Integer, a21593 : 'Integer, a21592 : 'Integer, a21595 : 'Integer, a21594 : 'Integer, a21589 : 'Boolean, a21588 : 'Boolean, a21591 : 'Boolean, a21590 : 'Boolean, a21617 : 'Integer, a21616 : 'Integer, a21619 : 'Integer, a21618 : 'Integer, a21613 : 'Integer, a21612 : 'Integer, a21615 : 'Integer, a21614 : 'Integer, a21609 : 'Boolean, a21608 : 'Boolean, a21611 : 'Integer, a21610 : 'Boolean, a21605 : 'Boolean, a21604 : 'Integer, a21607 : 'Boolean, a21606 : 'Boolean, a21633 : 'Integer, a21632 : 'Integer, a21635 : 'Integer, a21634 : 'Integer, a21629 : 'Boolean, a21628 : 'Boolean, a21631 : 'Integer, a21630 : 'Integer, a21625 : 'Boolean, a21624 : 'Boolean, a21627 : 'Boolean, a21626 : 'Boolean, a21621 : 'Integer, a21620 : 'Integer, a21623 : 'Integer, a21622 : 'Integer, a21649 : 'Integer, a21648 : 'Boolean, a21651 : 'Integer, a21650 : 'Integer, a21645 : 'Boolean, a21644 : 'Boolean, a21647 : 'Boolean, a21646 : 'Boolean, a21641 : 'Integer, a21640 : 'Integer, a21643 : 'Boolean, a21642 : 'Integer, a21637 : 'Integer, a21636 : 'Integer, a21639 : 'Integer, a21638 : 'Integer, a21569 : 'Integer, a21568 : 'Integer, a21571 : 'Integer, a21570 : 'Integer, a21565 : 'Integer, a21564 : 'Integer, a21567 : 'Integer, a21566 : 'Integer, a21561 : 'Integer, x21560 : 'Boolean, a21563 : 'Integer, a21562 : 'Integer, a21585 : 'Integer, a21584 : 'Integer, a21587 : 'Boolean, a21586 : 'Boolean, a21581 : 'Integer, a21580 : 'Integer, a21583 : 'Integer, a21582 : 'Integer, a21577 : 'Integer, a21576 : 'Integer, a21579 : 'Integer, a21578 : 'Integer, a21573 : 'Integer, a21572 : 'Integer, a21575 : 'Integer, a21574 : 'Integer, 
tsorted
:
'(label21959
  label21960
  label21961
  label21962
  label21963
  label21964
  label21965
  label21967
  label21966
  label21969
  label21968
  label21971
  label21970
  label21973
  label21972
  label21975
  label21974
  label21976
  label21981
  label21977
  label21979
  label21978
  label21980
  label21982
  label21984
  label21983
  label21985
  label21986
  label21987
  label21988
  label21989
  label21995
  label21990
  label21991
  label21993
  label21992
  label21994
  label21997
  label21996
  label21999
  label21998
  label22001
  label22000
  label22002
  label22003
  label22005
  label22004
  label22006
  label22007
  label22008
  label22010
  label22009
  label22011
  label22016
  label22012
  label22014
  label22013
  label22015
  label22017
  label22019
  label22018
  label22020
  label22021
  label22023
  label22022
  label22025
  label22024
  label22027
  label22026
  label22028
  label22033
  label22029
  label22031
  label22030
  label22032
  label22034
  label22036
  label22035
  label22037
  label22047
  label22042
  label22038
  label22040
  label22039
  label22041
  label22043
  label22045
  label22044
  label22046
  label22049
  label22048
  label22051
  label22050
  label22053
  label22052
  label22054
  label22059
  label22055
  label22057
  label22056
  label22058
  label22060
  label22062
  label22061
  label22063
  label22064
  label22066
  label22065
  label22067
  label22073
  label22068
  label22069
  label22071
  label22070
  label22072
  label22075
  label22074
  label22077
  label22076
  label22079
  label22078
  label22080
  label22081
  label22083
  label22082
  label22084
  label22085
  label22086
  label22088
  label22087
  label22089
  label22099
  label22094
  label22090
  label22092
  label22091
  label22093
  label22095
  label22097
  label22096
  label22098
  label22101
  label22100
  label22103
  label22102
  label22105
  label22104
  label22106
  label22111
  label22107
  label22109
  label22108
  label22110
  label22112
  label22114
  label22113
  label22115
  label22125
  label22120
  label22116
  label22118
  label22117
  label22119
  label22121
  label22123
  label22122
  label22124
  label22127
  label22126
  label22129
  label22128
  label22131
  label22130
  label22132
  label22137
  label22133
  label22135
  label22134
  label22136
  label22138
  label22140
  label22139
  label22141
  label22146
  label22142
  label22144
  label22143
  label22145
  label22147
  label22149
  label22148
  label22150
  label22151
  label22153
  label22152
  label22155
  label22154
  label22157
  label22156
  label22158
  label22163
  label22159
  label22161
  label22160
  label22162
  label22164
  label22166
  label22165
  label22167
  label22177
  label22172
  label22168
  label22170
  label22169
  label22171
  label22173
  label22175
  label22174
  label22176
  label22179
  label22178
  label22181
  label22180
  label22183
  label22182
  label22184
  label22189
  label22185
  label22187
  label22186
  label22188
  label22190
  label22192
  label22191
  label22193
  label22194
  label22195
  label22196
  label22197
  label22203
  label22198
  label22199
  label22201
  label22200
  label22202
  label22205
  label22204
  label22207
  label22206
  label22209
  label22208
  label22210
  label22211
  label22213
  label22212
  label22214
  label22215
  label22216
  label22218
  label22217
  label22219
  label22229
  label22224
  label22220
  label22222
  label22221
  label22223
  label22225
  label22227
  label22226
  label22228
  label22230
  label22231
  label22232
  label22233
  label22234
  label22235
  label22236
  label22237
  label22238
  label22239
  label22240
  label22241
  label22242
  label22244
  label22243
  label22246
  label21951
  label21953
  label21952
  label21955
  label21954
  label21956
  label21958
  label21957
  label22245
  label22247
  label22248
  label22249
  label22250
  label22251
  label22252
  label22253
  label22254
  label22255
  label22256
  label22257
  label22258
  label22259
  label22260
  label22261
  label22262
  label22263
  label22264
  label22265
  label22266
  label22267
  label22268
  label22269
  label22270
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list a21653 a21651)
 (list temp21910 a21731)
 (list a21652 a21651)
 (list a21655 a21670)
 (list a21655 a21673)
 (list a21654 a21636)
 (list a21657 temp21862)
 (list temp21915 a21732)
 (list temp21915 a21733)
 (list a21656 temp21862)
 (list a21659 a21658)
 (list temp21913 a21734)
 (list temp21913 a21737)
 (list a21658 temp21860)
 (list a21658 a21659)
 (list a21658 a21660)
 (list a21661 temp21860)
 (list temp21919 a21744)
 (list temp21919 a21745)
 (list a21660 a21658)
 (list temp21923 a21750)
 (list a21637 temp21849)
 (list a21636 temp21844)
 (list a21636 a21654)
 (list a21636 a21651)
 (list a21639 temp21847)
 (list a21639 a21640)
 (list a21639 a21641)
 (list a21638 temp21849)
 (list temp21893 a21706)
 (list temp21893 a21707)
 (list a21641 a21639)
 (list a21640 a21639)
 (list a21642 temp21847)
 (list temp21897 a21712)
 (list temp21902 a21713)
 (list temp21902 a21714)
 (list temp21900 a21718)
 (list temp21900 a21715)
 (list a21649 temp21853)
 (list temp21906 a21725)
 (list temp21906 a21726)
 (list a21651 a21653)
 (list a21651 a21636)
 (list a21651 a21652)
 (list a21650 temp21853)
 (list temp21942 a21773)
 (list temp21942 a21776)
 (list a21687 temp21880)
 (list a21689 a21691)
 (list a21689 a21674)
 (list a21689 a21690)
 (list a21688 temp21880)
 (list temp21944 a21771)
 (list temp21944 a21772)
 (list a21691 a21689)
 (list a21690 a21689)
 (list a21693 a21711)
 (list a21693 a21708)
 (list a21693 temp21884)
 (list a21692 a21674)
 (list temp21948 a21783)
 (list temp21948 a21784)
 (list a21695 temp21889)
 (list a21694 temp21889)
 (list a21697 a21696)
 (list a21696 temp21887)
 (list a21696 a21697)
 (list a21696 a21698)
 (list a21699 temp21887)
 (list a21698 a21696)
 (list temp21926 a21751)
 (list a21669 temp21866)
 (list a21668 temp21866)
 (list a21671 a21670)
 (list a21670 a21672)
 (list a21670 a21655)
 (list a21670 a21671)
 (list a21673 a21655)
 (list temp21931 a21752)
 (list temp21931 a21753)
 (list a21672 a21670)
 (list a21675 temp21876)
 (list temp21929 a21754)
 (list temp21929 a21757)
 (list a21674 a21689)
 (list a21674 a21692)
 (list a21674 temp21871)
 (list a21677 a21678)
 (list a21677 a21679)
 (list a21677 temp21874)
 (list temp21935 a21764)
 (list temp21935 a21765)
 (list a21676 temp21876)
 (list a21679 a21677)
 (list a21678 a21677)
 (list temp21939 a21770)
 (list a21680 temp21874)
 (list temp21847 a21639)
 (list temp21847 a21642)
 (list temp21844 a21636)
 (list a21593 temp21814)
 (list a21592 temp21814)
 (list a21595 a21594)
 (list a21594 a21596)
 (list a21594 a21579)
 (list a21594 a21595)
 (list temp21849 a21637)
 (list temp21849 a21638)
 (list a21597 a21579)
 (list a21596 a21594)
 (list a21599 temp21823)
 (list temp21853 a21649)
 (list temp21853 a21650)
 (list a21598 temp21818)
 (list a21598 a21613)
 (list a21598 a21616)
 (list a21601 temp21821)
 (list a21601 a21602)
 (list a21601 a21603)
 (list a21600 temp21823)
 (list a21603 a21601)
 (list a21602 a21601)
 (list temp21857 temp21870)
 (list a21573 temp21803)
 (list a21572 temp21797)
 (list temp21831 a21617)
 (list a21575 a21576)
 (list a21575 a21577)
 (list a21574 temp21803)
 (list a21577 a21575)
 (list temp21834 a21620)
 (list temp21834 a21623)
 (list a21576 a21575)
 (list a21579 a21594)
 (list a21579 a21597)
 (list a21581 temp21810)
 (list a21580 temp21810)
 (list a21583 a21582)
 (list temp21836 a21618)
 (list temp21836 a21619)
 (list a21582 a21583)
 (list a21582 temp21808)
 (list a21582 a21584)
 (list a21585 temp21808)
 (list a21584 a21582)
 (list temp21840 a21630)
 (list temp21840 a21631)
 (list a21621 a21620)
 (list a21620 a21621)
 (list a21620 a21622)
 (list a21620 temp21834)
 (list a21623 temp21834)
 (list temp21876 a21675)
 (list temp21876 a21676)
 (list a21622 a21620)
 (list temp21880 a21687)
 (list temp21880 a21688)
 (list temp21887 a21696)
 (list temp21887 a21699)
 (list a21631 temp21840)
 (list temp21884 a21693)
 (list a21630 temp21840)
 (list a21633 a21632)
 (list a21632 a21634)
 (list a21632 a21617)
 (list a21632 a21633)
 (list a21635 a21617)
 (list a21634 a21632)
 (list temp21889 a21694)
 (list temp21889 a21695)
 (list temp21862 a21656)
 (list temp21862 a21657)
 (list a21604 temp21821)
 (list temp21860 a21658)
 (list temp21860 a21661)
 (list temp21866 a21668)
 (list temp21866 a21669)
 (list a21611 temp21827)
 (list a21613 a21615)
 (list a21613 a21598)
 (list a21613 a21614)
 (list temp21870 temp21857)
 (list a21612 temp21827)
 (list temp21871 a21674)
 (list a21615 a21613)
 (list a21614 a21613)
 (list a21617 temp21831)
 (list a21617 a21632)
 (list a21617 a21635)
 (list temp21874 a21677)
 (list temp21874 a21680)
 (list a21616 a21598)
 (list a21619 temp21836)
 (list a21618 temp21836)
 (list a21783 temp21948)
 (list a21786 a21785)
 (list a21787 a21785)
 (list a21784 temp21948)
 (list a21785 a21787)
 (list a21785 a21770)
 (list a21785 a21786)
 (list a21788 a21770)
 (list temp21794 a21561)
 (list temp21794 a21562)
 (list temp21792 a21563)
 (list temp21792 a21566)
 (list a21766 a21768)
 (list a21766 a21751)
 (list a21766 a21767)
 (list a21767 a21766)
 (list a21764 temp21935)
 (list a21765 temp21935)
 (list a21770 a21785)
 (list a21770 a21788)
 (list a21770 temp21939)
 (list a21771 temp21944)
 (list a21768 a21766)
 (list a21769 a21751)
 (list a21774 a21773)
 (list a21775 a21773)
 (list a21772 temp21944)
 (list a21773 temp21942)
 (list a21773 a21774)
 (list a21773 a21775)
 (list a21776 temp21942)
 (list temp21814 a21592)
 (list temp21814 a21593)
 (list a21561 temp21794)
 (list temp21818 a21598)
 (list a21563 a21564)
 (list a21563 a21565)
 (list a21563 temp21792)
 (list a21562 temp21794)
 (list a21565 a21563)
 (list a21564 a21563)
 (list temp21823 a21599)
 (list temp21823 a21600)
 (list a21567 temp21799)
 (list a21566 temp21792)
 (list temp21821 a21604)
 (list temp21821 a21601)
 (list a21569 temp21797)
 (list a21569 a21570)
 (list a21569 a21571)
 (list a21568 temp21799)
 (list temp21827 a21611)
 (list temp21827 a21612)
 (list a21571 a21569)
 (list a21570 a21569)
 (list temp21799 a21567)
 (list temp21799 a21568)
 (list temp21797 a21572)
 (list temp21797 a21569)
 (list temp21803 a21573)
 (list temp21803 a21574)
 (list temp21810 a21580)
 (list temp21810 a21581)
 (list temp21808 a21582)
 (list temp21808 a21585)
 (list a21718 temp21900)
 (list a21716 a21715)
 (list a21717 a21715)
 (list a21726 temp21906)
 (list a21727 a21729)
 (list a21727 a21712)
 (list a21727 a21728)
 (list a21725 temp21906)
 (list a21730 a21712)
 (list a21731 a21749)
 (list a21731 temp21910)
 (list a21731 a21746)
 (list a21728 a21727)
 (list a21729 a21727)
 (list a21706 temp21893)
 (list a21707 temp21893)
 (list a21710 a21708)
 (list a21711 a21693)
 (list a21708 a21710)
 (list a21708 a21709)
 (list a21708 a21693)
 (list a21709 a21708)
 (list a21714 temp21902)
 (list a21715 a21716)
 (list a21715 a21717)
 (list a21715 temp21900)
 (list a21712 temp21897)
 (list a21712 a21727)
 (list a21712 a21730)
 (list a21713 temp21902)
 (list a21750 temp21923)
 (list a21751 a21769)
 (list a21751 a21766)
 (list a21751 temp21926)
 (list a21748 a21746)
 (list a21749 a21731)
 (list a21754 temp21929)
 (list a21754 a21755)
 (list a21754 a21756)
 (list a21755 a21754)
 (list a21752 temp21931)
 (list a21753 temp21931)
 (list a21756 a21754)
 (list a21757 temp21929)
 (list a21734 a21735)
 (list a21734 a21736)
 (list a21734 temp21913)
 (list a21735 a21734)
 (list a21732 temp21915)
 (list a21733 temp21915)
 (list a21736 a21734)
 (list a21737 temp21913)
 (list a21746 a21748)
 (list a21746 a21731)
 (list a21746 a21747)
 (list a21747 a21746)
 (list a21744 temp21919)
 (list a21745 temp21919))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdx 1)
 (cons %r11 -4)
 (cons a21579 7)
 (cons a21636 8)
 (cons a21617 9)
 (cons a21598 10)
 (cons a21712 11)
 (cons a21693 12)
 (cons a21674 13)
 (cons a21751 14)
 (cons a21750 15)
 (cons a21731 16)
 (cons temp21870 17)
 (cons a21771 0)
 (cons temp21941 1)
 (cons a21773 0)
 (cons temp21942 0)
 (cons a21772 0)
 (cons a21775 0)
 (cons a21774 0)
 (cons a21776 0)
 (cons temp21944 0)
 (cons a21783 0)
 (cons temp21939 0)
 (cons temp21926 1)
 (cons a21781 0)
 (cons a21779 0)
 (cons a21786 0)
 (cons a21778 0)
 (cons a21780 0)
 (cons a21782 0)
 (cons a21785 0)
 (cons a21784 0)
 (cons a21787 0)
 (cons a21788 0)
 (cons temp21948 0)
 (cons a21777 0)
 (cons a21770 0)
 (cons temp21923 0)
 (cons a21757 0)
 (cons temp21928 1)
 (cons a21753 0)
 (cons a21752 0)
 (cons a21755 0)
 (cons a21754 0)
 (cons a21756 0)
 (cons temp21929 0)
 (cons temp21931 0)
 (cons a21762 0)
 (cons a21759 0)
 (cons a21761 0)
 (cons a21758 0)
 (cons a21763 0)
 (cons a21760 0)
 (cons a21764 0)
 (cons a21767 0)
 (cons a21765 0)
 (cons a21769 0)
 (cons temp21935 0)
 (cons a21768 0)
 (cons a21766 0)
 (cons temp21910 1)
 (cons temp21897 0)
 (cons a21749 0)
 (cons a21740 0)
 (cons a21741 0)
 (cons a21734 0)
 (cons temp21912 1)
 (cons a21733 0)
 (cons a21732 0)
 (cons a21735 0)
 (cons a21737 0)
 (cons temp21913 0)
 (cons temp21915 0)
 (cons a21736 0)
 (cons a21739 0)
 (cons a21738 0)
 (cons a21745 0)
 (cons a21744 0)
 (cons a21747 0)
 (cons a21746 0)
 (cons a21748 0)
 (cons a21743 0)
 (cons temp21919 0)
 (cons a21742 0)
 (cons a21718 0)
 (cons temp21899 1)
 (cons a21714 0)
 (cons a21715 0)
 (cons a21713 0)
 (cons a21717 0)
 (cons temp21900 0)
 (cons temp21902 0)
 (cons a21716 0)
 (cons a21719 0)
 (cons a21720 0)
 (cons a21721 0)
 (cons a21723 0)
 (cons a21722 0)
 (cons a21727 0)
 (cons a21726 0)
 (cons a21724 0)
 (cons a21725 0)
 (cons temp21906 0)
 (cons a21730 0)
 (cons a21728 0)
 (cons a21729 0)
 (cons temp21884 1)
 (cons temp21871 0)
 (cons a21702 0)
 (cons a21703 0)
 (cons a21700 0)
 (cons a21707 0)
 (cons a21710 0)
 (cons a21711 0)
 (cons a21705 0)
 (cons a21701 0)
 (cons a21704 0)
 (cons a21706 0)
 (cons a21699 0)
 (cons temp21886 1)
 (cons a21694 0)
 (cons a21695 0)
 (cons temp21887 0)
 (cons temp21889 0)
 (cons a21698 0)
 (cons a21696 0)
 (cons a21697 0)
 (cons temp21893 0)
 (cons a21709 0)
 (cons a21708 0)
 (cons temp21874 0)
 (cons temp21873 1)
 (cons a21675 0)
 (cons a21678 0)
 (cons a21679 0)
 (cons a21680 0)
 (cons a21676 0)
 (cons a21677 0)
 (cons temp21876 0)
 (cons a21682 0)
 (cons a21687 0)
 (cons a21690 0)
 (cons a21684 0)
 (cons a21688 0)
 (cons a21686 0)
 (cons a21692 0)
 (cons a21691 0)
 (cons temp21857 1)
 (cons temp21880 0)
 (cons a21681 0)
 (cons a21683 0)
 (cons a21685 0)
 (cons a21689 0)
 (cons a21664 0)
 (cons temp21862 0)
 (cons temp21859 1)
 (cons a21658 0)
 (cons a21659 0)
 (cons a21656 0)
 (cons a21657 0)
 (cons a21660 0)
 (cons a21661 0)
 (cons temp21860 0)
 (cons a21662 0)
 (cons a21666 0)
 (cons a21671 0)
 (cons a21668 0)
 (cons a21670 0)
 (cons a21669 0)
 (cons temp21866 0)
 (cons a21663 0)
 (cons temp21844 0)
 (cons a21655 0)
 (cons a21673 0)
 (cons a21667 0)
 (cons a21665 0)
 (cons a21672 0)
 (cons a21649 0)
 (cons a21646 0)
 (cons a21650 0)
 (cons a21644 0)
 (cons a21651 0)
 (cons a21648 0)
 (cons a21641 0)
 (cons temp21846 1)
 (cons a21638 0)
 (cons a21640 0)
 (cons temp21847 0)
 (cons temp21849 0)
 (cons a21639 0)
 (cons a21637 0)
 (cons a21642 0)
 (cons a21652 0)
 (cons temp21853 0)
 (cons a21647 0)
 (cons a21654 0)
 (cons a21643 0)
 (cons a21645 0)
 (cons temp21831 1)
 (cons temp21818 0)
 (cons a21653 0)
 (cons a21620 0)
 (cons temp21833 1)
 (cons a21622 0)
 (cons a21623 0)
 (cons a21619 0)
 (cons temp21834 0)
 (cons a21621 0)
 (cons temp21836 0)
 (cons a21618 0)
 (cons a21629 0)
 (cons a21627 0)
 (cons a21628 0)
 (cons a21633 0)
 (cons a21625 0)
 (cons a21635 0)
 (cons a21630 0)
 (cons a21632 0)
 (cons temp21840 0)
 (cons a21624 0)
 (cons a21631 0)
 (cons a21626 0)
 (cons a21634 0)
 (cons a21610 0)
 (cons a21608 0)
 (cons a21607 0)
 (cons a21606 0)
 (cons a21616 0)
 (cons a21599 0)
 (cons temp21820 1)
 (cons a21604 0)
 (cons a21602 0)
 (cons a21603 0)
 (cons temp21821 0)
 (cons temp21823 0)
 (cons a21600 0)
 (cons a21601 0)
 (cons temp21827 0)
 (cons a21612 0)
 (cons a21609 0)
 (cons a21605 0)
 (cons a21615 0)
 (cons a21613 0)
 (cons a21614 0)
 (cons a21611 0)
 (cons temp21797 0)
 (cons temp21792 1)
 (cons a21572 0)
 (cons a21570 0)
 (cons a21567 0)
 (cons a21571 0)
 (cons a21568 0)
 (cons a21569 0)
 (cons temp21799 0)
 (cons a21573 0)
 (cons a21575 0)
 (cons a21583 0)
 (cons temp21807 1)
 (cons a21582 0)
 (cons a21585 0)
 (cons temp21810 0)
 (cons a21580 0)
 (cons a21581 0)
 (cons a21584 0)
 (cons temp21808 0)
 (cons a21597 0)
 (cons a21563 0)
 (cons a21562 0)
 (cons a21566 0)
 (cons a21591 0)
 (cons a21590 0)
 (cons a21587 0)
 (cons a21589 0)
 (cons a21564 0)
 (cons a21593 0)
 (cons a21577 0)
 (cons temp21803 0)
 (cons a21574 0)
 (cons temp21814 0)
 (cons a21596 0)
 (cons temp21790 0)
 (cons x21560 0)
 (cons a21594 0)
 (cons a21576 0)
 (cons a21595 0)
 (cons a21578 0)
 (cons a21561 0)
 (cons a21588 0)
 (cons a21586 0)
 (cons temp21794 0)
 (cons a21592 0)
 (cons a21565 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label21959:
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %rbx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label21960:
    jmp label21959
    
label21961:
    movq $1, %rcx
    jmp label21960
    
label21962:
    movq $2, %rcx
    jmp label21960
    
label21963:
    movq $3, %rax
    cmpq $1, %rax
    jg label21961
    jmp label21962
    
label21964:
    movq $2, %rcx
    jmp label21959
    
label21965:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21963
    jmp label21964
    
label21967:
    movq $2, %rcx
    jmp label21965
    
label21966:
    movq $1, %rcx
    jmp label21965
    
label21969:
    movq $2, %rcx
    jmp label21959
    
label21968:
    movq $3, %rax
    cmpq $1, %rax
    jg label21966
    jmp label21967
    
label21971:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21970:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21968
    jmp label21969
    
label21973:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21972:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21970
    jmp label21971
    
label21975:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21974:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21972
    jmp label21973
    
label21976:
    cmpq %rcx, %rdx
    jg label21974
    jmp label21975
    
label21981:
    movq $2, %rcx
    jmp label21976
    
label21977:
    jmp label21976
    
label21979:
    movq $2, %rcx
    jmp label21977
    
label21978:
    movq $1, %rcx
    jmp label21977
    
label21980:
    movq $3, %rax
    cmpq $1, %rax
    jg label21978
    jmp label21979
    
label21982:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21980
    jmp label21981
    
label21984:
    movq $2, %rcx
    jmp label21982
    
label21983:
    movq $1, %rcx
    jmp label21982
    
label21985:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label21983
    jmp label21984
    
label21986:
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21987:
    movq $1, %rcx
    jmp label21986
    
label21988:
    movq $2, %rcx
    jmp label21986
    
label21989:
    movq $3, %rax
    cmpq $1, %rax
    jg label21987
    jmp label21988
    
label21995:
    movq $2, -72(%rbp)
    jmp label21985
    
label21990:
    movq $2, %rcx
    movq %rcx, -72(%rbp)
    jmp label21985
    
label21991:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21989
    jmp label21990
    
label21993:
    movq $2, %rcx
    jmp label21991
    
label21992:
    movq $1, %rcx
    jmp label21991
    
label21994:
    movq $3, %rax
    cmpq $1, %rax
    jg label21992
    jmp label21993
    
label21997:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21996:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21994
    jmp label21995
    
label21999:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label21998:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21996
    jmp label21997
    
label22001:
    movq $0, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22000:
    movq $1, %rcx
    cmpq $1, %rcx
    je label21998
    jmp label21999
    
label22002:
    cmpq %rcx, %rdx
    jg label22000
    jmp label22001
    
label22003:
    jmp label22002
    
label22005:
    movq $2, %rcx
    jmp label22003
    
label22004:
    movq $1, %rcx
    jmp label22003
    
label22006:
    movq $3, %rax
    cmpq $1, %rax
    jg label22004
    jmp label22005
    
label22007:
    movq $2, %rcx
    jmp label22002
    
label22008:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22006
    jmp label22007
    
label22010:
    movq $2, %rcx
    jmp label22008
    
label22009:
    movq $1, %rcx
    jmp label22008
    
label22011:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22009
    jmp label22010
    
label22016:
    movq $2, %rcx
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22012:
    movq %rcx, -88(%rbp)
    jmp label22011
    
label22014:
    movq $2, %rcx
    jmp label22012
    
label22013:
    movq $1, %rcx
    jmp label22012
    
label22015:
    movq $3, %rax
    cmpq $1, %rax
    jg label22013
    jmp label22014
    
label22017:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22015
    jmp label22016
    
label22019:
    movq $2, %rcx
    jmp label22017
    
label22018:
    movq $1, %rcx
    jmp label22017
    
label22020:
    movq $3, %rax
    cmpq $1, %rax
    jg label22018
    jmp label22019
    
label22021:
    movq $2, -88(%rbp)
    jmp label22011
    
label22023:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22022:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22020
    jmp label22021
    
label22025:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22024:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22022
    jmp label22023
    
label22027:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22026:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22024
    jmp label22025
    
label22028:
    cmpq %rcx, %rdx
    jg label22026
    jmp label22027
    
label22033:
    movq $2, %rcx
    jmp label22028
    
label22029:
    jmp label22028
    
label22031:
    movq $2, %rcx
    jmp label22029
    
label22030:
    movq $1, %rcx
    jmp label22029
    
label22032:
    movq $3, %rax
    cmpq $1, %rax
    jg label22030
    jmp label22031
    
label22034:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22032
    jmp label22033
    
label22036:
    movq $2, %rcx
    jmp label22034
    
label22035:
    movq $1, %rcx
    jmp label22034
    
label22037:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22035
    jmp label22036
    
label22047:
    movq $2, -48(%rbp)
    jmp label22037
    
label22042:
    movq $2, %rcx
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22038:
    movq %rcx, -48(%rbp)
    jmp label22037
    
label22040:
    movq $2, %rcx
    jmp label22038
    
label22039:
    movq $1, %rcx
    jmp label22038
    
label22041:
    movq $3, %rax
    cmpq $1, %rax
    jg label22039
    jmp label22040
    
label22043:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22041
    jmp label22042
    
label22045:
    movq $2, %rcx
    jmp label22043
    
label22044:
    movq $1, %rcx
    jmp label22043
    
label22046:
    movq $3, %rax
    cmpq $1, %rax
    jg label22044
    jmp label22045
    
label22049:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22048:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22046
    jmp label22047
    
label22051:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22050:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22048
    jmp label22049
    
label22053:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22052:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22050
    jmp label22051
    
label22054:
    cmpq %rcx, %rdx
    jg label22052
    jmp label22053
    
label22059:
    movq $2, %rcx
    jmp label22054
    
label22055:
    jmp label22054
    
label22057:
    movq $2, %rcx
    jmp label22055
    
label22056:
    movq $1, %rcx
    jmp label22055
    
label22058:
    movq $3, %rax
    cmpq $1, %rax
    jg label22056
    jmp label22057
    
label22060:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22058
    jmp label22059
    
label22062:
    movq $2, %rcx
    jmp label22060
    
label22061:
    movq $1, %rcx
    jmp label22060
    
label22063:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22061
    jmp label22062
    
label22064:
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22066:
    movq $2, %rcx
    jmp label22064
    
label22065:
    movq $1, %rcx
    jmp label22064
    
label22067:
    movq $3, %rax
    cmpq $1, %rax
    jg label22065
    jmp label22066
    
label22073:
    movq $2, -56(%rbp)
    jmp label22063
    
label22068:
    movq $2, %rcx
    movq %rcx, -56(%rbp)
    jmp label22063
    
label22069:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22067
    jmp label22068
    
label22071:
    movq $2, %rcx
    jmp label22069
    
label22070:
    movq $1, %rcx
    jmp label22069
    
label22072:
    movq $3, %rax
    cmpq $1, %rax
    jg label22070
    jmp label22071
    
label22075:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22074:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22072
    jmp label22073
    
label22077:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22076:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22074
    jmp label22075
    
label22079:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22078:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22076
    jmp label22077
    
label22080:
    cmpq %rcx, %rdx
    jg label22078
    jmp label22079
    
label22081:
    jmp label22080
    
label22083:
    movq $2, %rcx
    jmp label22081
    
label22082:
    movq $1, %rcx
    jmp label22081
    
label22084:
    movq $3, %rax
    cmpq $1, %rax
    jg label22082
    jmp label22083
    
label22085:
    movq $2, %rcx
    jmp label22080
    
label22086:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22084
    jmp label22085
    
label22088:
    movq $2, %rcx
    jmp label22086
    
label22087:
    movq $1, %rcx
    jmp label22086
    
label22089:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22087
    jmp label22088
    
label22099:
    movq $2, -64(%rbp)
    jmp label22089
    
label22094:
    movq $2, %rcx
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22090:
    movq %rcx, -64(%rbp)
    jmp label22089
    
label22092:
    movq $2, %rcx
    jmp label22090
    
label22091:
    movq $1, %rcx
    jmp label22090
    
label22093:
    movq $3, %rax
    cmpq $1, %rax
    jg label22091
    jmp label22092
    
label22095:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22093
    jmp label22094
    
label22097:
    movq $2, %rcx
    jmp label22095
    
label22096:
    movq $1, %rcx
    jmp label22095
    
label22098:
    movq $3, %rax
    cmpq $1, %rax
    jg label22096
    jmp label22097
    
label22101:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22100:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22098
    jmp label22099
    
label22103:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22102:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22100
    jmp label22101
    
label22105:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22104:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22102
    jmp label22103
    
label22106:
    cmpq %rcx, %rdx
    jg label22104
    jmp label22105
    
label22111:
    movq $2, %rcx
    jmp label22106
    
label22107:
    jmp label22106
    
label22109:
    movq $2, %rcx
    jmp label22107
    
label22108:
    movq $1, %rcx
    jmp label22107
    
label22110:
    movq $3, %rax
    cmpq $1, %rax
    jg label22108
    jmp label22109
    
label22112:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22110
    jmp label22111
    
label22114:
    movq $2, %rcx
    jmp label22112
    
label22113:
    movq $1, %rcx
    jmp label22112
    
label22115:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22113
    jmp label22114
    
label22125:
    movq $2, %rcx
    jmp label22115
    
label22120:
    movq $2, %rcx
    jmp label22115
    
label22116:
    jmp label22115
    
label22118:
    movq $2, %rcx
    jmp label22116
    
label22117:
    movq $1, %rcx
    jmp label22116
    
label22119:
    movq $3, %rax
    cmpq $1, %rax
    jg label22117
    jmp label22118
    
label22121:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22119
    jmp label22120
    
label22123:
    movq $2, %rcx
    jmp label22121
    
label22122:
    movq $1, %rcx
    jmp label22121
    
label22124:
    movq $3, %rax
    cmpq $1, %rax
    jg label22122
    jmp label22123
    
label22127:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22126:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22124
    jmp label22125
    
label22129:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22128:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22126
    jmp label22127
    
label22131:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22130:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22128
    jmp label22129
    
label22132:
    cmpq %rcx, %rdx
    jg label22130
    jmp label22131
    
label22137:
    movq $2, %rcx
    jmp label22132
    
label22133:
    jmp label22132
    
label22135:
    movq $2, %rcx
    jmp label22133
    
label22134:
    movq $1, %rcx
    jmp label22133
    
label22136:
    movq $3, %rax
    cmpq $1, %rax
    jg label22134
    jmp label22135
    
label22138:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22136
    jmp label22137
    
label22140:
    movq $2, %rcx
    jmp label22138
    
label22139:
    movq $1, %rcx
    jmp label22138
    
label22141:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22139
    jmp label22140
    
label22146:
    movq $2, %rcx
    movq %rcx, %r12
    jmp label22141
    
label22142:
    movq %rcx, %r12
    jmp label22141
    
label22144:
    movq $2, %rcx
    jmp label22142
    
label22143:
    movq $1, %rcx
    jmp label22142
    
label22145:
    movq $3, %rax
    cmpq $1, %rax
    jg label22143
    jmp label22144
    
label22147:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22145
    jmp label22146
    
label22149:
    movq $2, %rcx
    jmp label22147
    
label22148:
    movq $1, %rcx
    jmp label22147
    
label22150:
    movq $3, %rax
    cmpq $1, %rax
    jg label22148
    jmp label22149
    
label22151:
    movq $2, %r12
    jmp label22141
    
label22153:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22152:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22150
    jmp label22151
    
label22155:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22154:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22152
    jmp label22153
    
label22157:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22156:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22154
    jmp label22155
    
label22158:
    cmpq %rcx, %rdx
    jg label22156
    jmp label22157
    
label22163:
    movq $2, %rcx
    jmp label22158
    
label22159:
    jmp label22158
    
label22161:
    movq $2, %rcx
    jmp label22159
    
label22160:
    movq $1, %rcx
    jmp label22159
    
label22162:
    movq $3, %rax
    cmpq $1, %rax
    jg label22160
    jmp label22161
    
label22164:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22162
    jmp label22163
    
label22166:
    movq $2, %rcx
    jmp label22164
    
label22165:
    movq $1, %rcx
    jmp label22164
    
label22167:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22165
    jmp label22166
    
label22177:
    movq $2, %r13
    jmp label22167
    
label22172:
    movq $2, %rcx
    movq %rcx, %r13
    jmp label22167
    
label22168:
    movq %rcx, %r13
    jmp label22167
    
label22170:
    movq $2, %rcx
    jmp label22168
    
label22169:
    movq $1, %rcx
    jmp label22168
    
label22171:
    movq $3, %rax
    cmpq $1, %rax
    jg label22169
    jmp label22170
    
label22173:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22171
    jmp label22172
    
label22175:
    movq $2, %rcx
    jmp label22173
    
label22174:
    movq $1, %rcx
    jmp label22173
    
label22176:
    movq $3, %rax
    cmpq $1, %rax
    jg label22174
    jmp label22175
    
label22179:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22178:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22176
    jmp label22177
    
label22181:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22180:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22178
    jmp label22179
    
label22183:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22182:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22180
    jmp label22181
    
label22184:
    cmpq %rcx, %rdx
    jg label22182
    jmp label22183
    
label22189:
    movq $2, %rcx
    jmp label22184
    
label22185:
    jmp label22184
    
label22187:
    movq $2, %rcx
    jmp label22185
    
label22186:
    movq $1, %rcx
    jmp label22185
    
label22188:
    movq $3, %rax
    cmpq $1, %rax
    jg label22186
    jmp label22187
    
label22190:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22188
    jmp label22189
    
label22192:
    movq $2, %rcx
    jmp label22190
    
label22191:
    movq $1, %rcx
    jmp label22190
    
label22193:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22191
    jmp label22192
    
label22194:
    movq %rcx, %r14
    jmp label22193
    
label22195:
    movq $1, %rcx
    jmp label22194
    
label22196:
    movq $2, %rcx
    jmp label22194
    
label22197:
    movq $3, %rax
    cmpq $1, %rax
    jg label22195
    jmp label22196
    
label22203:
    movq $2, %r14
    jmp label22193
    
label22198:
    movq $2, %rcx
    movq %rcx, %r14
    jmp label22193
    
label22199:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22197
    jmp label22198
    
label22201:
    movq $2, %rcx
    jmp label22199
    
label22200:
    movq $1, %rcx
    jmp label22199
    
label22202:
    movq $3, %rax
    cmpq $1, %rax
    jg label22200
    jmp label22201
    
label22205:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22204:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22202
    jmp label22203
    
label22207:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22206:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22204
    jmp label22205
    
label22209:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22208:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22206
    jmp label22207
    
label22210:
    cmpq %rcx, %rdx
    jg label22208
    jmp label22209
    
label22211:
    jmp label22210
    
label22213:
    movq $2, %rcx
    jmp label22211
    
label22212:
    movq $1, %rcx
    jmp label22211
    
label22214:
    movq $3, %rax
    cmpq $1, %rax
    jg label22212
    jmp label22213
    
label22215:
    movq $2, %rcx
    jmp label22210
    
label22216:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22214
    jmp label22215
    
label22218:
    movq $2, %rcx
    jmp label22216
    
label22217:
    movq $1, %rcx
    jmp label22216
    
label22219:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22217
    jmp label22218
    
label22229:
    movq $2, %rbx
    jmp label22219
    
label22224:
    movq $2, %rcx
    movq %rcx, %rbx
    jmp label22219
    
label22220:
    movq %rcx, %rbx
    jmp label22219
    
label22222:
    movq $2, %rcx
    jmp label22220
    
label22221:
    movq $1, %rcx
    jmp label22220
    
label22223:
    movq $3, %rax
    cmpq $1, %rax
    jg label22221
    jmp label22222
    
label22225:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22223
    jmp label22224
    
label22227:
    movq $2, %rcx
    jmp label22225
    
label22226:
    movq $1, %rcx
    jmp label22225
    
label22228:
    movq $3, %rax
    cmpq $1, %rax
    jg label22226
    jmp label22227
    
label22230:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22231:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22228
    jmp label22229
    
label22232:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22233:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22230
    jmp label22231
    
label22234:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22235:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22232
    jmp label22233
    
label22236:
    cmpq %rcx, %rdx
    jg label22234
    jmp label22235
    
label22237:
    jmp label22236
    
label22238:
    movq $1, %rcx
    jmp label22237
    
label22239:
    movq $2, %rcx
    jmp label22237
    
label22240:
    movq $3, %rax
    cmpq $1, %rax
    jg label22238
    jmp label22239
    
label22241:
    movq $2, %rcx
    jmp label22236
    
label22242:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22240
    jmp label22241
    
label22244:
    movq $2, %rcx
    jmp label22242
    
label22243:
    movq $1, %rcx
    jmp label22242
    
label22246:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label22243
    jmp label22244
    
label21951:
    movq %rcx, %rax
    jmp conclusion
    
label21953:
    movq $2, %rcx
    jmp label21951
    
label21952:
    movq $1, %rcx
    jmp label21951
    
label21955:
    movq $2, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label21954:
    movq $3, %rax
    cmpq $1, %rax
    jg label21952
    jmp label21953
    
label21956:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label21954
    jmp label21955
    
label21958:
    movq $2, %rcx
    jmp label21956
    
label21957:
    movq $1, %rcx
    jmp label21956
    
label22245:
    movq $3, %rax
    cmpq $1, %rax
    jg label21957
    jmp label21958
    
label22247:
    cmpq $1, %rcx
    je label22245
    jmp label22246
    
label22248:
    movq $1, %rcx
    jmp label22247
    
label22249:
    movq $0, %rcx
    jmp label22247
    
label22250:
    cmpq $8, %rcx
    jg label22248
    jmp label22249
    
label22251:
    movq $8, %rcx
    jmp label22250
    
label22252:
    movq $9, %rcx
    jmp label22250
    
label22253:
    cmpq %rcx, %rdx
    jge label22251
    jmp label22252
    
label22254:
    jmp label22253
    
label22255:
    movq $1, %rcx
    jmp label22254
    
label22256:
    movq $2, %rcx
    jmp label22254
    
label22257:
    movq $3, %rax
    cmpq $1, %rax
    jg label22255
    jmp label22256
    
label22258:
    movq $2, %rcx
    jmp label22253
    
label22259:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22257
    jmp label22258
    
label22260:
    movq $1, %rcx
    jmp label22259
    
label22261:
    movq $2, %rcx
    jmp label22259
    
label22262:
    movq $3, %rax
    cmpq $1, %rax
    jg label22260
    jmp label22261
    
label22263:
    movq %rcx, %rdx
    jmp label22262
    
label22264:
    movq $1, %rcx
    jmp label22263
    
label22265:
    movq $2, %rcx
    jmp label22263
    
label22266:
    movq $3, %rax
    cmpq $1, %rax
    jg label22264
    jmp label22265
    
label22267:
    movq $2, %rcx
    movq %rcx, %rdx
    jmp label22262
    
label22268:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label22266
    jmp label22267
    
label22269:
    movq $1, %rcx
    jmp label22268
    
label22270:
    movq $2, %rcx
    jmp label22268
    
start:
    movq $3, %rax
    cmpq $1, %rax
    jg label22269
    jmp label22270
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



output:  @ utilities.rkt:2064
result:
17


testing @ utilities.rkt:2038
test-name:
"cond_test_23"

expected-result:
17


599 success(es) 0 failure(s) 0 error(s) 599 test(s) run
0
testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_01.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x #t])
   42)


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x #t])
   42)


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22285 #t])
   42)


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22285 #t])
   42)


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x22285 = #t;
    return 42;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22285 : 'Boolean, 
start:
    movq $1, x22285
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22285 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rax %rsp))
movq $1, x22285
movq $42, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22285 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $1, x22285
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22285 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x22285 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $1, %rcx
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22285 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x22285 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $1, %rcx
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22285 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x22285 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $1, %rcx
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$1, %rcx
	movq	$42, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_02.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x #f])
   42)


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x #f])
   42)


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22286 #f])
   42)


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22286 #f])
   42)


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x22286 = #f;
    return 42;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22286 : 'Boolean, 
start:
    movq $0, x22286
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22286 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rax %rsp))
movq $0, x22286
movq $42, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22286 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $0, x22286
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22286 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x22286 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $0, %rcx
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22286 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x22286 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $0, %rcx
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22286 : 'Boolean, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x22286 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $0, %rcx
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$0, %rcx
	movq	$42, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_03.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(if #t
   42
   0)



compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if #t
   42
   0)



type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if #t
   42
   0)



type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if #t
   42
   0)



type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    return 42;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
start:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$42, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_04.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x 2])
   (if (> (let ([x 1])
             x) x)
      24
      42)
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x 2])
   (if (> (let ([x 1])
             x) x)
      24
      42)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22287 2])
   (if (> (let ([x22288 1])
             x22288) x22287)
      24
      42)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22287 2])
   (if (let ([x22288 1])
          (let ([temp22290 x22288])
             (> temp22290 x22287)))
      24
      42)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22292:
    return 42;
start:
    x22287 = 2;
    x22288 = 1;
    temp22290 = x22288;
    if (> temp22290 x22287)
       goto label22291;
    else
       goto label22292;
label22291:
    return 24;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22287 : 'Integer, x22288 : 'Integer, temp22290 : 'Integer, 
label22292:
    movq $42, %rax
    jmp conclusion
    
start:
    movq $2, x22287
    movq $1, x22288
    movq x22288, temp22290
    cmpq x22287, temp22290
    jg label22291
    jmp label22292
    
label22291:
    movq $24, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22287 : 'Integer, x22288 : 'Integer, temp22290 : 'Integer, 
tsorted
:
'(label22291 label22292 start)
CFG
:
#<multigraph>
label22291:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $24, %rax
jmp conclusion

label22292:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

start:
    liveness
:
(list
 (set %rsp)
 (set x22287 %rsp)
 (set x22287 x22288 %rsp)
 (set x22287 temp22290 %rsp)
 (set %rsp)
 (set %rsp))
movq $2, x22287
movq $1, x22288
movq x22288, temp22290
cmpq x22287, temp22290
jg label22291
jmp label22292




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22287 : 'Integer, x22288 : 'Integer, temp22290 : 'Integer, 
tsorted
:
'(label22291 label22292 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x22288 temp22290) (list temp22290 x22288))
label22291:
    movq $24, %rax
    jmp conclusion
    
label22292:
    movq $42, %rax
    jmp conclusion
    
start:
    movq $2, x22287
    movq $1, x22288
    movq x22288, temp22290
    cmpq x22287, temp22290
    jg label22291
    jmp label22292
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22287 : 'Integer, x22288 : 'Integer, temp22290 : 'Integer, 
tsorted
:
'(label22291 label22292 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x22288 temp22290) (list temp22290 x22288))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp22290 0)
 (cons x22287 1)
 (cons x22288 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label22291:
    movq $24, %rax
    jmp conclusion
    
label22292:
    movq $42, %rax
    jmp conclusion
    
start:
    movq $2, %rdx
    movq $1, %rcx
    movq %rcx, %rcx
    cmpq %rdx, %rcx
    jg label22291
    jmp label22292
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22287 : 'Integer, x22288 : 'Integer, temp22290 : 'Integer, 
tsorted
:
'(label22291 label22292 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x22288 temp22290) (list temp22290 x22288))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp22290 0)
 (cons x22287 1)
 (cons x22288 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label22291:
    movq $24, %rax
    jmp conclusion
    
label22292:
    movq $42, %rax
    jmp conclusion
    
start:
    movq $2, %rdx
    movq $1, %rcx
    cmpq %rdx, %rcx
    jg label22291
    jmp label22292
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22287 : 'Integer, x22288 : 'Integer, temp22290 : 'Integer, 
tsorted
:
'(label22291 label22292 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x22288 temp22290) (list temp22290 x22288))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp22290 0)
 (cons x22287 1)
 (cons x22288 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label22291:
    movq $24, %rax
    jmp conclusion
    
label22292:
    movq $42, %rax
    jmp conclusion
    
start:
    movq $2, %rdx
    movq $1, %rcx
    cmpq %rdx, %rcx
    jg label22291
    jmp label22292
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22291:
	movq	$24, %rax
	jmp _conclusion

	.align 16
_label22292:
	movq	$42, %rax
	jmp _conclusion

	.align 16
_start:
	movq	$2, %rdx
	movq	$1, %rcx
	cmpq	%rdx, %rcx
	jg _label22291
	jmp _label22292

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_05.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x 3])
   (if (and (> x 1) (< x 5))
      (if (eq? x 3)
         42
         91)
      
      59)
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x 3])
   (if (if (> x 1)
          (< x 5)
          #f)
       
      (if (eq? x 3)
         42
         91)
      
      59)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22293 3])
   (if (if (> x22293 1)
          (< x22293 5)
          #f)
       
      (if (eq? x22293 3)
         42
         91)
      
      59)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22293 3])
   (if (if (> x22293 1)
          (< x22293 5)
          #f)
       
      (if (eq? x22293 3)
         42
         91)
      
      59)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22300:
    return 59;
start:
    x22293 = 3;
    if (> x22293 1)
       goto label22301;
    else
       goto label22300;
label22301:
    if (< x22293 5)
       goto label22299;
    else
       goto label22300;
label22297:
    return 42;
label22298:
    return 91;
label22299:
    if (eq? x22293 3)
       goto label22297;
    else
       goto label22298;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22293 : 'Integer, 
label22300:
    movq $59, %rax
    jmp conclusion
    
start:
    movq $3, x22293
    cmpq $1, x22293
    jg label22301
    jmp label22300
    
label22301:
    cmpq $5, x22293
    jl label22299
    jmp label22300
    
label22297:
    movq $42, %rax
    jmp conclusion
    
label22298:
    movq $91, %rax
    jmp conclusion
    
label22299:
    cmpq $3, x22293
    je label22297
    jmp label22298
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22293 : 'Integer, 
tsorted
:
'(label22297 label22298 label22299 label22300 label22301 start)
CFG
:
#<multigraph>
label22297:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label22298:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $91, %rax
jmp conclusion

label22299:
    liveness
:
(list (set x22293 %rsp) (set %rsp) (set %rsp))
cmpq $3, x22293
je label22297
jmp label22298

label22300:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $59, %rax
jmp conclusion

label22301:
    liveness
:
(list (set x22293 %rsp) (set x22293 %rsp) (set %rsp))
cmpq $5, x22293
jl label22299
jmp label22300

start:
    liveness
:
(list (set %rsp) (set x22293 %rsp) (set x22293 %rsp) (set %rsp))
movq $3, x22293
cmpq $1, x22293
jg label22301
jmp label22300




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22293 : 'Integer, 
tsorted
:
'(label22297 label22298 label22299 label22300 label22301 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label22297:
    movq $42, %rax
    jmp conclusion
    
label22298:
    movq $91, %rax
    jmp conclusion
    
label22299:
    cmpq $3, x22293
    je label22297
    jmp label22298
    
label22300:
    movq $59, %rax
    jmp conclusion
    
label22301:
    cmpq $5, x22293
    jl label22299
    jmp label22300
    
start:
    movq $3, x22293
    cmpq $1, x22293
    jg label22301
    jmp label22300
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22293 : 'Integer, 
tsorted
:
'(label22297 label22298 label22299 label22300 label22301 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x22293 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label22297:
    movq $42, %rax
    jmp conclusion
    
label22298:
    movq $91, %rax
    jmp conclusion
    
label22299:
    cmpq $3, %rcx
    je label22297
    jmp label22298
    
label22300:
    movq $59, %rax
    jmp conclusion
    
label22301:
    cmpq $5, %rcx
    jl label22299
    jmp label22300
    
start:
    movq $3, %rcx
    cmpq $1, %rcx
    jg label22301
    jmp label22300
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22293 : 'Integer, 
tsorted
:
'(label22297 label22298 label22299 label22300 label22301 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x22293 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label22297:
    movq $42, %rax
    jmp conclusion
    
label22298:
    movq $91, %rax
    jmp conclusion
    
label22299:
    cmpq $3, %rcx
    je label22297
    jmp label22298
    
label22300:
    movq $59, %rax
    jmp conclusion
    
label22301:
    cmpq $5, %rcx
    jl label22299
    jmp label22300
    
start:
    movq $3, %rcx
    cmpq $1, %rcx
    jg label22301
    jmp label22300
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22293 : 'Integer, 
tsorted
:
'(label22297 label22298 label22299 label22300 label22301 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x22293 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label22297:
    movq $42, %rax
    jmp conclusion
    
label22298:
    movq $91, %rax
    jmp conclusion
    
label22299:
    cmpq $3, %rcx
    je label22297
    jmp label22298
    
label22300:
    movq $59, %rax
    jmp conclusion
    
label22301:
    cmpq $5, %rcx
    jl label22299
    jmp label22300
    
start:
    movq $3, %rcx
    cmpq $1, %rcx
    jg label22301
    jmp label22300
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22297:
	movq	$42, %rax
	jmp _conclusion

	.align 16
_label22298:
	movq	$91, %rax
	jmp _conclusion

	.align 16
_label22299:
	cmpq	$3, %rcx
	je _label22297
	jmp _label22298

	.align 16
_label22300:
	movq	$59, %rax
	jmp _conclusion

	.align 16
_label22301:
	cmpq	$5, %rcx
	jl _label22299
	jmp _label22300

	.align 16
_start:
	movq	$3, %rcx
	cmpq	$1, %rcx
	jg _label22301
	jmp _label22300

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_06.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(if (and (eq? (read) 0) (eq? (read) 1))
   0
   42)



compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (if (eq? (read) 0)
       (eq? (read) 1)
       #f)
    
   0
   42)



type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (if (eq? (read) 0)
       (eq? (read) 1)
       #f)
    
   0
   42)



type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (if (let ([temp22303 (read)])
           (eq? temp22303 0))
       (let ([temp22305 (read)])
          (eq? temp22305 1))
       #f)
    
   0
   42)



type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22308:
    temp22305 = (read);
    if (eq? temp22305 1)
       goto label22306;
    else
       goto label22307;
start:
    temp22303 = (read);
    if (eq? temp22303 0)
       goto label22308;
    else
       goto label22307;
label22306:
    return 0;
label22307:
    return 42;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22303 : 'Integer, temp22305 : 'Integer, 
label22308:
    callq read_int
    movq %rax, temp22305
    cmpq $1, temp22305
    je label22306
    jmp label22307
    
start:
    callq read_int
    movq %rax, temp22303
    cmpq $0, temp22303
    je label22308
    jmp label22307
    
label22306:
    movq $0, %rax
    jmp conclusion
    
label22307:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22303 : 'Integer, temp22305 : 'Integer, 
tsorted
:
'(label22306 label22307 label22308 start)
CFG
:
#<multigraph>
label22306:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $0, %rax
jmp conclusion

label22307:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label22308:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp22305 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp22305
cmpq $1, temp22305
je label22306
jmp label22307

start:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp22303 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp22303
cmpq $0, temp22303
je label22308
jmp label22307




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22303 : 'Integer, temp22305 : 'Integer, 
tsorted
:
'(label22306 label22307 label22308 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label22306:
    movq $0, %rax
    jmp conclusion
    
label22307:
    movq $42, %rax
    jmp conclusion
    
label22308:
    callq read_int
    movq %rax, temp22305
    cmpq $1, temp22305
    je label22306
    jmp label22307
    
start:
    callq read_int
    movq %rax, temp22303
    cmpq $0, temp22303
    je label22308
    jmp label22307
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22303 : 'Integer, temp22305 : 'Integer, 
tsorted
:
'(label22306 label22307 label22308 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp22305 0)
 (cons temp22303 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label22306:
    movq $0, %rax
    jmp conclusion
    
label22307:
    movq $42, %rax
    jmp conclusion
    
label22308:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label22306
    jmp label22307
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $0, %rcx
    je label22308
    jmp label22307
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22303 : 'Integer, temp22305 : 'Integer, 
tsorted
:
'(label22306 label22307 label22308 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp22305 0)
 (cons temp22303 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label22306:
    movq $0, %rax
    jmp conclusion
    
label22307:
    movq $42, %rax
    jmp conclusion
    
label22308:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label22306
    jmp label22307
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $0, %rcx
    je label22308
    jmp label22307
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22303 : 'Integer, temp22305 : 'Integer, 
tsorted
:
'(label22306 label22307 label22308 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp22305 0)
 (cons temp22303 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label22306:
    movq $0, %rax
    jmp conclusion
    
label22307:
    movq $42, %rax
    jmp conclusion
    
label22308:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label22306
    jmp label22307
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $0, %rcx
    je label22308
    jmp label22307
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22306:
	movq	$0, %rax
	jmp _conclusion

	.align 16
_label22307:
	movq	$42, %rax
	jmp _conclusion

	.align 16
_label22308:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	je _label22306
	jmp _label22307

	.align 16
_start:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$0, %rcx
	je _label22308
	jmp _label22307

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_07.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(if (eq? (read) 1)
   42
   0)



compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (eq? (read) 1)
   42
   0)



type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (eq? (read) 1)
   42
   0)



type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (let ([temp22310 (read)])
       (eq? temp22310 1))
   42
   0)



type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp22310 = (read);
    if (eq? temp22310 1)
       goto label22311;
    else
       goto label22312;
label22311:
    return 42;
label22312:
    return 0;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22310 : 'Integer, 
start:
    callq read_int
    movq %rax, temp22310
    cmpq $1, temp22310
    je label22311
    jmp label22312
    
label22311:
    movq $42, %rax
    jmp conclusion
    
label22312:
    movq $0, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22310 : 'Integer, 
tsorted
:
'(label22311 label22312 start)
CFG
:
#<multigraph>
label22311:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label22312:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $0, %rax
jmp conclusion

start:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp22310 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp22310
cmpq $1, temp22310
je label22311
jmp label22312




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22310 : 'Integer, 
tsorted
:
'(label22311 label22312 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label22311:
    movq $42, %rax
    jmp conclusion
    
label22312:
    movq $0, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, temp22310
    cmpq $1, temp22310
    je label22311
    jmp label22312
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22310 : 'Integer, 
tsorted
:
'(label22311 label22312 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp22310 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label22311:
    movq $42, %rax
    jmp conclusion
    
label22312:
    movq $0, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label22311
    jmp label22312
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22310 : 'Integer, 
tsorted
:
'(label22311 label22312 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp22310 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label22311:
    movq $42, %rax
    jmp conclusion
    
label22312:
    movq $0, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label22311
    jmp label22312
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22310 : 'Integer, 
tsorted
:
'(label22311 label22312 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp22310 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
label22311:
    movq $42, %rax
    jmp conclusion
    
label22312:
    movq $0, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    je label22311
    jmp label22312
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22311:
	movq	$42, %rax
	jmp _conclusion

	.align 16
_label22312:
	movq	$0, %rax
	jmp _conclusion

	.align 16
_start:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	je _label22311
	jmp _label22312

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_08.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if x
                   1
                   2)
                )))



compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if x
                   1
                   2)
                )))



type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (eq? (read) (read))
   (let ([x22313 1])
      x22313)
   (let ([x22314 (if (>= 1 1)
                    (let ([x22315 (> 5 5)])
                       (not x22315))
                    (let ([x22316 (< 5 5)])
                       x22316))
                 ])
      (+ (read) (if x22314
                   1
                   2)
                )))



type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (let ([temp22318 (read)])
       (let ([temp22319 (read)])
          (eq? temp22318 temp22319)))
   (let ([x22313 1])
      x22313)
   (let ([x22314 (if (>= 1 1)
                    (let ([x22315 (> 5 5)])
                       (not x22315))
                    (let ([x22316 (< 5 5)])
                       x22316))
                 ])
      (let ([temp22325 (read)])
         (let ([temp22326 (if x22314
                             1
                             2)
                          ])
            (+ temp22325 temp22326)))))



type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22327:
    return (+ temp22325 temp22326);
label22328:
    temp22326 = 1;
    goto label22327;
label22329:
    temp22326 = 2;
    goto label22327;
label22330:
    temp22325 = (read);
    if (eq? x22314 #t)
       goto label22328;
    else
       goto label22329;
label22331:
    x22315 = (> 5 5);
    x22314 = (not x22315);
    goto label22330;
label22332:
    x22316 = (< 5 5);
    x22314 = x22316;
    goto label22330;
label22333:
    x22313 = 1;
    return x22313;
start:
    temp22318 = (read);
    temp22319 = (read);
    if (eq? temp22318 temp22319)
       goto label22333;
    else
       goto label22334;
label22334:
    if (>= 1 1)
       goto label22331;
    else
       goto label22332;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22316 : 'Boolean, temp22325 : 'Integer, temp22326 : 'Integer, temp22318 : 'Integer, temp22319 : 'Integer, x22313 : 'Integer, x22314 : 'Boolean, x22315 : 'Boolean, 
label22327:
    movq temp22325, %rax
    addq temp22326, %rax
    jmp conclusion
    
label22328:
    movq $1, temp22326
    jmp label22327
    
label22329:
    movq $2, temp22326
    jmp label22327
    
label22330:
    callq read_int
    movq %rax, temp22325
    cmpq $1, x22314
    je label22328
    jmp label22329
    
label22331:
    cmpq $5, $5
    setg %al
    movzbq %al, x22315
    movq x22315, x22314
    xorq $1, x22314
    jmp label22330
    
label22332:
    cmpq $5, $5
    setl %al
    movzbq %al, x22316
    movq x22316, x22314
    jmp label22330
    
label22333:
    movq $1, x22313
    movq x22313, %rax
    jmp conclusion
    
start:
    callq read_int
    movq %rax, temp22318
    callq read_int
    movq %rax, temp22319
    cmpq temp22319, temp22318
    je label22333
    jmp label22334
    
label22334:
    cmpq $1, $1
    jge label22331
    jmp label22332
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22316 : 'Boolean, temp22325 : 'Integer, temp22326 : 'Integer, temp22318 : 'Integer, temp22319 : 'Integer, x22313 : 'Integer, x22314 : 'Boolean, x22315 : 'Boolean, 
tsorted
:
'(label22333
  label22327
  label22328
  label22329
  label22330
  label22331
  label22332
  label22334
  start)
CFG
:
#<multigraph>
label22333:
    liveness
:
(list (set %rsp) (set x22313 %rsp) (set %rax %rsp))
movq $1, x22313
movq x22313, %rax
jmp conclusion

label22327:
    liveness
:
(list (set temp22325 temp22326 %rsp) (set %rax temp22326 %rsp) (set %rax %rsp))
movq temp22325, %rax
addq temp22326, %rax
jmp conclusion

label22328:
    liveness
:
(list (set temp22325 %rsp) (set temp22325 temp22326 %rsp))
movq $1, temp22326
jmp label22327

label22329:
    liveness
:
(list (set temp22325 %rsp) (set temp22325 temp22326 %rsp))
movq $2, temp22326
jmp label22327

label22330:
    liveness
:
(list
 (set x22314 %rsp)
 (set %rax x22314 %rsp)
 (set temp22325 x22314 %rsp)
 (set temp22325 %rsp)
 (set temp22325 %rsp))
callq read_int
movq %rax, temp22325
cmpq $1, x22314
je label22328
jmp label22329

label22331:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set x22315 %rsp)
 (set x22314 %rsp)
 (set x22314 %rsp))
cmpq $5, $5
setg %al
movzbq %al, x22315
movq x22315, x22314
xorq $1, x22314
jmp label22330

label22332:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set x22316 %rsp)
 (set x22314 %rsp))
cmpq $5, $5
setl %al
movzbq %al, x22316
movq x22316, x22314
jmp label22330

label22334:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp))
cmpq $1, $1
jge label22331
jmp label22332

start:
    liveness
:
(list
 (set %al %rsp)
 (set %rax %al %rsp)
 (set %al temp22318 %rsp)
 (set %rax %al temp22318 %rsp)
 (set %al temp22318 temp22319 %rsp)
 (set %al %rsp)
 (set %al %rsp))
callq read_int
movq %rax, temp22318
callq read_int
movq %rax, temp22319
cmpq temp22319, temp22318
je label22333
jmp label22334




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22316 : 'Boolean, temp22325 : 'Integer, temp22326 : 'Integer, temp22318 : 'Integer, temp22319 : 'Integer, x22313 : 'Integer, x22314 : 'Boolean, x22315 : 'Boolean, 
tsorted
:
'(label22333
  label22327
  label22328
  label22329
  label22330
  label22331
  label22332
  label22334
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x22314 x22315)
 (list x22314 x22316)
 (list x22315 x22314)
 (list x22316 x22314))
label22333:
    movq $1, x22313
    movq x22313, %rax
    jmp conclusion
    
label22327:
    movq temp22325, %rax
    addq temp22326, %rax
    jmp conclusion
    
label22328:
    movq $1, temp22326
    jmp label22327
    
label22329:
    movq $2, temp22326
    jmp label22327
    
label22330:
    callq read_int
    movq %rax, temp22325
    cmpq $1, x22314
    je label22328
    jmp label22329
    
label22331:
    cmpq $5, $5
    setg %al
    movzbq %al, x22315
    movq x22315, x22314
    xorq $1, x22314
    jmp label22330
    
label22332:
    cmpq $5, $5
    setl %al
    movzbq %al, x22316
    movq x22316, x22314
    jmp label22330
    
label22334:
    cmpq $1, $1
    jge label22331
    jmp label22332
    
start:
    callq read_int
    movq %rax, temp22318
    callq read_int
    movq %rax, temp22319
    cmpq temp22319, temp22318
    je label22333
    jmp label22334
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22316 : 'Boolean, temp22325 : 'Integer, temp22326 : 'Integer, temp22318 : 'Integer, temp22319 : 'Integer, x22313 : 'Integer, x22314 : 'Boolean, x22315 : 'Boolean, 
tsorted
:
'(label22333
  label22327
  label22328
  label22329
  label22330
  label22331
  label22332
  label22334
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x22314 x22315)
 (list x22314 x22316)
 (list x22315 x22314)
 (list x22316 x22314))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x22314 7)
 (cons temp22318 7)
 (cons temp22319 0)
 (cons temp22325 0)
 (cons temp22326 1)
 (cons x22315 0)
 (cons x22316 0)
 (cons x22313 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label22333:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label22327:
    movq %rcx, %rax
    addq %rdx, %rax
    jmp conclusion
    
label22328:
    movq $1, %rdx
    jmp label22327
    
label22329:
    movq $2, %rdx
    jmp label22327
    
label22330:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rbx
    je label22328
    jmp label22329
    
label22331:
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    xorq $1, %rbx
    jmp label22330
    
label22332:
    cmpq $5, $5
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    jmp label22330
    
label22334:
    cmpq $1, $1
    jge label22331
    jmp label22332
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label22333
    jmp label22334
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22316 : 'Boolean, temp22325 : 'Integer, temp22326 : 'Integer, temp22318 : 'Integer, temp22319 : 'Integer, x22313 : 'Integer, x22314 : 'Boolean, x22315 : 'Boolean, 
tsorted
:
'(label22333
  label22327
  label22328
  label22329
  label22330
  label22331
  label22332
  label22334
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x22314 x22315)
 (list x22314 x22316)
 (list x22315 x22314)
 (list x22316 x22314))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x22314 7)
 (cons temp22318 7)
 (cons temp22319 0)
 (cons temp22325 0)
 (cons temp22326 1)
 (cons x22315 0)
 (cons x22316 0)
 (cons x22313 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label22333:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label22327:
    movq %rcx, %rax
    addq %rdx, %rax
    jmp conclusion
    
label22328:
    movq $1, %rdx
    jmp label22327
    
label22329:
    movq $2, %rdx
    jmp label22327
    
label22330:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rbx
    je label22328
    jmp label22329
    
label22331:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    xorq $1, %rbx
    jmp label22330
    
label22332:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    jmp label22330
    
label22334:
    movq $1, %rax
    cmpq $1, %rax
    jge label22331
    jmp label22332
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label22333
    jmp label22334
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22316 : 'Boolean, temp22325 : 'Integer, temp22326 : 'Integer, temp22318 : 'Integer, temp22319 : 'Integer, x22313 : 'Integer, x22314 : 'Boolean, x22315 : 'Boolean, 
tsorted
:
'(label22333
  label22327
  label22328
  label22329
  label22330
  label22331
  label22332
  label22334
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x22314 x22315)
 (list x22314 x22316)
 (list x22315 x22314)
 (list x22316 x22314))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x22314 7)
 (cons temp22318 7)
 (cons temp22319 0)
 (cons temp22325 0)
 (cons temp22326 1)
 (cons x22315 0)
 (cons x22316 0)
 (cons x22313 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label22333:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label22327:
    movq %rcx, %rax
    addq %rdx, %rax
    jmp conclusion
    
label22328:
    movq $1, %rdx
    jmp label22327
    
label22329:
    movq $2, %rdx
    jmp label22327
    
label22330:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rbx
    je label22328
    jmp label22329
    
label22331:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    xorq $1, %rbx
    jmp label22330
    
label22332:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rbx
    jmp label22330
    
label22334:
    movq $1, %rax
    cmpq $1, %rax
    jge label22331
    jmp label22332
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label22333
    jmp label22334
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22333:
	movq	$1, %rcx
	movq	%rcx, %rax
	jmp _conclusion

	.align 16
_label22327:
	movq	%rcx, %rax
	addq	%rdx, %rax
	jmp _conclusion

	.align 16
_label22328:
	movq	$1, %rdx
	jmp _label22327

	.align 16
_label22329:
	movq	$2, %rdx
	jmp _label22327

	.align 16
_label22330:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rbx
	je _label22328
	jmp _label22329

	.align 16
_label22331:
	movq	$5, %rax
	cmpq	$5, %rax
	setg	%al
	movzbq	%al, %rcx
	movq	%rcx, %rbx
	xorq	$1, %rbx
	jmp _label22330

	.align 16
_label22332:
	movq	$5, %rax
	cmpq	$5, %rax
	setl	%al
	movzbq	%al, %rcx
	movq	%rcx, %rbx
	jmp _label22330

	.align 16
_label22334:
	movq	$1, %rax
	cmpq	$1, %rax
	jge _label22331
	jmp _label22332

	.align 16
_start:
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %rcx
	cmpq	%rcx, %rbx
	je _label22333
	jmp _label22334

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_09.rkt"


type-check: Boolean != Integer
in (if (> 1 1)
   #f
   1)


compile-file: output of type check @ utilities.rkt:2106
tsexp:
#f


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_10.rkt"


type-check: Integer != Boolean
in (if (+ 1 2)
   3
   4)


compile-file: output of type check @ utilities.rkt:2106
tsexp:
#f


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_11.rkt"


type-check: Boolean != Integer
in (+ 5 #t)

compile-file: output of type check @ utilities.rkt:2106
tsexp:
#f


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_12.rkt"


type-check: Integer != Boolean
in (and #t 5)

compile-file: output of type check @ utilities.rkt:2106
tsexp:
#f


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_13.rkt"


type-check: Integer != Boolean
in (or (+ 1 2) (read))

compile-file: output of type check @ utilities.rkt:2106
tsexp:
#f


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_14.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (if (> (+ 1 2) (+ 2 3))
            (> 3 1)
            (< 1 2))
         ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (if (> (+ 1 2) (+ 2 3))
            (> 3 1)
            (< 1 2))
         ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22335 (if (> (+ 1 2) (+ 2 3))
                 (> 3 1)
                 (< 1 2))
              ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22335 (if (let ([temp22337 (+ 1 2)])
                     (let ([temp22338 (+ 2 3)])
                        (> temp22337 temp22338)))
                 (> 3 1)
                 (< 1 2))
              ])
   (if (if #t
          (> 3 2)
          (< 1 2))
       
      42
      1)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp22337 = (+ 1 2);
    temp22338 = (+ 2 3);
    if (> temp22337 temp22338)
       goto label22346;
    else
       goto label22347;
label22343:
    return 42;
label22344:
    return 1;
label22345:
    if (> 3 2)
       goto label22343;
    else
       goto label22344;
label22346:
    x22335 = (> 3 1);
    goto label22345;
label22347:
    x22335 = (< 1 2);
    goto label22345;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22335 : 'Boolean, temp22337 : 'Integer, temp22338 : 'Integer, 
start:
    movq $1, temp22337
    addq $2, temp22337
    movq $2, temp22338
    addq $3, temp22338
    cmpq temp22338, temp22337
    jg label22346
    jmp label22347
    
label22343:
    movq $42, %rax
    jmp conclusion
    
label22344:
    movq $1, %rax
    jmp conclusion
    
label22345:
    cmpq $2, $3
    jg label22343
    jmp label22344
    
label22346:
    cmpq $1, $3
    setg %al
    movzbq %al, x22335
    jmp label22345
    
label22347:
    cmpq $2, $1
    setl %al
    movzbq %al, x22335
    jmp label22345
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22335 : 'Boolean, temp22337 : 'Integer, temp22338 : 'Integer, 
tsorted
:
'(label22343 label22344 label22345 label22346 label22347 start)
CFG
:
#<multigraph>
label22343:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label22344:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label22345:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $2, $3
jg label22343
jmp label22344

label22346:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp) (set %rsp))
cmpq $1, $3
setg %al
movzbq %al, x22335
jmp label22345

label22347:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp) (set %rsp))
cmpq $2, $1
setl %al
movzbq %al, x22335
jmp label22345

start:
    liveness
:
(list
 (set %al %rsp)
 (set %al temp22337 %rsp)
 (set %al temp22337 %rsp)
 (set %al temp22337 temp22338 %rsp)
 (set %al temp22337 temp22338 %rsp)
 (set %al %rsp)
 (set %al %rsp))
movq $1, temp22337
addq $2, temp22337
movq $2, temp22338
addq $3, temp22338
cmpq temp22338, temp22337
jg label22346
jmp label22347




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22335 : 'Boolean, temp22337 : 'Integer, temp22338 : 'Integer, 
tsorted
:
'(label22343 label22344 label22345 label22346 label22347 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label22343:
    movq $42, %rax
    jmp conclusion
    
label22344:
    movq $1, %rax
    jmp conclusion
    
label22345:
    cmpq $2, $3
    jg label22343
    jmp label22344
    
label22346:
    cmpq $1, $3
    setg %al
    movzbq %al, x22335
    jmp label22345
    
label22347:
    cmpq $2, $1
    setl %al
    movzbq %al, x22335
    jmp label22345
    
start:
    movq $1, temp22337
    addq $2, temp22337
    movq $2, temp22338
    addq $3, temp22338
    cmpq temp22338, temp22337
    jg label22346
    jmp label22347
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22335 : 'Boolean, temp22337 : 'Integer, temp22338 : 'Integer, 
tsorted
:
'(label22343 label22344 label22345 label22346 label22347 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %al -1)
 (cons %rsp -2)
 (cons temp22338 0)
 (cons temp22337 1)
 (cons x22335 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label22343:
    movq $42, %rax
    jmp conclusion
    
label22344:
    movq $1, %rax
    jmp conclusion
    
label22345:
    cmpq $2, $3
    jg label22343
    jmp label22344
    
label22346:
    cmpq $1, $3
    setg %al
    movzbq %al, %rcx
    jmp label22345
    
label22347:
    cmpq $2, $1
    setl %al
    movzbq %al, %rcx
    jmp label22345
    
start:
    movq $1, %rdx
    addq $2, %rdx
    movq $2, %rcx
    addq $3, %rcx
    cmpq %rcx, %rdx
    jg label22346
    jmp label22347
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22335 : 'Boolean, temp22337 : 'Integer, temp22338 : 'Integer, 
tsorted
:
'(label22343 label22344 label22345 label22346 label22347 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %al -1)
 (cons %rsp -2)
 (cons temp22338 0)
 (cons temp22337 1)
 (cons x22335 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label22343:
    movq $42, %rax
    jmp conclusion
    
label22344:
    movq $1, %rax
    jmp conclusion
    
label22345:
    movq $3, %rax
    cmpq $2, %rax
    jg label22343
    jmp label22344
    
label22346:
    movq $3, %rax
    cmpq $1, %rax
    setg %al
    movzbq %al, %rcx
    jmp label22345
    
label22347:
    movq $1, %rax
    cmpq $2, %rax
    setl %al
    movzbq %al, %rcx
    jmp label22345
    
start:
    movq $1, %rdx
    addq $2, %rdx
    movq $2, %rcx
    addq $3, %rcx
    cmpq %rcx, %rdx
    jg label22346
    jmp label22347
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22335 : 'Boolean, temp22337 : 'Integer, temp22338 : 'Integer, 
tsorted
:
'(label22343 label22344 label22345 label22346 label22347 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %al -1)
 (cons %rsp -2)
 (cons temp22338 0)
 (cons temp22337 1)
 (cons x22335 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label22343:
    movq $42, %rax
    jmp conclusion
    
label22344:
    movq $1, %rax
    jmp conclusion
    
label22345:
    movq $3, %rax
    cmpq $2, %rax
    jg label22343
    jmp label22344
    
label22346:
    movq $3, %rax
    cmpq $1, %rax
    setg %al
    movzbq %al, %rcx
    jmp label22345
    
label22347:
    movq $1, %rax
    cmpq $2, %rax
    setl %al
    movzbq %al, %rcx
    jmp label22345
    
start:
    movq $1, %rdx
    addq $2, %rdx
    movq $2, %rcx
    addq $3, %rcx
    cmpq %rcx, %rdx
    jg label22346
    jmp label22347
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22343:
	movq	$42, %rax
	jmp _conclusion

	.align 16
_label22344:
	movq	$1, %rax
	jmp _conclusion

	.align 16
_label22345:
	movq	$3, %rax
	cmpq	$2, %rax
	jg _label22343
	jmp _label22344

	.align 16
_label22346:
	movq	$3, %rax
	cmpq	$1, %rax
	setg	%al
	movzbq	%al, %rcx
	jmp _label22345

	.align 16
_label22347:
	movq	$1, %rax
	cmpq	$2, %rax
	setl	%al
	movzbq	%al, %rcx
	jmp _label22345

	.align 16
_start:
	movq	$1, %rdx
	addq	$2, %rdx
	movq	$2, %rcx
	addq	$3, %rcx
	cmpq	%rcx, %rdx
	jg _label22346
	jmp _label22347

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_15.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if (<= 1 2)
                   1
                   (let ([x (> 5 5)])
                      (if (not (let ([x (> 5 5)])
                                  (not (let ([x (> 5 5)])
                                          (not x)))))
                         1
                         2)
                      ))
                )))



compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (eq? (read) (read))
   (let ([x 1])
      x)
   (let ([x (if (>= 1 1)
               (let ([x (> 5 5)])
                  (not x))
               (let ([x (< 5 5)])
                  x))
            ])
      (+ (read) (if (<= 1 2)
                   1
                   (let ([x (> 5 5)])
                      (if (not (let ([x (> 5 5)])
                                  (not (let ([x (> 5 5)])
                                          (not x)))))
                         1
                         2)
                      ))
                )))



type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (eq? (read) (read))
   (let ([x22348 1])
      x22348)
   (let ([x22349 (if (>= 1 1)
                    (let ([x22350 (> 5 5)])
                       (not x22350))
                    (let ([x22351 (< 5 5)])
                       x22351))
                 ])
      (+ (read) (if (<= 1 2)
                   1
                   (let ([x22352 (> 5 5)])
                      (if (not (let ([x22353 (> 5 5)])
                                  (not (let ([x22354 (> 5 5)])
                                          (not x22354)))))
                         1
                         2)
                      ))
                )))



type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (let ([temp22356 (read)])
       (let ([temp22357 (read)])
          (eq? temp22356 temp22357)))
   (let ([x22348 1])
      x22348)
   (let ([x22349 (if (>= 1 1)
                    (let ([x22350 (> 5 5)])
                       (not x22350))
                    (let ([x22351 (< 5 5)])
                       x22351))
                 ])
      (let ([temp22363 (read)])
         (let ([temp22364 (if (<= 1 2)
                             1
                             (let ([x22352 (> 5 5)])
                                (if (let ([x22353 (> 5 5)])
                                       (let ([temp22368 (let ([x22354 (> 5 5)])
                                                           (let ([temp22371 (not x22354)])
                                                              (not temp22371)))])
                                          (not temp22368)))
                                   1
                                   2)
                                ))
                          ])
            (+ temp22363 temp22364)))))



type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22374:
    return (+ temp22363 temp22364);
label22375:
    temp22364 = 1;
    goto label22374;
label22376:
    temp22364 = 2;
    goto label22374;
label22377:
    temp22364 = 1;
    goto label22374;
label22378:
    x22352 = (> 5 5);
    x22353 = (> 5 5);
    x22354 = (> 5 5);
    temp22371 = (not x22354);
    temp22368 = (not temp22371);
    if (eq? temp22368 #f)
       goto label22375;
    else
       goto label22376;
label22379:
    temp22363 = (read);
    if (<= 1 2)
       goto label22377;
    else
       goto label22378;
label22380:
    x22350 = (> 5 5);
    x22349 = (not x22350);
    goto label22379;
start:
    temp22356 = (read);
    temp22357 = (read);
    if (eq? temp22356 temp22357)
       goto label22382;
    else
       goto label22383;
label22381:
    x22351 = (< 5 5);
    x22349 = x22351;
    goto label22379;
label22382:
    x22348 = 1;
    return x22348;
label22383:
    if (>= 1 1)
       goto label22380;
    else
       goto label22381;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22356 : 'Integer, temp22357 : 'Integer, temp22363 : 'Integer, x22348 : 'Integer, temp22364 : 'Integer, x22349 : 'Boolean, x22350 : 'Boolean, x22351 : 'Boolean, temp22368 : 'Boolean, x22352 : 'Boolean, x22353 : 'Boolean, x22354 : 'Boolean, temp22371 : 'Boolean, 
label22374:
    movq temp22363, %rax
    addq temp22364, %rax
    jmp conclusion
    
label22375:
    movq $1, temp22364
    jmp label22374
    
label22376:
    movq $2, temp22364
    jmp label22374
    
label22377:
    movq $1, temp22364
    jmp label22374
    
label22378:
    cmpq $5, $5
    setg %al
    movzbq %al, x22352
    cmpq $5, $5
    setg %al
    movzbq %al, x22353
    cmpq $5, $5
    setg %al
    movzbq %al, x22354
    movq x22354, temp22371
    xorq $1, temp22371
    movq temp22371, temp22368
    xorq $1, temp22368
    cmpq $0, temp22368
    je label22375
    jmp label22376
    
label22379:
    callq read_int
    movq %rax, temp22363
    cmpq $2, $1
    jle label22377
    jmp label22378
    
label22380:
    cmpq $5, $5
    setg %al
    movzbq %al, x22350
    movq x22350, x22349
    xorq $1, x22349
    jmp label22379
    
start:
    callq read_int
    movq %rax, temp22356
    callq read_int
    movq %rax, temp22357
    cmpq temp22357, temp22356
    je label22382
    jmp label22383
    
label22381:
    cmpq $5, $5
    setl %al
    movzbq %al, x22351
    movq x22351, x22349
    jmp label22379
    
label22382:
    movq $1, x22348
    movq x22348, %rax
    jmp conclusion
    
label22383:
    cmpq $1, $1
    jge label22380
    jmp label22381
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22356 : 'Integer, temp22357 : 'Integer, temp22363 : 'Integer, x22348 : 'Integer, temp22364 : 'Integer, x22349 : 'Boolean, x22350 : 'Boolean, x22351 : 'Boolean, temp22368 : 'Boolean, x22352 : 'Boolean, x22353 : 'Boolean, x22354 : 'Boolean, temp22371 : 'Boolean, 
tsorted
:
'(label22382
  label22374
  label22375
  label22376
  label22378
  label22377
  label22379
  label22380
  label22381
  label22383
  start)
CFG
:
#<multigraph>
label22382:
    liveness
:
(list (set %rsp) (set x22348 %rsp) (set %rax %rsp))
movq $1, x22348
movq x22348, %rax
jmp conclusion

label22374:
    liveness
:
(list (set temp22363 temp22364 %rsp) (set %rax temp22364 %rsp) (set %rax %rsp))
movq temp22363, %rax
addq temp22364, %rax
jmp conclusion

label22375:
    liveness
:
(list (set temp22363 %rsp) (set temp22363 temp22364 %rsp))
movq $1, temp22364
jmp label22374

label22376:
    liveness
:
(list (set temp22363 %rsp) (set temp22363 temp22364 %rsp))
movq $2, temp22364
jmp label22374

label22378:
    liveness
:
(list
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp)
 (set temp22363 x22354 %rsp)
 (set temp22363 temp22371 %rsp)
 (set temp22363 temp22371 %rsp)
 (set temp22363 temp22368 %rsp)
 (set temp22363 temp22368 %rsp)
 (set temp22363 %rsp)
 (set temp22363 %rsp))
cmpq $5, $5
setg %al
movzbq %al, x22352
cmpq $5, $5
setg %al
movzbq %al, x22353
cmpq $5, $5
setg %al
movzbq %al, x22354
movq x22354, temp22371
xorq $1, temp22371
movq temp22371, temp22368
xorq $1, temp22368
cmpq $0, temp22368
je label22375
jmp label22376

label22377:
    liveness
:
(list (set temp22363 %rsp) (set temp22363 temp22364 %rsp))
movq $1, temp22364
jmp label22374

label22379:
    liveness
:
(list
 (set %al %rsp)
 (set %rax %al %rsp)
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp)
 (set %al temp22363 %rsp))
callq read_int
movq %rax, temp22363
cmpq $2, $1
jle label22377
jmp label22378

label22380:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set %al x22350 %rsp)
 (set %al x22349 %rsp)
 (set %al %rsp))
cmpq $5, $5
setg %al
movzbq %al, x22350
movq x22350, x22349
xorq $1, x22349
jmp label22379

label22381:
    liveness
:
(list
 (set %al %rsp)
 (set %al %rsp)
 (set %al %rsp)
 (set %al x22351 %rsp)
 (set %al %rsp))
cmpq $5, $5
setl %al
movzbq %al, x22351
movq x22351, x22349
jmp label22379

label22383:
    liveness
:
(list (set %al %rsp) (set %al %rsp) (set %al %rsp))
cmpq $1, $1
jge label22380
jmp label22381

start:
    liveness
:
(list
 (set %al %rsp)
 (set %rax %al %rsp)
 (set temp22356 %al %rsp)
 (set %al %rsp %rax temp22356)
 (set temp22356 temp22357 %al %rsp)
 (set %al %rsp)
 (set %al %rsp))
callq read_int
movq %rax, temp22356
callq read_int
movq %rax, temp22357
cmpq temp22357, temp22356
je label22382
jmp label22383




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22356 : 'Integer, temp22357 : 'Integer, temp22363 : 'Integer, x22348 : 'Integer, temp22364 : 'Integer, x22349 : 'Boolean, x22350 : 'Boolean, x22351 : 'Boolean, temp22368 : 'Boolean, x22352 : 'Boolean, x22353 : 'Boolean, x22354 : 'Boolean, temp22371 : 'Boolean, 
tsorted
:
'(label22382
  label22374
  label22375
  label22376
  label22378
  label22377
  label22379
  label22380
  label22381
  label22383
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22368 temp22371)
 (list x22354 temp22371)
 (list temp22371 temp22368)
 (list temp22371 x22354)
 (list x22349 x22350)
 (list x22349 x22351)
 (list x22350 x22349)
 (list x22351 x22349))
label22382:
    movq $1, x22348
    movq x22348, %rax
    jmp conclusion
    
label22374:
    movq temp22363, %rax
    addq temp22364, %rax
    jmp conclusion
    
label22375:
    movq $1, temp22364
    jmp label22374
    
label22376:
    movq $2, temp22364
    jmp label22374
    
label22378:
    cmpq $5, $5
    setg %al
    movzbq %al, x22352
    cmpq $5, $5
    setg %al
    movzbq %al, x22353
    cmpq $5, $5
    setg %al
    movzbq %al, x22354
    movq x22354, temp22371
    xorq $1, temp22371
    movq temp22371, temp22368
    xorq $1, temp22368
    cmpq $0, temp22368
    je label22375
    jmp label22376
    
label22377:
    movq $1, temp22364
    jmp label22374
    
label22379:
    callq read_int
    movq %rax, temp22363
    cmpq $2, $1
    jle label22377
    jmp label22378
    
label22380:
    cmpq $5, $5
    setg %al
    movzbq %al, x22350
    movq x22350, x22349
    xorq $1, x22349
    jmp label22379
    
label22381:
    cmpq $5, $5
    setl %al
    movzbq %al, x22351
    movq x22351, x22349
    jmp label22379
    
label22383:
    cmpq $1, $1
    jge label22380
    jmp label22381
    
start:
    callq read_int
    movq %rax, temp22356
    callq read_int
    movq %rax, temp22357
    cmpq temp22357, temp22356
    je label22382
    jmp label22383
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22356 : 'Integer, temp22357 : 'Integer, temp22363 : 'Integer, x22348 : 'Integer, temp22364 : 'Integer, x22349 : 'Boolean, x22350 : 'Boolean, x22351 : 'Boolean, temp22368 : 'Boolean, x22352 : 'Boolean, x22353 : 'Boolean, x22354 : 'Boolean, temp22371 : 'Boolean, 
tsorted
:
'(label22382
  label22374
  label22375
  label22376
  label22378
  label22377
  label22379
  label22380
  label22381
  label22383
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22368 temp22371)
 (list x22354 temp22371)
 (list temp22371 temp22368)
 (list temp22371 x22354)
 (list x22349 x22350)
 (list x22349 x22351)
 (list x22350 x22349)
 (list x22351 x22349))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp22356 7)
 (cons temp22357 0)
 (cons temp22364 0)
 (cons temp22363 1)
 (cons temp22371 0)
 (cons x22354 0)
 (cons temp22368 0)
 (cons x22352 0)
 (cons x22353 0)
 (cons x22349 0)
 (cons x22351 0)
 (cons x22348 0)
 (cons x22350 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label22382:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label22374:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label22375:
    movq $1, %rcx
    jmp label22374
    
label22376:
    movq $2, %rcx
    jmp label22374
    
label22378:
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rcx
    xorq $1, %rcx
    movq %rcx, %rcx
    xorq $1, %rcx
    cmpq $0, %rcx
    je label22375
    jmp label22376
    
label22377:
    movq $1, %rcx
    jmp label22374
    
label22379:
    callq read_int
    movq %rax, %rdx
    cmpq $2, $1
    jle label22377
    jmp label22378
    
label22380:
    cmpq $5, $5
    setg %al
    movzbq %al, %rcx
    movq %rcx, %rcx
    xorq $1, %rcx
    jmp label22379
    
label22381:
    cmpq $5, $5
    setl %al
    movzbq %al, %rcx
    movq %rcx, %rcx
    jmp label22379
    
label22383:
    cmpq $1, $1
    jge label22380
    jmp label22381
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label22382
    jmp label22383
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22356 : 'Integer, temp22357 : 'Integer, temp22363 : 'Integer, x22348 : 'Integer, temp22364 : 'Integer, x22349 : 'Boolean, x22350 : 'Boolean, x22351 : 'Boolean, temp22368 : 'Boolean, x22352 : 'Boolean, x22353 : 'Boolean, x22354 : 'Boolean, temp22371 : 'Boolean, 
tsorted
:
'(label22382
  label22374
  label22375
  label22376
  label22378
  label22377
  label22379
  label22380
  label22381
  label22383
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22368 temp22371)
 (list x22354 temp22371)
 (list temp22371 temp22368)
 (list temp22371 x22354)
 (list x22349 x22350)
 (list x22349 x22351)
 (list x22350 x22349)
 (list x22351 x22349))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp22356 7)
 (cons temp22357 0)
 (cons temp22364 0)
 (cons temp22363 1)
 (cons temp22371 0)
 (cons x22354 0)
 (cons temp22368 0)
 (cons x22352 0)
 (cons x22353 0)
 (cons x22349 0)
 (cons x22351 0)
 (cons x22348 0)
 (cons x22350 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label22382:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label22374:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label22375:
    movq $1, %rcx
    jmp label22374
    
label22376:
    movq $2, %rcx
    jmp label22374
    
label22378:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    xorq $1, %rcx
    cmpq $0, %rcx
    je label22375
    jmp label22376
    
label22377:
    movq $1, %rcx
    jmp label22374
    
label22379:
    callq read_int
    movq %rax, %rdx
    movq $1, %rax
    cmpq $2, %rax
    jle label22377
    jmp label22378
    
label22380:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    jmp label22379
    
label22381:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    jmp label22379
    
label22383:
    movq $1, %rax
    cmpq $1, %rax
    jge label22380
    jmp label22381
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label22382
    jmp label22383
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22356 : 'Integer, temp22357 : 'Integer, temp22363 : 'Integer, x22348 : 'Integer, temp22364 : 'Integer, x22349 : 'Boolean, x22350 : 'Boolean, x22351 : 'Boolean, temp22368 : 'Boolean, x22352 : 'Boolean, x22353 : 'Boolean, x22354 : 'Boolean, temp22371 : 'Boolean, 
tsorted
:
'(label22382
  label22374
  label22375
  label22376
  label22378
  label22377
  label22379
  label22380
  label22381
  label22383
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22368 temp22371)
 (list x22354 temp22371)
 (list temp22371 temp22368)
 (list temp22371 x22354)
 (list x22349 x22350)
 (list x22349 x22351)
 (list x22350 x22349)
 (list x22351 x22349))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %al -1)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp22356 7)
 (cons temp22357 0)
 (cons temp22364 0)
 (cons temp22363 1)
 (cons temp22371 0)
 (cons x22354 0)
 (cons temp22368 0)
 (cons x22352 0)
 (cons x22353 0)
 (cons x22349 0)
 (cons x22351 0)
 (cons x22348 0)
 (cons x22350 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
label22382:
    movq $1, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label22374:
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label22375:
    movq $1, %rcx
    jmp label22374
    
label22376:
    movq $2, %rcx
    jmp label22374
    
label22378:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    xorq $1, %rcx
    cmpq $0, %rcx
    je label22375
    jmp label22376
    
label22377:
    movq $1, %rcx
    jmp label22374
    
label22379:
    callq read_int
    movq %rax, %rdx
    movq $1, %rax
    cmpq $2, %rax
    jle label22377
    jmp label22378
    
label22380:
    movq $5, %rax
    cmpq $5, %rax
    setg %al
    movzbq %al, %rcx
    xorq $1, %rcx
    jmp label22379
    
label22381:
    movq $5, %rax
    cmpq $5, %rax
    setl %al
    movzbq %al, %rcx
    jmp label22379
    
label22383:
    movq $1, %rax
    cmpq $1, %rax
    jge label22380
    jmp label22381
    
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq %rcx, %rbx
    je label22382
    jmp label22383
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22382:
	movq	$1, %rcx
	movq	%rcx, %rax
	jmp _conclusion

	.align 16
_label22374:
	movq	%rdx, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.align 16
_label22375:
	movq	$1, %rcx
	jmp _label22374

	.align 16
_label22376:
	movq	$2, %rcx
	jmp _label22374

	.align 16
_label22378:
	movq	$5, %rax
	cmpq	$5, %rax
	setg	%al
	movzbq	%al, %rcx
	movq	$5, %rax
	cmpq	$5, %rax
	setg	%al
	movzbq	%al, %rcx
	movq	$5, %rax
	cmpq	$5, %rax
	setg	%al
	movzbq	%al, %rcx
	xorq	$1, %rcx
	xorq	$1, %rcx
	cmpq	$0, %rcx
	je _label22375
	jmp _label22376

	.align 16
_label22377:
	movq	$1, %rcx
	jmp _label22374

	.align 16
_label22379:
	callq	_read_int
	movq	%rax, %rdx
	movq	$1, %rax
	cmpq	$2, %rax
	jle _label22377
	jmp _label22378

	.align 16
_label22380:
	movq	$5, %rax
	cmpq	$5, %rax
	setg	%al
	movzbq	%al, %rcx
	xorq	$1, %rcx
	jmp _label22379

	.align 16
_label22381:
	movq	$5, %rax
	cmpq	$5, %rax
	setl	%al
	movzbq	%al, %rcx
	jmp _label22379

	.align 16
_label22383:
	movq	$1, %rax
	cmpq	$1, %rax
	jge _label22380
	jmp _label22381

	.align 16
_start:
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %rcx
	cmpq	%rcx, %rbx
	je _label22382
	jmp _label22383

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_16.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(if (> (- 3) (- 4))
   42
   5)



compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (> (- 3) (- 4))
   42
   5)



type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (> (- 3) (- 4))
   42
   5)



type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(if (let ([temp22385 (- 3)])
       (let ([temp22386 (- 4)])
          (> temp22385 temp22386)))
   42
   5)



type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22388:
    return 5;
start:
    temp22385 = (- 3);
    temp22386 = (- 4);
    if (> temp22385 temp22386)
       goto label22387;
    else
       goto label22388;
label22387:
    return 42;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22385 : 'Integer, temp22386 : 'Integer, 
label22388:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, temp22385
    negq temp22385
    movq $4, temp22386
    negq temp22386
    cmpq temp22386, temp22385
    jg label22387
    jmp label22388
    
label22387:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22385 : 'Integer, temp22386 : 'Integer, 
tsorted
:
'(label22387 label22388 start)
CFG
:
#<multigraph>
label22387:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label22388:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $5, %rax
jmp conclusion

start:
    liveness
:
(list
 (set %rsp)
 (set temp22385 %rsp)
 (set temp22385 %rsp)
 (set temp22385 temp22386 %rsp)
 (set temp22385 temp22386 %rsp)
 (set %rsp)
 (set %rsp))
movq $3, temp22385
negq temp22385
movq $4, temp22386
negq temp22386
cmpq temp22386, temp22385
jg label22387
jmp label22388




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22385 : 'Integer, temp22386 : 'Integer, 
tsorted
:
'(label22387 label22388 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label22387:
    movq $42, %rax
    jmp conclusion
    
label22388:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, temp22385
    negq temp22385
    movq $4, temp22386
    negq temp22386
    cmpq temp22386, temp22385
    jg label22387
    jmp label22388
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22385 : 'Integer, temp22386 : 'Integer, 
tsorted
:
'(label22387 label22388 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp22386 0) (cons temp22385 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label22387:
    movq $42, %rax
    jmp conclusion
    
label22388:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, %rdx
    negq %rdx
    movq $4, %rcx
    negq %rcx
    cmpq %rcx, %rdx
    jg label22387
    jmp label22388
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22385 : 'Integer, temp22386 : 'Integer, 
tsorted
:
'(label22387 label22388 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp22386 0) (cons temp22385 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label22387:
    movq $42, %rax
    jmp conclusion
    
label22388:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, %rdx
    negq %rdx
    movq $4, %rcx
    negq %rcx
    cmpq %rcx, %rdx
    jg label22387
    jmp label22388
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22385 : 'Integer, temp22386 : 'Integer, 
tsorted
:
'(label22387 label22388 start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp22386 0) (cons temp22385 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
label22387:
    movq $42, %rax
    jmp conclusion
    
label22388:
    movq $5, %rax
    jmp conclusion
    
start:
    movq $3, %rdx
    negq %rdx
    movq $4, %rcx
    negq %rcx
    cmpq %rcx, %rdx
    jg label22387
    jmp label22388
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22387:
	movq	$42, %rax
	jmp _conclusion

	.align 16
_label22388:
	movq	$5, %rax
	jmp _conclusion

	.align 16
_start:
	movq	$3, %rdx
	negq	%rdx
	movq	$4, %rcx
	negq	%rcx
	cmpq	%rcx, %rdx
	jg _label22387
	jmp _label22388

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_17.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      42)
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      42)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22389 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x22389
      1
      42)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22389 (if (let ([temp22391 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp22391 8))
                 #t
                 #f)
              ])
   (if x22389
      1
      42)
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22393:
    return 1;
label22394:
    return 42;
label22395:
    if (eq? x22389 #t)
       goto label22393;
    else
       goto label22394;
label22396:
    x22389 = #t;
    goto label22395;
label22397:
    x22389 = #f;
    goto label22395;
start:
    if (>= 1 1)
       goto label22399;
    else
       goto label22400;
label22398:
    if (> temp22391 8)
       goto label22396;
    else
       goto label22397;
label22399:
    temp22391 = 8;
    goto label22398;
label22400:
    temp22391 = 9;
    goto label22398;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22389 : 'Boolean, temp22391 : 'Integer, 
label22393:
    movq $1, %rax
    jmp conclusion
    
label22394:
    movq $42, %rax
    jmp conclusion
    
label22395:
    cmpq $1, x22389
    je label22393
    jmp label22394
    
label22396:
    movq $1, x22389
    jmp label22395
    
label22397:
    movq $0, x22389
    jmp label22395
    
start:
    cmpq $1, $1
    jge label22399
    jmp label22400
    
label22398:
    cmpq $8, temp22391
    jg label22396
    jmp label22397
    
label22399:
    movq $8, temp22391
    jmp label22398
    
label22400:
    movq $9, temp22391
    jmp label22398
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22389 : 'Boolean, temp22391 : 'Integer, 
tsorted
:
'(label22394
  label22393
  label22395
  label22396
  label22397
  label22398
  label22399
  label22400
  start)
CFG
:
#<multigraph>
label22394:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion

label22393:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label22395:
    liveness
:
(list (set x22389 %rsp) (set %rsp) (set %rsp))
cmpq $1, x22389
je label22393
jmp label22394

label22396:
    liveness
:
(list (set %rsp) (set x22389 %rsp))
movq $1, x22389
jmp label22395

label22397:
    liveness
:
(list (set %rsp) (set x22389 %rsp))
movq $0, x22389
jmp label22395

label22398:
    liveness
:
(list (set temp22391 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp22391
jg label22396
jmp label22397

label22399:
    liveness
:
(list (set %rsp) (set temp22391 %rsp))
movq $8, temp22391
jmp label22398

label22400:
    liveness
:
(list (set %rsp) (set temp22391 %rsp))
movq $9, temp22391
jmp label22398

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label22399
jmp label22400




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22389 : 'Boolean, temp22391 : 'Integer, 
tsorted
:
'(label22394
  label22393
  label22395
  label22396
  label22397
  label22398
  label22399
  label22400
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label22394:
    movq $42, %rax
    jmp conclusion
    
label22393:
    movq $1, %rax
    jmp conclusion
    
label22395:
    cmpq $1, x22389
    je label22393
    jmp label22394
    
label22396:
    movq $1, x22389
    jmp label22395
    
label22397:
    movq $0, x22389
    jmp label22395
    
label22398:
    cmpq $8, temp22391
    jg label22396
    jmp label22397
    
label22399:
    movq $8, temp22391
    jmp label22398
    
label22400:
    movq $9, temp22391
    jmp label22398
    
start:
    cmpq $1, $1
    jge label22399
    jmp label22400
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22389 : 'Boolean, temp22391 : 'Integer, 
tsorted
:
'(label22394
  label22393
  label22395
  label22396
  label22397
  label22398
  label22399
  label22400
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp22391 0) (cons x22389 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label22394:
    movq $42, %rax
    jmp conclusion
    
label22393:
    movq $1, %rax
    jmp conclusion
    
label22395:
    cmpq $1, %rcx
    je label22393
    jmp label22394
    
label22396:
    movq $1, %rcx
    jmp label22395
    
label22397:
    movq $0, %rcx
    jmp label22395
    
label22398:
    cmpq $8, %rcx
    jg label22396
    jmp label22397
    
label22399:
    movq $8, %rcx
    jmp label22398
    
label22400:
    movq $9, %rcx
    jmp label22398
    
start:
    cmpq $1, $1
    jge label22399
    jmp label22400
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22389 : 'Boolean, temp22391 : 'Integer, 
tsorted
:
'(label22394
  label22393
  label22395
  label22396
  label22397
  label22398
  label22399
  label22400
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp22391 0) (cons x22389 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label22394:
    movq $42, %rax
    jmp conclusion
    
label22393:
    movq $1, %rax
    jmp conclusion
    
label22395:
    cmpq $1, %rcx
    je label22393
    jmp label22394
    
label22396:
    movq $1, %rcx
    jmp label22395
    
label22397:
    movq $0, %rcx
    jmp label22395
    
label22398:
    cmpq $8, %rcx
    jg label22396
    jmp label22397
    
label22399:
    movq $8, %rcx
    jmp label22398
    
label22400:
    movq $9, %rcx
    jmp label22398
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22399
    jmp label22400
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x22389 : 'Boolean, temp22391 : 'Integer, 
tsorted
:
'(label22394
  label22393
  label22395
  label22396
  label22397
  label22398
  label22399
  label22400
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp22391 0) (cons x22389 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label22394:
    movq $42, %rax
    jmp conclusion
    
label22393:
    movq $1, %rax
    jmp conclusion
    
label22395:
    cmpq $1, %rcx
    je label22393
    jmp label22394
    
label22396:
    movq $1, %rcx
    jmp label22395
    
label22397:
    movq $0, %rcx
    jmp label22395
    
label22398:
    cmpq $8, %rcx
    jg label22396
    jmp label22397
    
label22399:
    movq $8, %rcx
    jmp label22398
    
label22400:
    movq $9, %rcx
    jmp label22398
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22399
    jmp label22400
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22394:
	movq	$42, %rax
	jmp _conclusion

	.align 16
_label22393:
	movq	$1, %rax
	jmp _conclusion

	.align 16
_label22395:
	cmpq	$1, %rcx
	je _label22393
	jmp _label22394

	.align 16
_label22396:
	movq	$1, %rcx
	jmp _label22395

	.align 16
_label22397:
	movq	$0, %rcx
	jmp _label22395

	.align 16
_label22398:
	cmpq	$8, %rcx
	jg _label22396
	jmp _label22397

	.align 16
_label22399:
	movq	$8, %rcx
	jmp _label22398

	.align 16
_label22400:
	movq	$9, %rcx
	jmp _label22398

	.align 16
_start:
	movq	$1, %rax
	cmpq	$1, %rax
	jge _label22399
	jmp _label22400

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_18.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 42])
         (let ([a 42])
            (let ([a 42])
               (let ([a 42])
                  (let ([a 42])
                     (let ([a 42])
                        (let ([a 42])
                           (let ([a 42])
                              (let ([a 42])
                                 (let ([a 42])
                                    (let ([a 42])
                                       (let ([a 42])
                                          a)))))))))))))
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 42])
         (let ([a 42])
            (let ([a 42])
               (let ([a 42])
                  (let ([a 42])
                     (let ([a 42])
                        (let ([a 42])
                           (let ([a 42])
                              (let ([a 42])
                                 (let ([a 42])
                                    (let ([a 42])
                                       (let ([a 42])
                                          a)))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22401 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x22401
      1
      (let ([a22402 42])
         (let ([a22403 42])
            (let ([a22404 42])
               (let ([a22405 42])
                  (let ([a22406 42])
                     (let ([a22407 42])
                        (let ([a22408 42])
                           (let ([a22409 42])
                              (let ([a22410 42])
                                 (let ([a22411 42])
                                    (let ([a22412 42])
                                       (let ([a22413 42])
                                          a22413)))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22401 (if (let ([temp22415 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp22415 8))
                 #t
                 #f)
              ])
   (if x22401
      1
      (let ([a22402 42])
         (let ([a22403 42])
            (let ([a22404 42])
               (let ([a22405 42])
                  (let ([a22406 42])
                     (let ([a22407 42])
                        (let ([a22408 42])
                           (let ([a22409 42])
                              (let ([a22410 42])
                                 (let ([a22411 42])
                                    (let ([a22412 42])
                                       (let ([a22413 42])
                                          a22413)))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22420:
    x22401 = #t;
    goto label22419;
label22421:
    x22401 = #f;
    goto label22419;
label22422:
    if (> temp22415 8)
       goto label22420;
    else
       goto label22421;
label22423:
    temp22415 = 8;
    goto label22422;
label22424:
    temp22415 = 9;
    goto label22422;
start:
    if (>= 1 1)
       goto label22423;
    else
       goto label22424;
label22417:
    return 1;
label22418:
    a22402 = 42;
    a22403 = 42;
    a22404 = 42;
    a22405 = 42;
    a22406 = 42;
    a22407 = 42;
    a22408 = 42;
    a22409 = 42;
    a22410 = 42;
    a22411 = 42;
    a22412 = 42;
    a22413 = 42;
    return a22413;
label22419:
    if (eq? x22401 #t)
       goto label22417;
    else
       goto label22418;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22404 : 'Integer, a22405 : 'Integer, a22406 : 'Integer, a22407 : 'Integer, a22408 : 'Integer, a22409 : 'Integer, a22410 : 'Integer, a22411 : 'Integer, a22412 : 'Integer, a22413 : 'Integer, temp22415 : 'Integer, x22401 : 'Boolean, a22402 : 'Integer, a22403 : 'Integer, 
label22420:
    movq $1, x22401
    jmp label22419
    
label22421:
    movq $0, x22401
    jmp label22419
    
label22422:
    cmpq $8, temp22415
    jg label22420
    jmp label22421
    
label22423:
    movq $8, temp22415
    jmp label22422
    
label22424:
    movq $9, temp22415
    jmp label22422
    
start:
    cmpq $1, $1
    jge label22423
    jmp label22424
    
label22417:
    movq $1, %rax
    jmp conclusion
    
label22418:
    movq $42, a22402
    movq $42, a22403
    movq $42, a22404
    movq $42, a22405
    movq $42, a22406
    movq $42, a22407
    movq $42, a22408
    movq $42, a22409
    movq $42, a22410
    movq $42, a22411
    movq $42, a22412
    movq $42, a22413
    movq a22413, %rax
    jmp conclusion
    
label22419:
    cmpq $1, x22401
    je label22417
    jmp label22418
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22404 : 'Integer, a22405 : 'Integer, a22406 : 'Integer, a22407 : 'Integer, a22408 : 'Integer, a22409 : 'Integer, a22410 : 'Integer, a22411 : 'Integer, a22412 : 'Integer, a22413 : 'Integer, temp22415 : 'Integer, x22401 : 'Boolean, a22402 : 'Integer, a22403 : 'Integer, 
tsorted
:
'(label22417
  label22418
  label22419
  label22421
  label22420
  label22422
  label22423
  label22424
  start)
CFG
:
#<multigraph>
label22417:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label22418:
    liveness
:
(list
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set %rsp)
 (set a22413 %rsp)
 (set %rax %rsp))
movq $42, a22402
movq $42, a22403
movq $42, a22404
movq $42, a22405
movq $42, a22406
movq $42, a22407
movq $42, a22408
movq $42, a22409
movq $42, a22410
movq $42, a22411
movq $42, a22412
movq $42, a22413
movq a22413, %rax
jmp conclusion

label22419:
    liveness
:
(list (set x22401 %rsp) (set %rsp) (set %rsp))
cmpq $1, x22401
je label22417
jmp label22418

label22421:
    liveness
:
(list (set %rsp) (set x22401 %rsp))
movq $0, x22401
jmp label22419

label22420:
    liveness
:
(list (set %rsp) (set x22401 %rsp))
movq $1, x22401
jmp label22419

label22422:
    liveness
:
(list (set temp22415 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp22415
jg label22420
jmp label22421

label22423:
    liveness
:
(list (set %rsp) (set temp22415 %rsp))
movq $8, temp22415
jmp label22422

label22424:
    liveness
:
(list (set %rsp) (set temp22415 %rsp))
movq $9, temp22415
jmp label22422

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label22423
jmp label22424




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22404 : 'Integer, a22405 : 'Integer, a22406 : 'Integer, a22407 : 'Integer, a22408 : 'Integer, a22409 : 'Integer, a22410 : 'Integer, a22411 : 'Integer, a22412 : 'Integer, a22413 : 'Integer, temp22415 : 'Integer, x22401 : 'Boolean, a22402 : 'Integer, a22403 : 'Integer, 
tsorted
:
'(label22417
  label22418
  label22419
  label22421
  label22420
  label22422
  label22423
  label22424
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
label22417:
    movq $1, %rax
    jmp conclusion
    
label22418:
    movq $42, a22402
    movq $42, a22403
    movq $42, a22404
    movq $42, a22405
    movq $42, a22406
    movq $42, a22407
    movq $42, a22408
    movq $42, a22409
    movq $42, a22410
    movq $42, a22411
    movq $42, a22412
    movq $42, a22413
    movq a22413, %rax
    jmp conclusion
    
label22419:
    cmpq $1, x22401
    je label22417
    jmp label22418
    
label22421:
    movq $0, x22401
    jmp label22419
    
label22420:
    movq $1, x22401
    jmp label22419
    
label22422:
    cmpq $8, temp22415
    jg label22420
    jmp label22421
    
label22423:
    movq $8, temp22415
    jmp label22422
    
label22424:
    movq $9, temp22415
    jmp label22422
    
start:
    cmpq $1, $1
    jge label22423
    jmp label22424
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22404 : 'Integer, a22405 : 'Integer, a22406 : 'Integer, a22407 : 'Integer, a22408 : 'Integer, a22409 : 'Integer, a22410 : 'Integer, a22411 : 'Integer, a22412 : 'Integer, a22413 : 'Integer, temp22415 : 'Integer, x22401 : 'Boolean, a22402 : 'Integer, a22403 : 'Integer, 
tsorted
:
'(label22417
  label22418
  label22419
  label22421
  label22420
  label22422
  label22423
  label22424
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons a22403 0)
 (cons x22401 0)
 (cons a22413 0)
 (cons a22404 0)
 (cons a22408 0)
 (cons a22407 0)
 (cons a22410 0)
 (cons a22409 0)
 (cons a22406 0)
 (cons temp22415 0)
 (cons a22405 0)
 (cons a22412 0)
 (cons a22402 0)
 (cons a22411 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label22417:
    movq $1, %rax
    jmp conclusion
    
label22418:
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label22419:
    cmpq $1, %rcx
    je label22417
    jmp label22418
    
label22421:
    movq $0, %rcx
    jmp label22419
    
label22420:
    movq $1, %rcx
    jmp label22419
    
label22422:
    cmpq $8, %rcx
    jg label22420
    jmp label22421
    
label22423:
    movq $8, %rcx
    jmp label22422
    
label22424:
    movq $9, %rcx
    jmp label22422
    
start:
    cmpq $1, $1
    jge label22423
    jmp label22424
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22404 : 'Integer, a22405 : 'Integer, a22406 : 'Integer, a22407 : 'Integer, a22408 : 'Integer, a22409 : 'Integer, a22410 : 'Integer, a22411 : 'Integer, a22412 : 'Integer, a22413 : 'Integer, temp22415 : 'Integer, x22401 : 'Boolean, a22402 : 'Integer, a22403 : 'Integer, 
tsorted
:
'(label22417
  label22418
  label22419
  label22421
  label22420
  label22422
  label22423
  label22424
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons a22403 0)
 (cons x22401 0)
 (cons a22413 0)
 (cons a22404 0)
 (cons a22408 0)
 (cons a22407 0)
 (cons a22410 0)
 (cons a22409 0)
 (cons a22406 0)
 (cons temp22415 0)
 (cons a22405 0)
 (cons a22412 0)
 (cons a22402 0)
 (cons a22411 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label22417:
    movq $1, %rax
    jmp conclusion
    
label22418:
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label22419:
    cmpq $1, %rcx
    je label22417
    jmp label22418
    
label22421:
    movq $0, %rcx
    jmp label22419
    
label22420:
    movq $1, %rcx
    jmp label22419
    
label22422:
    cmpq $8, %rcx
    jg label22420
    jmp label22421
    
label22423:
    movq $8, %rcx
    jmp label22422
    
label22424:
    movq $9, %rcx
    jmp label22422
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22423
    jmp label22424
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22404 : 'Integer, a22405 : 'Integer, a22406 : 'Integer, a22407 : 'Integer, a22408 : 'Integer, a22409 : 'Integer, a22410 : 'Integer, a22411 : 'Integer, a22412 : 'Integer, a22413 : 'Integer, temp22415 : 'Integer, x22401 : 'Boolean, a22402 : 'Integer, a22403 : 'Integer, 
tsorted
:
'(label22417
  label22418
  label22419
  label22421
  label22420
  label22422
  label22423
  label22424
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons a22403 0)
 (cons x22401 0)
 (cons a22413 0)
 (cons a22404 0)
 (cons a22408 0)
 (cons a22407 0)
 (cons a22410 0)
 (cons a22409 0)
 (cons a22406 0)
 (cons temp22415 0)
 (cons a22405 0)
 (cons a22412 0)
 (cons a22402 0)
 (cons a22411 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
label22417:
    movq $1, %rax
    jmp conclusion
    
label22418:
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq $42, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label22419:
    cmpq $1, %rcx
    je label22417
    jmp label22418
    
label22421:
    movq $0, %rcx
    jmp label22419
    
label22420:
    movq $1, %rcx
    jmp label22419
    
label22422:
    cmpq $8, %rcx
    jg label22420
    jmp label22421
    
label22423:
    movq $8, %rcx
    jmp label22422
    
label22424:
    movq $9, %rcx
    jmp label22422
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22423
    jmp label22424
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22417:
	movq	$1, %rax
	jmp _conclusion

	.align 16
_label22418:
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	$42, %rcx
	movq	%rcx, %rax
	jmp _conclusion

	.align 16
_label22419:
	cmpq	$1, %rcx
	je _label22417
	jmp _label22418

	.align 16
_label22421:
	movq	$0, %rcx
	jmp _label22419

	.align 16
_label22420:
	movq	$1, %rcx
	jmp _label22419

	.align 16
_label22422:
	cmpq	$8, %rcx
	jg _label22420
	jmp _label22421

	.align 16
_label22423:
	movq	$8, %rcx
	jmp _label22422

	.align 16
_label22424:
	movq	$9, %rcx
	jmp _label22422

	.align 16
_start:
	movq	$1, %rax
	cmpq	$1, %rax
	jge _label22423
	jmp _label22424

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_19.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 2])
         (+ a (let ([a 2])
                 (+ a (let ([a 2])
                         (+ a (let ([a 2])
                                 (+ a (let ([a 2])
                                         (+ a (let ([a 2])
                                                 (+ a (let ([a 2])
                                                         (+ a (let ([a 2])
                                                                 (+ a (let ([a 2])
                                                                         (+ a (let ([a 2])
                                                                                 (+ a (let ([a 2])
                                                                                         (+ a (let ([a 2])
                                                                                                 a))))))))))))))))))))))))
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a 2])
         (+ a (let ([a 2])
                 (+ a (let ([a 2])
                         (+ a (let ([a 2])
                                 (+ a (let ([a 2])
                                         (+ a (let ([a 2])
                                                 (+ a (let ([a 2])
                                                         (+ a (let ([a 2])
                                                                 (+ a (let ([a 2])
                                                                         (+ a (let ([a 2])
                                                                                 (+ a (let ([a 2])
                                                                                         (+ a (let ([a 2])
                                                                                                 a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22425 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x22425
      1
      (let ([a22426 2])
         (+ a22426 (let ([a22427 2])
                      (+ a22427 (let ([a22428 2])
                                   (+ a22428 (let ([a22429 2])
                                                (+ a22429 (let ([a22430 2])
                                                             (+ a22430 (let ([a22431 2])
                                                                          (+ a22431 (let ([a22432 2])
                                                                                       (+ a22432 (let ([a22433 2])
                                                                                                    (+ a22433 (let ([a22434 2])
                                                                                                                 (+ a22434 (let ([a22435 2])
                                                                                                                              (+ a22435 (let ([a22436 2])
                                                                                                                                           (+ a22436 (let ([a22437 2])
                                                                                                                                                        a22437))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22425 (if (let ([temp22439 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp22439 8))
                 #t
                 #f)
              ])
   (if x22425
      1
      (let ([a22426 2])
         (let ([a22427 2])
            (let ([temp22442 (let ([a22428 2])
                                (let ([temp22444 (let ([a22429 2])
                                                    (let ([temp22446 (let ([a22430 2])
                                                                        (let ([temp22448 (let ([a22431 2])
                                                                                            (let ([temp22450 (let ([a22432 2])
                                                                                                                (let ([temp22452 (let ([a22433 2])
                                                                                                                                    (let ([temp22454 (let ([a22434 2])
                                                                                                                                                        (let ([temp22456 (let ([a22435 2])
                                                                                                                                                                            (let ([temp22458 (let ([a22436 2])
                                                                                                                                                                                                (let ([temp22460 (let ([a22437 2])
                                                                                                                                                                                                                    (let ([temp22462 a22437])
                                                                                                                                                                                                                       (+ a22436 temp22462)))])
                                                                                                                                                                                                   (+ a22435 temp22460)))])
                                                                                                                                                                               (+ a22434 temp22458)))])
                                                                                                                                                           (+ a22433 temp22456)))])
                                                                                                                                       (+ a22432 temp22454)))])
                                                                                                                   (+ a22431 temp22452)))])
                                                                                               (+ a22430 temp22450)))])
                                                                           (+ a22429 temp22448)))])
                                                       (+ a22428 temp22446)))])
                                   (+ a22427 temp22444)))])
               (+ a22426 temp22442)))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22468:
    if (> temp22439 8)
       goto label22466;
    else
       goto label22467;
label22469:
    temp22439 = 8;
    goto label22468;
label22470:
    temp22439 = 9;
    goto label22468;
start:
    if (>= 1 1)
       goto label22469;
    else
       goto label22470;
label22463:
    return 1;
label22464:
    a22426 = 2;
    a22427 = 2;
    a22428 = 2;
    a22429 = 2;
    a22430 = 2;
    a22431 = 2;
    a22432 = 2;
    a22433 = 2;
    a22434 = 2;
    a22435 = 2;
    a22436 = 2;
    a22437 = 2;
    temp22462 = a22437;
    temp22460 = (+ a22436 temp22462);
    temp22458 = (+ a22435 temp22460);
    temp22456 = (+ a22434 temp22458);
    temp22454 = (+ a22433 temp22456);
    temp22452 = (+ a22432 temp22454);
    temp22450 = (+ a22431 temp22452);
    temp22448 = (+ a22430 temp22450);
    temp22446 = (+ a22429 temp22448);
    temp22444 = (+ a22428 temp22446);
    temp22442 = (+ a22427 temp22444);
    return (+ a22426 temp22442);
label22465:
    if (eq? x22425 #t)
       goto label22463;
    else
       goto label22464;
label22466:
    x22425 = #t;
    goto label22465;
label22467:
    x22425 = #f;
    goto label22465;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22436 : 'Integer, a22437 : 'Integer, temp22439 : 'Integer, temp22442 : 'Integer, temp22444 : 'Integer, temp22446 : 'Integer, temp22448 : 'Integer, temp22450 : 'Integer, temp22452 : 'Integer, temp22454 : 'Integer, temp22456 : 'Integer, x22425 : 'Boolean, a22426 : 'Integer, temp22458 : 'Integer, a22427 : 'Integer, a22428 : 'Integer, temp22460 : 'Integer, a22429 : 'Integer, a22430 : 'Integer, temp22462 : 'Integer, a22431 : 'Integer, a22432 : 'Integer, a22433 : 'Integer, a22434 : 'Integer, a22435 : 'Integer, 
label22468:
    cmpq $8, temp22439
    jg label22466
    jmp label22467
    
label22469:
    movq $8, temp22439
    jmp label22468
    
label22470:
    movq $9, temp22439
    jmp label22468
    
start:
    cmpq $1, $1
    jge label22469
    jmp label22470
    
label22463:
    movq $1, %rax
    jmp conclusion
    
label22464:
    movq $2, a22426
    movq $2, a22427
    movq $2, a22428
    movq $2, a22429
    movq $2, a22430
    movq $2, a22431
    movq $2, a22432
    movq $2, a22433
    movq $2, a22434
    movq $2, a22435
    movq $2, a22436
    movq $2, a22437
    movq a22437, temp22462
    movq a22436, temp22460
    addq temp22462, temp22460
    movq a22435, temp22458
    addq temp22460, temp22458
    movq a22434, temp22456
    addq temp22458, temp22456
    movq a22433, temp22454
    addq temp22456, temp22454
    movq a22432, temp22452
    addq temp22454, temp22452
    movq a22431, temp22450
    addq temp22452, temp22450
    movq a22430, temp22448
    addq temp22450, temp22448
    movq a22429, temp22446
    addq temp22448, temp22446
    movq a22428, temp22444
    addq temp22446, temp22444
    movq a22427, temp22442
    addq temp22444, temp22442
    movq a22426, %rax
    addq temp22442, %rax
    jmp conclusion
    
label22465:
    cmpq $1, x22425
    je label22463
    jmp label22464
    
label22466:
    movq $1, x22425
    jmp label22465
    
label22467:
    movq $0, x22425
    jmp label22465
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22436 : 'Integer, a22437 : 'Integer, temp22439 : 'Integer, temp22442 : 'Integer, temp22444 : 'Integer, temp22446 : 'Integer, temp22448 : 'Integer, temp22450 : 'Integer, temp22452 : 'Integer, temp22454 : 'Integer, temp22456 : 'Integer, x22425 : 'Boolean, a22426 : 'Integer, temp22458 : 'Integer, a22427 : 'Integer, a22428 : 'Integer, temp22460 : 'Integer, a22429 : 'Integer, a22430 : 'Integer, temp22462 : 'Integer, a22431 : 'Integer, a22432 : 'Integer, a22433 : 'Integer, a22434 : 'Integer, a22435 : 'Integer, 
tsorted
:
'(label22463
  label22464
  label22465
  label22466
  label22467
  label22468
  label22469
  label22470
  start)
CFG
:
#<multigraph>
label22463:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label22464:
    liveness
:
(list
 (set %rsp)
 (set a22426 %rsp)
 (set a22426 a22427 %rsp)
 (set a22426 a22427 a22428 %rsp)
 (set a22426 a22427 a22428 a22429 %rsp)
 (set a22426 a22427 a22428 a22429 a22430 %rsp)
 (set a22426 a22427 a22428 a22429 a22430 a22431 %rsp)
 (set a22426 a22427 a22428 a22429 a22430 a22431 a22432 %rsp)
 (set a22426 a22427 a22428 a22429 a22430 a22431 a22432 a22433 %rsp)
 (set a22426 a22427 a22428 a22429 a22430 a22431 a22432 a22433 a22434 %rsp)
 (set
  a22426
  a22427
  a22428
  a22429
  a22430
  a22431
  a22432
  a22433
  a22434
  %rsp
  a22435)
 (set
  a22436
  a22426
  a22427
  a22428
  a22429
  a22430
  a22431
  a22432
  a22433
  a22434
  %rsp
  a22435)
 (set
  a22436
  a22437
  a22426
  a22427
  a22428
  a22429
  a22430
  a22431
  a22432
  a22433
  a22434
  %rsp
  a22435)
 (set
  a22436
  a22426
  a22427
  a22428
  a22429
  a22431
  a22432
  a22433
  a22434
  a22430
  temp22462
  %rsp
  a22435)
 (set
  a22426
  a22427
  a22429
  a22431
  a22432
  a22433
  a22434
  a22428
  temp22460
  a22430
  temp22462
  %rsp
  a22435)
 (set
  a22426
  a22427
  a22429
  a22430
  a22431
  a22432
  a22433
  a22434
  a22428
  temp22460
  %rsp
  a22435)
 (set
  a22427
  a22429
  a22430
  a22431
  a22432
  a22433
  a22434
  %rsp
  a22426
  temp22458
  a22428
  temp22460)
 (set
  a22427
  a22428
  a22429
  a22430
  a22431
  a22432
  a22433
  a22434
  %rsp
  a22426
  temp22458)
 (set
  temp22456
  a22427
  a22428
  a22429
  a22430
  a22431
  a22432
  a22433
  %rsp
  a22426
  temp22458)
 (set temp22456 a22426 a22427 a22428 a22429 a22430 a22431 a22432 a22433 %rsp)
 (set
  temp22454
  temp22456
  a22426
  a22427
  a22428
  a22429
  a22430
  a22431
  a22432
  %rsp)
 (set temp22454 a22426 a22427 a22428 a22429 a22430 a22431 a22432 %rsp)
 (set temp22452 temp22454 a22426 a22427 a22428 a22429 a22430 a22431 %rsp)
 (set temp22452 a22426 a22427 a22428 a22429 a22430 a22431 %rsp)
 (set temp22452 a22426 a22427 a22428 a22429 a22430 temp22450 %rsp)
 (set a22426 a22427 a22428 a22429 a22430 temp22450 %rsp)
 (set a22426 a22427 a22428 a22429 temp22448 temp22450 %rsp)
 (set a22426 a22427 a22428 a22429 temp22448 %rsp)
 (set a22426 a22427 a22428 temp22446 temp22448 %rsp)
 (set a22426 a22427 a22428 temp22446 %rsp)
 (set a22426 a22427 temp22444 temp22446 %rsp)
 (set a22426 a22427 temp22444 %rsp)
 (set temp22444 %rsp a22426 temp22442)
 (set %rsp a22426 temp22442)
 (set %rax temp22442 %rsp)
 (set %rax %rsp))
movq $2, a22426
movq $2, a22427
movq $2, a22428
movq $2, a22429
movq $2, a22430
movq $2, a22431
movq $2, a22432
movq $2, a22433
movq $2, a22434
movq $2, a22435
movq $2, a22436
movq $2, a22437
movq a22437, temp22462
movq a22436, temp22460
addq temp22462, temp22460
movq a22435, temp22458
addq temp22460, temp22458
movq a22434, temp22456
addq temp22458, temp22456
movq a22433, temp22454
addq temp22456, temp22454
movq a22432, temp22452
addq temp22454, temp22452
movq a22431, temp22450
addq temp22452, temp22450
movq a22430, temp22448
addq temp22450, temp22448
movq a22429, temp22446
addq temp22448, temp22446
movq a22428, temp22444
addq temp22446, temp22444
movq a22427, temp22442
addq temp22444, temp22442
movq a22426, %rax
addq temp22442, %rax
jmp conclusion

label22465:
    liveness
:
(list (set x22425 %rsp) (set %rsp) (set %rsp))
cmpq $1, x22425
je label22463
jmp label22464

label22466:
    liveness
:
(list (set %rsp) (set x22425 %rsp))
movq $1, x22425
jmp label22465

label22467:
    liveness
:
(list (set %rsp) (set x22425 %rsp))
movq $0, x22425
jmp label22465

label22468:
    liveness
:
(list (set temp22439 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp22439
jg label22466
jmp label22467

label22469:
    liveness
:
(list (set %rsp) (set temp22439 %rsp))
movq $8, temp22439
jmp label22468

label22470:
    liveness
:
(list (set %rsp) (set temp22439 %rsp))
movq $9, temp22439
jmp label22468

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label22469
jmp label22470




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22436 : 'Integer, a22437 : 'Integer, temp22439 : 'Integer, temp22442 : 'Integer, temp22444 : 'Integer, temp22446 : 'Integer, temp22448 : 'Integer, temp22450 : 'Integer, temp22452 : 'Integer, temp22454 : 'Integer, temp22456 : 'Integer, x22425 : 'Boolean, a22426 : 'Integer, temp22458 : 'Integer, a22427 : 'Integer, a22428 : 'Integer, temp22460 : 'Integer, a22429 : 'Integer, a22430 : 'Integer, temp22462 : 'Integer, a22431 : 'Integer, a22432 : 'Integer, a22433 : 'Integer, a22434 : 'Integer, a22435 : 'Integer, 
tsorted
:
'(label22463
  label22464
  label22465
  label22466
  label22467
  label22468
  label22469
  label22470
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22456 a22434)
 (list temp22458 a22435)
 (list a22427 temp22442)
 (list temp22452 a22432)
 (list temp22454 a22433)
 (list a22432 temp22452)
 (list a22433 temp22454)
 (list a22434 temp22456)
 (list a22435 temp22458)
 (list a22428 temp22444)
 (list temp22460 a22436)
 (list a22429 temp22446)
 (list temp22462 a22437)
 (list a22430 temp22448)
 (list a22431 temp22450)
 (list temp22442 a22427)
 (list a22436 temp22460)
 (list a22437 temp22462)
 (list temp22448 a22430)
 (list temp22450 a22431)
 (list temp22444 a22428)
 (list temp22446 a22429))
label22463:
    movq $1, %rax
    jmp conclusion
    
label22464:
    movq $2, a22426
    movq $2, a22427
    movq $2, a22428
    movq $2, a22429
    movq $2, a22430
    movq $2, a22431
    movq $2, a22432
    movq $2, a22433
    movq $2, a22434
    movq $2, a22435
    movq $2, a22436
    movq $2, a22437
    movq a22437, temp22462
    movq a22436, temp22460
    addq temp22462, temp22460
    movq a22435, temp22458
    addq temp22460, temp22458
    movq a22434, temp22456
    addq temp22458, temp22456
    movq a22433, temp22454
    addq temp22456, temp22454
    movq a22432, temp22452
    addq temp22454, temp22452
    movq a22431, temp22450
    addq temp22452, temp22450
    movq a22430, temp22448
    addq temp22450, temp22448
    movq a22429, temp22446
    addq temp22448, temp22446
    movq a22428, temp22444
    addq temp22446, temp22444
    movq a22427, temp22442
    addq temp22444, temp22442
    movq a22426, %rax
    addq temp22442, %rax
    jmp conclusion
    
label22465:
    cmpq $1, x22425
    je label22463
    jmp label22464
    
label22466:
    movq $1, x22425
    jmp label22465
    
label22467:
    movq $0, x22425
    jmp label22465
    
label22468:
    cmpq $8, temp22439
    jg label22466
    jmp label22467
    
label22469:
    movq $8, temp22439
    jmp label22468
    
label22470:
    movq $9, temp22439
    jmp label22468
    
start:
    cmpq $1, $1
    jge label22469
    jmp label22470
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22436 : 'Integer, a22437 : 'Integer, temp22439 : 'Integer, temp22442 : 'Integer, temp22444 : 'Integer, temp22446 : 'Integer, temp22448 : 'Integer, temp22450 : 'Integer, temp22452 : 'Integer, temp22454 : 'Integer, temp22456 : 'Integer, x22425 : 'Boolean, a22426 : 'Integer, temp22458 : 'Integer, a22427 : 'Integer, a22428 : 'Integer, temp22460 : 'Integer, a22429 : 'Integer, a22430 : 'Integer, temp22462 : 'Integer, a22431 : 'Integer, a22432 : 'Integer, a22433 : 'Integer, a22434 : 'Integer, a22435 : 'Integer, 
tsorted
:
'(label22463
  label22464
  label22465
  label22466
  label22467
  label22468
  label22469
  label22470
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22456 a22434)
 (list temp22458 a22435)
 (list a22427 temp22442)
 (list temp22452 a22432)
 (list temp22454 a22433)
 (list a22432 temp22452)
 (list a22433 temp22454)
 (list a22434 temp22456)
 (list a22435 temp22458)
 (list a22428 temp22444)
 (list temp22460 a22436)
 (list a22429 temp22446)
 (list temp22462 a22437)
 (list a22430 temp22448)
 (list a22431 temp22450)
 (list temp22442 a22427)
 (list a22436 temp22460)
 (list a22437 temp22462)
 (list temp22448 a22430)
 (list temp22450 a22431)
 (list temp22444 a22428)
 (list temp22446 a22429))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp22442 0)
 (cons a22426 1)
 (cons temp22444 2)
 (cons a22427 0)
 (cons temp22446 3)
 (cons a22428 2)
 (cons temp22448 4)
 (cons a22429 3)
 (cons temp22450 5)
 (cons a22430 4)
 (cons temp22452 6)
 (cons a22431 5)
 (cons temp22454 7)
 (cons a22432 6)
 (cons temp22456 8)
 (cons a22433 7)
 (cons temp22458 9)
 (cons a22434 8)
 (cons temp22460 10)
 (cons a22435 9)
 (cons temp22462 11)
 (cons a22436 10)
 (cons a22437 11)
 (cons temp22439 0)
 (cons x22425 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
1
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp)))
label22463:
    movq $1, %rax
    jmp conclusion
    
label22464:
    movq $2, %rdx
    movq $2, %rcx
    movq $2, %rsi
    movq $2, %rdi
    movq $2, %r8
    movq $2, %r9
    movq $2, %r10
    movq $2, %rbx
    movq $2, %r12
    movq $2, %r13
    movq $2, %r14
    movq $2, -48(%rbp)
    movq -48(%rbp), -48(%rbp)
    movq %r14, %r14
    addq -48(%rbp), %r14
    movq %r13, %r13
    addq %r14, %r13
    movq %r12, %r12
    addq %r13, %r12
    movq %rbx, %rbx
    addq %r12, %rbx
    movq %r10, %r10
    addq %rbx, %r10
    movq %r9, %r9
    addq %r10, %r9
    movq %r8, %r8
    addq %r9, %r8
    movq %rdi, %rdi
    addq %r8, %rdi
    movq %rsi, %rsi
    addq %rdi, %rsi
    movq %rcx, %rcx
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label22465:
    cmpq $1, %rcx
    je label22463
    jmp label22464
    
label22466:
    movq $1, %rcx
    jmp label22465
    
label22467:
    movq $0, %rcx
    jmp label22465
    
label22468:
    cmpq $8, %rcx
    jg label22466
    jmp label22467
    
label22469:
    movq $8, %rcx
    jmp label22468
    
label22470:
    movq $9, %rcx
    jmp label22468
    
start:
    cmpq $1, $1
    jge label22469
    jmp label22470
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22436 : 'Integer, a22437 : 'Integer, temp22439 : 'Integer, temp22442 : 'Integer, temp22444 : 'Integer, temp22446 : 'Integer, temp22448 : 'Integer, temp22450 : 'Integer, temp22452 : 'Integer, temp22454 : 'Integer, temp22456 : 'Integer, x22425 : 'Boolean, a22426 : 'Integer, temp22458 : 'Integer, a22427 : 'Integer, a22428 : 'Integer, temp22460 : 'Integer, a22429 : 'Integer, a22430 : 'Integer, temp22462 : 'Integer, a22431 : 'Integer, a22432 : 'Integer, a22433 : 'Integer, a22434 : 'Integer, a22435 : 'Integer, 
tsorted
:
'(label22463
  label22464
  label22465
  label22466
  label22467
  label22468
  label22469
  label22470
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22456 a22434)
 (list temp22458 a22435)
 (list a22427 temp22442)
 (list temp22452 a22432)
 (list temp22454 a22433)
 (list a22432 temp22452)
 (list a22433 temp22454)
 (list a22434 temp22456)
 (list a22435 temp22458)
 (list a22428 temp22444)
 (list temp22460 a22436)
 (list a22429 temp22446)
 (list temp22462 a22437)
 (list a22430 temp22448)
 (list a22431 temp22450)
 (list temp22442 a22427)
 (list a22436 temp22460)
 (list a22437 temp22462)
 (list temp22448 a22430)
 (list temp22450 a22431)
 (list temp22444 a22428)
 (list temp22446 a22429))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp22442 0)
 (cons a22426 1)
 (cons temp22444 2)
 (cons a22427 0)
 (cons temp22446 3)
 (cons a22428 2)
 (cons temp22448 4)
 (cons a22429 3)
 (cons temp22450 5)
 (cons a22430 4)
 (cons temp22452 6)
 (cons a22431 5)
 (cons temp22454 7)
 (cons a22432 6)
 (cons temp22456 8)
 (cons a22433 7)
 (cons temp22458 9)
 (cons a22434 8)
 (cons temp22460 10)
 (cons a22435 9)
 (cons temp22462 11)
 (cons a22436 10)
 (cons a22437 11)
 (cons temp22439 0)
 (cons x22425 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
1
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp)))
label22463:
    movq $1, %rax
    jmp conclusion
    
label22464:
    movq $2, %rdx
    movq $2, %rcx
    movq $2, %rsi
    movq $2, %rdi
    movq $2, %r8
    movq $2, %r9
    movq $2, %r10
    movq $2, %rbx
    movq $2, %r12
    movq $2, %r13
    movq $2, %r14
    movq $2, -48(%rbp)
    addq -48(%rbp), %r14
    addq %r14, %r13
    addq %r13, %r12
    addq %r12, %rbx
    addq %rbx, %r10
    addq %r10, %r9
    addq %r9, %r8
    addq %r8, %rdi
    addq %rdi, %rsi
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label22465:
    cmpq $1, %rcx
    je label22463
    jmp label22464
    
label22466:
    movq $1, %rcx
    jmp label22465
    
label22467:
    movq $0, %rcx
    jmp label22465
    
label22468:
    cmpq $8, %rcx
    jg label22466
    jmp label22467
    
label22469:
    movq $8, %rcx
    jmp label22468
    
label22470:
    movq $9, %rcx
    jmp label22468
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22469
    jmp label22470
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22436 : 'Integer, a22437 : 'Integer, temp22439 : 'Integer, temp22442 : 'Integer, temp22444 : 'Integer, temp22446 : 'Integer, temp22448 : 'Integer, temp22450 : 'Integer, temp22452 : 'Integer, temp22454 : 'Integer, temp22456 : 'Integer, x22425 : 'Boolean, a22426 : 'Integer, temp22458 : 'Integer, a22427 : 'Integer, a22428 : 'Integer, temp22460 : 'Integer, a22429 : 'Integer, a22430 : 'Integer, temp22462 : 'Integer, a22431 : 'Integer, a22432 : 'Integer, a22433 : 'Integer, a22434 : 'Integer, a22435 : 'Integer, 
tsorted
:
'(label22463
  label22464
  label22465
  label22466
  label22467
  label22468
  label22469
  label22470
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22456 a22434)
 (list temp22458 a22435)
 (list a22427 temp22442)
 (list temp22452 a22432)
 (list temp22454 a22433)
 (list a22432 temp22452)
 (list a22433 temp22454)
 (list a22434 temp22456)
 (list a22435 temp22458)
 (list a22428 temp22444)
 (list temp22460 a22436)
 (list a22429 temp22446)
 (list temp22462 a22437)
 (list a22430 temp22448)
 (list a22431 temp22450)
 (list temp22442 a22427)
 (list a22436 temp22460)
 (list a22437 temp22462)
 (list temp22448 a22430)
 (list temp22450 a22431)
 (list temp22444 a22428)
 (list temp22446 a22429))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp22442 0)
 (cons a22426 1)
 (cons temp22444 2)
 (cons a22427 0)
 (cons temp22446 3)
 (cons a22428 2)
 (cons temp22448 4)
 (cons a22429 3)
 (cons temp22450 5)
 (cons a22430 4)
 (cons temp22452 6)
 (cons a22431 5)
 (cons temp22454 7)
 (cons a22432 6)
 (cons temp22456 8)
 (cons a22433 7)
 (cons temp22458 9)
 (cons a22434 8)
 (cons temp22460 10)
 (cons a22435 9)
 (cons temp22462 11)
 (cons a22436 10)
 (cons a22437 11)
 (cons temp22439 0)
 (cons x22425 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
1
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp)))
label22463:
    movq $1, %rax
    jmp conclusion
    
label22464:
    movq $2, %rdx
    movq $2, %rcx
    movq $2, %rsi
    movq $2, %rdi
    movq $2, %r8
    movq $2, %r9
    movq $2, %r10
    movq $2, %rbx
    movq $2, %r12
    movq $2, %r13
    movq $2, %r14
    movq $2, -48(%rbp)
    addq -48(%rbp), %r14
    addq %r14, %r13
    addq %r13, %r12
    addq %r12, %rbx
    addq %rbx, %r10
    addq %r10, %r9
    addq %r9, %r8
    addq %r8, %rdi
    addq %rdi, %rsi
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
label22465:
    cmpq $1, %rcx
    je label22463
    jmp label22464
    
label22466:
    movq $1, %rcx
    jmp label22465
    
label22467:
    movq $0, %rcx
    jmp label22465
    
label22468:
    cmpq $8, %rcx
    jg label22466
    jmp label22467
    
label22469:
    movq $8, %rcx
    jmp label22468
    
label22470:
    movq $9, %rcx
    jmp label22468
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22469
    jmp label22470
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22463:
	movq	$1, %rax
	jmp _conclusion

	.align 16
_label22464:
	movq	$2, %rdx
	movq	$2, %rcx
	movq	$2, %rsi
	movq	$2, %rdi
	movq	$2, %r8
	movq	$2, %r9
	movq	$2, %r10
	movq	$2, %rbx
	movq	$2, %r12
	movq	$2, %r13
	movq	$2, %r14
	movq	$2, -48(%rbp)
	addq	-48(%rbp), %r14
	addq	%r14, %r13
	addq	%r13, %r12
	addq	%r12, %rbx
	addq	%rbx, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	addq	%rdi, %rsi
	addq	%rsi, %rcx
	movq	%rdx, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.align 16
_label22465:
	cmpq	$1, %rcx
	je _label22463
	jmp _label22464

	.align 16
_label22466:
	movq	$1, %rcx
	jmp _label22465

	.align 16
_label22467:
	movq	$0, %rcx
	jmp _label22465

	.align 16
_label22468:
	cmpq	$8, %rcx
	jg _label22466
	jmp _label22467

	.align 16
_label22469:
	movq	$8, %rcx
	jmp _label22468

	.align 16
_label22470:
	movq	$9, %rcx
	jmp _label22468

	.align 16
_start:
	movq	$1, %rax
	cmpq	$1, %rax
	jge _label22469
	jmp _label22470

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_20.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (> (read) 1)
                  1
                  2)
               ])
         (+ a (let ([a (if (> (read) 1)
                          1
                          2)
                       ])
                 (+ a (let ([a (if (> (read) 1)
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (> (read) 1)
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (> (read) 1)
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (> (read) 1)
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (> (read) 1)
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (> (read) 1)
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (> (read) 1)
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (> (read) 1)
                  1
                  2)
               ])
         (+ a (let ([a (if (> (read) 1)
                          1
                          2)
                       ])
                 (+ a (let ([a (if (> (read) 1)
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (> (read) 1)
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (> (read) 1)
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (> (read) 1)
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (> (read) 1)
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (> (read) 1)
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (> (read) 1)
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (> (read) 1)
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22471 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x22471
      1
      (let ([a22472 (if (> (read) 1)
                       1
                       2)
                    ])
         (+ a22472 (let ([a22473 (if (> (read) 1)
                                    1
                                    2)
                                 ])
                      (+ a22473 (let ([a22474 (if (> (read) 1)
                                                 1
                                                 2)
                                              ])
                                   (+ a22474 (let ([a22475 (if (> (read) 1)
                                                              1
                                                              2)
                                                           ])
                                                (+ a22475 (let ([a22476 (if (> (read) 1)
                                                                           1
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a22477 (if (> (read) 1)
                                                                                        1
                                                                                        2)
                                                                                     ])
                                                                          (+ a22477 (let ([a22478 (if (> (read) 1)
                                                                                                     1
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a22478 (let ([a22479 (if (> (read) 1)
                                                                                                                  1
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a22479 (let ([a22480 (if (> (read) 1)
                                                                                                                               1
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a22480 (let ([a22481 (read)])
                                                                                                                              (+ a22481 (let ([a22482 (if (> (read) 1)
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a22482 (let ([a22483 (if (> (read) 1)
                                                                                                                                                                      1
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a22483))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22471 (if (let ([temp22485 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp22485 8))
                 #t
                 #f)
              ])
   (if x22471
      1
      (let ([a22472 (if (let ([temp22488 (read)])
                           (> temp22488 1))
                       1
                       2)
                    ])
         (let ([a22473 (if (let ([temp22492 (read)])
                              (> temp22492 1))
                          1
                          2)
                       ])
            (let ([temp22490 (let ([a22474 (if (let ([temp22496 (read)])
                                                  (> temp22496 1))
                                              1
                                              2)
                                           ])
                                (let ([temp22494 (let ([a22475 (if (let ([temp22500 (read)])
                                                                      (> temp22500 1))
                                                                  1
                                                                  2)
                                                               ])
                                                    (let ([temp22498 (let ([a22476 (if (let ([temp22504 (read)])
                                                                                          (> temp22504 1))
                                                                                      1
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp22502 (let ([temp22506 (read)])
                                                                                            (let ([a22477 (if (let ([temp22509 (read)])
                                                                                                                 (> temp22509 1))
                                                                                                             1
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp22507 (let ([a22478 (if (let ([temp22513 (read)])
                                                                                                                                     (> temp22513 1))
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp22511 (let ([a22479 (if (let ([temp22517 (read)])
                                                                                                                                                         (> temp22517 1))
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp22515 (let ([a22480 (if (let ([temp22521 (read)])
                                                                                                                                                                             (> temp22521 1))
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp22519 (let ([a22481 (read)])
                                                                                                                                                                               (let ([temp22523 (let ([a22482 (if (let ([temp22528 (read)])
                                                                                                                                                                                                                     (> temp22528 1))
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp22526 (let ([a22483 (if (let ([temp22532 (read)])
                                                                                                                                                                                                                                         (> temp22532 1))
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp22530 a22483])
                                                                                                                                                                                                                          (+ a22482 temp22530)))])
                                                                                                                                                                                                      (+ a22481 temp22526)))])
                                                                                                                                                                                  (+ a22480 temp22523)))])
                                                                                                                                                              (+ a22479 temp22519)))])
                                                                                                                                          (+ a22478 temp22515)))])
                                                                                                                      (+ a22477 temp22511)))])
                                                                                                  (+ temp22506 temp22507))))])
                                                                           (+ a22475 temp22502)))])
                                                       (+ a22474 temp22498)))])
                                   (+ a22473 temp22494)))])
               (+ a22472 temp22490)))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22565:
    a22472 = 2;
    goto label22563;
label22564:
    a22472 = 1;
    goto label22563;
label22567:
    temp22488 = (read);
    if (> temp22488 1)
       goto label22564;
    else
       goto label22565;
label22566:
    return 1;
label22569:
    x22471 = #t;
    goto label22568;
label22568:
    if (eq? x22471 #t)
       goto label22566;
    else
       goto label22567;
label22571:
    if (> temp22485 8)
       goto label22569;
    else
       goto label22570;
label22570:
    x22471 = #f;
    goto label22568;
label22573:
    temp22485 = 9;
    goto label22571;
label22572:
    temp22485 = 8;
    goto label22571;
label22549:
    a22477 = 1;
    goto label22548;
label22548:
    temp22513 = (read);
    if (> temp22513 1)
       goto label22546;
    else
       goto label22547;
label22551:
    temp22506 = (read);
    temp22509 = (read);
    if (> temp22509 1)
       goto label22549;
    else
       goto label22550;
label22550:
    a22477 = 2;
    goto label22548;
label22553:
    a22476 = 2;
    goto label22551;
label22552:
    a22476 = 1;
    goto label22551;
label22555:
    a22475 = 1;
    goto label22554;
label22554:
    temp22504 = (read);
    if (> temp22504 1)
       goto label22552;
    else
       goto label22553;
label22557:
    temp22500 = (read);
    if (> temp22500 1)
       goto label22555;
    else
       goto label22556;
label22556:
    a22475 = 2;
    goto label22554;
label22559:
    a22474 = 2;
    goto label22557;
label22558:
    a22474 = 1;
    goto label22557;
label22561:
    a22473 = 1;
    goto label22560;
label22560:
    temp22496 = (read);
    if (> temp22496 1)
       goto label22558;
    else
       goto label22559;
label22563:
    temp22492 = (read);
    if (> temp22492 1)
       goto label22561;
    else
       goto label22562;
label22562:
    a22473 = 2;
    goto label22560;
label22533:
    temp22530 = a22483;
    temp22526 = (+ a22482 temp22530);
    temp22523 = (+ a22481 temp22526);
    temp22519 = (+ a22480 temp22523);
    temp22515 = (+ a22479 temp22519);
    temp22511 = (+ a22478 temp22515);
    temp22507 = (+ a22477 temp22511);
    temp22502 = (+ temp22506 temp22507);
    temp22498 = (+ a22475 temp22502);
    temp22494 = (+ a22474 temp22498);
    temp22490 = (+ a22473 temp22494);
    return (+ a22472 temp22490);
label22535:
    a22483 = 2;
    goto label22533;
label22534:
    a22483 = 1;
    goto label22533;
label22537:
    a22482 = 1;
    goto label22536;
label22536:
    temp22532 = (read);
    if (> temp22532 1)
       goto label22534;
    else
       goto label22535;
label22539:
    a22481 = (read);
    temp22528 = (read);
    if (> temp22528 1)
       goto label22537;
    else
       goto label22538;
label22538:
    a22482 = 2;
    goto label22536;
label22541:
    a22480 = 2;
    goto label22539;
label22540:
    a22480 = 1;
    goto label22539;
label22543:
    a22479 = 1;
    goto label22542;
label22542:
    temp22521 = (read);
    if (> temp22521 1)
       goto label22540;
    else
       goto label22541;
label22545:
    temp22517 = (read);
    if (> temp22517 1)
       goto label22543;
    else
       goto label22544;
label22544:
    a22479 = 2;
    goto label22542;
label22547:
    a22478 = 2;
    goto label22545;
label22546:
    a22478 = 1;
    goto label22545;
start:
    if (>= 1 1)
       goto label22572;
    else
       goto label22573;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22500 : 'Integer, temp22502 : 'Integer, temp22504 : 'Integer, temp22507 : 'Integer, temp22506 : 'Integer, temp22509 : 'Integer, temp22511 : 'Integer, temp22513 : 'Integer, temp22515 : 'Integer, temp22485 : 'Integer, temp22488 : 'Integer, temp22490 : 'Integer, temp22492 : 'Integer, temp22494 : 'Integer, temp22496 : 'Integer, temp22498 : 'Integer, temp22532 : 'Integer, x22471 : 'Boolean, a22472 : 'Integer, a22473 : 'Integer, a22474 : 'Integer, a22475 : 'Integer, a22476 : 'Integer, a22477 : 'Integer, a22478 : 'Integer, a22479 : 'Integer, a22480 : 'Integer, a22481 : 'Integer, a22482 : 'Integer, a22483 : 'Integer, temp22517 : 'Integer, temp22519 : 'Integer, temp22521 : 'Integer, temp22523 : 'Integer, temp22526 : 'Integer, temp22528 : 'Integer, temp22530 : 'Integer, 
label22565:
    movq $2, a22472
    jmp label22563
    
label22564:
    movq $1, a22472
    jmp label22563
    
label22567:
    callq read_int
    movq %rax, temp22488
    cmpq $1, temp22488
    jg label22564
    jmp label22565
    
label22566:
    movq $1, %rax
    jmp conclusion
    
label22569:
    movq $1, x22471
    jmp label22568
    
label22568:
    cmpq $1, x22471
    je label22566
    jmp label22567
    
label22571:
    cmpq $8, temp22485
    jg label22569
    jmp label22570
    
label22570:
    movq $0, x22471
    jmp label22568
    
label22573:
    movq $9, temp22485
    jmp label22571
    
label22572:
    movq $8, temp22485
    jmp label22571
    
label22549:
    movq $1, a22477
    jmp label22548
    
label22548:
    callq read_int
    movq %rax, temp22513
    cmpq $1, temp22513
    jg label22546
    jmp label22547
    
label22551:
    callq read_int
    movq %rax, temp22506
    callq read_int
    movq %rax, temp22509
    cmpq $1, temp22509
    jg label22549
    jmp label22550
    
label22550:
    movq $2, a22477
    jmp label22548
    
label22553:
    movq $2, a22476
    jmp label22551
    
label22552:
    movq $1, a22476
    jmp label22551
    
label22555:
    movq $1, a22475
    jmp label22554
    
label22554:
    callq read_int
    movq %rax, temp22504
    cmpq $1, temp22504
    jg label22552
    jmp label22553
    
label22557:
    callq read_int
    movq %rax, temp22500
    cmpq $1, temp22500
    jg label22555
    jmp label22556
    
label22556:
    movq $2, a22475
    jmp label22554
    
label22559:
    movq $2, a22474
    jmp label22557
    
label22558:
    movq $1, a22474
    jmp label22557
    
label22561:
    movq $1, a22473
    jmp label22560
    
label22560:
    callq read_int
    movq %rax, temp22496
    cmpq $1, temp22496
    jg label22558
    jmp label22559
    
label22563:
    callq read_int
    movq %rax, temp22492
    cmpq $1, temp22492
    jg label22561
    jmp label22562
    
label22562:
    movq $2, a22473
    jmp label22560
    
label22533:
    movq a22483, temp22530
    movq a22482, temp22526
    addq temp22530, temp22526
    movq a22481, temp22523
    addq temp22526, temp22523
    movq a22480, temp22519
    addq temp22523, temp22519
    movq a22479, temp22515
    addq temp22519, temp22515
    movq a22478, temp22511
    addq temp22515, temp22511
    movq a22477, temp22507
    addq temp22511, temp22507
    movq temp22506, temp22502
    addq temp22507, temp22502
    movq a22475, temp22498
    addq temp22502, temp22498
    movq a22474, temp22494
    addq temp22498, temp22494
    movq a22473, temp22490
    addq temp22494, temp22490
    movq a22472, %rax
    addq temp22490, %rax
    jmp conclusion
    
label22535:
    movq $2, a22483
    jmp label22533
    
label22534:
    movq $1, a22483
    jmp label22533
    
label22537:
    movq $1, a22482
    jmp label22536
    
label22536:
    callq read_int
    movq %rax, temp22532
    cmpq $1, temp22532
    jg label22534
    jmp label22535
    
label22539:
    callq read_int
    movq %rax, a22481
    callq read_int
    movq %rax, temp22528
    cmpq $1, temp22528
    jg label22537
    jmp label22538
    
label22538:
    movq $2, a22482
    jmp label22536
    
label22541:
    movq $2, a22480
    jmp label22539
    
label22540:
    movq $1, a22480
    jmp label22539
    
label22543:
    movq $1, a22479
    jmp label22542
    
label22542:
    callq read_int
    movq %rax, temp22521
    cmpq $1, temp22521
    jg label22540
    jmp label22541
    
label22545:
    callq read_int
    movq %rax, temp22517
    cmpq $1, temp22517
    jg label22543
    jmp label22544
    
label22544:
    movq $2, a22479
    jmp label22542
    
label22547:
    movq $2, a22478
    jmp label22545
    
label22546:
    movq $1, a22478
    jmp label22545
    
start:
    cmpq $1, $1
    jge label22572
    jmp label22573
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22500 : 'Integer, temp22502 : 'Integer, temp22504 : 'Integer, temp22507 : 'Integer, temp22506 : 'Integer, temp22509 : 'Integer, temp22511 : 'Integer, temp22513 : 'Integer, temp22515 : 'Integer, temp22485 : 'Integer, temp22488 : 'Integer, temp22490 : 'Integer, temp22492 : 'Integer, temp22494 : 'Integer, temp22496 : 'Integer, temp22498 : 'Integer, temp22532 : 'Integer, x22471 : 'Boolean, a22472 : 'Integer, a22473 : 'Integer, a22474 : 'Integer, a22475 : 'Integer, a22476 : 'Integer, a22477 : 'Integer, a22478 : 'Integer, a22479 : 'Integer, a22480 : 'Integer, a22481 : 'Integer, a22482 : 'Integer, a22483 : 'Integer, temp22517 : 'Integer, temp22519 : 'Integer, temp22521 : 'Integer, temp22523 : 'Integer, temp22526 : 'Integer, temp22528 : 'Integer, temp22530 : 'Integer, 
tsorted
:
'(label22533
  label22535
  label22534
  label22536
  label22537
  label22538
  label22539
  label22541
  label22540
  label22542
  label22543
  label22544
  label22545
  label22547
  label22546
  label22548
  label22549
  label22550
  label22551
  label22553
  label22552
  label22554
  label22555
  label22556
  label22557
  label22559
  label22558
  label22560
  label22561
  label22562
  label22563
  label22566
  label22564
  label22565
  label22567
  label22568
  label22569
  label22570
  label22571
  label22573
  label22572
  start)
CFG
:
#<multigraph>
label22533:
    liveness
:
(list
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  a22474
  temp22506
  a22483
  %rsp)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  %rsp
  a22474
  temp22506
  a22482
  temp22530)
 (set
  a22472
  a22473
  a22475
  a22477
  a22479
  a22480
  a22481
  temp22530
  %rsp
  a22474
  temp22506
  a22478
  temp22526)
 (set
  a22472
  a22473
  a22475
  a22477
  a22479
  a22480
  a22481
  %rsp
  a22474
  temp22506
  a22478
  temp22526)
 (set
  a22472
  a22473
  a22477
  a22479
  a22480
  %rsp
  a22474
  temp22506
  a22475
  temp22523
  a22478
  temp22526)
 (set
  a22472
  a22473
  a22477
  a22478
  a22479
  a22480
  %rsp
  a22474
  temp22506
  a22475
  temp22523)
 (set
  temp22519
  a22472
  a22473
  a22477
  a22478
  a22479
  %rsp
  a22474
  temp22506
  a22475
  temp22523)
 (set
  temp22519
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  %rsp
  a22474
  temp22506)
 (set
  temp22519
  a22472
  a22473
  a22475
  a22477
  a22478
  a22474
  temp22506
  temp22515
  %rsp)
 (set a22472 a22473 a22475 a22477 a22478 a22474 temp22506 temp22515 %rsp)
 (set a22472 a22473 a22475 a22477 temp22511 a22474 temp22506 temp22515 %rsp)
 (set a22472 a22473 a22475 a22477 temp22511 %rsp a22474 temp22506)
 (set a22472 a22473 temp22511 %rsp a22474 temp22506 a22475 temp22507)
 (set a22472 a22473 %rsp a22474 temp22506 a22475 temp22507)
 (set temp22502 a22472 a22473 a22474 %rsp a22475 temp22507)
 (set temp22502 a22472 a22473 a22474 a22475 %rsp)
 (set temp22502 a22472 a22473 a22474 temp22498 %rsp)
 (set a22472 a22473 a22474 temp22498 %rsp)
 (set a22472 a22473 temp22494 temp22498 %rsp)
 (set a22472 a22473 temp22494 %rsp)
 (set a22472 temp22490 temp22494 %rsp)
 (set a22472 temp22490 %rsp)
 (set %rax temp22490 %rsp)
 (set %rax %rsp))
movq a22483, temp22530
movq a22482, temp22526
addq temp22530, temp22526
movq a22481, temp22523
addq temp22526, temp22523
movq a22480, temp22519
addq temp22523, temp22519
movq a22479, temp22515
addq temp22519, temp22515
movq a22478, temp22511
addq temp22515, temp22511
movq a22477, temp22507
addq temp22511, temp22507
movq temp22506, temp22502
addq temp22507, temp22502
movq a22475, temp22498
addq temp22502, temp22498
movq a22474, temp22494
addq temp22498, temp22494
movq a22473, temp22490
addq temp22494, temp22490
movq a22472, %rax
addq temp22490, %rax
jmp conclusion

label22535:
    liveness
:
(list
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  %rsp
  a22474
  temp22506)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  a22474
  temp22506
  a22483
  %rsp))
movq $2, a22483
jmp label22533

label22534:
    liveness
:
(list
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  %rsp
  a22474
  temp22506)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  a22474
  temp22506
  a22483
  %rsp))
movq $1, a22483
jmp label22533

label22536:
    liveness
:
(list
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  %rsp
  a22474
  temp22506)
 (set
  %rax
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  %rsp
  a22474
  temp22506)
 (set
  temp22532
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  %rsp
  a22474
  temp22506)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  %rsp
  a22474
  temp22506)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  %rsp
  a22474
  temp22506))
callq read_int
movq %rax, temp22532
cmpq $1, temp22532
jg label22534
jmp label22535

label22537:
    liveness
:
(list
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  %rsp
  a22474
  temp22506)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  %rsp
  a22474
  temp22506))
movq $1, a22482
jmp label22536

label22538:
    liveness
:
(list
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  %rsp
  a22474
  temp22506)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  a22482
  %rsp
  a22474
  temp22506))
movq $2, a22482
jmp label22536

label22539:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 a22478 a22479 a22480 %rsp a22474 temp22506)
 (set
  %rax
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  %rsp
  a22474
  temp22506)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  %rsp
  a22474
  temp22506)
 (set
  %rax
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  %rsp
  a22474
  temp22506)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22481
  %rsp
  a22474
  temp22506
  a22480
  temp22528)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  %rsp
  a22474
  temp22506)
 (set
  a22472
  a22473
  a22475
  a22477
  a22478
  a22479
  a22480
  a22481
  %rsp
  a22474
  temp22506))
callq read_int
movq %rax, a22481
callq read_int
movq %rax, temp22528
cmpq $1, temp22528
jg label22537
jmp label22538

label22541:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 a22478 a22479 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 a22478 a22479 a22480 %rsp a22474 temp22506))
movq $2, a22480
jmp label22539

label22540:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 a22478 a22479 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 a22478 a22479 a22480 %rsp a22474 temp22506))
movq $1, a22480
jmp label22539

label22542:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 a22478 a22479 %rsp a22474 temp22506)
 (set %rax a22472 a22473 a22475 a22477 a22478 a22479 %rsp a22474 temp22506)
 (set
  a22472
  a22475
  a22477
  a22478
  a22479
  %rsp
  a22473
  temp22521
  a22474
  temp22506)
 (set a22472 a22473 a22475 a22477 a22478 a22479 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 a22478 a22479 %rsp a22474 temp22506))
callq read_int
movq %rax, temp22521
cmpq $1, temp22521
jg label22540
jmp label22541

label22543:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 a22478 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 a22478 a22479 %rsp a22474 temp22506))
movq $1, a22479
jmp label22542

label22544:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 a22478 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 a22478 a22479 %rsp a22474 temp22506))
movq $2, a22479
jmp label22542

label22545:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 a22478 %rsp a22474 temp22506)
 (set %rax a22472 a22473 a22475 a22477 a22478 %rsp a22474 temp22506)
 (set temp22517 a22472 a22473 a22475 a22477 a22478 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 a22478 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 a22478 %rsp a22474 temp22506))
callq read_int
movq %rax, temp22517
cmpq $1, temp22517
jg label22543
jmp label22544

label22547:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 a22478 %rsp a22474 temp22506))
movq $2, a22478
jmp label22545

label22546:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 a22478 %rsp a22474 temp22506))
movq $1, a22478
jmp label22545

label22548:
    liveness
:
(list
 (set a22472 a22473 a22475 a22477 %rsp a22474 temp22506)
 (set %rax a22472 a22473 a22475 a22477 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 temp22513 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 %rsp a22474 temp22506))
callq read_int
movq %rax, temp22513
cmpq $1, temp22513
jg label22546
jmp label22547

label22549:
    liveness
:
(list
 (set a22472 a22473 a22475 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 %rsp a22474 temp22506))
movq $1, a22477
jmp label22548

label22550:
    liveness
:
(list
 (set a22472 a22473 a22475 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 a22477 %rsp a22474 temp22506))
movq $2, a22477
jmp label22548

label22551:
    liveness
:
(list
 (set a22472 a22473 a22474 a22475 %rsp)
 (set %rax a22472 a22473 a22474 a22475 %rsp)
 (set a22472 a22473 a22475 %rsp a22474 temp22506)
 (set %rax a22472 a22473 a22475 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 temp22509 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 %rsp a22474 temp22506)
 (set a22472 a22473 a22475 %rsp a22474 temp22506))
callq read_int
movq %rax, temp22506
callq read_int
movq %rax, temp22509
cmpq $1, temp22509
jg label22549
jmp label22550

label22553:
    liveness
:
(list
 (set a22472 a22473 a22474 a22475 %rsp)
 (set a22472 a22473 a22474 a22475 %rsp))
movq $2, a22476
jmp label22551

label22552:
    liveness
:
(list
 (set a22472 a22473 a22474 a22475 %rsp)
 (set a22472 a22473 a22474 a22475 %rsp))
movq $1, a22476
jmp label22551

label22554:
    liveness
:
(list
 (set a22472 a22473 a22474 a22475 %rsp)
 (set %rax a22472 a22473 a22474 a22475 %rsp)
 (set a22473 a22474 a22475 %rsp a22472 temp22504)
 (set a22472 a22473 a22474 a22475 %rsp)
 (set a22472 a22473 a22474 a22475 %rsp))
callq read_int
movq %rax, temp22504
cmpq $1, temp22504
jg label22552
jmp label22553

label22555:
    liveness
:
(list (set a22472 a22473 a22474 %rsp) (set a22472 a22473 a22474 a22475 %rsp))
movq $1, a22475
jmp label22554

label22556:
    liveness
:
(list (set a22472 a22473 a22474 %rsp) (set a22472 a22473 a22474 a22475 %rsp))
movq $2, a22475
jmp label22554

label22557:
    liveness
:
(list
 (set a22472 a22473 a22474 %rsp)
 (set %rax a22472 a22473 a22474 %rsp)
 (set temp22500 a22472 a22473 a22474 %rsp)
 (set a22472 a22473 a22474 %rsp)
 (set a22472 a22473 a22474 %rsp))
callq read_int
movq %rax, temp22500
cmpq $1, temp22500
jg label22555
jmp label22556

label22559:
    liveness
:
(list (set a22472 a22473 %rsp) (set a22472 a22473 a22474 %rsp))
movq $2, a22474
jmp label22557

label22558:
    liveness
:
(list (set a22472 a22473 %rsp) (set a22472 a22473 a22474 %rsp))
movq $1, a22474
jmp label22557

label22560:
    liveness
:
(list
 (set a22472 a22473 %rsp)
 (set %rax a22472 a22473 %rsp)
 (set a22472 a22473 temp22496 %rsp)
 (set a22472 a22473 %rsp)
 (set a22472 a22473 %rsp))
callq read_int
movq %rax, temp22496
cmpq $1, temp22496
jg label22558
jmp label22559

label22561:
    liveness
:
(list (set a22472 %rsp) (set a22472 a22473 %rsp))
movq $1, a22473
jmp label22560

label22562:
    liveness
:
(list (set a22472 %rsp) (set a22472 a22473 %rsp))
movq $2, a22473
jmp label22560

label22563:
    liveness
:
(list
 (set a22472 %rsp)
 (set %rax a22472 %rsp)
 (set a22472 temp22492 %rsp)
 (set a22472 %rsp)
 (set a22472 %rsp))
callq read_int
movq %rax, temp22492
cmpq $1, temp22492
jg label22561
jmp label22562

label22566:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label22564:
    liveness
:
(list (set %rsp) (set a22472 %rsp))
movq $1, a22472
jmp label22563

label22565:
    liveness
:
(list (set %rsp) (set a22472 %rsp))
movq $2, a22472
jmp label22563

label22567:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp22488 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp22488
cmpq $1, temp22488
jg label22564
jmp label22565

label22568:
    liveness
:
(list (set x22471 %rsp) (set %rsp) (set %rsp))
cmpq $1, x22471
je label22566
jmp label22567

label22569:
    liveness
:
(list (set %rsp) (set x22471 %rsp))
movq $1, x22471
jmp label22568

label22570:
    liveness
:
(list (set %rsp) (set x22471 %rsp))
movq $0, x22471
jmp label22568

label22571:
    liveness
:
(list (set temp22485 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp22485
jg label22569
jmp label22570

label22573:
    liveness
:
(list (set %rsp) (set temp22485 %rsp))
movq $9, temp22485
jmp label22571

label22572:
    liveness
:
(list (set %rsp) (set temp22485 %rsp))
movq $8, temp22485
jmp label22571

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label22572
jmp label22573




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22500 : 'Integer, temp22502 : 'Integer, temp22504 : 'Integer, temp22507 : 'Integer, temp22506 : 'Integer, temp22509 : 'Integer, temp22511 : 'Integer, temp22513 : 'Integer, temp22515 : 'Integer, temp22485 : 'Integer, temp22488 : 'Integer, temp22490 : 'Integer, temp22492 : 'Integer, temp22494 : 'Integer, temp22496 : 'Integer, temp22498 : 'Integer, temp22532 : 'Integer, x22471 : 'Boolean, a22472 : 'Integer, a22473 : 'Integer, a22474 : 'Integer, a22475 : 'Integer, a22476 : 'Integer, a22477 : 'Integer, a22478 : 'Integer, a22479 : 'Integer, a22480 : 'Integer, a22481 : 'Integer, a22482 : 'Integer, a22483 : 'Integer, temp22517 : 'Integer, temp22519 : 'Integer, temp22521 : 'Integer, temp22523 : 'Integer, temp22526 : 'Integer, temp22528 : 'Integer, temp22530 : 'Integer, 
tsorted
:
'(label22533
  label22535
  label22534
  label22536
  label22537
  label22538
  label22539
  label22541
  label22540
  label22542
  label22543
  label22544
  label22545
  label22547
  label22546
  label22548
  label22549
  label22550
  label22551
  label22553
  label22552
  label22554
  label22555
  label22556
  label22557
  label22559
  label22558
  label22560
  label22561
  label22562
  label22563
  label22566
  label22564
  label22565
  label22567
  label22568
  label22569
  label22570
  label22571
  label22573
  label22572
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22523 a22481)
 (list temp22490 a22473)
 (list temp22519 a22480)
 (list temp22498 a22475)
 (list temp22530 a22483)
 (list temp22494 a22474)
 (list temp22526 a22482)
 (list a22473 temp22490)
 (list temp22507 a22477)
 (list a22475 temp22498)
 (list a22474 temp22494)
 (list temp22506 temp22502)
 (list temp22502 temp22506)
 (list a22481 temp22523)
 (list a22480 temp22519)
 (list a22483 temp22530)
 (list temp22515 a22479)
 (list a22482 temp22526)
 (list a22477 temp22507)
 (list a22479 temp22515)
 (list temp22511 a22478)
 (list a22478 temp22511))
label22533:
    movq a22483, temp22530
    movq a22482, temp22526
    addq temp22530, temp22526
    movq a22481, temp22523
    addq temp22526, temp22523
    movq a22480, temp22519
    addq temp22523, temp22519
    movq a22479, temp22515
    addq temp22519, temp22515
    movq a22478, temp22511
    addq temp22515, temp22511
    movq a22477, temp22507
    addq temp22511, temp22507
    movq temp22506, temp22502
    addq temp22507, temp22502
    movq a22475, temp22498
    addq temp22502, temp22498
    movq a22474, temp22494
    addq temp22498, temp22494
    movq a22473, temp22490
    addq temp22494, temp22490
    movq a22472, %rax
    addq temp22490, %rax
    jmp conclusion
    
label22535:
    movq $2, a22483
    jmp label22533
    
label22534:
    movq $1, a22483
    jmp label22533
    
label22536:
    callq read_int
    movq %rax, temp22532
    cmpq $1, temp22532
    jg label22534
    jmp label22535
    
label22537:
    movq $1, a22482
    jmp label22536
    
label22538:
    movq $2, a22482
    jmp label22536
    
label22539:
    callq read_int
    movq %rax, a22481
    callq read_int
    movq %rax, temp22528
    cmpq $1, temp22528
    jg label22537
    jmp label22538
    
label22541:
    movq $2, a22480
    jmp label22539
    
label22540:
    movq $1, a22480
    jmp label22539
    
label22542:
    callq read_int
    movq %rax, temp22521
    cmpq $1, temp22521
    jg label22540
    jmp label22541
    
label22543:
    movq $1, a22479
    jmp label22542
    
label22544:
    movq $2, a22479
    jmp label22542
    
label22545:
    callq read_int
    movq %rax, temp22517
    cmpq $1, temp22517
    jg label22543
    jmp label22544
    
label22547:
    movq $2, a22478
    jmp label22545
    
label22546:
    movq $1, a22478
    jmp label22545
    
label22548:
    callq read_int
    movq %rax, temp22513
    cmpq $1, temp22513
    jg label22546
    jmp label22547
    
label22549:
    movq $1, a22477
    jmp label22548
    
label22550:
    movq $2, a22477
    jmp label22548
    
label22551:
    callq read_int
    movq %rax, temp22506
    callq read_int
    movq %rax, temp22509
    cmpq $1, temp22509
    jg label22549
    jmp label22550
    
label22553:
    movq $2, a22476
    jmp label22551
    
label22552:
    movq $1, a22476
    jmp label22551
    
label22554:
    callq read_int
    movq %rax, temp22504
    cmpq $1, temp22504
    jg label22552
    jmp label22553
    
label22555:
    movq $1, a22475
    jmp label22554
    
label22556:
    movq $2, a22475
    jmp label22554
    
label22557:
    callq read_int
    movq %rax, temp22500
    cmpq $1, temp22500
    jg label22555
    jmp label22556
    
label22559:
    movq $2, a22474
    jmp label22557
    
label22558:
    movq $1, a22474
    jmp label22557
    
label22560:
    callq read_int
    movq %rax, temp22496
    cmpq $1, temp22496
    jg label22558
    jmp label22559
    
label22561:
    movq $1, a22473
    jmp label22560
    
label22562:
    movq $2, a22473
    jmp label22560
    
label22563:
    callq read_int
    movq %rax, temp22492
    cmpq $1, temp22492
    jg label22561
    jmp label22562
    
label22566:
    movq $1, %rax
    jmp conclusion
    
label22564:
    movq $1, a22472
    jmp label22563
    
label22565:
    movq $2, a22472
    jmp label22563
    
label22567:
    callq read_int
    movq %rax, temp22488
    cmpq $1, temp22488
    jg label22564
    jmp label22565
    
label22568:
    cmpq $1, x22471
    je label22566
    jmp label22567
    
label22569:
    movq $1, x22471
    jmp label22568
    
label22570:
    movq $0, x22471
    jmp label22568
    
label22571:
    cmpq $8, temp22485
    jg label22569
    jmp label22570
    
label22573:
    movq $9, temp22485
    jmp label22571
    
label22572:
    movq $8, temp22485
    jmp label22571
    
start:
    cmpq $1, $1
    jge label22572
    jmp label22573
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22500 : 'Integer, temp22502 : 'Integer, temp22504 : 'Integer, temp22507 : 'Integer, temp22506 : 'Integer, temp22509 : 'Integer, temp22511 : 'Integer, temp22513 : 'Integer, temp22515 : 'Integer, temp22485 : 'Integer, temp22488 : 'Integer, temp22490 : 'Integer, temp22492 : 'Integer, temp22494 : 'Integer, temp22496 : 'Integer, temp22498 : 'Integer, temp22532 : 'Integer, x22471 : 'Boolean, a22472 : 'Integer, a22473 : 'Integer, a22474 : 'Integer, a22475 : 'Integer, a22476 : 'Integer, a22477 : 'Integer, a22478 : 'Integer, a22479 : 'Integer, a22480 : 'Integer, a22481 : 'Integer, a22482 : 'Integer, a22483 : 'Integer, temp22517 : 'Integer, temp22519 : 'Integer, temp22521 : 'Integer, temp22523 : 'Integer, temp22526 : 'Integer, temp22528 : 'Integer, temp22530 : 'Integer, 
tsorted
:
'(label22533
  label22535
  label22534
  label22536
  label22537
  label22538
  label22539
  label22541
  label22540
  label22542
  label22543
  label22544
  label22545
  label22547
  label22546
  label22548
  label22549
  label22550
  label22551
  label22553
  label22552
  label22554
  label22555
  label22556
  label22557
  label22559
  label22558
  label22560
  label22561
  label22562
  label22563
  label22566
  label22564
  label22565
  label22567
  label22568
  label22569
  label22570
  label22571
  label22573
  label22572
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22523 a22481)
 (list temp22490 a22473)
 (list temp22519 a22480)
 (list temp22498 a22475)
 (list temp22530 a22483)
 (list temp22494 a22474)
 (list temp22526 a22482)
 (list a22473 temp22490)
 (list temp22507 a22477)
 (list a22475 temp22498)
 (list a22474 temp22494)
 (list temp22506 temp22502)
 (list temp22502 temp22506)
 (list a22481 temp22523)
 (list a22480 temp22519)
 (list a22483 temp22530)
 (list temp22515 a22479)
 (list a22482 temp22526)
 (list a22477 temp22507)
 (list a22479 temp22515)
 (list temp22511 a22478)
 (list a22478 temp22511))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a22482 7)
 (cons a22481 8)
 (cons a22480 9)
 (cons a22479 10)
 (cons a22478 11)
 (cons a22477 12)
 (cons a22475 13)
 (cons a22474 14)
 (cons a22473 15)
 (cons a22472 16)
 (cons temp22506 17)
 (cons temp22530 0)
 (cons temp22526 1)
 (cons temp22532 0)
 (cons a22483 0)
 (cons temp22523 0)
 (cons temp22528 0)
 (cons temp22519 1)
 (cons temp22515 0)
 (cons temp22521 0)
 (cons temp22511 1)
 (cons temp22517 0)
 (cons temp22507 0)
 (cons temp22513 0)
 (cons temp22502 1)
 (cons temp22509 0)
 (cons a22476 0)
 (cons temp22498 0)
 (cons temp22504 0)
 (cons temp22494 1)
 (cons temp22490 0)
 (cons temp22500 0)
 (cons temp22496 0)
 (cons temp22492 0)
 (cons temp22485 0)
 (cons temp22488 0)
 (cons x22471 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label22533:
    movq %rcx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label22535:
    movq $2, %rcx
    jmp label22533
    
label22534:
    movq $1, %rcx
    jmp label22533
    
label22536:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22534
    jmp label22535
    
label22537:
    movq $1, %rbx
    jmp label22536
    
label22538:
    movq $2, %rbx
    jmp label22536
    
label22539:
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22537
    jmp label22538
    
label22541:
    movq $2, %r13
    jmp label22539
    
label22540:
    movq $1, %r13
    jmp label22539
    
label22542:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22540
    jmp label22541
    
label22543:
    movq $1, %r14
    jmp label22542
    
label22544:
    movq $2, %r14
    jmp label22542
    
label22545:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22543
    jmp label22544
    
label22547:
    movq $2, -48(%rbp)
    jmp label22545
    
label22546:
    movq $1, -48(%rbp)
    jmp label22545
    
label22548:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22546
    jmp label22547
    
label22549:
    movq $1, -56(%rbp)
    jmp label22548
    
label22550:
    movq $2, -56(%rbp)
    jmp label22548
    
label22551:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22549
    jmp label22550
    
label22553:
    movq $2, %rcx
    jmp label22551
    
label22552:
    movq $1, %rcx
    jmp label22551
    
label22554:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22552
    jmp label22553
    
label22555:
    movq $1, -64(%rbp)
    jmp label22554
    
label22556:
    movq $2, -64(%rbp)
    jmp label22554
    
label22557:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22555
    jmp label22556
    
label22559:
    movq $2, -72(%rbp)
    jmp label22557
    
label22558:
    movq $1, -72(%rbp)
    jmp label22557
    
label22560:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22558
    jmp label22559
    
label22561:
    movq $1, -80(%rbp)
    jmp label22560
    
label22562:
    movq $2, -80(%rbp)
    jmp label22560
    
label22563:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22561
    jmp label22562
    
label22566:
    movq $1, %rax
    jmp conclusion
    
label22564:
    movq $1, -88(%rbp)
    jmp label22563
    
label22565:
    movq $2, -88(%rbp)
    jmp label22563
    
label22567:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22564
    jmp label22565
    
label22568:
    cmpq $1, %rcx
    je label22566
    jmp label22567
    
label22569:
    movq $1, %rcx
    jmp label22568
    
label22570:
    movq $0, %rcx
    jmp label22568
    
label22571:
    cmpq $8, %rcx
    jg label22569
    jmp label22570
    
label22573:
    movq $9, %rcx
    jmp label22571
    
label22572:
    movq $8, %rcx
    jmp label22571
    
start:
    cmpq $1, $1
    jge label22572
    jmp label22573
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22500 : 'Integer, temp22502 : 'Integer, temp22504 : 'Integer, temp22507 : 'Integer, temp22506 : 'Integer, temp22509 : 'Integer, temp22511 : 'Integer, temp22513 : 'Integer, temp22515 : 'Integer, temp22485 : 'Integer, temp22488 : 'Integer, temp22490 : 'Integer, temp22492 : 'Integer, temp22494 : 'Integer, temp22496 : 'Integer, temp22498 : 'Integer, temp22532 : 'Integer, x22471 : 'Boolean, a22472 : 'Integer, a22473 : 'Integer, a22474 : 'Integer, a22475 : 'Integer, a22476 : 'Integer, a22477 : 'Integer, a22478 : 'Integer, a22479 : 'Integer, a22480 : 'Integer, a22481 : 'Integer, a22482 : 'Integer, a22483 : 'Integer, temp22517 : 'Integer, temp22519 : 'Integer, temp22521 : 'Integer, temp22523 : 'Integer, temp22526 : 'Integer, temp22528 : 'Integer, temp22530 : 'Integer, 
tsorted
:
'(label22533
  label22535
  label22534
  label22536
  label22537
  label22538
  label22539
  label22541
  label22540
  label22542
  label22543
  label22544
  label22545
  label22547
  label22546
  label22548
  label22549
  label22550
  label22551
  label22553
  label22552
  label22554
  label22555
  label22556
  label22557
  label22559
  label22558
  label22560
  label22561
  label22562
  label22563
  label22566
  label22564
  label22565
  label22567
  label22568
  label22569
  label22570
  label22571
  label22573
  label22572
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22523 a22481)
 (list temp22490 a22473)
 (list temp22519 a22480)
 (list temp22498 a22475)
 (list temp22530 a22483)
 (list temp22494 a22474)
 (list temp22526 a22482)
 (list a22473 temp22490)
 (list temp22507 a22477)
 (list a22475 temp22498)
 (list a22474 temp22494)
 (list temp22506 temp22502)
 (list temp22502 temp22506)
 (list a22481 temp22523)
 (list a22480 temp22519)
 (list a22483 temp22530)
 (list temp22515 a22479)
 (list a22482 temp22526)
 (list a22477 temp22507)
 (list a22479 temp22515)
 (list temp22511 a22478)
 (list a22478 temp22511))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a22482 7)
 (cons a22481 8)
 (cons a22480 9)
 (cons a22479 10)
 (cons a22478 11)
 (cons a22477 12)
 (cons a22475 13)
 (cons a22474 14)
 (cons a22473 15)
 (cons a22472 16)
 (cons temp22506 17)
 (cons temp22530 0)
 (cons temp22526 1)
 (cons temp22532 0)
 (cons a22483 0)
 (cons temp22523 0)
 (cons temp22528 0)
 (cons temp22519 1)
 (cons temp22515 0)
 (cons temp22521 0)
 (cons temp22511 1)
 (cons temp22517 0)
 (cons temp22507 0)
 (cons temp22513 0)
 (cons temp22502 1)
 (cons temp22509 0)
 (cons a22476 0)
 (cons temp22498 0)
 (cons temp22504 0)
 (cons temp22494 1)
 (cons temp22490 0)
 (cons temp22500 0)
 (cons temp22496 0)
 (cons temp22492 0)
 (cons temp22485 0)
 (cons temp22488 0)
 (cons x22471 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label22533:
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label22535:
    movq $2, %rcx
    jmp label22533
    
label22534:
    movq $1, %rcx
    jmp label22533
    
label22536:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22534
    jmp label22535
    
label22537:
    movq $1, %rbx
    jmp label22536
    
label22538:
    movq $2, %rbx
    jmp label22536
    
label22539:
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22537
    jmp label22538
    
label22541:
    movq $2, %r13
    jmp label22539
    
label22540:
    movq $1, %r13
    jmp label22539
    
label22542:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22540
    jmp label22541
    
label22543:
    movq $1, %r14
    jmp label22542
    
label22544:
    movq $2, %r14
    jmp label22542
    
label22545:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22543
    jmp label22544
    
label22547:
    movq $2, -48(%rbp)
    jmp label22545
    
label22546:
    movq $1, -48(%rbp)
    jmp label22545
    
label22548:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22546
    jmp label22547
    
label22549:
    movq $1, -56(%rbp)
    jmp label22548
    
label22550:
    movq $2, -56(%rbp)
    jmp label22548
    
label22551:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22549
    jmp label22550
    
label22553:
    movq $2, %rcx
    jmp label22551
    
label22552:
    movq $1, %rcx
    jmp label22551
    
label22554:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22552
    jmp label22553
    
label22555:
    movq $1, -64(%rbp)
    jmp label22554
    
label22556:
    movq $2, -64(%rbp)
    jmp label22554
    
label22557:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22555
    jmp label22556
    
label22559:
    movq $2, -72(%rbp)
    jmp label22557
    
label22558:
    movq $1, -72(%rbp)
    jmp label22557
    
label22560:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22558
    jmp label22559
    
label22561:
    movq $1, -80(%rbp)
    jmp label22560
    
label22562:
    movq $2, -80(%rbp)
    jmp label22560
    
label22563:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22561
    jmp label22562
    
label22566:
    movq $1, %rax
    jmp conclusion
    
label22564:
    movq $1, -88(%rbp)
    jmp label22563
    
label22565:
    movq $2, -88(%rbp)
    jmp label22563
    
label22567:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22564
    jmp label22565
    
label22568:
    cmpq $1, %rcx
    je label22566
    jmp label22567
    
label22569:
    movq $1, %rcx
    jmp label22568
    
label22570:
    movq $0, %rcx
    jmp label22568
    
label22571:
    cmpq $8, %rcx
    jg label22569
    jmp label22570
    
label22573:
    movq $9, %rcx
    jmp label22571
    
label22572:
    movq $8, %rcx
    jmp label22571
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22572
    jmp label22573
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22500 : 'Integer, temp22502 : 'Integer, temp22504 : 'Integer, temp22507 : 'Integer, temp22506 : 'Integer, temp22509 : 'Integer, temp22511 : 'Integer, temp22513 : 'Integer, temp22515 : 'Integer, temp22485 : 'Integer, temp22488 : 'Integer, temp22490 : 'Integer, temp22492 : 'Integer, temp22494 : 'Integer, temp22496 : 'Integer, temp22498 : 'Integer, temp22532 : 'Integer, x22471 : 'Boolean, a22472 : 'Integer, a22473 : 'Integer, a22474 : 'Integer, a22475 : 'Integer, a22476 : 'Integer, a22477 : 'Integer, a22478 : 'Integer, a22479 : 'Integer, a22480 : 'Integer, a22481 : 'Integer, a22482 : 'Integer, a22483 : 'Integer, temp22517 : 'Integer, temp22519 : 'Integer, temp22521 : 'Integer, temp22523 : 'Integer, temp22526 : 'Integer, temp22528 : 'Integer, temp22530 : 'Integer, 
tsorted
:
'(label22533
  label22535
  label22534
  label22536
  label22537
  label22538
  label22539
  label22541
  label22540
  label22542
  label22543
  label22544
  label22545
  label22547
  label22546
  label22548
  label22549
  label22550
  label22551
  label22553
  label22552
  label22554
  label22555
  label22556
  label22557
  label22559
  label22558
  label22560
  label22561
  label22562
  label22563
  label22566
  label22564
  label22565
  label22567
  label22568
  label22569
  label22570
  label22571
  label22573
  label22572
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22523 a22481)
 (list temp22490 a22473)
 (list temp22519 a22480)
 (list temp22498 a22475)
 (list temp22530 a22483)
 (list temp22494 a22474)
 (list temp22526 a22482)
 (list a22473 temp22490)
 (list temp22507 a22477)
 (list a22475 temp22498)
 (list a22474 temp22494)
 (list temp22506 temp22502)
 (list temp22502 temp22506)
 (list a22481 temp22523)
 (list a22480 temp22519)
 (list a22483 temp22530)
 (list temp22515 a22479)
 (list a22482 temp22526)
 (list a22477 temp22507)
 (list a22479 temp22515)
 (list temp22511 a22478)
 (list a22478 temp22511))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a22482 7)
 (cons a22481 8)
 (cons a22480 9)
 (cons a22479 10)
 (cons a22478 11)
 (cons a22477 12)
 (cons a22475 13)
 (cons a22474 14)
 (cons a22473 15)
 (cons a22472 16)
 (cons temp22506 17)
 (cons temp22530 0)
 (cons temp22526 1)
 (cons temp22532 0)
 (cons a22483 0)
 (cons temp22523 0)
 (cons temp22528 0)
 (cons temp22519 1)
 (cons temp22515 0)
 (cons temp22521 0)
 (cons temp22511 1)
 (cons temp22517 0)
 (cons temp22507 0)
 (cons temp22513 0)
 (cons temp22502 1)
 (cons temp22509 0)
 (cons a22476 0)
 (cons temp22498 0)
 (cons temp22504 0)
 (cons temp22494 1)
 (cons temp22490 0)
 (cons temp22500 0)
 (cons temp22496 0)
 (cons temp22492 0)
 (cons temp22485 0)
 (cons temp22488 0)
 (cons x22471 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label22533:
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label22535:
    movq $2, %rcx
    jmp label22533
    
label22534:
    movq $1, %rcx
    jmp label22533
    
label22536:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22534
    jmp label22535
    
label22537:
    movq $1, %rbx
    jmp label22536
    
label22538:
    movq $2, %rbx
    jmp label22536
    
label22539:
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22537
    jmp label22538
    
label22541:
    movq $2, %r13
    jmp label22539
    
label22540:
    movq $1, %r13
    jmp label22539
    
label22542:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22540
    jmp label22541
    
label22543:
    movq $1, %r14
    jmp label22542
    
label22544:
    movq $2, %r14
    jmp label22542
    
label22545:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22543
    jmp label22544
    
label22547:
    movq $2, -48(%rbp)
    jmp label22545
    
label22546:
    movq $1, -48(%rbp)
    jmp label22545
    
label22548:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22546
    jmp label22547
    
label22549:
    movq $1, -56(%rbp)
    jmp label22548
    
label22550:
    movq $2, -56(%rbp)
    jmp label22548
    
label22551:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22549
    jmp label22550
    
label22553:
    movq $2, %rcx
    jmp label22551
    
label22552:
    movq $1, %rcx
    jmp label22551
    
label22554:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22552
    jmp label22553
    
label22555:
    movq $1, -64(%rbp)
    jmp label22554
    
label22556:
    movq $2, -64(%rbp)
    jmp label22554
    
label22557:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22555
    jmp label22556
    
label22559:
    movq $2, -72(%rbp)
    jmp label22557
    
label22558:
    movq $1, -72(%rbp)
    jmp label22557
    
label22560:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22558
    jmp label22559
    
label22561:
    movq $1, -80(%rbp)
    jmp label22560
    
label22562:
    movq $2, -80(%rbp)
    jmp label22560
    
label22563:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22561
    jmp label22562
    
label22566:
    movq $1, %rax
    jmp conclusion
    
label22564:
    movq $1, -88(%rbp)
    jmp label22563
    
label22565:
    movq $2, -88(%rbp)
    jmp label22563
    
label22567:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22564
    jmp label22565
    
label22568:
    cmpq $1, %rcx
    je label22566
    jmp label22567
    
label22569:
    movq $1, %rcx
    jmp label22568
    
label22570:
    movq $0, %rcx
    jmp label22568
    
label22571:
    cmpq $8, %rcx
    jg label22569
    jmp label22570
    
label22573:
    movq $9, %rcx
    jmp label22571
    
label22572:
    movq $8, %rcx
    jmp label22571
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22572
    jmp label22573
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22533:
	movq	%rbx, %rdx
	addq	%rcx, %rdx
	movq	%r12, %rcx
	addq	%rdx, %rcx
	movq	%r13, %rdx
	addq	%rcx, %rdx
	movq	%r14, %rcx
	addq	%rdx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-56(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-96(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-64(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-72(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-80(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-88(%rbp), %rax
	addq	%rcx, %rax
	jmp _conclusion

	.align 16
_label22535:
	movq	$2, %rcx
	jmp _label22533

	.align 16
_label22534:
	movq	$1, %rcx
	jmp _label22533

	.align 16
_label22536:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22534
	jmp _label22535

	.align 16
_label22537:
	movq	$1, %rbx
	jmp _label22536

	.align 16
_label22538:
	movq	$2, %rbx
	jmp _label22536

	.align 16
_label22539:
	callq	_read_int
	movq	%rax, %r12
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22537
	jmp _label22538

	.align 16
_label22541:
	movq	$2, %r13
	jmp _label22539

	.align 16
_label22540:
	movq	$1, %r13
	jmp _label22539

	.align 16
_label22542:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22540
	jmp _label22541

	.align 16
_label22543:
	movq	$1, %r14
	jmp _label22542

	.align 16
_label22544:
	movq	$2, %r14
	jmp _label22542

	.align 16
_label22545:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22543
	jmp _label22544

	.align 16
_label22547:
	movq	$2, -48(%rbp)
	jmp _label22545

	.align 16
_label22546:
	movq	$1, -48(%rbp)
	jmp _label22545

	.align 16
_label22548:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22546
	jmp _label22547

	.align 16
_label22549:
	movq	$1, -56(%rbp)
	jmp _label22548

	.align 16
_label22550:
	movq	$2, -56(%rbp)
	jmp _label22548

	.align 16
_label22551:
	callq	_read_int
	movq	%rax, -96(%rbp)
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22549
	jmp _label22550

	.align 16
_label22553:
	movq	$2, %rcx
	jmp _label22551

	.align 16
_label22552:
	movq	$1, %rcx
	jmp _label22551

	.align 16
_label22554:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22552
	jmp _label22553

	.align 16
_label22555:
	movq	$1, -64(%rbp)
	jmp _label22554

	.align 16
_label22556:
	movq	$2, -64(%rbp)
	jmp _label22554

	.align 16
_label22557:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22555
	jmp _label22556

	.align 16
_label22559:
	movq	$2, -72(%rbp)
	jmp _label22557

	.align 16
_label22558:
	movq	$1, -72(%rbp)
	jmp _label22557

	.align 16
_label22560:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22558
	jmp _label22559

	.align 16
_label22561:
	movq	$1, -80(%rbp)
	jmp _label22560

	.align 16
_label22562:
	movq	$2, -80(%rbp)
	jmp _label22560

	.align 16
_label22563:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22561
	jmp _label22562

	.align 16
_label22566:
	movq	$1, %rax
	jmp _conclusion

	.align 16
_label22564:
	movq	$1, -88(%rbp)
	jmp _label22563

	.align 16
_label22565:
	movq	$2, -88(%rbp)
	jmp _label22563

	.align 16
_label22567:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22564
	jmp _label22565

	.align 16
_label22568:
	cmpq	$1, %rcx
	je _label22566
	jmp _label22567

	.align 16
_label22569:
	movq	$1, %rcx
	jmp _label22568

	.align 16
_label22570:
	movq	$0, %rcx
	jmp _label22568

	.align 16
_label22571:
	cmpq	$8, %rcx
	jg _label22569
	jmp _label22570

	.align 16
_label22573:
	movq	$9, %rcx
	jmp _label22571

	.align 16
_label22572:
	movq	$8, %rcx
	jmp _label22571

	.align 16
_start:
	movq	$1, %rax
	cmpq	$1, %rax
	jge _label22572
	jmp _label22573

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$56, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_21.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (> (read) 1)
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (> (read) 1)
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (> (read) 1)
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (> (read) 1)
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (> (read) 1)
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (> (read) 1)
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (> (read) 1)
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22574 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x22574
      1
      (let ([a22575 (if (if (if (> (read) 1)
                               (let ([a22576 #t])
                                  a22576)
                               (let ([a22577 #f])
                                  a22577))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (+ a22575 (let ([a22578 (if (if (> (read) 1)
                                        (let ([a22579 #t])
                                           a22579)
                                        (let ([a22580 #f])
                                           a22580))
                                     
                                    1
                                    2)
                                 ])
                      (+ a22578 (let ([a22581 (if (if (> (read) 1)
                                                     (let ([a22582 #t])
                                                        a22582)
                                                     (let ([a22583 #f])
                                                        a22583))
                                                  
                                                 1
                                                 2)
                                              ])
                                   (+ a22581 (let ([a22584 (if (if (> (read) 1)
                                                                  (let ([a22585 #t])
                                                                     a22585)
                                                                  (let ([a22586 #f])
                                                                     a22586))
                                                               
                                                              1
                                                              2)
                                                           ])
                                                (+ a22584 (let ([a22587 (if (if (> (read) 1)
                                                                               (let ([a22588 #t])
                                                                                  a22588)
                                                                               (let ([a22589 #f])
                                                                                  a22589))
                                                                            
                                                                           1
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a22590 (if (if (> (read) 1)
                                                                                            (let ([a22591 #t])
                                                                                               a22591)
                                                                                            (let ([a22592 #f])
                                                                                               a22592))
                                                                                         
                                                                                        1
                                                                                        2)
                                                                                     ])
                                                                          (+ a22590 (let ([a22593 (if (if (> (read) 1)
                                                                                                         (let ([a22594 #t])
                                                                                                            a22594)
                                                                                                         (let ([a22595 #f])
                                                                                                            a22595))
                                                                                                      
                                                                                                     1
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a22593 (let ([a22596 (if (if (> (read) 1)
                                                                                                                      (let ([a22597 #t])
                                                                                                                         a22597)
                                                                                                                      (let ([a22598 #f])
                                                                                                                         a22598))
                                                                                                                   
                                                                                                                  1
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a22596 (let ([a22599 (if (if (> (read) 1)
                                                                                                                                   (let ([a22600 #t])
                                                                                                                                      a22600)
                                                                                                                                   (let ([a22601 #f])
                                                                                                                                      a22601))
                                                                                                                                
                                                                                                                               1
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a22599 (let ([a22602 (read)])
                                                                                                                              (+ a22602 (let ([a22603 (if (if (> (read) 1)
                                                                                                                                                             (let ([a22604 #t])
                                                                                                                                                                a22604)
                                                                                                                                                             (let ([a22605 #f])
                                                                                                                                                                a22605))
                                                                                                                                                          
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a22603 (let ([a22606 (if (if (> (read) 1)
                                                                                                                                                                          (let ([a22607 #t])
                                                                                                                                                                             a22607)
                                                                                                                                                                          (let ([a22608 #f])
                                                                                                                                                                             a22608))
                                                                                                                                                                       
                                                                                                                                                                      1
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a22606))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22574 (if (let ([temp22610 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp22610 8))
                 #t
                 #f)
              ])
   (if x22574
      1
      (let ([a22575 (if (if (if (let ([temp22613 (read)])
                                   (> temp22613 1))
                               (let ([a22576 #t])
                                  a22576)
                               (let ([a22577 #f])
                                  a22577))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (let ([a22578 (if (if (let ([temp22617 (read)])
                                  (> temp22617 1))
                              (let ([a22579 #t])
                                 a22579)
                              (let ([a22580 #f])
                                 a22580))
                           
                          1
                          2)
                       ])
            (let ([temp22615 (let ([a22581 (if (if (let ([temp22621 (read)])
                                                      (> temp22621 1))
                                                  (let ([a22582 #t])
                                                     a22582)
                                                  (let ([a22583 #f])
                                                     a22583))
                                               
                                              1
                                              2)
                                           ])
                                (let ([temp22619 (let ([a22584 (if (if (let ([temp22625 (read)])
                                                                          (> temp22625 1))
                                                                      (let ([a22585 #t])
                                                                         a22585)
                                                                      (let ([a22586 #f])
                                                                         a22586))
                                                                   
                                                                  1
                                                                  2)
                                                               ])
                                                    (let ([temp22623 (let ([a22587 (if (if (let ([temp22629 (read)])
                                                                                              (> temp22629 1))
                                                                                          (let ([a22588 #t])
                                                                                             a22588)
                                                                                          (let ([a22589 #f])
                                                                                             a22589))
                                                                                       
                                                                                      1
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp22627 (let ([temp22631 (read)])
                                                                                            (let ([a22590 (if (if (let ([temp22634 (read)])
                                                                                                                     (> temp22634 1))
                                                                                                                 (let ([a22591 #t])
                                                                                                                    a22591)
                                                                                                                 (let ([a22592 #f])
                                                                                                                    a22592))
                                                                                                              
                                                                                                             1
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp22632 (let ([a22593 (if (if (let ([temp22638 (read)])
                                                                                                                                         (> temp22638 1))
                                                                                                                                     (let ([a22594 #t])
                                                                                                                                        a22594)
                                                                                                                                     (let ([a22595 #f])
                                                                                                                                        a22595))
                                                                                                                                  
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp22636 (let ([a22596 (if (if (let ([temp22642 (read)])
                                                                                                                                                             (> temp22642 1))
                                                                                                                                                         (let ([a22597 #t])
                                                                                                                                                            a22597)
                                                                                                                                                         (let ([a22598 #f])
                                                                                                                                                            a22598))
                                                                                                                                                      
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp22640 (let ([a22599 (if (if (let ([temp22646 (read)])
                                                                                                                                                                                 (> temp22646 1))
                                                                                                                                                                             (let ([a22600 #t])
                                                                                                                                                                                a22600)
                                                                                                                                                                             (let ([a22601 #f])
                                                                                                                                                                                a22601))
                                                                                                                                                                          
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp22644 (let ([a22602 (read)])
                                                                                                                                                                               (let ([temp22648 (let ([a22603 (if (if (let ([temp22653 (read)])
                                                                                                                                                                                                                         (> temp22653 1))
                                                                                                                                                                                                                     (let ([a22604 #t])
                                                                                                                                                                                                                        a22604)
                                                                                                                                                                                                                     (let ([a22605 #f])
                                                                                                                                                                                                                        a22605))
                                                                                                                                                                                                                  
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp22651 (let ([a22606 (if (if (let ([temp22657 (read)])
                                                                                                                                                                                                                                             (> temp22657 1))
                                                                                                                                                                                                                                         (let ([a22607 #t])
                                                                                                                                                                                                                                            a22607)
                                                                                                                                                                                                                                         (let ([a22608 #f])
                                                                                                                                                                                                                                            a22608))
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp22655 a22606])
                                                                                                                                                                                                                          (+ a22603 temp22655)))])
                                                                                                                                                                                                      (+ a22602 temp22651)))])
                                                                                                                                                                                  (+ a22599 temp22648)))])
                                                                                                                                                              (+ a22596 temp22644)))])
                                                                                                                                          (+ a22593 temp22640)))])
                                                                                                                      (+ a22590 temp22636)))])
                                                                                                  (+ temp22631 temp22632))))])
                                                                           (+ a22584 temp22627)))])
                                                       (+ a22581 temp22623)))])
                                   (+ a22578 temp22619)))])
               (+ a22575 temp22615)))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22693:
    temp22629 = (read);
    if (> temp22629 1)
       goto label22691;
    else
       goto label22692;
label22692:
    a22589 = #f;
    if (eq? a22589 #t)
       goto label22689;
    else
       goto label22690;
label22695:
    a22584 = 2;
    goto label22693;
label22694:
    a22584 = 1;
    goto label22693;
label22697:
    a22586 = #f;
    if (eq? a22586 #t)
       goto label22694;
    else
       goto label22695;
label22696:
    a22585 = #t;
    if (eq? a22585 #t)
       goto label22694;
    else
       goto label22695;
label22699:
    a22581 = 1;
    goto label22698;
label22698:
    temp22625 = (read);
    if (> temp22625 1)
       goto label22696;
    else
       goto label22697;
label22701:
    a22582 = #t;
    if (eq? a22582 #t)
       goto label22699;
    else
       goto label22700;
label22700:
    a22581 = 2;
    goto label22698;
label22703:
    temp22621 = (read);
    if (> temp22621 1)
       goto label22701;
    else
       goto label22702;
label22702:
    a22583 = #f;
    if (eq? a22583 #t)
       goto label22699;
    else
       goto label22700;
label22705:
    a22578 = 2;
    goto label22703;
label22704:
    a22578 = 1;
    goto label22703;
label22707:
    a22580 = #f;
    if (eq? a22580 #t)
       goto label22704;
    else
       goto label22705;
label22706:
    a22579 = #t;
    if (eq? a22579 #t)
       goto label22704;
    else
       goto label22705;
label22677:
    a22598 = #f;
    if (eq? a22598 #t)
       goto label22674;
    else
       goto label22675;
label22676:
    a22597 = #t;
    if (eq? a22597 #t)
       goto label22674;
    else
       goto label22675;
label22679:
    a22593 = 1;
    goto label22678;
label22678:
    temp22642 = (read);
    if (> temp22642 1)
       goto label22676;
    else
       goto label22677;
label22681:
    a22594 = #t;
    if (eq? a22594 #t)
       goto label22679;
    else
       goto label22680;
label22680:
    a22593 = 2;
    goto label22678;
label22683:
    temp22638 = (read);
    if (> temp22638 1)
       goto label22681;
    else
       goto label22682;
label22682:
    a22595 = #f;
    if (eq? a22595 #t)
       goto label22679;
    else
       goto label22680;
label22685:
    a22590 = 2;
    goto label22683;
label22684:
    a22590 = 1;
    goto label22683;
label22687:
    a22592 = #f;
    if (eq? a22592 #t)
       goto label22684;
    else
       goto label22685;
label22686:
    a22591 = #t;
    if (eq? a22591 #t)
       goto label22684;
    else
       goto label22685;
label22689:
    a22587 = 1;
    goto label22688;
label22688:
    temp22631 = (read);
    temp22634 = (read);
    if (> temp22634 1)
       goto label22686;
    else
       goto label22687;
label22691:
    a22588 = #t;
    if (eq? a22588 #t)
       goto label22689;
    else
       goto label22690;
label22690:
    a22587 = 2;
    goto label22688;
label22661:
    a22607 = #t;
    if (eq? a22607 #t)
       goto label22659;
    else
       goto label22660;
label22660:
    a22606 = 2;
    goto label22658;
label22663:
    temp22657 = (read);
    if (> temp22657 1)
       goto label22661;
    else
       goto label22662;
label22662:
    a22608 = #f;
    if (eq? a22608 #t)
       goto label22659;
    else
       goto label22660;
label22665:
    a22603 = 2;
    goto label22663;
label22664:
    a22603 = 1;
    goto label22663;
label22667:
    a22605 = #f;
    if (eq? a22605 #t)
       goto label22664;
    else
       goto label22665;
label22666:
    a22604 = #t;
    if (eq? a22604 #t)
       goto label22664;
    else
       goto label22665;
label22669:
    a22599 = 1;
    goto label22668;
label22668:
    a22602 = (read);
    temp22653 = (read);
    if (> temp22653 1)
       goto label22666;
    else
       goto label22667;
label22671:
    a22600 = #t;
    if (eq? a22600 #t)
       goto label22669;
    else
       goto label22670;
label22670:
    a22599 = 2;
    goto label22668;
label22673:
    temp22646 = (read);
    if (> temp22646 1)
       goto label22671;
    else
       goto label22672;
label22672:
    a22601 = #f;
    if (eq? a22601 #t)
       goto label22669;
    else
       goto label22670;
label22675:
    a22596 = 2;
    goto label22673;
label22674:
    a22596 = 1;
    goto label22673;
label22709:
    a22575 = 1;
    goto label22708;
label22708:
    temp22617 = (read);
    if (> temp22617 1)
       goto label22706;
    else
       goto label22707;
label22711:
    a22576 = #t;
    if (eq? a22576 #t)
       goto label22709;
    else
       goto label22710;
label22710:
    a22575 = 2;
    goto label22708;
label22713:
    return 1;
label22712:
    a22577 = #f;
    if (eq? a22577 #t)
       goto label22709;
    else
       goto label22710;
label22715:
    if (eq? x22574 #t)
       goto label22713;
    else
       goto label22714;
label22714:
    temp22613 = (read);
    if (> temp22613 1)
       goto label22711;
    else
       goto label22712;
label22717:
    x22574 = #f;
    goto label22715;
start:
    if (>= 1 1)
       goto label22719;
    else
       goto label22720;
label22716:
    x22574 = #t;
    goto label22715;
label22719:
    temp22610 = 8;
    goto label22718;
label22718:
    if (> temp22610 8)
       goto label22716;
    else
       goto label22717;
label22720:
    temp22610 = 9;
    goto label22718;
label22659:
    a22606 = 1;
    goto label22658;
label22658:
    temp22655 = a22606;
    temp22651 = (+ a22603 temp22655);
    temp22648 = (+ a22602 temp22651);
    temp22644 = (+ a22599 temp22648);
    temp22640 = (+ a22596 temp22644);
    temp22636 = (+ a22593 temp22640);
    temp22632 = (+ a22590 temp22636);
    temp22627 = (+ temp22631 temp22632);
    temp22623 = (+ a22584 temp22627);
    temp22619 = (+ a22581 temp22623);
    temp22615 = (+ a22578 temp22619);
    return (+ a22575 temp22615);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22629 : 'Integer, temp22631 : 'Integer, temp22632 : 'Integer, temp22634 : 'Integer, temp22636 : 'Integer, a22575 : 'Integer, x22574 : 'Boolean, temp22638 : 'Integer, a22577 : 'Boolean, temp22640 : 'Integer, a22576 : 'Boolean, a22579 : 'Boolean, a22578 : 'Integer, temp22642 : 'Integer, temp22613 : 'Integer, temp22615 : 'Integer, temp22617 : 'Integer, temp22619 : 'Integer, temp22621 : 'Integer, temp22623 : 'Integer, temp22625 : 'Integer, temp22627 : 'Integer, a22597 : 'Boolean, a22596 : 'Integer, a22599 : 'Integer, a22598 : 'Boolean, a22601 : 'Boolean, a22600 : 'Boolean, a22603 : 'Integer, a22602 : 'Integer, a22605 : 'Boolean, a22604 : 'Boolean, a22607 : 'Boolean, a22606 : 'Integer, a22608 : 'Boolean, temp22610 : 'Integer, a22581 : 'Integer, a22580 : 'Boolean, temp22644 : 'Integer, a22583 : 'Boolean, a22582 : 'Boolean, temp22646 : 'Integer, a22585 : 'Boolean, temp22648 : 'Integer, a22584 : 'Integer, temp22651 : 'Integer, a22587 : 'Integer, a22586 : 'Boolean, a22589 : 'Boolean, temp22653 : 'Integer, a22588 : 'Boolean, temp22655 : 'Integer, a22591 : 'Boolean, a22590 : 'Integer, temp22657 : 'Integer, a22593 : 'Integer, a22592 : 'Boolean, a22595 : 'Boolean, a22594 : 'Boolean, 
label22693:
    callq read_int
    movq %rax, temp22629
    cmpq $1, temp22629
    jg label22691
    jmp label22692
    
label22692:
    movq $0, a22589
    cmpq $1, a22589
    je label22689
    jmp label22690
    
label22695:
    movq $2, a22584
    jmp label22693
    
label22694:
    movq $1, a22584
    jmp label22693
    
label22697:
    movq $0, a22586
    cmpq $1, a22586
    je label22694
    jmp label22695
    
label22696:
    movq $1, a22585
    cmpq $1, a22585
    je label22694
    jmp label22695
    
label22699:
    movq $1, a22581
    jmp label22698
    
label22698:
    callq read_int
    movq %rax, temp22625
    cmpq $1, temp22625
    jg label22696
    jmp label22697
    
label22701:
    movq $1, a22582
    cmpq $1, a22582
    je label22699
    jmp label22700
    
label22700:
    movq $2, a22581
    jmp label22698
    
label22703:
    callq read_int
    movq %rax, temp22621
    cmpq $1, temp22621
    jg label22701
    jmp label22702
    
label22702:
    movq $0, a22583
    cmpq $1, a22583
    je label22699
    jmp label22700
    
label22705:
    movq $2, a22578
    jmp label22703
    
label22704:
    movq $1, a22578
    jmp label22703
    
label22707:
    movq $0, a22580
    cmpq $1, a22580
    je label22704
    jmp label22705
    
label22706:
    movq $1, a22579
    cmpq $1, a22579
    je label22704
    jmp label22705
    
label22677:
    movq $0, a22598
    cmpq $1, a22598
    je label22674
    jmp label22675
    
label22676:
    movq $1, a22597
    cmpq $1, a22597
    je label22674
    jmp label22675
    
label22679:
    movq $1, a22593
    jmp label22678
    
label22678:
    callq read_int
    movq %rax, temp22642
    cmpq $1, temp22642
    jg label22676
    jmp label22677
    
label22681:
    movq $1, a22594
    cmpq $1, a22594
    je label22679
    jmp label22680
    
label22680:
    movq $2, a22593
    jmp label22678
    
label22683:
    callq read_int
    movq %rax, temp22638
    cmpq $1, temp22638
    jg label22681
    jmp label22682
    
label22682:
    movq $0, a22595
    cmpq $1, a22595
    je label22679
    jmp label22680
    
label22685:
    movq $2, a22590
    jmp label22683
    
label22684:
    movq $1, a22590
    jmp label22683
    
label22687:
    movq $0, a22592
    cmpq $1, a22592
    je label22684
    jmp label22685
    
label22686:
    movq $1, a22591
    cmpq $1, a22591
    je label22684
    jmp label22685
    
label22689:
    movq $1, a22587
    jmp label22688
    
label22688:
    callq read_int
    movq %rax, temp22631
    callq read_int
    movq %rax, temp22634
    cmpq $1, temp22634
    jg label22686
    jmp label22687
    
label22691:
    movq $1, a22588
    cmpq $1, a22588
    je label22689
    jmp label22690
    
label22690:
    movq $2, a22587
    jmp label22688
    
label22661:
    movq $1, a22607
    cmpq $1, a22607
    je label22659
    jmp label22660
    
label22660:
    movq $2, a22606
    jmp label22658
    
label22663:
    callq read_int
    movq %rax, temp22657
    cmpq $1, temp22657
    jg label22661
    jmp label22662
    
label22662:
    movq $0, a22608
    cmpq $1, a22608
    je label22659
    jmp label22660
    
label22665:
    movq $2, a22603
    jmp label22663
    
label22664:
    movq $1, a22603
    jmp label22663
    
label22667:
    movq $0, a22605
    cmpq $1, a22605
    je label22664
    jmp label22665
    
label22666:
    movq $1, a22604
    cmpq $1, a22604
    je label22664
    jmp label22665
    
label22669:
    movq $1, a22599
    jmp label22668
    
label22668:
    callq read_int
    movq %rax, a22602
    callq read_int
    movq %rax, temp22653
    cmpq $1, temp22653
    jg label22666
    jmp label22667
    
label22671:
    movq $1, a22600
    cmpq $1, a22600
    je label22669
    jmp label22670
    
label22670:
    movq $2, a22599
    jmp label22668
    
label22673:
    callq read_int
    movq %rax, temp22646
    cmpq $1, temp22646
    jg label22671
    jmp label22672
    
label22672:
    movq $0, a22601
    cmpq $1, a22601
    je label22669
    jmp label22670
    
label22675:
    movq $2, a22596
    jmp label22673
    
label22674:
    movq $1, a22596
    jmp label22673
    
label22709:
    movq $1, a22575
    jmp label22708
    
label22708:
    callq read_int
    movq %rax, temp22617
    cmpq $1, temp22617
    jg label22706
    jmp label22707
    
label22711:
    movq $1, a22576
    cmpq $1, a22576
    je label22709
    jmp label22710
    
label22710:
    movq $2, a22575
    jmp label22708
    
label22713:
    movq $1, %rax
    jmp conclusion
    
label22712:
    movq $0, a22577
    cmpq $1, a22577
    je label22709
    jmp label22710
    
label22715:
    cmpq $1, x22574
    je label22713
    jmp label22714
    
label22714:
    callq read_int
    movq %rax, temp22613
    cmpq $1, temp22613
    jg label22711
    jmp label22712
    
label22717:
    movq $0, x22574
    jmp label22715
    
start:
    cmpq $1, $1
    jge label22719
    jmp label22720
    
label22716:
    movq $1, x22574
    jmp label22715
    
label22719:
    movq $8, temp22610
    jmp label22718
    
label22718:
    cmpq $8, temp22610
    jg label22716
    jmp label22717
    
label22720:
    movq $9, temp22610
    jmp label22718
    
label22659:
    movq $1, a22606
    jmp label22658
    
label22658:
    movq a22606, temp22655
    movq a22603, temp22651
    addq temp22655, temp22651
    movq a22602, temp22648
    addq temp22651, temp22648
    movq a22599, temp22644
    addq temp22648, temp22644
    movq a22596, temp22640
    addq temp22644, temp22640
    movq a22593, temp22636
    addq temp22640, temp22636
    movq a22590, temp22632
    addq temp22636, temp22632
    movq temp22631, temp22627
    addq temp22632, temp22627
    movq a22584, temp22623
    addq temp22627, temp22623
    movq a22581, temp22619
    addq temp22623, temp22619
    movq a22578, temp22615
    addq temp22619, temp22615
    movq a22575, %rax
    addq temp22615, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22629 : 'Integer, temp22631 : 'Integer, temp22632 : 'Integer, temp22634 : 'Integer, temp22636 : 'Integer, a22575 : 'Integer, x22574 : 'Boolean, temp22638 : 'Integer, a22577 : 'Boolean, temp22640 : 'Integer, a22576 : 'Boolean, a22579 : 'Boolean, a22578 : 'Integer, temp22642 : 'Integer, temp22613 : 'Integer, temp22615 : 'Integer, temp22617 : 'Integer, temp22619 : 'Integer, temp22621 : 'Integer, temp22623 : 'Integer, temp22625 : 'Integer, temp22627 : 'Integer, a22597 : 'Boolean, a22596 : 'Integer, a22599 : 'Integer, a22598 : 'Boolean, a22601 : 'Boolean, a22600 : 'Boolean, a22603 : 'Integer, a22602 : 'Integer, a22605 : 'Boolean, a22604 : 'Boolean, a22607 : 'Boolean, a22606 : 'Integer, a22608 : 'Boolean, temp22610 : 'Integer, a22581 : 'Integer, a22580 : 'Boolean, temp22644 : 'Integer, a22583 : 'Boolean, a22582 : 'Boolean, temp22646 : 'Integer, a22585 : 'Boolean, temp22648 : 'Integer, a22584 : 'Integer, temp22651 : 'Integer, a22587 : 'Integer, a22586 : 'Boolean, a22589 : 'Boolean, temp22653 : 'Integer, a22588 : 'Boolean, temp22655 : 'Integer, a22591 : 'Boolean, a22590 : 'Integer, temp22657 : 'Integer, a22593 : 'Integer, a22592 : 'Boolean, a22595 : 'Boolean, a22594 : 'Boolean, 
tsorted
:
'(label22658
  label22660
  label22659
  label22661
  label22662
  label22663
  label22665
  label22664
  label22667
  label22666
  label22668
  label22669
  label22670
  label22671
  label22672
  label22673
  label22675
  label22674
  label22713
  label22676
  label22677
  label22678
  label22679
  label22680
  label22681
  label22682
  label22683
  label22685
  label22684
  label22687
  label22686
  label22688
  label22689
  label22690
  label22691
  label22692
  label22693
  label22695
  label22694
  label22697
  label22696
  label22698
  label22699
  label22700
  label22701
  label22702
  label22703
  label22705
  label22704
  label22707
  label22706
  label22708
  label22709
  label22710
  label22711
  label22712
  label22714
  label22715
  label22717
  label22716
  label22718
  label22719
  label22720
  start)
CFG
:
#<multigraph>
label22658:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631
  a22590
  a22606)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22593
  a22578
  %rsp
  a22599
  temp22631
  a22575
  temp22655)
 (set
  a22596
  a22581
  a22584
  a22602
  temp22651
  a22590
  a22593
  a22578
  %rsp
  a22599
  temp22631
  a22575
  temp22655)
 (set
  a22596
  a22581
  a22584
  a22602
  temp22651
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  temp22651
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631
  a22584
  temp22648)
 (set
  a22596
  a22581
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631
  a22584
  temp22648)
 (set
  a22581
  temp22631
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22596
  temp22644
  a22584
  temp22648)
 (set
  a22581
  temp22631
  a22584
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22596
  temp22644)
 (set
  temp22644
  a22581
  temp22631
  a22584
  a22590
  a22575
  temp22640
  a22593
  a22578
  %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 temp22640 a22593 a22578 %rsp)
 (set a22581 temp22631 a22584 temp22636 a22590 a22575 temp22640 a22578 %rsp)
 (set a22581 temp22631 a22584 temp22636 a22590 a22575 a22578 %rsp)
 (set a22581 temp22631 temp22636 a22575 a22578 %rsp a22584 temp22632)
 (set a22581 temp22631 a22575 a22578 %rsp a22584 temp22632)
 (set a22581 a22575 a22578 a22584 temp22632 temp22627 %rsp)
 (set a22581 a22584 a22575 a22578 temp22627 %rsp)
 (set a22581 a22578 a22575 temp22623 temp22627 %rsp)
 (set a22581 a22578 %rsp a22575 temp22623)
 (set temp22619 a22578 %rsp a22575 temp22623)
 (set temp22619 a22575 a22578 %rsp)
 (set temp22615 temp22619 a22575 %rsp)
 (set temp22615 a22575 %rsp)
 (set %rax temp22615 %rsp)
 (set %rax %rsp))
movq a22606, temp22655
movq a22603, temp22651
addq temp22655, temp22651
movq a22602, temp22648
addq temp22651, temp22648
movq a22599, temp22644
addq temp22648, temp22644
movq a22596, temp22640
addq temp22644, temp22640
movq a22593, temp22636
addq temp22640, temp22636
movq a22590, temp22632
addq temp22636, temp22632
movq temp22631, temp22627
addq temp22632, temp22627
movq a22584, temp22623
addq temp22627, temp22623
movq a22581, temp22619
addq temp22623, temp22619
movq a22578, temp22615
addq temp22619, temp22615
movq a22575, %rax
addq temp22615, %rax
jmp conclusion

label22660:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631
  a22590
  a22606))
movq $2, a22606
jmp label22658

label22659:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631
  a22590
  a22606))
movq $1, a22606
jmp label22658

label22661:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22593
  a22578
  %rsp
  a22599
  temp22631
  a22575
  a22607)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631))
movq $1, a22607
cmpq $1, a22607
je label22659
jmp label22660

label22662:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22608
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631))
movq $0, a22608
cmpq $1, a22608
je label22659
jmp label22660

label22663:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  %rax
  a22596
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22578
  %rsp
  a22599
  temp22631
  a22593
  temp22657)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631))
callq read_int
movq %rax, temp22657
cmpq $1, temp22657
jg label22661
jmp label22662

label22665:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631))
movq $2, a22603
jmp label22663

label22664:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22603
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631))
movq $1, a22603
jmp label22663

label22667:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22605
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631))
movq $0, a22605
cmpq $1, a22605
je label22664
jmp label22665

label22666:
    liveness
:
(list
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22604
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631))
movq $1, a22604
cmpq $1, a22604
je label22664
jmp label22665

label22668:
    liveness
:
(list
 (set a22596 a22581 a22584 a22590 a22575 a22593 a22578 %rsp a22599 temp22631)
 (set
  a22581
  a22584
  a22590
  a22575
  a22593
  a22578
  %rsp
  %rax
  a22596
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  %rax
  a22596
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  temp22653
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631)
 (set
  a22596
  a22581
  a22584
  a22602
  a22590
  a22575
  a22593
  a22578
  %rsp
  a22599
  temp22631))
callq read_int
movq %rax, a22602
callq read_int
movq %rax, temp22653
cmpq $1, temp22653
jg label22666
jmp label22667

label22669:
    liveness
:
(list
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 a22584 a22590 a22575 a22593 a22578 %rsp a22599 temp22631))
movq $1, a22599
jmp label22668

label22670:
    liveness
:
(list
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 a22584 a22590 a22575 a22593 a22578 %rsp a22599 temp22631))
movq $2, a22599
jmp label22668

label22671:
    liveness
:
(list
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 temp22631 a22590 a22575 a22593 a22578 %rsp a22584 a22600)
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
movq $1, a22600
cmpq $1, a22600
je label22669
jmp label22670

label22672:
    liveness
:
(list
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 temp22631 a22584 a22601 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
movq $0, a22601
cmpq $1, a22601
je label22669
jmp label22670

label22673:
    liveness
:
(list
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp %rax a22596)
 (set
  a22596
  a22581
  temp22646
  temp22631
  a22584
  a22590
  a22575
  a22593
  a22578
  %rsp)
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
callq read_int
movq %rax, temp22646
cmpq $1, temp22646
jg label22671
jmp label22672

label22675:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
movq $2, a22596
jmp label22673

label22674:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22596 a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
movq $1, a22596
jmp label22673

label22713:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label22676:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set temp22631 a22584 a22590 a22575 a22593 a22578 %rsp a22581 a22597)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
movq $1, a22597
cmpq $1, a22597
je label22674
jmp label22675

label22677:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22581 a22598 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
movq $0, a22598
cmpq $1, a22598
je label22674
jmp label22675

label22678:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set %rax a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 %rsp a22578 temp22642)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
callq read_int
movq %rax, temp22642
cmpq $1, temp22642
jg label22676
jmp label22677

label22679:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
movq $1, a22593
jmp label22678

label22680:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22593 a22578 %rsp))
movq $2, a22593
jmp label22678

label22681:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 %rsp a22578 a22594)
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp))
movq $1, a22594
cmpq $1, a22594
je label22679
jmp label22680

label22682:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22578 a22595 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp))
movq $0, a22595
cmpq $1, a22595
je label22679
jmp label22680

label22683:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp)
 (set %rax a22581 temp22631 a22584 a22590 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22575 a22578 %rsp a22590 temp22638)
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp))
callq read_int
movq %rax, temp22638
cmpq $1, temp22638
jg label22681
jmp label22682

label22685:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp))
movq $2, a22590
jmp label22683

label22684:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22590 a22575 a22578 %rsp))
movq $1, a22590
jmp label22683

label22687:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22575 a22592 a22578 %rsp)
 (set a22581 temp22631 a22584 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22575 a22578 %rsp))
movq $0, a22592
cmpq $1, a22592
je label22684
jmp label22685

label22686:
    liveness
:
(list
 (set a22581 temp22631 a22584 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22578 %rsp a22575 a22591)
 (set a22581 temp22631 a22584 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22575 a22578 %rsp))
movq $1, a22591
cmpq $1, a22591
je label22684
jmp label22685

label22688:
    liveness
:
(list
 (set a22581 a22584 a22575 a22578 %rsp)
 (set %rax a22581 a22584 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22575 a22578 %rsp)
 (set %rax a22581 temp22631 a22584 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 temp22634 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22575 a22578 %rsp)
 (set a22581 temp22631 a22584 a22575 a22578 %rsp))
callq read_int
movq %rax, temp22631
callq read_int
movq %rax, temp22634
cmpq $1, temp22634
jg label22686
jmp label22687

label22689:
    liveness
:
(list
 (set a22581 a22584 a22575 a22578 %rsp)
 (set a22581 a22584 a22575 a22578 %rsp))
movq $1, a22587
jmp label22688

label22690:
    liveness
:
(list
 (set a22581 a22584 a22575 a22578 %rsp)
 (set a22581 a22584 a22575 a22578 %rsp))
movq $2, a22587
jmp label22688

label22691:
    liveness
:
(list
 (set a22581 a22584 a22575 a22578 %rsp)
 (set a22581 a22584 a22588 a22575 a22578 %rsp)
 (set a22581 a22584 a22575 a22578 %rsp)
 (set a22581 a22584 a22575 a22578 %rsp))
movq $1, a22588
cmpq $1, a22588
je label22689
jmp label22690

label22692:
    liveness
:
(list
 (set a22581 a22584 a22575 a22578 %rsp)
 (set a22581 a22584 a22589 a22575 a22578 %rsp)
 (set a22581 a22584 a22575 a22578 %rsp)
 (set a22581 a22584 a22575 a22578 %rsp))
movq $0, a22589
cmpq $1, a22589
je label22689
jmp label22690

label22693:
    liveness
:
(list
 (set a22581 a22584 a22575 a22578 %rsp)
 (set %rax a22581 a22584 a22575 a22578 %rsp)
 (set a22584 a22575 a22578 %rsp a22581 temp22629)
 (set a22581 a22584 a22575 a22578 %rsp)
 (set a22581 a22584 a22575 a22578 %rsp))
callq read_int
movq %rax, temp22629
cmpq $1, temp22629
jg label22691
jmp label22692

label22695:
    liveness
:
(list (set a22581 a22575 a22578 %rsp) (set a22581 a22584 a22575 a22578 %rsp))
movq $2, a22584
jmp label22693

label22694:
    liveness
:
(list (set a22581 a22575 a22578 %rsp) (set a22581 a22584 a22575 a22578 %rsp))
movq $1, a22584
jmp label22693

label22697:
    liveness
:
(list
 (set a22581 a22575 a22578 %rsp)
 (set a22581 a22586 a22575 a22578 %rsp)
 (set a22581 a22575 a22578 %rsp)
 (set a22581 a22575 a22578 %rsp))
movq $0, a22586
cmpq $1, a22586
je label22694
jmp label22695

label22696:
    liveness
:
(list
 (set a22581 a22575 a22578 %rsp)
 (set a22581 a22585 a22575 a22578 %rsp)
 (set a22581 a22575 a22578 %rsp)
 (set a22581 a22575 a22578 %rsp))
movq $1, a22585
cmpq $1, a22585
je label22694
jmp label22695

label22698:
    liveness
:
(list
 (set a22581 a22575 a22578 %rsp)
 (set %rax a22581 a22575 a22578 %rsp)
 (set a22581 a22575 temp22625 a22578 %rsp)
 (set a22581 a22575 a22578 %rsp)
 (set a22581 a22575 a22578 %rsp))
callq read_int
movq %rax, temp22625
cmpq $1, temp22625
jg label22696
jmp label22697

label22699:
    liveness
:
(list (set a22575 a22578 %rsp) (set a22581 a22575 a22578 %rsp))
movq $1, a22581
jmp label22698

label22700:
    liveness
:
(list (set a22575 a22578 %rsp) (set a22581 a22575 a22578 %rsp))
movq $2, a22581
jmp label22698

label22701:
    liveness
:
(list
 (set a22575 a22578 %rsp)
 (set a22582 a22575 a22578 %rsp)
 (set a22575 a22578 %rsp)
 (set a22575 a22578 %rsp))
movq $1, a22582
cmpq $1, a22582
je label22699
jmp label22700

label22702:
    liveness
:
(list
 (set a22575 a22578 %rsp)
 (set a22583 a22575 a22578 %rsp)
 (set a22575 a22578 %rsp)
 (set a22575 a22578 %rsp))
movq $0, a22583
cmpq $1, a22583
je label22699
jmp label22700

label22703:
    liveness
:
(list
 (set a22575 a22578 %rsp)
 (set %rax a22575 a22578 %rsp)
 (set temp22621 a22575 a22578 %rsp)
 (set a22575 a22578 %rsp)
 (set a22575 a22578 %rsp))
callq read_int
movq %rax, temp22621
cmpq $1, temp22621
jg label22701
jmp label22702

label22705:
    liveness
:
(list (set a22575 %rsp) (set a22575 a22578 %rsp))
movq $2, a22578
jmp label22703

label22704:
    liveness
:
(list (set a22575 %rsp) (set a22575 a22578 %rsp))
movq $1, a22578
jmp label22703

label22707:
    liveness
:
(list
 (set a22575 %rsp)
 (set a22580 a22575 %rsp)
 (set a22575 %rsp)
 (set a22575 %rsp))
movq $0, a22580
cmpq $1, a22580
je label22704
jmp label22705

label22706:
    liveness
:
(list
 (set a22575 %rsp)
 (set a22575 a22579 %rsp)
 (set a22575 %rsp)
 (set a22575 %rsp))
movq $1, a22579
cmpq $1, a22579
je label22704
jmp label22705

label22708:
    liveness
:
(list
 (set a22575 %rsp)
 (set %rax a22575 %rsp)
 (set temp22617 a22575 %rsp)
 (set a22575 %rsp)
 (set a22575 %rsp))
callq read_int
movq %rax, temp22617
cmpq $1, temp22617
jg label22706
jmp label22707

label22709:
    liveness
:
(list (set %rsp) (set a22575 %rsp))
movq $1, a22575
jmp label22708

label22710:
    liveness
:
(list (set %rsp) (set a22575 %rsp))
movq $2, a22575
jmp label22708

label22711:
    liveness
:
(list (set %rsp) (set a22576 %rsp) (set %rsp) (set %rsp))
movq $1, a22576
cmpq $1, a22576
je label22709
jmp label22710

label22712:
    liveness
:
(list (set %rsp) (set a22577 %rsp) (set %rsp) (set %rsp))
movq $0, a22577
cmpq $1, a22577
je label22709
jmp label22710

label22714:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp22613 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp22613
cmpq $1, temp22613
jg label22711
jmp label22712

label22715:
    liveness
:
(list (set x22574 %rsp) (set %rsp) (set %rsp))
cmpq $1, x22574
je label22713
jmp label22714

label22717:
    liveness
:
(list (set %rsp) (set x22574 %rsp))
movq $0, x22574
jmp label22715

label22716:
    liveness
:
(list (set %rsp) (set x22574 %rsp))
movq $1, x22574
jmp label22715

label22718:
    liveness
:
(list (set temp22610 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp22610
jg label22716
jmp label22717

label22719:
    liveness
:
(list (set %rsp) (set temp22610 %rsp))
movq $8, temp22610
jmp label22718

label22720:
    liveness
:
(list (set %rsp) (set temp22610 %rsp))
movq $9, temp22610
jmp label22718

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label22719
jmp label22720




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22629 : 'Integer, temp22631 : 'Integer, temp22632 : 'Integer, temp22634 : 'Integer, temp22636 : 'Integer, a22575 : 'Integer, x22574 : 'Boolean, temp22638 : 'Integer, a22577 : 'Boolean, temp22640 : 'Integer, a22576 : 'Boolean, a22579 : 'Boolean, a22578 : 'Integer, temp22642 : 'Integer, temp22613 : 'Integer, temp22615 : 'Integer, temp22617 : 'Integer, temp22619 : 'Integer, temp22621 : 'Integer, temp22623 : 'Integer, temp22625 : 'Integer, temp22627 : 'Integer, a22597 : 'Boolean, a22596 : 'Integer, a22599 : 'Integer, a22598 : 'Boolean, a22601 : 'Boolean, a22600 : 'Boolean, a22603 : 'Integer, a22602 : 'Integer, a22605 : 'Boolean, a22604 : 'Boolean, a22607 : 'Boolean, a22606 : 'Integer, a22608 : 'Boolean, temp22610 : 'Integer, a22581 : 'Integer, a22580 : 'Boolean, temp22644 : 'Integer, a22583 : 'Boolean, a22582 : 'Boolean, temp22646 : 'Integer, a22585 : 'Boolean, temp22648 : 'Integer, a22584 : 'Integer, temp22651 : 'Integer, a22587 : 'Integer, a22586 : 'Boolean, a22589 : 'Boolean, temp22653 : 'Integer, a22588 : 'Boolean, temp22655 : 'Integer, a22591 : 'Boolean, a22590 : 'Integer, temp22657 : 'Integer, a22593 : 'Integer, a22592 : 'Boolean, a22595 : 'Boolean, a22594 : 'Boolean, 
tsorted
:
'(label22658
  label22660
  label22659
  label22661
  label22662
  label22663
  label22665
  label22664
  label22667
  label22666
  label22668
  label22669
  label22670
  label22671
  label22672
  label22673
  label22675
  label22674
  label22713
  label22676
  label22677
  label22678
  label22679
  label22680
  label22681
  label22682
  label22683
  label22685
  label22684
  label22687
  label22686
  label22688
  label22689
  label22690
  label22691
  label22692
  label22693
  label22695
  label22694
  label22697
  label22696
  label22698
  label22699
  label22700
  label22701
  label22702
  label22703
  label22705
  label22704
  label22707
  label22706
  label22708
  label22709
  label22710
  label22711
  label22712
  label22714
  label22715
  label22717
  label22716
  label22718
  label22719
  label22720
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22648 a22602)
 (list a22584 temp22623)
 (list temp22619 a22581)
 (list temp22651 a22603)
 (list a22581 temp22619)
 (list temp22644 a22599)
 (list temp22615 a22578)
 (list a22593 temp22636)
 (list temp22627 temp22631)
 (list temp22623 a22584)
 (list temp22655 a22606)
 (list a22590 temp22632)
 (list temp22632 a22590)
 (list a22603 temp22651)
 (list a22602 temp22648)
 (list a22596 temp22640)
 (list a22599 temp22644)
 (list temp22631 temp22627)
 (list temp22640 a22596)
 (list a22578 temp22615)
 (list temp22636 a22593)
 (list a22606 temp22655))
label22658:
    movq a22606, temp22655
    movq a22603, temp22651
    addq temp22655, temp22651
    movq a22602, temp22648
    addq temp22651, temp22648
    movq a22599, temp22644
    addq temp22648, temp22644
    movq a22596, temp22640
    addq temp22644, temp22640
    movq a22593, temp22636
    addq temp22640, temp22636
    movq a22590, temp22632
    addq temp22636, temp22632
    movq temp22631, temp22627
    addq temp22632, temp22627
    movq a22584, temp22623
    addq temp22627, temp22623
    movq a22581, temp22619
    addq temp22623, temp22619
    movq a22578, temp22615
    addq temp22619, temp22615
    movq a22575, %rax
    addq temp22615, %rax
    jmp conclusion
    
label22660:
    movq $2, a22606
    jmp label22658
    
label22659:
    movq $1, a22606
    jmp label22658
    
label22661:
    movq $1, a22607
    cmpq $1, a22607
    je label22659
    jmp label22660
    
label22662:
    movq $0, a22608
    cmpq $1, a22608
    je label22659
    jmp label22660
    
label22663:
    callq read_int
    movq %rax, temp22657
    cmpq $1, temp22657
    jg label22661
    jmp label22662
    
label22665:
    movq $2, a22603
    jmp label22663
    
label22664:
    movq $1, a22603
    jmp label22663
    
label22667:
    movq $0, a22605
    cmpq $1, a22605
    je label22664
    jmp label22665
    
label22666:
    movq $1, a22604
    cmpq $1, a22604
    je label22664
    jmp label22665
    
label22668:
    callq read_int
    movq %rax, a22602
    callq read_int
    movq %rax, temp22653
    cmpq $1, temp22653
    jg label22666
    jmp label22667
    
label22669:
    movq $1, a22599
    jmp label22668
    
label22670:
    movq $2, a22599
    jmp label22668
    
label22671:
    movq $1, a22600
    cmpq $1, a22600
    je label22669
    jmp label22670
    
label22672:
    movq $0, a22601
    cmpq $1, a22601
    je label22669
    jmp label22670
    
label22673:
    callq read_int
    movq %rax, temp22646
    cmpq $1, temp22646
    jg label22671
    jmp label22672
    
label22675:
    movq $2, a22596
    jmp label22673
    
label22674:
    movq $1, a22596
    jmp label22673
    
label22713:
    movq $1, %rax
    jmp conclusion
    
label22676:
    movq $1, a22597
    cmpq $1, a22597
    je label22674
    jmp label22675
    
label22677:
    movq $0, a22598
    cmpq $1, a22598
    je label22674
    jmp label22675
    
label22678:
    callq read_int
    movq %rax, temp22642
    cmpq $1, temp22642
    jg label22676
    jmp label22677
    
label22679:
    movq $1, a22593
    jmp label22678
    
label22680:
    movq $2, a22593
    jmp label22678
    
label22681:
    movq $1, a22594
    cmpq $1, a22594
    je label22679
    jmp label22680
    
label22682:
    movq $0, a22595
    cmpq $1, a22595
    je label22679
    jmp label22680
    
label22683:
    callq read_int
    movq %rax, temp22638
    cmpq $1, temp22638
    jg label22681
    jmp label22682
    
label22685:
    movq $2, a22590
    jmp label22683
    
label22684:
    movq $1, a22590
    jmp label22683
    
label22687:
    movq $0, a22592
    cmpq $1, a22592
    je label22684
    jmp label22685
    
label22686:
    movq $1, a22591
    cmpq $1, a22591
    je label22684
    jmp label22685
    
label22688:
    callq read_int
    movq %rax, temp22631
    callq read_int
    movq %rax, temp22634
    cmpq $1, temp22634
    jg label22686
    jmp label22687
    
label22689:
    movq $1, a22587
    jmp label22688
    
label22690:
    movq $2, a22587
    jmp label22688
    
label22691:
    movq $1, a22588
    cmpq $1, a22588
    je label22689
    jmp label22690
    
label22692:
    movq $0, a22589
    cmpq $1, a22589
    je label22689
    jmp label22690
    
label22693:
    callq read_int
    movq %rax, temp22629
    cmpq $1, temp22629
    jg label22691
    jmp label22692
    
label22695:
    movq $2, a22584
    jmp label22693
    
label22694:
    movq $1, a22584
    jmp label22693
    
label22697:
    movq $0, a22586
    cmpq $1, a22586
    je label22694
    jmp label22695
    
label22696:
    movq $1, a22585
    cmpq $1, a22585
    je label22694
    jmp label22695
    
label22698:
    callq read_int
    movq %rax, temp22625
    cmpq $1, temp22625
    jg label22696
    jmp label22697
    
label22699:
    movq $1, a22581
    jmp label22698
    
label22700:
    movq $2, a22581
    jmp label22698
    
label22701:
    movq $1, a22582
    cmpq $1, a22582
    je label22699
    jmp label22700
    
label22702:
    movq $0, a22583
    cmpq $1, a22583
    je label22699
    jmp label22700
    
label22703:
    callq read_int
    movq %rax, temp22621
    cmpq $1, temp22621
    jg label22701
    jmp label22702
    
label22705:
    movq $2, a22578
    jmp label22703
    
label22704:
    movq $1, a22578
    jmp label22703
    
label22707:
    movq $0, a22580
    cmpq $1, a22580
    je label22704
    jmp label22705
    
label22706:
    movq $1, a22579
    cmpq $1, a22579
    je label22704
    jmp label22705
    
label22708:
    callq read_int
    movq %rax, temp22617
    cmpq $1, temp22617
    jg label22706
    jmp label22707
    
label22709:
    movq $1, a22575
    jmp label22708
    
label22710:
    movq $2, a22575
    jmp label22708
    
label22711:
    movq $1, a22576
    cmpq $1, a22576
    je label22709
    jmp label22710
    
label22712:
    movq $0, a22577
    cmpq $1, a22577
    je label22709
    jmp label22710
    
label22714:
    callq read_int
    movq %rax, temp22613
    cmpq $1, temp22613
    jg label22711
    jmp label22712
    
label22715:
    cmpq $1, x22574
    je label22713
    jmp label22714
    
label22717:
    movq $0, x22574
    jmp label22715
    
label22716:
    movq $1, x22574
    jmp label22715
    
label22718:
    cmpq $8, temp22610
    jg label22716
    jmp label22717
    
label22719:
    movq $8, temp22610
    jmp label22718
    
label22720:
    movq $9, temp22610
    jmp label22718
    
start:
    cmpq $1, $1
    jge label22719
    jmp label22720
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22629 : 'Integer, temp22631 : 'Integer, temp22632 : 'Integer, temp22634 : 'Integer, temp22636 : 'Integer, a22575 : 'Integer, x22574 : 'Boolean, temp22638 : 'Integer, a22577 : 'Boolean, temp22640 : 'Integer, a22576 : 'Boolean, a22579 : 'Boolean, a22578 : 'Integer, temp22642 : 'Integer, temp22613 : 'Integer, temp22615 : 'Integer, temp22617 : 'Integer, temp22619 : 'Integer, temp22621 : 'Integer, temp22623 : 'Integer, temp22625 : 'Integer, temp22627 : 'Integer, a22597 : 'Boolean, a22596 : 'Integer, a22599 : 'Integer, a22598 : 'Boolean, a22601 : 'Boolean, a22600 : 'Boolean, a22603 : 'Integer, a22602 : 'Integer, a22605 : 'Boolean, a22604 : 'Boolean, a22607 : 'Boolean, a22606 : 'Integer, a22608 : 'Boolean, temp22610 : 'Integer, a22581 : 'Integer, a22580 : 'Boolean, temp22644 : 'Integer, a22583 : 'Boolean, a22582 : 'Boolean, temp22646 : 'Integer, a22585 : 'Boolean, temp22648 : 'Integer, a22584 : 'Integer, temp22651 : 'Integer, a22587 : 'Integer, a22586 : 'Boolean, a22589 : 'Boolean, temp22653 : 'Integer, a22588 : 'Boolean, temp22655 : 'Integer, a22591 : 'Boolean, a22590 : 'Integer, temp22657 : 'Integer, a22593 : 'Integer, a22592 : 'Boolean, a22595 : 'Boolean, a22594 : 'Boolean, 
tsorted
:
'(label22658
  label22660
  label22659
  label22661
  label22662
  label22663
  label22665
  label22664
  label22667
  label22666
  label22668
  label22669
  label22670
  label22671
  label22672
  label22673
  label22675
  label22674
  label22713
  label22676
  label22677
  label22678
  label22679
  label22680
  label22681
  label22682
  label22683
  label22685
  label22684
  label22687
  label22686
  label22688
  label22689
  label22690
  label22691
  label22692
  label22693
  label22695
  label22694
  label22697
  label22696
  label22698
  label22699
  label22700
  label22701
  label22702
  label22703
  label22705
  label22704
  label22707
  label22706
  label22708
  label22709
  label22710
  label22711
  label22712
  label22714
  label22715
  label22717
  label22716
  label22718
  label22719
  label22720
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22648 a22602)
 (list a22584 temp22623)
 (list temp22619 a22581)
 (list temp22651 a22603)
 (list a22581 temp22619)
 (list temp22644 a22599)
 (list temp22615 a22578)
 (list a22593 temp22636)
 (list temp22627 temp22631)
 (list temp22623 a22584)
 (list temp22655 a22606)
 (list a22590 temp22632)
 (list temp22632 a22590)
 (list a22603 temp22651)
 (list a22602 temp22648)
 (list a22596 temp22640)
 (list a22599 temp22644)
 (list temp22631 temp22627)
 (list temp22640 a22596)
 (list a22578 temp22615)
 (list temp22636 a22593)
 (list a22606 temp22655))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a22593 7)
 (cons a22590 8)
 (cons a22584 9)
 (cons a22581 10)
 (cons a22602 11)
 (cons a22603 12)
 (cons a22599 13)
 (cons a22596 14)
 (cons a22578 15)
 (cons a22575 16)
 (cons temp22631 17)
 (cons temp22657 0)
 (cons a22608 0)
 (cons temp22655 0)
 (cons temp22651 1)
 (cons a22606 0)
 (cons a22607 0)
 (cons temp22653 0)
 (cons temp22648 0)
 (cons a22604 0)
 (cons a22605 0)
 (cons temp22644 1)
 (cons temp22640 0)
 (cons a22601 0)
 (cons a22600 0)
 (cons temp22646 0)
 (cons a22598 0)
 (cons temp22636 1)
 (cons a22597 0)
 (cons temp22642 0)
 (cons a22594 0)
 (cons temp22632 0)
 (cons temp22638 0)
 (cons a22595 0)
 (cons a22591 0)
 (cons temp22634 0)
 (cons a22592 0)
 (cons temp22627 1)
 (cons temp22623 0)
 (cons a22589 0)
 (cons a22588 0)
 (cons a22587 0)
 (cons temp22629 0)
 (cons temp22619 1)
 (cons temp22615 0)
 (cons a22585 0)
 (cons a22586 0)
 (cons temp22625 0)
 (cons temp22621 0)
 (cons a22583 0)
 (cons a22582 0)
 (cons a22579 0)
 (cons a22580 0)
 (cons temp22617 0)
 (cons x22574 0)
 (cons temp22610 0)
 (cons a22577 0)
 (cons temp22613 0)
 (cons a22576 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label22658:
    movq %rcx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label22660:
    movq $2, %rcx
    jmp label22658
    
label22659:
    movq $1, %rcx
    jmp label22658
    
label22661:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22659
    jmp label22660
    
label22662:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22659
    jmp label22660
    
label22663:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22661
    jmp label22662
    
label22665:
    movq $2, -56(%rbp)
    jmp label22663
    
label22664:
    movq $1, -56(%rbp)
    jmp label22663
    
label22667:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22664
    jmp label22665
    
label22666:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22664
    jmp label22665
    
label22668:
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22666
    jmp label22667
    
label22669:
    movq $1, -64(%rbp)
    jmp label22668
    
label22670:
    movq $2, -64(%rbp)
    jmp label22668
    
label22671:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22669
    jmp label22670
    
label22672:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22669
    jmp label22670
    
label22673:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22671
    jmp label22672
    
label22675:
    movq $2, -72(%rbp)
    jmp label22673
    
label22674:
    movq $1, -72(%rbp)
    jmp label22673
    
label22713:
    movq $1, %rax
    jmp conclusion
    
label22676:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22674
    jmp label22675
    
label22677:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22674
    jmp label22675
    
label22678:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22676
    jmp label22677
    
label22679:
    movq $1, %rbx
    jmp label22678
    
label22680:
    movq $2, %rbx
    jmp label22678
    
label22681:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22679
    jmp label22680
    
label22682:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22679
    jmp label22680
    
label22683:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22681
    jmp label22682
    
label22685:
    movq $2, %r12
    jmp label22683
    
label22684:
    movq $1, %r12
    jmp label22683
    
label22687:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22684
    jmp label22685
    
label22686:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22684
    jmp label22685
    
label22688:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22686
    jmp label22687
    
label22689:
    movq $1, %rcx
    jmp label22688
    
label22690:
    movq $2, %rcx
    jmp label22688
    
label22691:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22689
    jmp label22690
    
label22692:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22689
    jmp label22690
    
label22693:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22691
    jmp label22692
    
label22695:
    movq $2, %r13
    jmp label22693
    
label22694:
    movq $1, %r13
    jmp label22693
    
label22697:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22694
    jmp label22695
    
label22696:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22694
    jmp label22695
    
label22698:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22696
    jmp label22697
    
label22699:
    movq $1, %r14
    jmp label22698
    
label22700:
    movq $2, %r14
    jmp label22698
    
label22701:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22699
    jmp label22700
    
label22702:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22699
    jmp label22700
    
label22703:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22701
    jmp label22702
    
label22705:
    movq $2, -80(%rbp)
    jmp label22703
    
label22704:
    movq $1, -80(%rbp)
    jmp label22703
    
label22707:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22704
    jmp label22705
    
label22706:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22704
    jmp label22705
    
label22708:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22706
    jmp label22707
    
label22709:
    movq $1, -88(%rbp)
    jmp label22708
    
label22710:
    movq $2, -88(%rbp)
    jmp label22708
    
label22711:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22709
    jmp label22710
    
label22712:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22709
    jmp label22710
    
label22714:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22711
    jmp label22712
    
label22715:
    cmpq $1, %rcx
    je label22713
    jmp label22714
    
label22717:
    movq $0, %rcx
    jmp label22715
    
label22716:
    movq $1, %rcx
    jmp label22715
    
label22718:
    cmpq $8, %rcx
    jg label22716
    jmp label22717
    
label22719:
    movq $8, %rcx
    jmp label22718
    
label22720:
    movq $9, %rcx
    jmp label22718
    
start:
    cmpq $1, $1
    jge label22719
    jmp label22720
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22629 : 'Integer, temp22631 : 'Integer, temp22632 : 'Integer, temp22634 : 'Integer, temp22636 : 'Integer, a22575 : 'Integer, x22574 : 'Boolean, temp22638 : 'Integer, a22577 : 'Boolean, temp22640 : 'Integer, a22576 : 'Boolean, a22579 : 'Boolean, a22578 : 'Integer, temp22642 : 'Integer, temp22613 : 'Integer, temp22615 : 'Integer, temp22617 : 'Integer, temp22619 : 'Integer, temp22621 : 'Integer, temp22623 : 'Integer, temp22625 : 'Integer, temp22627 : 'Integer, a22597 : 'Boolean, a22596 : 'Integer, a22599 : 'Integer, a22598 : 'Boolean, a22601 : 'Boolean, a22600 : 'Boolean, a22603 : 'Integer, a22602 : 'Integer, a22605 : 'Boolean, a22604 : 'Boolean, a22607 : 'Boolean, a22606 : 'Integer, a22608 : 'Boolean, temp22610 : 'Integer, a22581 : 'Integer, a22580 : 'Boolean, temp22644 : 'Integer, a22583 : 'Boolean, a22582 : 'Boolean, temp22646 : 'Integer, a22585 : 'Boolean, temp22648 : 'Integer, a22584 : 'Integer, temp22651 : 'Integer, a22587 : 'Integer, a22586 : 'Boolean, a22589 : 'Boolean, temp22653 : 'Integer, a22588 : 'Boolean, temp22655 : 'Integer, a22591 : 'Boolean, a22590 : 'Integer, temp22657 : 'Integer, a22593 : 'Integer, a22592 : 'Boolean, a22595 : 'Boolean, a22594 : 'Boolean, 
tsorted
:
'(label22658
  label22660
  label22659
  label22661
  label22662
  label22663
  label22665
  label22664
  label22667
  label22666
  label22668
  label22669
  label22670
  label22671
  label22672
  label22673
  label22675
  label22674
  label22713
  label22676
  label22677
  label22678
  label22679
  label22680
  label22681
  label22682
  label22683
  label22685
  label22684
  label22687
  label22686
  label22688
  label22689
  label22690
  label22691
  label22692
  label22693
  label22695
  label22694
  label22697
  label22696
  label22698
  label22699
  label22700
  label22701
  label22702
  label22703
  label22705
  label22704
  label22707
  label22706
  label22708
  label22709
  label22710
  label22711
  label22712
  label22714
  label22715
  label22717
  label22716
  label22718
  label22719
  label22720
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22648 a22602)
 (list a22584 temp22623)
 (list temp22619 a22581)
 (list temp22651 a22603)
 (list a22581 temp22619)
 (list temp22644 a22599)
 (list temp22615 a22578)
 (list a22593 temp22636)
 (list temp22627 temp22631)
 (list temp22623 a22584)
 (list temp22655 a22606)
 (list a22590 temp22632)
 (list temp22632 a22590)
 (list a22603 temp22651)
 (list a22602 temp22648)
 (list a22596 temp22640)
 (list a22599 temp22644)
 (list temp22631 temp22627)
 (list temp22640 a22596)
 (list a22578 temp22615)
 (list temp22636 a22593)
 (list a22606 temp22655))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a22593 7)
 (cons a22590 8)
 (cons a22584 9)
 (cons a22581 10)
 (cons a22602 11)
 (cons a22603 12)
 (cons a22599 13)
 (cons a22596 14)
 (cons a22578 15)
 (cons a22575 16)
 (cons temp22631 17)
 (cons temp22657 0)
 (cons a22608 0)
 (cons temp22655 0)
 (cons temp22651 1)
 (cons a22606 0)
 (cons a22607 0)
 (cons temp22653 0)
 (cons temp22648 0)
 (cons a22604 0)
 (cons a22605 0)
 (cons temp22644 1)
 (cons temp22640 0)
 (cons a22601 0)
 (cons a22600 0)
 (cons temp22646 0)
 (cons a22598 0)
 (cons temp22636 1)
 (cons a22597 0)
 (cons temp22642 0)
 (cons a22594 0)
 (cons temp22632 0)
 (cons temp22638 0)
 (cons a22595 0)
 (cons a22591 0)
 (cons temp22634 0)
 (cons a22592 0)
 (cons temp22627 1)
 (cons temp22623 0)
 (cons a22589 0)
 (cons a22588 0)
 (cons a22587 0)
 (cons temp22629 0)
 (cons temp22619 1)
 (cons temp22615 0)
 (cons a22585 0)
 (cons a22586 0)
 (cons temp22625 0)
 (cons temp22621 0)
 (cons a22583 0)
 (cons a22582 0)
 (cons a22579 0)
 (cons a22580 0)
 (cons temp22617 0)
 (cons x22574 0)
 (cons temp22610 0)
 (cons a22577 0)
 (cons temp22613 0)
 (cons a22576 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label22658:
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label22660:
    movq $2, %rcx
    jmp label22658
    
label22659:
    movq $1, %rcx
    jmp label22658
    
label22661:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22659
    jmp label22660
    
label22662:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22659
    jmp label22660
    
label22663:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22661
    jmp label22662
    
label22665:
    movq $2, -56(%rbp)
    jmp label22663
    
label22664:
    movq $1, -56(%rbp)
    jmp label22663
    
label22667:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22664
    jmp label22665
    
label22666:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22664
    jmp label22665
    
label22668:
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22666
    jmp label22667
    
label22669:
    movq $1, -64(%rbp)
    jmp label22668
    
label22670:
    movq $2, -64(%rbp)
    jmp label22668
    
label22671:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22669
    jmp label22670
    
label22672:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22669
    jmp label22670
    
label22673:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22671
    jmp label22672
    
label22675:
    movq $2, -72(%rbp)
    jmp label22673
    
label22674:
    movq $1, -72(%rbp)
    jmp label22673
    
label22713:
    movq $1, %rax
    jmp conclusion
    
label22676:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22674
    jmp label22675
    
label22677:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22674
    jmp label22675
    
label22678:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22676
    jmp label22677
    
label22679:
    movq $1, %rbx
    jmp label22678
    
label22680:
    movq $2, %rbx
    jmp label22678
    
label22681:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22679
    jmp label22680
    
label22682:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22679
    jmp label22680
    
label22683:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22681
    jmp label22682
    
label22685:
    movq $2, %r12
    jmp label22683
    
label22684:
    movq $1, %r12
    jmp label22683
    
label22687:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22684
    jmp label22685
    
label22686:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22684
    jmp label22685
    
label22688:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22686
    jmp label22687
    
label22689:
    movq $1, %rcx
    jmp label22688
    
label22690:
    movq $2, %rcx
    jmp label22688
    
label22691:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22689
    jmp label22690
    
label22692:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22689
    jmp label22690
    
label22693:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22691
    jmp label22692
    
label22695:
    movq $2, %r13
    jmp label22693
    
label22694:
    movq $1, %r13
    jmp label22693
    
label22697:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22694
    jmp label22695
    
label22696:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22694
    jmp label22695
    
label22698:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22696
    jmp label22697
    
label22699:
    movq $1, %r14
    jmp label22698
    
label22700:
    movq $2, %r14
    jmp label22698
    
label22701:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22699
    jmp label22700
    
label22702:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22699
    jmp label22700
    
label22703:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22701
    jmp label22702
    
label22705:
    movq $2, -80(%rbp)
    jmp label22703
    
label22704:
    movq $1, -80(%rbp)
    jmp label22703
    
label22707:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22704
    jmp label22705
    
label22706:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22704
    jmp label22705
    
label22708:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22706
    jmp label22707
    
label22709:
    movq $1, -88(%rbp)
    jmp label22708
    
label22710:
    movq $2, -88(%rbp)
    jmp label22708
    
label22711:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22709
    jmp label22710
    
label22712:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22709
    jmp label22710
    
label22714:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22711
    jmp label22712
    
label22715:
    cmpq $1, %rcx
    je label22713
    jmp label22714
    
label22717:
    movq $0, %rcx
    jmp label22715
    
label22716:
    movq $1, %rcx
    jmp label22715
    
label22718:
    cmpq $8, %rcx
    jg label22716
    jmp label22717
    
label22719:
    movq $8, %rcx
    jmp label22718
    
label22720:
    movq $9, %rcx
    jmp label22718
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22719
    jmp label22720
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22629 : 'Integer, temp22631 : 'Integer, temp22632 : 'Integer, temp22634 : 'Integer, temp22636 : 'Integer, a22575 : 'Integer, x22574 : 'Boolean, temp22638 : 'Integer, a22577 : 'Boolean, temp22640 : 'Integer, a22576 : 'Boolean, a22579 : 'Boolean, a22578 : 'Integer, temp22642 : 'Integer, temp22613 : 'Integer, temp22615 : 'Integer, temp22617 : 'Integer, temp22619 : 'Integer, temp22621 : 'Integer, temp22623 : 'Integer, temp22625 : 'Integer, temp22627 : 'Integer, a22597 : 'Boolean, a22596 : 'Integer, a22599 : 'Integer, a22598 : 'Boolean, a22601 : 'Boolean, a22600 : 'Boolean, a22603 : 'Integer, a22602 : 'Integer, a22605 : 'Boolean, a22604 : 'Boolean, a22607 : 'Boolean, a22606 : 'Integer, a22608 : 'Boolean, temp22610 : 'Integer, a22581 : 'Integer, a22580 : 'Boolean, temp22644 : 'Integer, a22583 : 'Boolean, a22582 : 'Boolean, temp22646 : 'Integer, a22585 : 'Boolean, temp22648 : 'Integer, a22584 : 'Integer, temp22651 : 'Integer, a22587 : 'Integer, a22586 : 'Boolean, a22589 : 'Boolean, temp22653 : 'Integer, a22588 : 'Boolean, temp22655 : 'Integer, a22591 : 'Boolean, a22590 : 'Integer, temp22657 : 'Integer, a22593 : 'Integer, a22592 : 'Boolean, a22595 : 'Boolean, a22594 : 'Boolean, 
tsorted
:
'(label22658
  label22660
  label22659
  label22661
  label22662
  label22663
  label22665
  label22664
  label22667
  label22666
  label22668
  label22669
  label22670
  label22671
  label22672
  label22673
  label22675
  label22674
  label22713
  label22676
  label22677
  label22678
  label22679
  label22680
  label22681
  label22682
  label22683
  label22685
  label22684
  label22687
  label22686
  label22688
  label22689
  label22690
  label22691
  label22692
  label22693
  label22695
  label22694
  label22697
  label22696
  label22698
  label22699
  label22700
  label22701
  label22702
  label22703
  label22705
  label22704
  label22707
  label22706
  label22708
  label22709
  label22710
  label22711
  label22712
  label22714
  label22715
  label22717
  label22716
  label22718
  label22719
  label22720
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22648 a22602)
 (list a22584 temp22623)
 (list temp22619 a22581)
 (list temp22651 a22603)
 (list a22581 temp22619)
 (list temp22644 a22599)
 (list temp22615 a22578)
 (list a22593 temp22636)
 (list temp22627 temp22631)
 (list temp22623 a22584)
 (list temp22655 a22606)
 (list a22590 temp22632)
 (list temp22632 a22590)
 (list a22603 temp22651)
 (list a22602 temp22648)
 (list a22596 temp22640)
 (list a22599 temp22644)
 (list temp22631 temp22627)
 (list temp22640 a22596)
 (list a22578 temp22615)
 (list temp22636 a22593)
 (list a22606 temp22655))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a22593 7)
 (cons a22590 8)
 (cons a22584 9)
 (cons a22581 10)
 (cons a22602 11)
 (cons a22603 12)
 (cons a22599 13)
 (cons a22596 14)
 (cons a22578 15)
 (cons a22575 16)
 (cons temp22631 17)
 (cons temp22657 0)
 (cons a22608 0)
 (cons temp22655 0)
 (cons temp22651 1)
 (cons a22606 0)
 (cons a22607 0)
 (cons temp22653 0)
 (cons temp22648 0)
 (cons a22604 0)
 (cons a22605 0)
 (cons temp22644 1)
 (cons temp22640 0)
 (cons a22601 0)
 (cons a22600 0)
 (cons temp22646 0)
 (cons a22598 0)
 (cons temp22636 1)
 (cons a22597 0)
 (cons temp22642 0)
 (cons a22594 0)
 (cons temp22632 0)
 (cons temp22638 0)
 (cons a22595 0)
 (cons a22591 0)
 (cons temp22634 0)
 (cons a22592 0)
 (cons temp22627 1)
 (cons temp22623 0)
 (cons a22589 0)
 (cons a22588 0)
 (cons a22587 0)
 (cons temp22629 0)
 (cons temp22619 1)
 (cons temp22615 0)
 (cons a22585 0)
 (cons a22586 0)
 (cons temp22625 0)
 (cons temp22621 0)
 (cons a22583 0)
 (cons a22582 0)
 (cons a22579 0)
 (cons a22580 0)
 (cons temp22617 0)
 (cons x22574 0)
 (cons temp22610 0)
 (cons a22577 0)
 (cons temp22613 0)
 (cons a22576 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label22658:
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq %r14, %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label22660:
    movq $2, %rcx
    jmp label22658
    
label22659:
    movq $1, %rcx
    jmp label22658
    
label22661:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22659
    jmp label22660
    
label22662:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22659
    jmp label22660
    
label22663:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22661
    jmp label22662
    
label22665:
    movq $2, -56(%rbp)
    jmp label22663
    
label22664:
    movq $1, -56(%rbp)
    jmp label22663
    
label22667:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22664
    jmp label22665
    
label22666:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22664
    jmp label22665
    
label22668:
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22666
    jmp label22667
    
label22669:
    movq $1, -64(%rbp)
    jmp label22668
    
label22670:
    movq $2, -64(%rbp)
    jmp label22668
    
label22671:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22669
    jmp label22670
    
label22672:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22669
    jmp label22670
    
label22673:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22671
    jmp label22672
    
label22675:
    movq $2, -72(%rbp)
    jmp label22673
    
label22674:
    movq $1, -72(%rbp)
    jmp label22673
    
label22713:
    movq $1, %rax
    jmp conclusion
    
label22676:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22674
    jmp label22675
    
label22677:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22674
    jmp label22675
    
label22678:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22676
    jmp label22677
    
label22679:
    movq $1, %rbx
    jmp label22678
    
label22680:
    movq $2, %rbx
    jmp label22678
    
label22681:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22679
    jmp label22680
    
label22682:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22679
    jmp label22680
    
label22683:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22681
    jmp label22682
    
label22685:
    movq $2, %r12
    jmp label22683
    
label22684:
    movq $1, %r12
    jmp label22683
    
label22687:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22684
    jmp label22685
    
label22686:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22684
    jmp label22685
    
label22688:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22686
    jmp label22687
    
label22689:
    movq $1, %rcx
    jmp label22688
    
label22690:
    movq $2, %rcx
    jmp label22688
    
label22691:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22689
    jmp label22690
    
label22692:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22689
    jmp label22690
    
label22693:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22691
    jmp label22692
    
label22695:
    movq $2, %r13
    jmp label22693
    
label22694:
    movq $1, %r13
    jmp label22693
    
label22697:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22694
    jmp label22695
    
label22696:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22694
    jmp label22695
    
label22698:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22696
    jmp label22697
    
label22699:
    movq $1, %r14
    jmp label22698
    
label22700:
    movq $2, %r14
    jmp label22698
    
label22701:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22699
    jmp label22700
    
label22702:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22699
    jmp label22700
    
label22703:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22701
    jmp label22702
    
label22705:
    movq $2, -80(%rbp)
    jmp label22703
    
label22704:
    movq $1, -80(%rbp)
    jmp label22703
    
label22707:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22704
    jmp label22705
    
label22706:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22704
    jmp label22705
    
label22708:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22706
    jmp label22707
    
label22709:
    movq $1, -88(%rbp)
    jmp label22708
    
label22710:
    movq $2, -88(%rbp)
    jmp label22708
    
label22711:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22709
    jmp label22710
    
label22712:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22709
    jmp label22710
    
label22714:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22711
    jmp label22712
    
label22715:
    cmpq $1, %rcx
    je label22713
    jmp label22714
    
label22717:
    movq $0, %rcx
    jmp label22715
    
label22716:
    movq $1, %rcx
    jmp label22715
    
label22718:
    cmpq $8, %rcx
    jg label22716
    jmp label22717
    
label22719:
    movq $8, %rcx
    jmp label22718
    
label22720:
    movq $9, %rcx
    jmp label22718
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22719
    jmp label22720
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22658:
	movq	-56(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-48(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-64(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-72(%rbp), %rcx
	addq	%rdx, %rcx
	movq	%rbx, %rdx
	addq	%rcx, %rdx
	movq	%r12, %rcx
	addq	%rdx, %rcx
	movq	-96(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%r13, %rcx
	addq	%rdx, %rcx
	movq	%r14, %rdx
	addq	%rcx, %rdx
	movq	-80(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-88(%rbp), %rax
	addq	%rcx, %rax
	jmp _conclusion

	.align 16
_label22660:
	movq	$2, %rcx
	jmp _label22658

	.align 16
_label22659:
	movq	$1, %rcx
	jmp _label22658

	.align 16
_label22661:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22659
	jmp _label22660

	.align 16
_label22662:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22659
	jmp _label22660

	.align 16
_label22663:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22661
	jmp _label22662

	.align 16
_label22665:
	movq	$2, -56(%rbp)
	jmp _label22663

	.align 16
_label22664:
	movq	$1, -56(%rbp)
	jmp _label22663

	.align 16
_label22667:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22664
	jmp _label22665

	.align 16
_label22666:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22664
	jmp _label22665

	.align 16
_label22668:
	callq	_read_int
	movq	%rax, -48(%rbp)
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22666
	jmp _label22667

	.align 16
_label22669:
	movq	$1, -64(%rbp)
	jmp _label22668

	.align 16
_label22670:
	movq	$2, -64(%rbp)
	jmp _label22668

	.align 16
_label22671:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22669
	jmp _label22670

	.align 16
_label22672:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22669
	jmp _label22670

	.align 16
_label22673:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22671
	jmp _label22672

	.align 16
_label22675:
	movq	$2, -72(%rbp)
	jmp _label22673

	.align 16
_label22674:
	movq	$1, -72(%rbp)
	jmp _label22673

	.align 16
_label22713:
	movq	$1, %rax
	jmp _conclusion

	.align 16
_label22676:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22674
	jmp _label22675

	.align 16
_label22677:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22674
	jmp _label22675

	.align 16
_label22678:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22676
	jmp _label22677

	.align 16
_label22679:
	movq	$1, %rbx
	jmp _label22678

	.align 16
_label22680:
	movq	$2, %rbx
	jmp _label22678

	.align 16
_label22681:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22679
	jmp _label22680

	.align 16
_label22682:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22679
	jmp _label22680

	.align 16
_label22683:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22681
	jmp _label22682

	.align 16
_label22685:
	movq	$2, %r12
	jmp _label22683

	.align 16
_label22684:
	movq	$1, %r12
	jmp _label22683

	.align 16
_label22687:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22684
	jmp _label22685

	.align 16
_label22686:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22684
	jmp _label22685

	.align 16
_label22688:
	callq	_read_int
	movq	%rax, -96(%rbp)
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22686
	jmp _label22687

	.align 16
_label22689:
	movq	$1, %rcx
	jmp _label22688

	.align 16
_label22690:
	movq	$2, %rcx
	jmp _label22688

	.align 16
_label22691:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22689
	jmp _label22690

	.align 16
_label22692:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22689
	jmp _label22690

	.align 16
_label22693:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22691
	jmp _label22692

	.align 16
_label22695:
	movq	$2, %r13
	jmp _label22693

	.align 16
_label22694:
	movq	$1, %r13
	jmp _label22693

	.align 16
_label22697:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22694
	jmp _label22695

	.align 16
_label22696:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22694
	jmp _label22695

	.align 16
_label22698:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22696
	jmp _label22697

	.align 16
_label22699:
	movq	$1, %r14
	jmp _label22698

	.align 16
_label22700:
	movq	$2, %r14
	jmp _label22698

	.align 16
_label22701:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22699
	jmp _label22700

	.align 16
_label22702:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22699
	jmp _label22700

	.align 16
_label22703:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22701
	jmp _label22702

	.align 16
_label22705:
	movq	$2, -80(%rbp)
	jmp _label22703

	.align 16
_label22704:
	movq	$1, -80(%rbp)
	jmp _label22703

	.align 16
_label22707:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22704
	jmp _label22705

	.align 16
_label22706:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22704
	jmp _label22705

	.align 16
_label22708:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22706
	jmp _label22707

	.align 16
_label22709:
	movq	$1, -88(%rbp)
	jmp _label22708

	.align 16
_label22710:
	movq	$2, -88(%rbp)
	jmp _label22708

	.align 16
_label22711:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22709
	jmp _label22710

	.align 16
_label22712:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22709
	jmp _label22710

	.align 16
_label22714:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22711
	jmp _label22712

	.align 16
_label22715:
	cmpq	$1, %rcx
	je _label22713
	jmp _label22714

	.align 16
_label22717:
	movq	$0, %rcx
	jmp _label22715

	.align 16
_label22716:
	movq	$1, %rcx
	jmp _label22715

	.align 16
_label22718:
	cmpq	$8, %rcx
	jg _label22716
	jmp _label22717

	.align 16
_label22719:
	movq	$8, %rcx
	jmp _label22718

	.align 16
_label22720:
	movq	$9, %rcx
	jmp _label22718

	.align 16
_start:
	movq	$1, %rax
	cmpq	$1, %rax
	jge _label22719
	jmp _label22720

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$56, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_22.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (if (if (> (read) 1)
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= 1 1)
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      1
      (let ([a (if (if (if (if (if (> (read) 1)
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  1
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) 1)
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          1
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  1
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) 1)
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          1
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) 1)
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  1
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) 1)
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               1
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       1
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               1
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       1
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       1
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) 1)
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               1
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22721 (if (> (if (>= 1 1)
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x22721
      1
      (let ([a22722 (if (if (if (if (if (> (read) 1)
                                       (let ([a22723 #t])
                                          a22723)
                                       (let ([a22724 #f])
                                          a22724))
                                    
                                   (let ([a22725 #t])
                                      a22725)
                                   (let ([a22726 #f])
                                      a22726))
                                
                               (let ([a22727 #t])
                                  a22727)
                               (let ([a22728 #f])
                                  a22728))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (+ a22722 (let ([a22729 (if (if (if (if (> (read) 1)
                                                (let ([a22730 #t])
                                                   a22730)
                                                (let ([a22731 #f])
                                                   a22731))
                                             
                                            (let ([a22732 #t])
                                               a22732)
                                            (let ([a22733 #f])
                                               a22733))
                                         
                                        (let ([a22734 #t])
                                           a22734)
                                        (let ([a22735 #f])
                                           a22735))
                                     
                                    1
                                    2)
                                 ])
                      (+ a22729 (let ([a22736 (if (if (if (if (> (read) 1)
                                                             (let ([a22737 #t])
                                                                a22737)
                                                             (let ([a22738 #f])
                                                                a22738))
                                                          
                                                         (let ([a22739 #t])
                                                            a22739)
                                                         (let ([a22740 #f])
                                                            a22740))
                                                      
                                                     (let ([a22741 #t])
                                                        a22741)
                                                     (let ([a22742 #f])
                                                        a22742))
                                                  
                                                 1
                                                 2)
                                              ])
                                   (+ a22736 (let ([a22743 (if (if (if (if (> (read) 1)
                                                                          (let ([a22744 #t])
                                                                             a22744)
                                                                          (let ([a22745 #f])
                                                                             a22745))
                                                                       
                                                                      (let ([a22746 #t])
                                                                         a22746)
                                                                      (let ([a22747 #f])
                                                                         a22747))
                                                                   
                                                                  (let ([a22748 #t])
                                                                     a22748)
                                                                  (let ([a22749 #f])
                                                                     a22749))
                                                               
                                                              1
                                                              2)
                                                           ])
                                                (+ a22743 (let ([a22750 (if (if (if (if (> (read) 1)
                                                                                       (let ([a22751 #t])
                                                                                          a22751)
                                                                                       (let ([a22752 #f])
                                                                                          a22752))
                                                                                    
                                                                                   (let ([a22753 #t])
                                                                                      a22753)
                                                                                   (let ([a22754 #f])
                                                                                      a22754))
                                                                                
                                                                               (let ([a22755 #t])
                                                                                  a22755)
                                                                               (let ([a22756 #f])
                                                                                  a22756))
                                                                            
                                                                           1
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a22757 (if (if (if (if (> (read) 1)
                                                                                                    (let ([a22758 #t])
                                                                                                       a22758)
                                                                                                    (let ([a22759 #f])
                                                                                                       a22759))
                                                                                                 
                                                                                                (let ([a22760 #t])
                                                                                                   a22760)
                                                                                                (let ([a22761 #f])
                                                                                                   a22761))
                                                                                             
                                                                                            (let ([a22762 #t])
                                                                                               a22762)
                                                                                            (let ([a22763 #f])
                                                                                               a22763))
                                                                                         
                                                                                        1
                                                                                        2)
                                                                                     ])
                                                                          (+ a22757 (let ([a22764 (if (if (if (if (> (read) 1)
                                                                                                                 (let ([a22765 #t])
                                                                                                                    a22765)
                                                                                                                 (let ([a22766 #f])
                                                                                                                    a22766))
                                                                                                              
                                                                                                             (let ([a22767 #t])
                                                                                                                a22767)
                                                                                                             (let ([a22768 #f])
                                                                                                                a22768))
                                                                                                          
                                                                                                         (let ([a22769 #t])
                                                                                                            a22769)
                                                                                                         (let ([a22770 #f])
                                                                                                            a22770))
                                                                                                      
                                                                                                     1
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a22764 (let ([a22771 (if (if (if (if (> (read) 1)
                                                                                                                              (let ([a22772 #t])
                                                                                                                                 a22772)
                                                                                                                              (let ([a22773 #f])
                                                                                                                                 a22773))
                                                                                                                           
                                                                                                                          (let ([a22774 #t])
                                                                                                                             a22774)
                                                                                                                          (let ([a22775 #f])
                                                                                                                             a22775))
                                                                                                                       
                                                                                                                      (let ([a22776 #t])
                                                                                                                         a22776)
                                                                                                                      (let ([a22777 #f])
                                                                                                                         a22777))
                                                                                                                   
                                                                                                                  1
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a22771 (let ([a22778 (if (if (if (if (> (read) 1)
                                                                                                                                           (let ([a22779 #t])
                                                                                                                                              a22779)
                                                                                                                                           (let ([a22780 #f])
                                                                                                                                              a22780))
                                                                                                                                        
                                                                                                                                       (let ([a22781 #t])
                                                                                                                                          a22781)
                                                                                                                                       (let ([a22782 #f])
                                                                                                                                          a22782))
                                                                                                                                    
                                                                                                                                   (let ([a22783 #t])
                                                                                                                                      a22783)
                                                                                                                                   (let ([a22784 #f])
                                                                                                                                      a22784))
                                                                                                                                
                                                                                                                               1
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a22778 (let ([a22785 (read)])
                                                                                                                              (+ a22785 (let ([a22786 (if (if (if (if (> (read) 1)
                                                                                                                                                                     (let ([a22787 #t])
                                                                                                                                                                        a22787)
                                                                                                                                                                     (let ([a22788 #f])
                                                                                                                                                                        a22788))
                                                                                                                                                                  
                                                                                                                                                                 (let ([a22789 #t])
                                                                                                                                                                    a22789)
                                                                                                                                                                 (let ([a22790 #f])
                                                                                                                                                                    a22790))
                                                                                                                                                              
                                                                                                                                                             (let ([a22791 #t])
                                                                                                                                                                a22791)
                                                                                                                                                             (let ([a22792 #f])
                                                                                                                                                                a22792))
                                                                                                                                                          
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a22786 (let ([a22793 (if (if (if (if (> (read) 1)
                                                                                                                                                                                  (let ([a22794 #t])
                                                                                                                                                                                     a22794)
                                                                                                                                                                                  (let ([a22795 #f])
                                                                                                                                                                                     a22795))
                                                                                                                                                                               
                                                                                                                                                                              (let ([a22796 #t])
                                                                                                                                                                                 a22796)
                                                                                                                                                                              (let ([a22797 #f])
                                                                                                                                                                                 a22797))
                                                                                                                                                                           
                                                                                                                                                                          (let ([a22798 #t])
                                                                                                                                                                             a22798)
                                                                                                                                                                          (let ([a22799 #f])
                                                                                                                                                                             a22799))
                                                                                                                                                                       
                                                                                                                                                                      1
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a22793))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22721 (if (let ([temp22801 (if (>= 1 1)
                                      8
                                      9)
                                   ])
                     (> temp22801 8))
                 #t
                 #f)
              ])
   (if x22721
      1
      (let ([a22722 (if (if (if (if (if (let ([temp22804 (read)])
                                           (> temp22804 1))
                                       (let ([a22723 #t])
                                          a22723)
                                       (let ([a22724 #f])
                                          a22724))
                                    
                                   (let ([a22725 #t])
                                      a22725)
                                   (let ([a22726 #f])
                                      a22726))
                                
                               (let ([a22727 #t])
                                  a22727)
                               (let ([a22728 #f])
                                  a22728))
                            
                           #t
                           #f)
                        
                       1
                       2)
                    ])
         (let ([a22729 (if (if (if (if (let ([temp22808 (read)])
                                          (> temp22808 1))
                                      (let ([a22730 #t])
                                         a22730)
                                      (let ([a22731 #f])
                                         a22731))
                                   
                                  (let ([a22732 #t])
                                     a22732)
                                  (let ([a22733 #f])
                                     a22733))
                               
                              (let ([a22734 #t])
                                 a22734)
                              (let ([a22735 #f])
                                 a22735))
                           
                          1
                          2)
                       ])
            (let ([temp22806 (let ([a22736 (if (if (if (if (let ([temp22812 (read)])
                                                              (> temp22812 1))
                                                          (let ([a22737 #t])
                                                             a22737)
                                                          (let ([a22738 #f])
                                                             a22738))
                                                       
                                                      (let ([a22739 #t])
                                                         a22739)
                                                      (let ([a22740 #f])
                                                         a22740))
                                                   
                                                  (let ([a22741 #t])
                                                     a22741)
                                                  (let ([a22742 #f])
                                                     a22742))
                                               
                                              1
                                              2)
                                           ])
                                (let ([temp22810 (let ([a22743 (if (if (if (if (let ([temp22816 (read)])
                                                                                  (> temp22816 1))
                                                                              (let ([a22744 #t])
                                                                                 a22744)
                                                                              (let ([a22745 #f])
                                                                                 a22745))
                                                                           
                                                                          (let ([a22746 #t])
                                                                             a22746)
                                                                          (let ([a22747 #f])
                                                                             a22747))
                                                                       
                                                                      (let ([a22748 #t])
                                                                         a22748)
                                                                      (let ([a22749 #f])
                                                                         a22749))
                                                                   
                                                                  1
                                                                  2)
                                                               ])
                                                    (let ([temp22814 (let ([a22750 (if (if (if (if (let ([temp22820 (read)])
                                                                                                      (> temp22820 1))
                                                                                                  (let ([a22751 #t])
                                                                                                     a22751)
                                                                                                  (let ([a22752 #f])
                                                                                                     a22752))
                                                                                               
                                                                                              (let ([a22753 #t])
                                                                                                 a22753)
                                                                                              (let ([a22754 #f])
                                                                                                 a22754))
                                                                                           
                                                                                          (let ([a22755 #t])
                                                                                             a22755)
                                                                                          (let ([a22756 #f])
                                                                                             a22756))
                                                                                       
                                                                                      1
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp22818 (let ([temp22822 (read)])
                                                                                            (let ([a22757 (if (if (if (if (let ([temp22825 (read)])
                                                                                                                             (> temp22825 1))
                                                                                                                         (let ([a22758 #t])
                                                                                                                            a22758)
                                                                                                                         (let ([a22759 #f])
                                                                                                                            a22759))
                                                                                                                      
                                                                                                                     (let ([a22760 #t])
                                                                                                                        a22760)
                                                                                                                     (let ([a22761 #f])
                                                                                                                        a22761))
                                                                                                                  
                                                                                                                 (let ([a22762 #t])
                                                                                                                    a22762)
                                                                                                                 (let ([a22763 #f])
                                                                                                                    a22763))
                                                                                                              
                                                                                                             1
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp22823 (let ([a22764 (if (if (if (if (let ([temp22829 (read)])
                                                                                                                                                 (> temp22829 1))
                                                                                                                                             (let ([a22765 #t])
                                                                                                                                                a22765)
                                                                                                                                             (let ([a22766 #f])
                                                                                                                                                a22766))
                                                                                                                                          
                                                                                                                                         (let ([a22767 #t])
                                                                                                                                            a22767)
                                                                                                                                         (let ([a22768 #f])
                                                                                                                                            a22768))
                                                                                                                                      
                                                                                                                                     (let ([a22769 #t])
                                                                                                                                        a22769)
                                                                                                                                     (let ([a22770 #f])
                                                                                                                                        a22770))
                                                                                                                                  
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp22827 (let ([a22771 (if (if (if (if (let ([temp22833 (read)])
                                                                                                                                                                     (> temp22833 1))
                                                                                                                                                                 (let ([a22772 #t])
                                                                                                                                                                    a22772)
                                                                                                                                                                 (let ([a22773 #f])
                                                                                                                                                                    a22773))
                                                                                                                                                              
                                                                                                                                                             (let ([a22774 #t])
                                                                                                                                                                a22774)
                                                                                                                                                             (let ([a22775 #f])
                                                                                                                                                                a22775))
                                                                                                                                                          
                                                                                                                                                         (let ([a22776 #t])
                                                                                                                                                            a22776)
                                                                                                                                                         (let ([a22777 #f])
                                                                                                                                                            a22777))
                                                                                                                                                      
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp22831 (let ([a22778 (if (if (if (if (let ([temp22837 (read)])
                                                                                                                                                                                         (> temp22837 1))
                                                                                                                                                                                     (let ([a22779 #t])
                                                                                                                                                                                        a22779)
                                                                                                                                                                                     (let ([a22780 #f])
                                                                                                                                                                                        a22780))
                                                                                                                                                                                  
                                                                                                                                                                                 (let ([a22781 #t])
                                                                                                                                                                                    a22781)
                                                                                                                                                                                 (let ([a22782 #f])
                                                                                                                                                                                    a22782))
                                                                                                                                                                              
                                                                                                                                                                             (let ([a22783 #t])
                                                                                                                                                                                a22783)
                                                                                                                                                                             (let ([a22784 #f])
                                                                                                                                                                                a22784))
                                                                                                                                                                          
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp22835 (let ([a22785 (read)])
                                                                                                                                                                               (let ([temp22839 (let ([a22786 (if (if (if (if (let ([temp22844 (read)])
                                                                                                                                                                                                                                 (> temp22844 1))
                                                                                                                                                                                                                             (let ([a22787 #t])
                                                                                                                                                                                                                                a22787)
                                                                                                                                                                                                                             (let ([a22788 #f])
                                                                                                                                                                                                                                a22788))
                                                                                                                                                                                                                          
                                                                                                                                                                                                                         (let ([a22789 #t])
                                                                                                                                                                                                                            a22789)
                                                                                                                                                                                                                         (let ([a22790 #f])
                                                                                                                                                                                                                            a22790))
                                                                                                                                                                                                                      
                                                                                                                                                                                                                     (let ([a22791 #t])
                                                                                                                                                                                                                        a22791)
                                                                                                                                                                                                                     (let ([a22792 #f])
                                                                                                                                                                                                                        a22792))
                                                                                                                                                                                                                  
                                                                                                                                                                                                                 1
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp22842 (let ([a22793 (if (if (if (if (let ([temp22848 (read)])
                                                                                                                                                                                                                                                     (> temp22848 1))
                                                                                                                                                                                                                                                 (let ([a22794 #t])
                                                                                                                                                                                                                                                    a22794)
                                                                                                                                                                                                                                                 (let ([a22795 #f])
                                                                                                                                                                                                                                                    a22795))
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                             (let ([a22796 #t])
                                                                                                                                                                                                                                                a22796)
                                                                                                                                                                                                                                             (let ([a22797 #f])
                                                                                                                                                                                                                                                a22797))
                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                         (let ([a22798 #t])
                                                                                                                                                                                                                                            a22798)
                                                                                                                                                                                                                                         (let ([a22799 #f])
                                                                                                                                                                                                                                            a22799))
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                     1
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp22846 a22793])
                                                                                                                                                                                                                          (+ a22786 temp22846)))])
                                                                                                                                                                                                      (+ a22785 temp22842)))])
                                                                                                                                                                                  (+ a22778 temp22839)))])
                                                                                                                                                              (+ a22771 temp22835)))])
                                                                                                                                          (+ a22764 temp22831)))])
                                                                                                                      (+ a22757 temp22827)))])
                                                                                                  (+ temp22822 temp22823))))])
                                                                           (+ a22743 temp22818)))])
                                                       (+ a22736 temp22814)))])
                                   (+ a22729 temp22810)))])
               (+ a22722 temp22806)))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label22950:
    if (eq? x22721 #t)
       goto label22948;
    else
       goto label22949;
label22951:
    x22721 = #t;
    goto label22950;
label22948:
    return 1;
label22949:
    temp22804 = (read);
    if (> temp22804 1)
       goto label22946;
    else
       goto label22947;
label22954:
    temp22801 = 8;
    goto label22953;
label22955:
    temp22801 = 9;
    goto label22953;
label22952:
    x22721 = #f;
    goto label22950;
label22953:
    if (> temp22801 8)
       goto label22951;
    else
       goto label22952;
label22934:
    a22735 = #f;
    if (eq? a22735 #t)
       goto label22931;
    else
       goto label22932;
label22935:
    a22732 = #t;
    if (eq? a22732 #t)
       goto label22933;
    else
       goto label22934;
label22932:
    a22729 = 2;
    goto label22930;
label22933:
    a22734 = #t;
    if (eq? a22734 #t)
       goto label22931;
    else
       goto label22932;
label22938:
    a22731 = #f;
    if (eq? a22731 #t)
       goto label22935;
    else
       goto label22936;
label22939:
    temp22808 = (read);
    if (> temp22808 1)
       goto label22937;
    else
       goto label22938;
label22936:
    a22733 = #f;
    if (eq? a22733 #t)
       goto label22933;
    else
       goto label22934;
label22937:
    a22730 = #t;
    if (eq? a22730 #t)
       goto label22935;
    else
       goto label22936;
label22942:
    a22727 = #t;
    if (eq? a22727 #t)
       goto label22940;
    else
       goto label22941;
label22943:
    a22728 = #f;
    if (eq? a22728 #t)
       goto label22940;
    else
       goto label22941;
label22940:
    a22722 = 1;
    goto label22939;
label22941:
    a22722 = 2;
    goto label22939;
label22946:
    a22723 = #t;
    if (eq? a22723 #t)
       goto label22944;
    else
       goto label22945;
label22947:
    a22724 = #f;
    if (eq? a22724 #t)
       goto label22944;
    else
       goto label22945;
label22944:
    a22725 = #t;
    if (eq? a22725 #t)
       goto label22942;
    else
       goto label22943;
label22945:
    a22726 = #f;
    if (eq? a22726 #t)
       goto label22942;
    else
       goto label22943;
label22854:
    a22796 = #t;
    if (eq? a22796 #t)
       goto label22852;
    else
       goto label22853;
label22855:
    a22797 = #f;
    if (eq? a22797 #t)
       goto label22852;
    else
       goto label22853;
label22852:
    a22798 = #t;
    if (eq? a22798 #t)
       goto label22850;
    else
       goto label22851;
label22853:
    a22799 = #f;
    if (eq? a22799 #t)
       goto label22850;
    else
       goto label22851;
label22858:
    temp22848 = (read);
    if (> temp22848 1)
       goto label22856;
    else
       goto label22857;
label22859:
    a22786 = 1;
    goto label22858;
label22856:
    a22794 = #t;
    if (eq? a22794 #t)
       goto label22854;
    else
       goto label22855;
label22857:
    a22795 = #f;
    if (eq? a22795 #t)
       goto label22854;
    else
       goto label22855;
label22862:
    a22792 = #f;
    if (eq? a22792 #t)
       goto label22859;
    else
       goto label22860;
label22863:
    a22789 = #t;
    if (eq? a22789 #t)
       goto label22861;
    else
       goto label22862;
label22860:
    a22786 = 2;
    goto label22858;
label22861:
    a22791 = #t;
    if (eq? a22791 #t)
       goto label22859;
    else
       goto label22860;
label22866:
    a22788 = #f;
    if (eq? a22788 #t)
       goto label22863;
    else
       goto label22864;
label22867:
    a22785 = (read);
    temp22844 = (read);
    if (> temp22844 1)
       goto label22865;
    else
       goto label22866;
label22864:
    a22790 = #f;
    if (eq? a22790 #t)
       goto label22861;
    else
       goto label22862;
label22865:
    a22787 = #t;
    if (eq? a22787 #t)
       goto label22863;
    else
       goto label22864;
start:
    if (>= 1 1)
       goto label22954;
    else
       goto label22955;
label22850:
    a22793 = 1;
    goto label22849;
label22851:
    a22793 = 2;
    goto label22849;
label22849:
    temp22846 = a22793;
    temp22842 = (+ a22786 temp22846);
    temp22839 = (+ a22785 temp22842);
    temp22835 = (+ a22778 temp22839);
    temp22831 = (+ a22771 temp22835);
    temp22827 = (+ a22764 temp22831);
    temp22823 = (+ a22757 temp22827);
    temp22818 = (+ temp22822 temp22823);
    temp22814 = (+ a22743 temp22818);
    temp22810 = (+ a22736 temp22814);
    temp22806 = (+ a22729 temp22810);
    return (+ a22722 temp22806);
label22886:
    a22764 = 1;
    goto label22885;
label22887:
    a22764 = 2;
    goto label22885;
label22884:
    a22773 = #f;
    if (eq? a22773 #t)
       goto label22881;
    else
       goto label22882;
label22885:
    temp22833 = (read);
    if (> temp22833 1)
       goto label22883;
    else
       goto label22884;
label22890:
    a22767 = #t;
    if (eq? a22767 #t)
       goto label22888;
    else
       goto label22889;
label22891:
    a22768 = #f;
    if (eq? a22768 #t)
       goto label22888;
    else
       goto label22889;
label22888:
    a22769 = #t;
    if (eq? a22769 #t)
       goto label22886;
    else
       goto label22887;
label22889:
    a22770 = #f;
    if (eq? a22770 #t)
       goto label22886;
    else
       goto label22887;
label22894:
    temp22829 = (read);
    if (> temp22829 1)
       goto label22892;
    else
       goto label22893;
label22895:
    a22757 = 1;
    goto label22894;
label22892:
    a22765 = #t;
    if (eq? a22765 #t)
       goto label22890;
    else
       goto label22891;
label22893:
    a22766 = #f;
    if (eq? a22766 #t)
       goto label22890;
    else
       goto label22891;
label22898:
    a22763 = #f;
    if (eq? a22763 #t)
       goto label22895;
    else
       goto label22896;
label22899:
    a22760 = #t;
    if (eq? a22760 #t)
       goto label22897;
    else
       goto label22898;
label22896:
    a22757 = 2;
    goto label22894;
label22897:
    a22762 = #t;
    if (eq? a22762 #t)
       goto label22895;
    else
       goto label22896;
label22870:
    a22783 = #t;
    if (eq? a22783 #t)
       goto label22868;
    else
       goto label22869;
label22871:
    a22784 = #f;
    if (eq? a22784 #t)
       goto label22868;
    else
       goto label22869;
label22868:
    a22778 = 1;
    goto label22867;
label22869:
    a22778 = 2;
    goto label22867;
label22874:
    a22779 = #t;
    if (eq? a22779 #t)
       goto label22872;
    else
       goto label22873;
label22875:
    a22780 = #f;
    if (eq? a22780 #t)
       goto label22872;
    else
       goto label22873;
label22872:
    a22781 = #t;
    if (eq? a22781 #t)
       goto label22870;
    else
       goto label22871;
label22873:
    a22782 = #f;
    if (eq? a22782 #t)
       goto label22870;
    else
       goto label22871;
label22878:
    a22771 = 2;
    goto label22876;
label22879:
    a22776 = #t;
    if (eq? a22776 #t)
       goto label22877;
    else
       goto label22878;
label22876:
    temp22837 = (read);
    if (> temp22837 1)
       goto label22874;
    else
       goto label22875;
label22877:
    a22771 = 1;
    goto label22876;
label22882:
    a22775 = #f;
    if (eq? a22775 #t)
       goto label22879;
    else
       goto label22880;
label22883:
    a22772 = #t;
    if (eq? a22772 #t)
       goto label22881;
    else
       goto label22882;
label22880:
    a22777 = #f;
    if (eq? a22777 #t)
       goto label22877;
    else
       goto label22878;
label22881:
    a22774 = #t;
    if (eq? a22774 #t)
       goto label22879;
    else
       goto label22880;
label22918:
    a22747 = #f;
    if (eq? a22747 #t)
       goto label22915;
    else
       goto label22916;
label22919:
    a22744 = #t;
    if (eq? a22744 #t)
       goto label22917;
    else
       goto label22918;
label22916:
    a22749 = #f;
    if (eq? a22749 #t)
       goto label22913;
    else
       goto label22914;
label22917:
    a22746 = #t;
    if (eq? a22746 #t)
       goto label22915;
    else
       goto label22916;
label22922:
    a22736 = 1;
    goto label22921;
label22923:
    a22736 = 2;
    goto label22921;
label22920:
    a22745 = #f;
    if (eq? a22745 #t)
       goto label22917;
    else
       goto label22918;
label22921:
    temp22816 = (read);
    if (> temp22816 1)
       goto label22919;
    else
       goto label22920;
label22926:
    a22739 = #t;
    if (eq? a22739 #t)
       goto label22924;
    else
       goto label22925;
label22927:
    a22740 = #f;
    if (eq? a22740 #t)
       goto label22924;
    else
       goto label22925;
label22924:
    a22741 = #t;
    if (eq? a22741 #t)
       goto label22922;
    else
       goto label22923;
label22925:
    a22742 = #f;
    if (eq? a22742 #t)
       goto label22922;
    else
       goto label22923;
label22930:
    temp22812 = (read);
    if (> temp22812 1)
       goto label22928;
    else
       goto label22929;
label22931:
    a22729 = 1;
    goto label22930;
label22928:
    a22737 = #t;
    if (eq? a22737 #t)
       goto label22926;
    else
       goto label22927;
label22929:
    a22738 = #f;
    if (eq? a22738 #t)
       goto label22926;
    else
       goto label22927;
label22902:
    a22759 = #f;
    if (eq? a22759 #t)
       goto label22899;
    else
       goto label22900;
label22903:
    temp22822 = (read);
    temp22825 = (read);
    if (> temp22825 1)
       goto label22901;
    else
       goto label22902;
label22900:
    a22761 = #f;
    if (eq? a22761 #t)
       goto label22897;
    else
       goto label22898;
label22901:
    a22758 = #t;
    if (eq? a22758 #t)
       goto label22899;
    else
       goto label22900;
label22906:
    a22755 = #t;
    if (eq? a22755 #t)
       goto label22904;
    else
       goto label22905;
label22907:
    a22756 = #f;
    if (eq? a22756 #t)
       goto label22904;
    else
       goto label22905;
label22904:
    a22750 = 1;
    goto label22903;
label22905:
    a22750 = 2;
    goto label22903;
label22910:
    a22751 = #t;
    if (eq? a22751 #t)
       goto label22908;
    else
       goto label22909;
label22911:
    a22752 = #f;
    if (eq? a22752 #t)
       goto label22908;
    else
       goto label22909;
label22908:
    a22753 = #t;
    if (eq? a22753 #t)
       goto label22906;
    else
       goto label22907;
label22909:
    a22754 = #f;
    if (eq? a22754 #t)
       goto label22906;
    else
       goto label22907;
label22914:
    a22743 = 2;
    goto label22912;
label22915:
    a22748 = #t;
    if (eq? a22748 #t)
       goto label22913;
    else
       goto label22914;
label22912:
    temp22820 = (read);
    if (> temp22820 1)
       goto label22910;
    else
       goto label22911;
label22913:
    a22743 = 1;
    goto label22912;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22822 : 'Integer, temp22823 : 'Integer, temp22820 : 'Integer, temp22827 : 'Integer, temp22825 : 'Integer, temp22831 : 'Integer, temp22829 : 'Integer, temp22835 : 'Integer, temp22833 : 'Integer, temp22806 : 'Integer, temp22804 : 'Integer, temp22810 : 'Integer, temp22808 : 'Integer, temp22814 : 'Integer, temp22812 : 'Integer, temp22818 : 'Integer, temp22816 : 'Integer, a22725 : 'Boolean, a22724 : 'Boolean, a22727 : 'Boolean, a22726 : 'Boolean, a22729 : 'Integer, a22728 : 'Boolean, a22731 : 'Boolean, a22730 : 'Boolean, a22733 : 'Boolean, a22732 : 'Boolean, a22735 : 'Boolean, a22734 : 'Boolean, a22737 : 'Boolean, a22736 : 'Integer, a22739 : 'Boolean, a22738 : 'Boolean, temp22839 : 'Integer, temp22837 : 'Integer, temp22842 : 'Integer, temp22846 : 'Integer, temp22844 : 'Integer, x22721 : 'Boolean, a22723 : 'Boolean, temp22848 : 'Integer, a22722 : 'Integer, a22758 : 'Boolean, a22759 : 'Boolean, a22756 : 'Boolean, a22757 : 'Integer, a22762 : 'Boolean, a22763 : 'Boolean, a22760 : 'Boolean, a22761 : 'Boolean, a22766 : 'Boolean, a22767 : 'Boolean, a22764 : 'Integer, a22765 : 'Boolean, a22770 : 'Boolean, a22771 : 'Integer, a22768 : 'Boolean, a22769 : 'Boolean, a22742 : 'Boolean, a22743 : 'Integer, a22740 : 'Boolean, a22741 : 'Boolean, a22746 : 'Boolean, a22747 : 'Boolean, a22744 : 'Boolean, a22745 : 'Boolean, a22750 : 'Integer, a22751 : 'Boolean, a22748 : 'Boolean, a22749 : 'Boolean, a22754 : 'Boolean, a22755 : 'Boolean, a22752 : 'Boolean, a22753 : 'Boolean, a22790 : 'Boolean, a22791 : 'Boolean, a22788 : 'Boolean, a22789 : 'Boolean, a22794 : 'Boolean, a22795 : 'Boolean, a22792 : 'Boolean, a22793 : 'Integer, a22798 : 'Boolean, a22799 : 'Boolean, a22796 : 'Boolean, a22797 : 'Boolean, temp22801 : 'Integer, a22774 : 'Boolean, a22775 : 'Boolean, a22772 : 'Boolean, a22773 : 'Boolean, a22778 : 'Integer, a22779 : 'Boolean, a22776 : 'Boolean, a22777 : 'Boolean, a22782 : 'Boolean, a22783 : 'Boolean, a22780 : 'Boolean, a22781 : 'Boolean, a22786 : 'Integer, a22787 : 'Boolean, a22784 : 'Boolean, a22785 : 'Integer, 
label22950:
    cmpq $1, x22721
    je label22948
    jmp label22949
    
label22951:
    movq $1, x22721
    jmp label22950
    
label22948:
    movq $1, %rax
    jmp conclusion
    
label22949:
    callq read_int
    movq %rax, temp22804
    cmpq $1, temp22804
    jg label22946
    jmp label22947
    
label22954:
    movq $8, temp22801
    jmp label22953
    
label22955:
    movq $9, temp22801
    jmp label22953
    
label22952:
    movq $0, x22721
    jmp label22950
    
label22953:
    cmpq $8, temp22801
    jg label22951
    jmp label22952
    
label22934:
    movq $0, a22735
    cmpq $1, a22735
    je label22931
    jmp label22932
    
label22935:
    movq $1, a22732
    cmpq $1, a22732
    je label22933
    jmp label22934
    
label22932:
    movq $2, a22729
    jmp label22930
    
label22933:
    movq $1, a22734
    cmpq $1, a22734
    je label22931
    jmp label22932
    
label22938:
    movq $0, a22731
    cmpq $1, a22731
    je label22935
    jmp label22936
    
label22939:
    callq read_int
    movq %rax, temp22808
    cmpq $1, temp22808
    jg label22937
    jmp label22938
    
label22936:
    movq $0, a22733
    cmpq $1, a22733
    je label22933
    jmp label22934
    
label22937:
    movq $1, a22730
    cmpq $1, a22730
    je label22935
    jmp label22936
    
label22942:
    movq $1, a22727
    cmpq $1, a22727
    je label22940
    jmp label22941
    
label22943:
    movq $0, a22728
    cmpq $1, a22728
    je label22940
    jmp label22941
    
label22940:
    movq $1, a22722
    jmp label22939
    
label22941:
    movq $2, a22722
    jmp label22939
    
label22946:
    movq $1, a22723
    cmpq $1, a22723
    je label22944
    jmp label22945
    
label22947:
    movq $0, a22724
    cmpq $1, a22724
    je label22944
    jmp label22945
    
label22944:
    movq $1, a22725
    cmpq $1, a22725
    je label22942
    jmp label22943
    
label22945:
    movq $0, a22726
    cmpq $1, a22726
    je label22942
    jmp label22943
    
label22854:
    movq $1, a22796
    cmpq $1, a22796
    je label22852
    jmp label22853
    
label22855:
    movq $0, a22797
    cmpq $1, a22797
    je label22852
    jmp label22853
    
label22852:
    movq $1, a22798
    cmpq $1, a22798
    je label22850
    jmp label22851
    
label22853:
    movq $0, a22799
    cmpq $1, a22799
    je label22850
    jmp label22851
    
label22858:
    callq read_int
    movq %rax, temp22848
    cmpq $1, temp22848
    jg label22856
    jmp label22857
    
label22859:
    movq $1, a22786
    jmp label22858
    
label22856:
    movq $1, a22794
    cmpq $1, a22794
    je label22854
    jmp label22855
    
label22857:
    movq $0, a22795
    cmpq $1, a22795
    je label22854
    jmp label22855
    
label22862:
    movq $0, a22792
    cmpq $1, a22792
    je label22859
    jmp label22860
    
label22863:
    movq $1, a22789
    cmpq $1, a22789
    je label22861
    jmp label22862
    
label22860:
    movq $2, a22786
    jmp label22858
    
label22861:
    movq $1, a22791
    cmpq $1, a22791
    je label22859
    jmp label22860
    
label22866:
    movq $0, a22788
    cmpq $1, a22788
    je label22863
    jmp label22864
    
label22867:
    callq read_int
    movq %rax, a22785
    callq read_int
    movq %rax, temp22844
    cmpq $1, temp22844
    jg label22865
    jmp label22866
    
label22864:
    movq $0, a22790
    cmpq $1, a22790
    je label22861
    jmp label22862
    
label22865:
    movq $1, a22787
    cmpq $1, a22787
    je label22863
    jmp label22864
    
start:
    cmpq $1, $1
    jge label22954
    jmp label22955
    
label22850:
    movq $1, a22793
    jmp label22849
    
label22851:
    movq $2, a22793
    jmp label22849
    
label22849:
    movq a22793, temp22846
    movq a22786, temp22842
    addq temp22846, temp22842
    movq a22785, temp22839
    addq temp22842, temp22839
    movq a22778, temp22835
    addq temp22839, temp22835
    movq a22771, temp22831
    addq temp22835, temp22831
    movq a22764, temp22827
    addq temp22831, temp22827
    movq a22757, temp22823
    addq temp22827, temp22823
    movq temp22822, temp22818
    addq temp22823, temp22818
    movq a22743, temp22814
    addq temp22818, temp22814
    movq a22736, temp22810
    addq temp22814, temp22810
    movq a22729, temp22806
    addq temp22810, temp22806
    movq a22722, %rax
    addq temp22806, %rax
    jmp conclusion
    
label22886:
    movq $1, a22764
    jmp label22885
    
label22887:
    movq $2, a22764
    jmp label22885
    
label22884:
    movq $0, a22773
    cmpq $1, a22773
    je label22881
    jmp label22882
    
label22885:
    callq read_int
    movq %rax, temp22833
    cmpq $1, temp22833
    jg label22883
    jmp label22884
    
label22890:
    movq $1, a22767
    cmpq $1, a22767
    je label22888
    jmp label22889
    
label22891:
    movq $0, a22768
    cmpq $1, a22768
    je label22888
    jmp label22889
    
label22888:
    movq $1, a22769
    cmpq $1, a22769
    je label22886
    jmp label22887
    
label22889:
    movq $0, a22770
    cmpq $1, a22770
    je label22886
    jmp label22887
    
label22894:
    callq read_int
    movq %rax, temp22829
    cmpq $1, temp22829
    jg label22892
    jmp label22893
    
label22895:
    movq $1, a22757
    jmp label22894
    
label22892:
    movq $1, a22765
    cmpq $1, a22765
    je label22890
    jmp label22891
    
label22893:
    movq $0, a22766
    cmpq $1, a22766
    je label22890
    jmp label22891
    
label22898:
    movq $0, a22763
    cmpq $1, a22763
    je label22895
    jmp label22896
    
label22899:
    movq $1, a22760
    cmpq $1, a22760
    je label22897
    jmp label22898
    
label22896:
    movq $2, a22757
    jmp label22894
    
label22897:
    movq $1, a22762
    cmpq $1, a22762
    je label22895
    jmp label22896
    
label22870:
    movq $1, a22783
    cmpq $1, a22783
    je label22868
    jmp label22869
    
label22871:
    movq $0, a22784
    cmpq $1, a22784
    je label22868
    jmp label22869
    
label22868:
    movq $1, a22778
    jmp label22867
    
label22869:
    movq $2, a22778
    jmp label22867
    
label22874:
    movq $1, a22779
    cmpq $1, a22779
    je label22872
    jmp label22873
    
label22875:
    movq $0, a22780
    cmpq $1, a22780
    je label22872
    jmp label22873
    
label22872:
    movq $1, a22781
    cmpq $1, a22781
    je label22870
    jmp label22871
    
label22873:
    movq $0, a22782
    cmpq $1, a22782
    je label22870
    jmp label22871
    
label22878:
    movq $2, a22771
    jmp label22876
    
label22879:
    movq $1, a22776
    cmpq $1, a22776
    je label22877
    jmp label22878
    
label22876:
    callq read_int
    movq %rax, temp22837
    cmpq $1, temp22837
    jg label22874
    jmp label22875
    
label22877:
    movq $1, a22771
    jmp label22876
    
label22882:
    movq $0, a22775
    cmpq $1, a22775
    je label22879
    jmp label22880
    
label22883:
    movq $1, a22772
    cmpq $1, a22772
    je label22881
    jmp label22882
    
label22880:
    movq $0, a22777
    cmpq $1, a22777
    je label22877
    jmp label22878
    
label22881:
    movq $1, a22774
    cmpq $1, a22774
    je label22879
    jmp label22880
    
label22918:
    movq $0, a22747
    cmpq $1, a22747
    je label22915
    jmp label22916
    
label22919:
    movq $1, a22744
    cmpq $1, a22744
    je label22917
    jmp label22918
    
label22916:
    movq $0, a22749
    cmpq $1, a22749
    je label22913
    jmp label22914
    
label22917:
    movq $1, a22746
    cmpq $1, a22746
    je label22915
    jmp label22916
    
label22922:
    movq $1, a22736
    jmp label22921
    
label22923:
    movq $2, a22736
    jmp label22921
    
label22920:
    movq $0, a22745
    cmpq $1, a22745
    je label22917
    jmp label22918
    
label22921:
    callq read_int
    movq %rax, temp22816
    cmpq $1, temp22816
    jg label22919
    jmp label22920
    
label22926:
    movq $1, a22739
    cmpq $1, a22739
    je label22924
    jmp label22925
    
label22927:
    movq $0, a22740
    cmpq $1, a22740
    je label22924
    jmp label22925
    
label22924:
    movq $1, a22741
    cmpq $1, a22741
    je label22922
    jmp label22923
    
label22925:
    movq $0, a22742
    cmpq $1, a22742
    je label22922
    jmp label22923
    
label22930:
    callq read_int
    movq %rax, temp22812
    cmpq $1, temp22812
    jg label22928
    jmp label22929
    
label22931:
    movq $1, a22729
    jmp label22930
    
label22928:
    movq $1, a22737
    cmpq $1, a22737
    je label22926
    jmp label22927
    
label22929:
    movq $0, a22738
    cmpq $1, a22738
    je label22926
    jmp label22927
    
label22902:
    movq $0, a22759
    cmpq $1, a22759
    je label22899
    jmp label22900
    
label22903:
    callq read_int
    movq %rax, temp22822
    callq read_int
    movq %rax, temp22825
    cmpq $1, temp22825
    jg label22901
    jmp label22902
    
label22900:
    movq $0, a22761
    cmpq $1, a22761
    je label22897
    jmp label22898
    
label22901:
    movq $1, a22758
    cmpq $1, a22758
    je label22899
    jmp label22900
    
label22906:
    movq $1, a22755
    cmpq $1, a22755
    je label22904
    jmp label22905
    
label22907:
    movq $0, a22756
    cmpq $1, a22756
    je label22904
    jmp label22905
    
label22904:
    movq $1, a22750
    jmp label22903
    
label22905:
    movq $2, a22750
    jmp label22903
    
label22910:
    movq $1, a22751
    cmpq $1, a22751
    je label22908
    jmp label22909
    
label22911:
    movq $0, a22752
    cmpq $1, a22752
    je label22908
    jmp label22909
    
label22908:
    movq $1, a22753
    cmpq $1, a22753
    je label22906
    jmp label22907
    
label22909:
    movq $0, a22754
    cmpq $1, a22754
    je label22906
    jmp label22907
    
label22914:
    movq $2, a22743
    jmp label22912
    
label22915:
    movq $1, a22748
    cmpq $1, a22748
    je label22913
    jmp label22914
    
label22912:
    callq read_int
    movq %rax, temp22820
    cmpq $1, temp22820
    jg label22910
    jmp label22911
    
label22913:
    movq $1, a22743
    jmp label22912
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22822 : 'Integer, temp22823 : 'Integer, temp22820 : 'Integer, temp22827 : 'Integer, temp22825 : 'Integer, temp22831 : 'Integer, temp22829 : 'Integer, temp22835 : 'Integer, temp22833 : 'Integer, temp22806 : 'Integer, temp22804 : 'Integer, temp22810 : 'Integer, temp22808 : 'Integer, temp22814 : 'Integer, temp22812 : 'Integer, temp22818 : 'Integer, temp22816 : 'Integer, a22725 : 'Boolean, a22724 : 'Boolean, a22727 : 'Boolean, a22726 : 'Boolean, a22729 : 'Integer, a22728 : 'Boolean, a22731 : 'Boolean, a22730 : 'Boolean, a22733 : 'Boolean, a22732 : 'Boolean, a22735 : 'Boolean, a22734 : 'Boolean, a22737 : 'Boolean, a22736 : 'Integer, a22739 : 'Boolean, a22738 : 'Boolean, temp22839 : 'Integer, temp22837 : 'Integer, temp22842 : 'Integer, temp22846 : 'Integer, temp22844 : 'Integer, x22721 : 'Boolean, a22723 : 'Boolean, temp22848 : 'Integer, a22722 : 'Integer, a22758 : 'Boolean, a22759 : 'Boolean, a22756 : 'Boolean, a22757 : 'Integer, a22762 : 'Boolean, a22763 : 'Boolean, a22760 : 'Boolean, a22761 : 'Boolean, a22766 : 'Boolean, a22767 : 'Boolean, a22764 : 'Integer, a22765 : 'Boolean, a22770 : 'Boolean, a22771 : 'Integer, a22768 : 'Boolean, a22769 : 'Boolean, a22742 : 'Boolean, a22743 : 'Integer, a22740 : 'Boolean, a22741 : 'Boolean, a22746 : 'Boolean, a22747 : 'Boolean, a22744 : 'Boolean, a22745 : 'Boolean, a22750 : 'Integer, a22751 : 'Boolean, a22748 : 'Boolean, a22749 : 'Boolean, a22754 : 'Boolean, a22755 : 'Boolean, a22752 : 'Boolean, a22753 : 'Boolean, a22790 : 'Boolean, a22791 : 'Boolean, a22788 : 'Boolean, a22789 : 'Boolean, a22794 : 'Boolean, a22795 : 'Boolean, a22792 : 'Boolean, a22793 : 'Integer, a22798 : 'Boolean, a22799 : 'Boolean, a22796 : 'Boolean, a22797 : 'Boolean, temp22801 : 'Integer, a22774 : 'Boolean, a22775 : 'Boolean, a22772 : 'Boolean, a22773 : 'Boolean, a22778 : 'Integer, a22779 : 'Boolean, a22776 : 'Boolean, a22777 : 'Boolean, a22782 : 'Boolean, a22783 : 'Boolean, a22780 : 'Boolean, a22781 : 'Boolean, a22786 : 'Integer, a22787 : 'Boolean, a22784 : 'Boolean, a22785 : 'Integer, 
tsorted
:
'(label22849
  label22851
  label22850
  label22853
  label22852
  label22855
  label22854
  label22856
  label22857
  label22858
  label22859
  label22860
  label22862
  label22861
  label22863
  label22864
  label22866
  label22865
  label22867
  label22868
  label22869
  label22870
  label22871
  label22872
  label22873
  label22874
  label22875
  label22876
  label22878
  label22877
  label22879
  label22880
  label22882
  label22881
  label22884
  label22883
  label22885
  label22886
  label22887
  label22888
  label22889
  label22890
  label22891
  label22892
  label22893
  label22894
  label22895
  label22896
  label22898
  label22897
  label22899
  label22900
  label22902
  label22901
  label22903
  label22904
  label22905
  label22906
  label22907
  label22908
  label22909
  label22910
  label22911
  label22912
  label22914
  label22913
  label22916
  label22915
  label22918
  label22917
  label22919
  label22920
  label22921
  label22922
  label22923
  label22924
  label22925
  label22926
  label22927
  label22928
  label22929
  label22930
  label22931
  label22932
  label22933
  label22934
  label22935
  label22936
  label22938
  label22937
  label22939
  label22940
  label22941
  label22942
  label22943
  label22944
  label22945
  label22946
  label22947
  label22949
  label22948
  label22950
  label22951
  label22952
  label22953
  label22954
  label22955
  start)
CFG
:
#<multigraph>
label22849:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22778
  a22764
  a22736
  a22785
  a22729
  a22793
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  temp22846
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22764
  temp22846
  a22736
  a22785
  a22722
  a22778
  temp22842
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22764
  a22736
  a22785
  a22722
  a22778
  temp22842
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22729
  a22764
  a22736
  a22722
  a22743
  temp22839
  a22778
  temp22842
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22729
  a22778
  a22764
  a22736
  a22722
  a22743
  temp22839
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22729
  a22764
  a22736
  a22722
  a22743
  temp22839
  a22771
  temp22835
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22764
  a22736
  a22722
  a22771
  temp22835
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22764
  temp22831
  a22736
  a22722
  temp22835
  %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 temp22831 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 temp22827 temp22831 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 temp22827 a22736 a22722 %rsp)
 (set temp22822 a22729 temp22827 a22736 a22722 %rsp a22743 temp22823)
 (set temp22822 a22729 a22736 a22722 %rsp a22743 temp22823)
 (set a22729 a22736 %rsp a22743 temp22823 temp22818 a22722)
 (set a22743 a22729 a22736 %rsp temp22818 a22722)
 (set a22729 temp22814 a22736 %rsp temp22818 a22722)
 (set a22729 temp22814 a22736 a22722 %rsp)
 (set a22729 temp22810 temp22814 a22722 %rsp)
 (set a22729 temp22810 a22722 %rsp)
 (set temp22806 temp22810 a22722 %rsp)
 (set temp22806 a22722 %rsp)
 (set %rax temp22806 %rsp)
 (set %rax %rsp))
movq a22793, temp22846
movq a22786, temp22842
addq temp22846, temp22842
movq a22785, temp22839
addq temp22842, temp22839
movq a22778, temp22835
addq temp22839, temp22835
movq a22771, temp22831
addq temp22835, temp22831
movq a22764, temp22827
addq temp22831, temp22827
movq a22757, temp22823
addq temp22827, temp22823
movq temp22822, temp22818
addq temp22823, temp22818
movq a22743, temp22814
addq temp22818, temp22814
movq a22736, temp22810
addq temp22814, temp22810
movq a22729, temp22806
addq temp22810, temp22806
movq a22722, %rax
addq temp22806, %rax
jmp conclusion

label22851:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22778
  a22764
  a22736
  a22785
  a22729
  a22793
  a22786
  a22722
  a22771
  %rsp))
movq $2, a22793
jmp label22849

label22850:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22778
  a22764
  a22736
  a22785
  a22729
  a22793
  a22786
  a22722
  a22771
  %rsp))
movq $1, a22793
jmp label22849

label22853:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22799
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp))
movq $0, a22799
cmpq $1, a22799
je label22850
jmp label22851

label22852:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22798
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp))
movq $1, a22798
cmpq $1, a22798
je label22850
jmp label22851

label22855:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22797
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp))
movq $0, a22797
cmpq $1, a22797
je label22852
jmp label22853

label22854:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22736
  a22785
  a22764
  a22796
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp))
movq $1, a22796
cmpq $1, a22796
je label22852
jmp label22853

label22856:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22764
  a22736
  a22785
  a22778
  a22794
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp))
movq $1, a22794
cmpq $1, a22794
je label22854
jmp label22855

label22857:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22795
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp))
movq $0, a22795
cmpq $1, a22795
je label22854
jmp label22855

label22858:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  %rax
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22785
  a22736
  temp22848
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp))
callq read_int
movq %rax, temp22848
cmpq $1, temp22848
jg label22856
jmp label22857

label22859:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp))
movq $1, a22786
jmp label22858

label22860:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22786
  a22722
  a22771
  %rsp))
movq $2, a22786
jmp label22858

label22862:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22792
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp))
movq $0, a22792
cmpq $1, a22792
je label22859
jmp label22860

label22861:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22743
  a22791
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp))
movq $1, a22791
cmpq $1, a22791
je label22859
jmp label22860

label22863:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22757
  a22789
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp))
movq $1, a22789
cmpq $1, a22789
je label22861
jmp label22862

label22864:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22790
  temp22822
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp))
movq $0, a22790
cmpq $1, a22790
je label22861
jmp label22862

label22866:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22788
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp))
movq $0, a22788
cmpq $1, a22788
je label22863
jmp label22864

label22865:
    liveness
:
(list
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  a22787
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp))
movq $1, a22787
cmpq $1, a22787
je label22863
jmp label22864

label22867:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22778 a22764 a22736 a22722 a22771 %rsp)
 (set
  %rax
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  %rax
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22736
  a22785
  a22722
  a22764
  temp22844
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp)
 (set
  a22757
  temp22822
  a22743
  a22729
  a22778
  a22764
  a22736
  a22785
  a22722
  a22771
  %rsp))
callq read_int
movq %rax, a22785
callq read_int
movq %rax, temp22844
cmpq $1, temp22844
jg label22865
jmp label22866

label22868:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22778 a22764 a22736 a22722 a22771 %rsp))
movq $1, a22778
jmp label22867

label22869:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22778 a22764 a22736 a22722 a22771 %rsp))
movq $2, a22778
jmp label22867

label22870:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22783 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp))
movq $1, a22783
cmpq $1, a22783
je label22868
jmp label22869

label22871:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22722 a22736 a22784 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp))
movq $0, a22784
cmpq $1, a22784
je label22868
jmp label22869

label22872:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22781 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp))
movq $1, a22781
cmpq $1, a22781
je label22870
jmp label22871

label22873:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22782 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp))
movq $0, a22782
cmpq $1, a22782
je label22870
jmp label22871

label22874:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22779 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp))
movq $1, a22779
cmpq $1, a22779
je label22872
jmp label22873

label22875:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 a22764 a22780 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp))
movq $0, a22780
cmpq $1, a22780
je label22872
jmp label22873

label22876:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set %rax a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set
  temp22822
  a22743
  a22729
  a22764
  a22736
  a22722
  a22757
  temp22837
  a22771
  %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp))
callq read_int
movq %rax, temp22837
cmpq $1, temp22837
jg label22874
jmp label22875

label22878:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp))
movq $2, a22771
jmp label22876

label22877:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 a22771 %rsp))
movq $1, a22771
jmp label22876

label22879:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22776 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp))
movq $1, a22776
cmpq $1, a22776
je label22877
jmp label22878

label22880:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22764 a22736 a22722 %rsp a22729 a22777)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp))
movq $0, a22777
cmpq $1, a22777
je label22877
jmp label22878

label22882:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22729 a22764 a22736 a22722 %rsp a22743 a22775)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp))
movq $0, a22775
cmpq $1, a22775
je label22879
jmp label22880

label22881:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 a22743 a22729 a22764 a22736 a22722 %rsp a22774 temp22822)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp))
movq $1, a22774
cmpq $1, a22774
je label22879
jmp label22880

label22884:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22764 a22736 a22722 %rsp a22757 a22773)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp))
movq $0, a22773
cmpq $1, a22773
je label22881
jmp label22882

label22883:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22772 a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp))
movq $1, a22772
cmpq $1, a22772
je label22881
jmp label22882

label22885:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set %rax a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 temp22833 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp))
callq read_int
movq %rax, temp22833
cmpq $1, temp22833
jg label22883
jmp label22884

label22886:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp))
movq $1, a22764
jmp label22885

label22887:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22764 a22736 a22722 %rsp))
movq $2, a22764
jmp label22885

label22888:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22769 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $1, a22769
cmpq $1, a22769
je label22886
jmp label22887

label22889:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 %rsp a22770 a22722)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $0, a22770
cmpq $1, a22770
je label22886
jmp label22887

label22890:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22767 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $1, a22767
cmpq $1, a22767
je label22888
jmp label22889

label22891:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22722 %rsp a22736 a22768)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $0, a22768
cmpq $1, a22768
je label22888
jmp label22889

label22892:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22765 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $1, a22765
cmpq $1, a22765
je label22890
jmp label22891

label22893:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22766 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $0, a22766
cmpq $1, a22766
je label22890
jmp label22891

label22894:
    liveness
:
(list
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set %rax a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 temp22829 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp))
callq read_int
movq %rax, temp22829
cmpq $1, temp22829
jg label22892
jmp label22893

label22895:
    liveness
:
(list
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $1, a22757
jmp label22894

label22896:
    liveness
:
(list
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22757 temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $2, a22757
jmp label22894

label22898:
    liveness
:
(list
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22763 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $0, a22763
cmpq $1, a22763
je label22895
jmp label22896

label22897:
    liveness
:
(list
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22762 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $1, a22762
cmpq $1, a22762
je label22895
jmp label22896

label22899:
    liveness
:
(list
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22760 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $1, a22760
cmpq $1, a22760
je label22897
jmp label22898

label22900:
    liveness
:
(list
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22736 a22722 %rsp a22729 a22761)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $0, a22761
cmpq $1, a22761
je label22897
jmp label22898

label22902:
    liveness
:
(list
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22729 a22736 a22722 %rsp a22743 a22759)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $0, a22759
cmpq $1, a22759
je label22899
jmp label22900

label22901:
    liveness
:
(list
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp a22758 temp22822)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp))
movq $1, a22758
cmpq $1, a22758
je label22899
jmp label22900

label22903:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set %rax a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set %rax temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22736 a22722 %rsp a22729 temp22825)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp)
 (set temp22822 a22743 a22729 a22736 a22722 %rsp))
callq read_int
movq %rax, temp22822
callq read_int
movq %rax, temp22825
cmpq $1, temp22825
jg label22901
jmp label22902

label22904:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp))
movq $1, a22750
jmp label22903

label22905:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp))
movq $2, a22750
jmp label22903

label22906:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 a22755 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp))
movq $1, a22755
cmpq $1, a22755
je label22904
jmp label22905

label22907:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22756 a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp))
movq $0, a22756
cmpq $1, a22756
je label22904
jmp label22905

label22908:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22753 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp))
movq $1, a22753
cmpq $1, a22753
je label22906
jmp label22907

label22909:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 %rsp a22754 a22722)
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp))
movq $0, a22754
cmpq $1, a22754
je label22906
jmp label22907

label22910:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22751 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp))
movq $1, a22751
cmpq $1, a22751
je label22908
jmp label22909

label22911:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22722 %rsp a22736 a22752)
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp))
movq $0, a22752
cmpq $1, a22752
je label22908
jmp label22909

label22912:
    liveness
:
(list
 (set a22743 a22729 a22736 a22722 %rsp)
 (set %rax a22743 a22729 a22736 a22722 %rsp)
 (set temp22820 a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp)
 (set a22743 a22729 a22736 a22722 %rsp))
callq read_int
movq %rax, temp22820
cmpq $1, temp22820
jg label22910
jmp label22911

label22914:
    liveness
:
(list (set a22729 a22736 a22722 %rsp) (set a22743 a22729 a22736 a22722 %rsp))
movq $2, a22743
jmp label22912

label22913:
    liveness
:
(list (set a22729 a22736 a22722 %rsp) (set a22743 a22729 a22736 a22722 %rsp))
movq $1, a22743
jmp label22912

label22916:
    liveness
:
(list
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22749 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp))
movq $0, a22749
cmpq $1, a22749
je label22913
jmp label22914

label22915:
    liveness
:
(list
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22748 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp))
movq $1, a22748
cmpq $1, a22748
je label22913
jmp label22914

label22918:
    liveness
:
(list
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22747 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp))
movq $0, a22747
cmpq $1, a22747
je label22915
jmp label22916

label22917:
    liveness
:
(list
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22746 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp))
movq $1, a22746
cmpq $1, a22746
je label22915
jmp label22916

label22919:
    liveness
:
(list
 (set a22729 a22736 a22722 %rsp)
 (set a22744 a22729 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp))
movq $1, a22744
cmpq $1, a22744
je label22917
jmp label22918

label22920:
    liveness
:
(list
 (set a22729 a22736 a22722 %rsp)
 (set a22736 a22722 %rsp a22729 a22745)
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp))
movq $0, a22745
cmpq $1, a22745
je label22917
jmp label22918

label22921:
    liveness
:
(list
 (set a22729 a22736 a22722 %rsp)
 (set %rax a22729 a22736 a22722 %rsp)
 (set a22729 a22722 %rsp a22736 temp22816)
 (set a22729 a22736 a22722 %rsp)
 (set a22729 a22736 a22722 %rsp))
callq read_int
movq %rax, temp22816
cmpq $1, temp22816
jg label22919
jmp label22920

label22922:
    liveness
:
(list (set a22729 a22722 %rsp) (set a22729 a22736 a22722 %rsp))
movq $1, a22736
jmp label22921

label22923:
    liveness
:
(list (set a22729 a22722 %rsp) (set a22729 a22736 a22722 %rsp))
movq $2, a22736
jmp label22921

label22924:
    liveness
:
(list
 (set a22729 a22722 %rsp)
 (set a22741 a22729 a22722 %rsp)
 (set a22729 a22722 %rsp)
 (set a22729 a22722 %rsp))
movq $1, a22741
cmpq $1, a22741
je label22922
jmp label22923

label22925:
    liveness
:
(list
 (set a22729 a22722 %rsp)
 (set a22742 a22729 a22722 %rsp)
 (set a22729 a22722 %rsp)
 (set a22729 a22722 %rsp))
movq $0, a22742
cmpq $1, a22742
je label22922
jmp label22923

label22926:
    liveness
:
(list
 (set a22729 a22722 %rsp)
 (set a22729 a22722 a22739 %rsp)
 (set a22729 a22722 %rsp)
 (set a22729 a22722 %rsp))
movq $1, a22739
cmpq $1, a22739
je label22924
jmp label22925

label22927:
    liveness
:
(list
 (set a22729 a22722 %rsp)
 (set a22740 a22729 a22722 %rsp)
 (set a22729 a22722 %rsp)
 (set a22729 a22722 %rsp))
movq $0, a22740
cmpq $1, a22740
je label22924
jmp label22925

label22928:
    liveness
:
(list
 (set a22729 a22722 %rsp)
 (set a22729 a22737 a22722 %rsp)
 (set a22729 a22722 %rsp)
 (set a22729 a22722 %rsp))
movq $1, a22737
cmpq $1, a22737
je label22926
jmp label22927

label22929:
    liveness
:
(list
 (set a22729 a22722 %rsp)
 (set a22729 %rsp a22738 a22722)
 (set a22729 a22722 %rsp)
 (set a22729 a22722 %rsp))
movq $0, a22738
cmpq $1, a22738
je label22926
jmp label22927

label22930:
    liveness
:
(list
 (set a22729 a22722 %rsp)
 (set %rax a22729 a22722 %rsp)
 (set a22729 temp22812 a22722 %rsp)
 (set a22729 a22722 %rsp)
 (set a22729 a22722 %rsp))
callq read_int
movq %rax, temp22812
cmpq $1, temp22812
jg label22928
jmp label22929

label22931:
    liveness
:
(list (set a22722 %rsp) (set a22729 a22722 %rsp))
movq $1, a22729
jmp label22930

label22932:
    liveness
:
(list (set a22722 %rsp) (set a22729 a22722 %rsp))
movq $2, a22729
jmp label22930

label22933:
    liveness
:
(list
 (set a22722 %rsp)
 (set a22734 a22722 %rsp)
 (set a22722 %rsp)
 (set a22722 %rsp))
movq $1, a22734
cmpq $1, a22734
je label22931
jmp label22932

label22934:
    liveness
:
(list
 (set a22722 %rsp)
 (set a22735 a22722 %rsp)
 (set a22722 %rsp)
 (set a22722 %rsp))
movq $0, a22735
cmpq $1, a22735
je label22931
jmp label22932

label22935:
    liveness
:
(list
 (set a22722 %rsp)
 (set a22732 a22722 %rsp)
 (set a22722 %rsp)
 (set a22722 %rsp))
movq $1, a22732
cmpq $1, a22732
je label22933
jmp label22934

label22936:
    liveness
:
(list
 (set a22722 %rsp)
 (set a22733 a22722 %rsp)
 (set a22722 %rsp)
 (set a22722 %rsp))
movq $0, a22733
cmpq $1, a22733
je label22933
jmp label22934

label22938:
    liveness
:
(list
 (set a22722 %rsp)
 (set a22731 a22722 %rsp)
 (set a22722 %rsp)
 (set a22722 %rsp))
movq $0, a22731
cmpq $1, a22731
je label22935
jmp label22936

label22937:
    liveness
:
(list
 (set a22722 %rsp)
 (set a22730 a22722 %rsp)
 (set a22722 %rsp)
 (set a22722 %rsp))
movq $1, a22730
cmpq $1, a22730
je label22935
jmp label22936

label22939:
    liveness
:
(list
 (set a22722 %rsp)
 (set %rax a22722 %rsp)
 (set temp22808 a22722 %rsp)
 (set a22722 %rsp)
 (set a22722 %rsp))
callq read_int
movq %rax, temp22808
cmpq $1, temp22808
jg label22937
jmp label22938

label22940:
    liveness
:
(list (set %rsp) (set a22722 %rsp))
movq $1, a22722
jmp label22939

label22941:
    liveness
:
(list (set %rsp) (set a22722 %rsp))
movq $2, a22722
jmp label22939

label22942:
    liveness
:
(list (set %rsp) (set a22727 %rsp) (set %rsp) (set %rsp))
movq $1, a22727
cmpq $1, a22727
je label22940
jmp label22941

label22943:
    liveness
:
(list (set %rsp) (set a22728 %rsp) (set %rsp) (set %rsp))
movq $0, a22728
cmpq $1, a22728
je label22940
jmp label22941

label22944:
    liveness
:
(list (set %rsp) (set a22725 %rsp) (set %rsp) (set %rsp))
movq $1, a22725
cmpq $1, a22725
je label22942
jmp label22943

label22945:
    liveness
:
(list (set %rsp) (set a22726 %rsp) (set %rsp) (set %rsp))
movq $0, a22726
cmpq $1, a22726
je label22942
jmp label22943

label22946:
    liveness
:
(list (set %rsp) (set %rsp a22723) (set %rsp) (set %rsp))
movq $1, a22723
cmpq $1, a22723
je label22944
jmp label22945

label22947:
    liveness
:
(list (set %rsp) (set a22724 %rsp) (set %rsp) (set %rsp))
movq $0, a22724
cmpq $1, a22724
je label22944
jmp label22945

label22949:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set temp22804 %rsp) (set %rsp) (set %rsp))
callq read_int
movq %rax, temp22804
cmpq $1, temp22804
jg label22946
jmp label22947

label22948:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $1, %rax
jmp conclusion

label22950:
    liveness
:
(list (set x22721 %rsp) (set %rsp) (set %rsp))
cmpq $1, x22721
je label22948
jmp label22949

label22951:
    liveness
:
(list (set %rsp) (set x22721 %rsp))
movq $1, x22721
jmp label22950

label22952:
    liveness
:
(list (set %rsp) (set x22721 %rsp))
movq $0, x22721
jmp label22950

label22953:
    liveness
:
(list (set temp22801 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp22801
jg label22951
jmp label22952

label22954:
    liveness
:
(list (set %rsp) (set temp22801 %rsp))
movq $8, temp22801
jmp label22953

label22955:
    liveness
:
(list (set %rsp) (set temp22801 %rsp))
movq $9, temp22801
jmp label22953

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $1
jge label22954
jmp label22955




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22822 : 'Integer, temp22823 : 'Integer, temp22820 : 'Integer, temp22827 : 'Integer, temp22825 : 'Integer, temp22831 : 'Integer, temp22829 : 'Integer, temp22835 : 'Integer, temp22833 : 'Integer, temp22806 : 'Integer, temp22804 : 'Integer, temp22810 : 'Integer, temp22808 : 'Integer, temp22814 : 'Integer, temp22812 : 'Integer, temp22818 : 'Integer, temp22816 : 'Integer, a22725 : 'Boolean, a22724 : 'Boolean, a22727 : 'Boolean, a22726 : 'Boolean, a22729 : 'Integer, a22728 : 'Boolean, a22731 : 'Boolean, a22730 : 'Boolean, a22733 : 'Boolean, a22732 : 'Boolean, a22735 : 'Boolean, a22734 : 'Boolean, a22737 : 'Boolean, a22736 : 'Integer, a22739 : 'Boolean, a22738 : 'Boolean, temp22839 : 'Integer, temp22837 : 'Integer, temp22842 : 'Integer, temp22846 : 'Integer, temp22844 : 'Integer, x22721 : 'Boolean, a22723 : 'Boolean, temp22848 : 'Integer, a22722 : 'Integer, a22758 : 'Boolean, a22759 : 'Boolean, a22756 : 'Boolean, a22757 : 'Integer, a22762 : 'Boolean, a22763 : 'Boolean, a22760 : 'Boolean, a22761 : 'Boolean, a22766 : 'Boolean, a22767 : 'Boolean, a22764 : 'Integer, a22765 : 'Boolean, a22770 : 'Boolean, a22771 : 'Integer, a22768 : 'Boolean, a22769 : 'Boolean, a22742 : 'Boolean, a22743 : 'Integer, a22740 : 'Boolean, a22741 : 'Boolean, a22746 : 'Boolean, a22747 : 'Boolean, a22744 : 'Boolean, a22745 : 'Boolean, a22750 : 'Integer, a22751 : 'Boolean, a22748 : 'Boolean, a22749 : 'Boolean, a22754 : 'Boolean, a22755 : 'Boolean, a22752 : 'Boolean, a22753 : 'Boolean, a22790 : 'Boolean, a22791 : 'Boolean, a22788 : 'Boolean, a22789 : 'Boolean, a22794 : 'Boolean, a22795 : 'Boolean, a22792 : 'Boolean, a22793 : 'Integer, a22798 : 'Boolean, a22799 : 'Boolean, a22796 : 'Boolean, a22797 : 'Boolean, temp22801 : 'Integer, a22774 : 'Boolean, a22775 : 'Boolean, a22772 : 'Boolean, a22773 : 'Boolean, a22778 : 'Integer, a22779 : 'Boolean, a22776 : 'Boolean, a22777 : 'Boolean, a22782 : 'Boolean, a22783 : 'Boolean, a22780 : 'Boolean, a22781 : 'Boolean, a22786 : 'Integer, a22787 : 'Boolean, a22784 : 'Boolean, a22785 : 'Integer, 
tsorted
:
'(label22849
  label22851
  label22850
  label22853
  label22852
  label22855
  label22854
  label22856
  label22857
  label22858
  label22859
  label22860
  label22862
  label22861
  label22863
  label22864
  label22866
  label22865
  label22867
  label22868
  label22869
  label22870
  label22871
  label22872
  label22873
  label22874
  label22875
  label22876
  label22878
  label22877
  label22879
  label22880
  label22882
  label22881
  label22884
  label22883
  label22885
  label22886
  label22887
  label22888
  label22889
  label22890
  label22891
  label22892
  label22893
  label22894
  label22895
  label22896
  label22898
  label22897
  label22899
  label22900
  label22902
  label22901
  label22903
  label22904
  label22905
  label22906
  label22907
  label22908
  label22909
  label22910
  label22911
  label22912
  label22914
  label22913
  label22916
  label22915
  label22918
  label22917
  label22919
  label22920
  label22921
  label22922
  label22923
  label22924
  label22925
  label22926
  label22927
  label22928
  label22929
  label22930
  label22931
  label22932
  label22933
  label22934
  label22935
  label22936
  label22938
  label22937
  label22939
  label22940
  label22941
  label22942
  label22943
  label22944
  label22945
  label22946
  label22947
  label22949
  label22948
  label22950
  label22951
  label22952
  label22953
  label22954
  label22955
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22810 a22736)
 (list a22778 temp22835)
 (list temp22842 a22786)
 (list temp22806 a22729)
 (list temp22839 a22785)
 (list a22743 temp22814)
 (list a22786 temp22842)
 (list temp22818 temp22822)
 (list a22785 temp22839)
 (list temp22814 a22743)
 (list temp22846 a22793)
 (list temp22827 a22764)
 (list a22729 temp22806)
 (list a22793 temp22846)
 (list temp22822 temp22818)
 (list temp22823 a22757)
 (list a22757 temp22823)
 (list a22771 temp22831)
 (list temp22835 a22778)
 (list a22736 temp22810)
 (list temp22831 a22771)
 (list a22764 temp22827))
label22849:
    movq a22793, temp22846
    movq a22786, temp22842
    addq temp22846, temp22842
    movq a22785, temp22839
    addq temp22842, temp22839
    movq a22778, temp22835
    addq temp22839, temp22835
    movq a22771, temp22831
    addq temp22835, temp22831
    movq a22764, temp22827
    addq temp22831, temp22827
    movq a22757, temp22823
    addq temp22827, temp22823
    movq temp22822, temp22818
    addq temp22823, temp22818
    movq a22743, temp22814
    addq temp22818, temp22814
    movq a22736, temp22810
    addq temp22814, temp22810
    movq a22729, temp22806
    addq temp22810, temp22806
    movq a22722, %rax
    addq temp22806, %rax
    jmp conclusion
    
label22851:
    movq $2, a22793
    jmp label22849
    
label22850:
    movq $1, a22793
    jmp label22849
    
label22853:
    movq $0, a22799
    cmpq $1, a22799
    je label22850
    jmp label22851
    
label22852:
    movq $1, a22798
    cmpq $1, a22798
    je label22850
    jmp label22851
    
label22855:
    movq $0, a22797
    cmpq $1, a22797
    je label22852
    jmp label22853
    
label22854:
    movq $1, a22796
    cmpq $1, a22796
    je label22852
    jmp label22853
    
label22856:
    movq $1, a22794
    cmpq $1, a22794
    je label22854
    jmp label22855
    
label22857:
    movq $0, a22795
    cmpq $1, a22795
    je label22854
    jmp label22855
    
label22858:
    callq read_int
    movq %rax, temp22848
    cmpq $1, temp22848
    jg label22856
    jmp label22857
    
label22859:
    movq $1, a22786
    jmp label22858
    
label22860:
    movq $2, a22786
    jmp label22858
    
label22862:
    movq $0, a22792
    cmpq $1, a22792
    je label22859
    jmp label22860
    
label22861:
    movq $1, a22791
    cmpq $1, a22791
    je label22859
    jmp label22860
    
label22863:
    movq $1, a22789
    cmpq $1, a22789
    je label22861
    jmp label22862
    
label22864:
    movq $0, a22790
    cmpq $1, a22790
    je label22861
    jmp label22862
    
label22866:
    movq $0, a22788
    cmpq $1, a22788
    je label22863
    jmp label22864
    
label22865:
    movq $1, a22787
    cmpq $1, a22787
    je label22863
    jmp label22864
    
label22867:
    callq read_int
    movq %rax, a22785
    callq read_int
    movq %rax, temp22844
    cmpq $1, temp22844
    jg label22865
    jmp label22866
    
label22868:
    movq $1, a22778
    jmp label22867
    
label22869:
    movq $2, a22778
    jmp label22867
    
label22870:
    movq $1, a22783
    cmpq $1, a22783
    je label22868
    jmp label22869
    
label22871:
    movq $0, a22784
    cmpq $1, a22784
    je label22868
    jmp label22869
    
label22872:
    movq $1, a22781
    cmpq $1, a22781
    je label22870
    jmp label22871
    
label22873:
    movq $0, a22782
    cmpq $1, a22782
    je label22870
    jmp label22871
    
label22874:
    movq $1, a22779
    cmpq $1, a22779
    je label22872
    jmp label22873
    
label22875:
    movq $0, a22780
    cmpq $1, a22780
    je label22872
    jmp label22873
    
label22876:
    callq read_int
    movq %rax, temp22837
    cmpq $1, temp22837
    jg label22874
    jmp label22875
    
label22878:
    movq $2, a22771
    jmp label22876
    
label22877:
    movq $1, a22771
    jmp label22876
    
label22879:
    movq $1, a22776
    cmpq $1, a22776
    je label22877
    jmp label22878
    
label22880:
    movq $0, a22777
    cmpq $1, a22777
    je label22877
    jmp label22878
    
label22882:
    movq $0, a22775
    cmpq $1, a22775
    je label22879
    jmp label22880
    
label22881:
    movq $1, a22774
    cmpq $1, a22774
    je label22879
    jmp label22880
    
label22884:
    movq $0, a22773
    cmpq $1, a22773
    je label22881
    jmp label22882
    
label22883:
    movq $1, a22772
    cmpq $1, a22772
    je label22881
    jmp label22882
    
label22885:
    callq read_int
    movq %rax, temp22833
    cmpq $1, temp22833
    jg label22883
    jmp label22884
    
label22886:
    movq $1, a22764
    jmp label22885
    
label22887:
    movq $2, a22764
    jmp label22885
    
label22888:
    movq $1, a22769
    cmpq $1, a22769
    je label22886
    jmp label22887
    
label22889:
    movq $0, a22770
    cmpq $1, a22770
    je label22886
    jmp label22887
    
label22890:
    movq $1, a22767
    cmpq $1, a22767
    je label22888
    jmp label22889
    
label22891:
    movq $0, a22768
    cmpq $1, a22768
    je label22888
    jmp label22889
    
label22892:
    movq $1, a22765
    cmpq $1, a22765
    je label22890
    jmp label22891
    
label22893:
    movq $0, a22766
    cmpq $1, a22766
    je label22890
    jmp label22891
    
label22894:
    callq read_int
    movq %rax, temp22829
    cmpq $1, temp22829
    jg label22892
    jmp label22893
    
label22895:
    movq $1, a22757
    jmp label22894
    
label22896:
    movq $2, a22757
    jmp label22894
    
label22898:
    movq $0, a22763
    cmpq $1, a22763
    je label22895
    jmp label22896
    
label22897:
    movq $1, a22762
    cmpq $1, a22762
    je label22895
    jmp label22896
    
label22899:
    movq $1, a22760
    cmpq $1, a22760
    je label22897
    jmp label22898
    
label22900:
    movq $0, a22761
    cmpq $1, a22761
    je label22897
    jmp label22898
    
label22902:
    movq $0, a22759
    cmpq $1, a22759
    je label22899
    jmp label22900
    
label22901:
    movq $1, a22758
    cmpq $1, a22758
    je label22899
    jmp label22900
    
label22903:
    callq read_int
    movq %rax, temp22822
    callq read_int
    movq %rax, temp22825
    cmpq $1, temp22825
    jg label22901
    jmp label22902
    
label22904:
    movq $1, a22750
    jmp label22903
    
label22905:
    movq $2, a22750
    jmp label22903
    
label22906:
    movq $1, a22755
    cmpq $1, a22755
    je label22904
    jmp label22905
    
label22907:
    movq $0, a22756
    cmpq $1, a22756
    je label22904
    jmp label22905
    
label22908:
    movq $1, a22753
    cmpq $1, a22753
    je label22906
    jmp label22907
    
label22909:
    movq $0, a22754
    cmpq $1, a22754
    je label22906
    jmp label22907
    
label22910:
    movq $1, a22751
    cmpq $1, a22751
    je label22908
    jmp label22909
    
label22911:
    movq $0, a22752
    cmpq $1, a22752
    je label22908
    jmp label22909
    
label22912:
    callq read_int
    movq %rax, temp22820
    cmpq $1, temp22820
    jg label22910
    jmp label22911
    
label22914:
    movq $2, a22743
    jmp label22912
    
label22913:
    movq $1, a22743
    jmp label22912
    
label22916:
    movq $0, a22749
    cmpq $1, a22749
    je label22913
    jmp label22914
    
label22915:
    movq $1, a22748
    cmpq $1, a22748
    je label22913
    jmp label22914
    
label22918:
    movq $0, a22747
    cmpq $1, a22747
    je label22915
    jmp label22916
    
label22917:
    movq $1, a22746
    cmpq $1, a22746
    je label22915
    jmp label22916
    
label22919:
    movq $1, a22744
    cmpq $1, a22744
    je label22917
    jmp label22918
    
label22920:
    movq $0, a22745
    cmpq $1, a22745
    je label22917
    jmp label22918
    
label22921:
    callq read_int
    movq %rax, temp22816
    cmpq $1, temp22816
    jg label22919
    jmp label22920
    
label22922:
    movq $1, a22736
    jmp label22921
    
label22923:
    movq $2, a22736
    jmp label22921
    
label22924:
    movq $1, a22741
    cmpq $1, a22741
    je label22922
    jmp label22923
    
label22925:
    movq $0, a22742
    cmpq $1, a22742
    je label22922
    jmp label22923
    
label22926:
    movq $1, a22739
    cmpq $1, a22739
    je label22924
    jmp label22925
    
label22927:
    movq $0, a22740
    cmpq $1, a22740
    je label22924
    jmp label22925
    
label22928:
    movq $1, a22737
    cmpq $1, a22737
    je label22926
    jmp label22927
    
label22929:
    movq $0, a22738
    cmpq $1, a22738
    je label22926
    jmp label22927
    
label22930:
    callq read_int
    movq %rax, temp22812
    cmpq $1, temp22812
    jg label22928
    jmp label22929
    
label22931:
    movq $1, a22729
    jmp label22930
    
label22932:
    movq $2, a22729
    jmp label22930
    
label22933:
    movq $1, a22734
    cmpq $1, a22734
    je label22931
    jmp label22932
    
label22934:
    movq $0, a22735
    cmpq $1, a22735
    je label22931
    jmp label22932
    
label22935:
    movq $1, a22732
    cmpq $1, a22732
    je label22933
    jmp label22934
    
label22936:
    movq $0, a22733
    cmpq $1, a22733
    je label22933
    jmp label22934
    
label22938:
    movq $0, a22731
    cmpq $1, a22731
    je label22935
    jmp label22936
    
label22937:
    movq $1, a22730
    cmpq $1, a22730
    je label22935
    jmp label22936
    
label22939:
    callq read_int
    movq %rax, temp22808
    cmpq $1, temp22808
    jg label22937
    jmp label22938
    
label22940:
    movq $1, a22722
    jmp label22939
    
label22941:
    movq $2, a22722
    jmp label22939
    
label22942:
    movq $1, a22727
    cmpq $1, a22727
    je label22940
    jmp label22941
    
label22943:
    movq $0, a22728
    cmpq $1, a22728
    je label22940
    jmp label22941
    
label22944:
    movq $1, a22725
    cmpq $1, a22725
    je label22942
    jmp label22943
    
label22945:
    movq $0, a22726
    cmpq $1, a22726
    je label22942
    jmp label22943
    
label22946:
    movq $1, a22723
    cmpq $1, a22723
    je label22944
    jmp label22945
    
label22947:
    movq $0, a22724
    cmpq $1, a22724
    je label22944
    jmp label22945
    
label22949:
    callq read_int
    movq %rax, temp22804
    cmpq $1, temp22804
    jg label22946
    jmp label22947
    
label22948:
    movq $1, %rax
    jmp conclusion
    
label22950:
    cmpq $1, x22721
    je label22948
    jmp label22949
    
label22951:
    movq $1, x22721
    jmp label22950
    
label22952:
    movq $0, x22721
    jmp label22950
    
label22953:
    cmpq $8, temp22801
    jg label22951
    jmp label22952
    
label22954:
    movq $8, temp22801
    jmp label22953
    
label22955:
    movq $9, temp22801
    jmp label22953
    
start:
    cmpq $1, $1
    jge label22954
    jmp label22955
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22822 : 'Integer, temp22823 : 'Integer, temp22820 : 'Integer, temp22827 : 'Integer, temp22825 : 'Integer, temp22831 : 'Integer, temp22829 : 'Integer, temp22835 : 'Integer, temp22833 : 'Integer, temp22806 : 'Integer, temp22804 : 'Integer, temp22810 : 'Integer, temp22808 : 'Integer, temp22814 : 'Integer, temp22812 : 'Integer, temp22818 : 'Integer, temp22816 : 'Integer, a22725 : 'Boolean, a22724 : 'Boolean, a22727 : 'Boolean, a22726 : 'Boolean, a22729 : 'Integer, a22728 : 'Boolean, a22731 : 'Boolean, a22730 : 'Boolean, a22733 : 'Boolean, a22732 : 'Boolean, a22735 : 'Boolean, a22734 : 'Boolean, a22737 : 'Boolean, a22736 : 'Integer, a22739 : 'Boolean, a22738 : 'Boolean, temp22839 : 'Integer, temp22837 : 'Integer, temp22842 : 'Integer, temp22846 : 'Integer, temp22844 : 'Integer, x22721 : 'Boolean, a22723 : 'Boolean, temp22848 : 'Integer, a22722 : 'Integer, a22758 : 'Boolean, a22759 : 'Boolean, a22756 : 'Boolean, a22757 : 'Integer, a22762 : 'Boolean, a22763 : 'Boolean, a22760 : 'Boolean, a22761 : 'Boolean, a22766 : 'Boolean, a22767 : 'Boolean, a22764 : 'Integer, a22765 : 'Boolean, a22770 : 'Boolean, a22771 : 'Integer, a22768 : 'Boolean, a22769 : 'Boolean, a22742 : 'Boolean, a22743 : 'Integer, a22740 : 'Boolean, a22741 : 'Boolean, a22746 : 'Boolean, a22747 : 'Boolean, a22744 : 'Boolean, a22745 : 'Boolean, a22750 : 'Integer, a22751 : 'Boolean, a22748 : 'Boolean, a22749 : 'Boolean, a22754 : 'Boolean, a22755 : 'Boolean, a22752 : 'Boolean, a22753 : 'Boolean, a22790 : 'Boolean, a22791 : 'Boolean, a22788 : 'Boolean, a22789 : 'Boolean, a22794 : 'Boolean, a22795 : 'Boolean, a22792 : 'Boolean, a22793 : 'Integer, a22798 : 'Boolean, a22799 : 'Boolean, a22796 : 'Boolean, a22797 : 'Boolean, temp22801 : 'Integer, a22774 : 'Boolean, a22775 : 'Boolean, a22772 : 'Boolean, a22773 : 'Boolean, a22778 : 'Integer, a22779 : 'Boolean, a22776 : 'Boolean, a22777 : 'Boolean, a22782 : 'Boolean, a22783 : 'Boolean, a22780 : 'Boolean, a22781 : 'Boolean, a22786 : 'Integer, a22787 : 'Boolean, a22784 : 'Boolean, a22785 : 'Integer, 
tsorted
:
'(label22849
  label22851
  label22850
  label22853
  label22852
  label22855
  label22854
  label22856
  label22857
  label22858
  label22859
  label22860
  label22862
  label22861
  label22863
  label22864
  label22866
  label22865
  label22867
  label22868
  label22869
  label22870
  label22871
  label22872
  label22873
  label22874
  label22875
  label22876
  label22878
  label22877
  label22879
  label22880
  label22882
  label22881
  label22884
  label22883
  label22885
  label22886
  label22887
  label22888
  label22889
  label22890
  label22891
  label22892
  label22893
  label22894
  label22895
  label22896
  label22898
  label22897
  label22899
  label22900
  label22902
  label22901
  label22903
  label22904
  label22905
  label22906
  label22907
  label22908
  label22909
  label22910
  label22911
  label22912
  label22914
  label22913
  label22916
  label22915
  label22918
  label22917
  label22919
  label22920
  label22921
  label22922
  label22923
  label22924
  label22925
  label22926
  label22927
  label22928
  label22929
  label22930
  label22931
  label22932
  label22933
  label22934
  label22935
  label22936
  label22938
  label22937
  label22939
  label22940
  label22941
  label22942
  label22943
  label22944
  label22945
  label22946
  label22947
  label22949
  label22948
  label22950
  label22951
  label22952
  label22953
  label22954
  label22955
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22810 a22736)
 (list a22778 temp22835)
 (list temp22842 a22786)
 (list temp22806 a22729)
 (list temp22839 a22785)
 (list a22743 temp22814)
 (list a22786 temp22842)
 (list temp22818 temp22822)
 (list a22785 temp22839)
 (list temp22814 a22743)
 (list temp22846 a22793)
 (list temp22827 a22764)
 (list a22729 temp22806)
 (list a22793 temp22846)
 (list temp22822 temp22818)
 (list temp22823 a22757)
 (list a22757 temp22823)
 (list a22771 temp22831)
 (list temp22835 a22778)
 (list a22736 temp22810)
 (list temp22831 a22771)
 (list a22764 temp22827))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a22785 7)
 (cons a22786 8)
 (cons a22778 9)
 (cons a22743 10)
 (cons a22771 11)
 (cons a22764 12)
 (cons a22757 13)
 (cons a22722 14)
 (cons a22736 15)
 (cons a22729 16)
 (cons temp22822 17)
 (cons a22797 0)
 (cons a22796 0)
 (cons a22799 0)
 (cons a22793 0)
 (cons temp22846 0)
 (cons temp22842 1)
 (cons a22798 0)
 (cons a22795 0)
 (cons a22794 0)
 (cons temp22848 0)
 (cons a22787 0)
 (cons a22789 0)
 (cons a22788 0)
 (cons a22791 0)
 (cons a22792 0)
 (cons temp22844 0)
 (cons temp22839 0)
 (cons a22790 0)
 (cons temp22835 1)
 (cons temp22831 0)
 (cons a22780 0)
 (cons a22782 0)
 (cons a22783 0)
 (cons a22781 0)
 (cons a22779 0)
 (cons a22784 0)
 (cons temp22837 0)
 (cons a22777 0)
 (cons a22776 0)
 (cons a22775 0)
 (cons a22774 0)
 (cons a22773 0)
 (cons a22772 0)
 (cons temp22827 1)
 (cons temp22833 0)
 (cons a22768 0)
 (cons a22770 0)
 (cons a22765 0)
 (cons a22769 0)
 (cons a22767 0)
 (cons a22766 0)
 (cons temp22823 0)
 (cons temp22829 0)
 (cons temp22825 0)
 (cons a22760 0)
 (cons a22763 0)
 (cons a22762 0)
 (cons a22758 0)
 (cons a22761 0)
 (cons temp22818 1)
 (cons a22759 0)
 (cons a22751 0)
 (cons temp22814 0)
 (cons a22752 0)
 (cons a22755 0)
 (cons a22750 0)
 (cons a22754 0)
 (cons a22756 0)
 (cons temp22820 0)
 (cons a22753 0)
 (cons a22745 0)
 (cons a22749 0)
 (cons a22746 0)
 (cons temp22816 0)
 (cons a22747 0)
 (cons a22748 0)
 (cons temp22810 1)
 (cons temp22806 0)
 (cons a22744 0)
 (cons a22742 0)
 (cons a22737 0)
 (cons a22739 0)
 (cons temp22812 0)
 (cons a22741 0)
 (cons a22738 0)
 (cons a22740 0)
 (cons a22733 0)
 (cons a22730 0)
 (cons temp22808 0)
 (cons a22732 0)
 (cons a22731 0)
 (cons a22734 0)
 (cons a22735 0)
 (cons x22721 0)
 (cons a22726 0)
 (cons temp22804 0)
 (cons a22724 0)
 (cons a22727 0)
 (cons a22728 0)
 (cons a22723 0)
 (cons temp22801 0)
 (cons a22725 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label22849:
    movq %rcx, %rcx
    movq %r12, %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -72(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label22851:
    movq $2, %rcx
    jmp label22849
    
label22850:
    movq $1, %rcx
    jmp label22849
    
label22853:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22850
    jmp label22851
    
label22852:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22850
    jmp label22851
    
label22855:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22852
    jmp label22853
    
label22854:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22852
    jmp label22853
    
label22856:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22854
    jmp label22855
    
label22857:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22854
    jmp label22855
    
label22858:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22856
    jmp label22857
    
label22859:
    movq $1, %r12
    jmp label22858
    
label22860:
    movq $2, %r12
    jmp label22858
    
label22862:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22859
    jmp label22860
    
label22861:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22859
    jmp label22860
    
label22863:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22861
    jmp label22862
    
label22864:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22861
    jmp label22862
    
label22866:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22863
    jmp label22864
    
label22865:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22863
    jmp label22864
    
label22867:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22865
    jmp label22866
    
label22868:
    movq $1, %r13
    jmp label22867
    
label22869:
    movq $2, %r13
    jmp label22867
    
label22870:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22868
    jmp label22869
    
label22871:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22868
    jmp label22869
    
label22872:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22870
    jmp label22871
    
label22873:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22870
    jmp label22871
    
label22874:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22872
    jmp label22873
    
label22875:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22872
    jmp label22873
    
label22876:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22874
    jmp label22875
    
label22878:
    movq $2, -48(%rbp)
    jmp label22876
    
label22877:
    movq $1, -48(%rbp)
    jmp label22876
    
label22879:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22877
    jmp label22878
    
label22880:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22877
    jmp label22878
    
label22882:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22879
    jmp label22880
    
label22881:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22879
    jmp label22880
    
label22884:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22881
    jmp label22882
    
label22883:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22881
    jmp label22882
    
label22885:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22883
    jmp label22884
    
label22886:
    movq $1, -56(%rbp)
    jmp label22885
    
label22887:
    movq $2, -56(%rbp)
    jmp label22885
    
label22888:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22886
    jmp label22887
    
label22889:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22886
    jmp label22887
    
label22890:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22888
    jmp label22889
    
label22891:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22888
    jmp label22889
    
label22892:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22890
    jmp label22891
    
label22893:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22890
    jmp label22891
    
label22894:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22892
    jmp label22893
    
label22895:
    movq $1, -64(%rbp)
    jmp label22894
    
label22896:
    movq $2, -64(%rbp)
    jmp label22894
    
label22898:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22895
    jmp label22896
    
label22897:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22895
    jmp label22896
    
label22899:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22897
    jmp label22898
    
label22900:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22897
    jmp label22898
    
label22902:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22899
    jmp label22900
    
label22901:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22899
    jmp label22900
    
label22903:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22901
    jmp label22902
    
label22904:
    movq $1, %rcx
    jmp label22903
    
label22905:
    movq $2, %rcx
    jmp label22903
    
label22906:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22904
    jmp label22905
    
label22907:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22904
    jmp label22905
    
label22908:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22906
    jmp label22907
    
label22909:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22906
    jmp label22907
    
label22910:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22908
    jmp label22909
    
label22911:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22908
    jmp label22909
    
label22912:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22910
    jmp label22911
    
label22914:
    movq $2, %r14
    jmp label22912
    
label22913:
    movq $1, %r14
    jmp label22912
    
label22916:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22913
    jmp label22914
    
label22915:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22913
    jmp label22914
    
label22918:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22915
    jmp label22916
    
label22917:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22915
    jmp label22916
    
label22919:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22917
    jmp label22918
    
label22920:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22917
    jmp label22918
    
label22921:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22919
    jmp label22920
    
label22922:
    movq $1, -80(%rbp)
    jmp label22921
    
label22923:
    movq $2, -80(%rbp)
    jmp label22921
    
label22924:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22922
    jmp label22923
    
label22925:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22922
    jmp label22923
    
label22926:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22924
    jmp label22925
    
label22927:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22924
    jmp label22925
    
label22928:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22926
    jmp label22927
    
label22929:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22926
    jmp label22927
    
label22930:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22928
    jmp label22929
    
label22931:
    movq $1, -88(%rbp)
    jmp label22930
    
label22932:
    movq $2, -88(%rbp)
    jmp label22930
    
label22933:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22931
    jmp label22932
    
label22934:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22931
    jmp label22932
    
label22935:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22933
    jmp label22934
    
label22936:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22933
    jmp label22934
    
label22938:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22935
    jmp label22936
    
label22937:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22935
    jmp label22936
    
label22939:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22937
    jmp label22938
    
label22940:
    movq $1, -72(%rbp)
    jmp label22939
    
label22941:
    movq $2, -72(%rbp)
    jmp label22939
    
label22942:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22940
    jmp label22941
    
label22943:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22940
    jmp label22941
    
label22944:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22942
    jmp label22943
    
label22945:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22942
    jmp label22943
    
label22946:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22944
    jmp label22945
    
label22947:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22944
    jmp label22945
    
label22949:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22946
    jmp label22947
    
label22948:
    movq $1, %rax
    jmp conclusion
    
label22950:
    cmpq $1, %rcx
    je label22948
    jmp label22949
    
label22951:
    movq $1, %rcx
    jmp label22950
    
label22952:
    movq $0, %rcx
    jmp label22950
    
label22953:
    cmpq $8, %rcx
    jg label22951
    jmp label22952
    
label22954:
    movq $8, %rcx
    jmp label22953
    
label22955:
    movq $9, %rcx
    jmp label22953
    
start:
    cmpq $1, $1
    jge label22954
    jmp label22955
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22822 : 'Integer, temp22823 : 'Integer, temp22820 : 'Integer, temp22827 : 'Integer, temp22825 : 'Integer, temp22831 : 'Integer, temp22829 : 'Integer, temp22835 : 'Integer, temp22833 : 'Integer, temp22806 : 'Integer, temp22804 : 'Integer, temp22810 : 'Integer, temp22808 : 'Integer, temp22814 : 'Integer, temp22812 : 'Integer, temp22818 : 'Integer, temp22816 : 'Integer, a22725 : 'Boolean, a22724 : 'Boolean, a22727 : 'Boolean, a22726 : 'Boolean, a22729 : 'Integer, a22728 : 'Boolean, a22731 : 'Boolean, a22730 : 'Boolean, a22733 : 'Boolean, a22732 : 'Boolean, a22735 : 'Boolean, a22734 : 'Boolean, a22737 : 'Boolean, a22736 : 'Integer, a22739 : 'Boolean, a22738 : 'Boolean, temp22839 : 'Integer, temp22837 : 'Integer, temp22842 : 'Integer, temp22846 : 'Integer, temp22844 : 'Integer, x22721 : 'Boolean, a22723 : 'Boolean, temp22848 : 'Integer, a22722 : 'Integer, a22758 : 'Boolean, a22759 : 'Boolean, a22756 : 'Boolean, a22757 : 'Integer, a22762 : 'Boolean, a22763 : 'Boolean, a22760 : 'Boolean, a22761 : 'Boolean, a22766 : 'Boolean, a22767 : 'Boolean, a22764 : 'Integer, a22765 : 'Boolean, a22770 : 'Boolean, a22771 : 'Integer, a22768 : 'Boolean, a22769 : 'Boolean, a22742 : 'Boolean, a22743 : 'Integer, a22740 : 'Boolean, a22741 : 'Boolean, a22746 : 'Boolean, a22747 : 'Boolean, a22744 : 'Boolean, a22745 : 'Boolean, a22750 : 'Integer, a22751 : 'Boolean, a22748 : 'Boolean, a22749 : 'Boolean, a22754 : 'Boolean, a22755 : 'Boolean, a22752 : 'Boolean, a22753 : 'Boolean, a22790 : 'Boolean, a22791 : 'Boolean, a22788 : 'Boolean, a22789 : 'Boolean, a22794 : 'Boolean, a22795 : 'Boolean, a22792 : 'Boolean, a22793 : 'Integer, a22798 : 'Boolean, a22799 : 'Boolean, a22796 : 'Boolean, a22797 : 'Boolean, temp22801 : 'Integer, a22774 : 'Boolean, a22775 : 'Boolean, a22772 : 'Boolean, a22773 : 'Boolean, a22778 : 'Integer, a22779 : 'Boolean, a22776 : 'Boolean, a22777 : 'Boolean, a22782 : 'Boolean, a22783 : 'Boolean, a22780 : 'Boolean, a22781 : 'Boolean, a22786 : 'Integer, a22787 : 'Boolean, a22784 : 'Boolean, a22785 : 'Integer, 
tsorted
:
'(label22849
  label22851
  label22850
  label22853
  label22852
  label22855
  label22854
  label22856
  label22857
  label22858
  label22859
  label22860
  label22862
  label22861
  label22863
  label22864
  label22866
  label22865
  label22867
  label22868
  label22869
  label22870
  label22871
  label22872
  label22873
  label22874
  label22875
  label22876
  label22878
  label22877
  label22879
  label22880
  label22882
  label22881
  label22884
  label22883
  label22885
  label22886
  label22887
  label22888
  label22889
  label22890
  label22891
  label22892
  label22893
  label22894
  label22895
  label22896
  label22898
  label22897
  label22899
  label22900
  label22902
  label22901
  label22903
  label22904
  label22905
  label22906
  label22907
  label22908
  label22909
  label22910
  label22911
  label22912
  label22914
  label22913
  label22916
  label22915
  label22918
  label22917
  label22919
  label22920
  label22921
  label22922
  label22923
  label22924
  label22925
  label22926
  label22927
  label22928
  label22929
  label22930
  label22931
  label22932
  label22933
  label22934
  label22935
  label22936
  label22938
  label22937
  label22939
  label22940
  label22941
  label22942
  label22943
  label22944
  label22945
  label22946
  label22947
  label22949
  label22948
  label22950
  label22951
  label22952
  label22953
  label22954
  label22955
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22810 a22736)
 (list a22778 temp22835)
 (list temp22842 a22786)
 (list temp22806 a22729)
 (list temp22839 a22785)
 (list a22743 temp22814)
 (list a22786 temp22842)
 (list temp22818 temp22822)
 (list a22785 temp22839)
 (list temp22814 a22743)
 (list temp22846 a22793)
 (list temp22827 a22764)
 (list a22729 temp22806)
 (list a22793 temp22846)
 (list temp22822 temp22818)
 (list temp22823 a22757)
 (list a22757 temp22823)
 (list a22771 temp22831)
 (list temp22835 a22778)
 (list a22736 temp22810)
 (list temp22831 a22771)
 (list a22764 temp22827))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a22785 7)
 (cons a22786 8)
 (cons a22778 9)
 (cons a22743 10)
 (cons a22771 11)
 (cons a22764 12)
 (cons a22757 13)
 (cons a22722 14)
 (cons a22736 15)
 (cons a22729 16)
 (cons temp22822 17)
 (cons a22797 0)
 (cons a22796 0)
 (cons a22799 0)
 (cons a22793 0)
 (cons temp22846 0)
 (cons temp22842 1)
 (cons a22798 0)
 (cons a22795 0)
 (cons a22794 0)
 (cons temp22848 0)
 (cons a22787 0)
 (cons a22789 0)
 (cons a22788 0)
 (cons a22791 0)
 (cons a22792 0)
 (cons temp22844 0)
 (cons temp22839 0)
 (cons a22790 0)
 (cons temp22835 1)
 (cons temp22831 0)
 (cons a22780 0)
 (cons a22782 0)
 (cons a22783 0)
 (cons a22781 0)
 (cons a22779 0)
 (cons a22784 0)
 (cons temp22837 0)
 (cons a22777 0)
 (cons a22776 0)
 (cons a22775 0)
 (cons a22774 0)
 (cons a22773 0)
 (cons a22772 0)
 (cons temp22827 1)
 (cons temp22833 0)
 (cons a22768 0)
 (cons a22770 0)
 (cons a22765 0)
 (cons a22769 0)
 (cons a22767 0)
 (cons a22766 0)
 (cons temp22823 0)
 (cons temp22829 0)
 (cons temp22825 0)
 (cons a22760 0)
 (cons a22763 0)
 (cons a22762 0)
 (cons a22758 0)
 (cons a22761 0)
 (cons temp22818 1)
 (cons a22759 0)
 (cons a22751 0)
 (cons temp22814 0)
 (cons a22752 0)
 (cons a22755 0)
 (cons a22750 0)
 (cons a22754 0)
 (cons a22756 0)
 (cons temp22820 0)
 (cons a22753 0)
 (cons a22745 0)
 (cons a22749 0)
 (cons a22746 0)
 (cons temp22816 0)
 (cons a22747 0)
 (cons a22748 0)
 (cons temp22810 1)
 (cons temp22806 0)
 (cons a22744 0)
 (cons a22742 0)
 (cons a22737 0)
 (cons a22739 0)
 (cons temp22812 0)
 (cons a22741 0)
 (cons a22738 0)
 (cons a22740 0)
 (cons a22733 0)
 (cons a22730 0)
 (cons temp22808 0)
 (cons a22732 0)
 (cons a22731 0)
 (cons a22734 0)
 (cons a22735 0)
 (cons x22721 0)
 (cons a22726 0)
 (cons temp22804 0)
 (cons a22724 0)
 (cons a22727 0)
 (cons a22728 0)
 (cons a22723 0)
 (cons temp22801 0)
 (cons a22725 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label22849:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -72(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label22851:
    movq $2, %rcx
    jmp label22849
    
label22850:
    movq $1, %rcx
    jmp label22849
    
label22853:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22850
    jmp label22851
    
label22852:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22850
    jmp label22851
    
label22855:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22852
    jmp label22853
    
label22854:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22852
    jmp label22853
    
label22856:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22854
    jmp label22855
    
label22857:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22854
    jmp label22855
    
label22858:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22856
    jmp label22857
    
label22859:
    movq $1, %r12
    jmp label22858
    
label22860:
    movq $2, %r12
    jmp label22858
    
label22862:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22859
    jmp label22860
    
label22861:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22859
    jmp label22860
    
label22863:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22861
    jmp label22862
    
label22864:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22861
    jmp label22862
    
label22866:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22863
    jmp label22864
    
label22865:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22863
    jmp label22864
    
label22867:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22865
    jmp label22866
    
label22868:
    movq $1, %r13
    jmp label22867
    
label22869:
    movq $2, %r13
    jmp label22867
    
label22870:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22868
    jmp label22869
    
label22871:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22868
    jmp label22869
    
label22872:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22870
    jmp label22871
    
label22873:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22870
    jmp label22871
    
label22874:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22872
    jmp label22873
    
label22875:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22872
    jmp label22873
    
label22876:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22874
    jmp label22875
    
label22878:
    movq $2, -48(%rbp)
    jmp label22876
    
label22877:
    movq $1, -48(%rbp)
    jmp label22876
    
label22879:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22877
    jmp label22878
    
label22880:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22877
    jmp label22878
    
label22882:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22879
    jmp label22880
    
label22881:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22879
    jmp label22880
    
label22884:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22881
    jmp label22882
    
label22883:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22881
    jmp label22882
    
label22885:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22883
    jmp label22884
    
label22886:
    movq $1, -56(%rbp)
    jmp label22885
    
label22887:
    movq $2, -56(%rbp)
    jmp label22885
    
label22888:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22886
    jmp label22887
    
label22889:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22886
    jmp label22887
    
label22890:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22888
    jmp label22889
    
label22891:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22888
    jmp label22889
    
label22892:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22890
    jmp label22891
    
label22893:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22890
    jmp label22891
    
label22894:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22892
    jmp label22893
    
label22895:
    movq $1, -64(%rbp)
    jmp label22894
    
label22896:
    movq $2, -64(%rbp)
    jmp label22894
    
label22898:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22895
    jmp label22896
    
label22897:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22895
    jmp label22896
    
label22899:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22897
    jmp label22898
    
label22900:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22897
    jmp label22898
    
label22902:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22899
    jmp label22900
    
label22901:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22899
    jmp label22900
    
label22903:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22901
    jmp label22902
    
label22904:
    movq $1, %rcx
    jmp label22903
    
label22905:
    movq $2, %rcx
    jmp label22903
    
label22906:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22904
    jmp label22905
    
label22907:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22904
    jmp label22905
    
label22908:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22906
    jmp label22907
    
label22909:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22906
    jmp label22907
    
label22910:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22908
    jmp label22909
    
label22911:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22908
    jmp label22909
    
label22912:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22910
    jmp label22911
    
label22914:
    movq $2, %r14
    jmp label22912
    
label22913:
    movq $1, %r14
    jmp label22912
    
label22916:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22913
    jmp label22914
    
label22915:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22913
    jmp label22914
    
label22918:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22915
    jmp label22916
    
label22917:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22915
    jmp label22916
    
label22919:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22917
    jmp label22918
    
label22920:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22917
    jmp label22918
    
label22921:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22919
    jmp label22920
    
label22922:
    movq $1, -80(%rbp)
    jmp label22921
    
label22923:
    movq $2, -80(%rbp)
    jmp label22921
    
label22924:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22922
    jmp label22923
    
label22925:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22922
    jmp label22923
    
label22926:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22924
    jmp label22925
    
label22927:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22924
    jmp label22925
    
label22928:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22926
    jmp label22927
    
label22929:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22926
    jmp label22927
    
label22930:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22928
    jmp label22929
    
label22931:
    movq $1, -88(%rbp)
    jmp label22930
    
label22932:
    movq $2, -88(%rbp)
    jmp label22930
    
label22933:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22931
    jmp label22932
    
label22934:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22931
    jmp label22932
    
label22935:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22933
    jmp label22934
    
label22936:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22933
    jmp label22934
    
label22938:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22935
    jmp label22936
    
label22937:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22935
    jmp label22936
    
label22939:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22937
    jmp label22938
    
label22940:
    movq $1, -72(%rbp)
    jmp label22939
    
label22941:
    movq $2, -72(%rbp)
    jmp label22939
    
label22942:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22940
    jmp label22941
    
label22943:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22940
    jmp label22941
    
label22944:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22942
    jmp label22943
    
label22945:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22942
    jmp label22943
    
label22946:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22944
    jmp label22945
    
label22947:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22944
    jmp label22945
    
label22949:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22946
    jmp label22947
    
label22948:
    movq $1, %rax
    jmp conclusion
    
label22950:
    cmpq $1, %rcx
    je label22948
    jmp label22949
    
label22951:
    movq $1, %rcx
    jmp label22950
    
label22952:
    movq $0, %rcx
    jmp label22950
    
label22953:
    cmpq $8, %rcx
    jg label22951
    jmp label22952
    
label22954:
    movq $8, %rcx
    jmp label22953
    
label22955:
    movq $9, %rcx
    jmp label22953
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22954
    jmp label22955
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp22822 : 'Integer, temp22823 : 'Integer, temp22820 : 'Integer, temp22827 : 'Integer, temp22825 : 'Integer, temp22831 : 'Integer, temp22829 : 'Integer, temp22835 : 'Integer, temp22833 : 'Integer, temp22806 : 'Integer, temp22804 : 'Integer, temp22810 : 'Integer, temp22808 : 'Integer, temp22814 : 'Integer, temp22812 : 'Integer, temp22818 : 'Integer, temp22816 : 'Integer, a22725 : 'Boolean, a22724 : 'Boolean, a22727 : 'Boolean, a22726 : 'Boolean, a22729 : 'Integer, a22728 : 'Boolean, a22731 : 'Boolean, a22730 : 'Boolean, a22733 : 'Boolean, a22732 : 'Boolean, a22735 : 'Boolean, a22734 : 'Boolean, a22737 : 'Boolean, a22736 : 'Integer, a22739 : 'Boolean, a22738 : 'Boolean, temp22839 : 'Integer, temp22837 : 'Integer, temp22842 : 'Integer, temp22846 : 'Integer, temp22844 : 'Integer, x22721 : 'Boolean, a22723 : 'Boolean, temp22848 : 'Integer, a22722 : 'Integer, a22758 : 'Boolean, a22759 : 'Boolean, a22756 : 'Boolean, a22757 : 'Integer, a22762 : 'Boolean, a22763 : 'Boolean, a22760 : 'Boolean, a22761 : 'Boolean, a22766 : 'Boolean, a22767 : 'Boolean, a22764 : 'Integer, a22765 : 'Boolean, a22770 : 'Boolean, a22771 : 'Integer, a22768 : 'Boolean, a22769 : 'Boolean, a22742 : 'Boolean, a22743 : 'Integer, a22740 : 'Boolean, a22741 : 'Boolean, a22746 : 'Boolean, a22747 : 'Boolean, a22744 : 'Boolean, a22745 : 'Boolean, a22750 : 'Integer, a22751 : 'Boolean, a22748 : 'Boolean, a22749 : 'Boolean, a22754 : 'Boolean, a22755 : 'Boolean, a22752 : 'Boolean, a22753 : 'Boolean, a22790 : 'Boolean, a22791 : 'Boolean, a22788 : 'Boolean, a22789 : 'Boolean, a22794 : 'Boolean, a22795 : 'Boolean, a22792 : 'Boolean, a22793 : 'Integer, a22798 : 'Boolean, a22799 : 'Boolean, a22796 : 'Boolean, a22797 : 'Boolean, temp22801 : 'Integer, a22774 : 'Boolean, a22775 : 'Boolean, a22772 : 'Boolean, a22773 : 'Boolean, a22778 : 'Integer, a22779 : 'Boolean, a22776 : 'Boolean, a22777 : 'Boolean, a22782 : 'Boolean, a22783 : 'Boolean, a22780 : 'Boolean, a22781 : 'Boolean, a22786 : 'Integer, a22787 : 'Boolean, a22784 : 'Boolean, a22785 : 'Integer, 
tsorted
:
'(label22849
  label22851
  label22850
  label22853
  label22852
  label22855
  label22854
  label22856
  label22857
  label22858
  label22859
  label22860
  label22862
  label22861
  label22863
  label22864
  label22866
  label22865
  label22867
  label22868
  label22869
  label22870
  label22871
  label22872
  label22873
  label22874
  label22875
  label22876
  label22878
  label22877
  label22879
  label22880
  label22882
  label22881
  label22884
  label22883
  label22885
  label22886
  label22887
  label22888
  label22889
  label22890
  label22891
  label22892
  label22893
  label22894
  label22895
  label22896
  label22898
  label22897
  label22899
  label22900
  label22902
  label22901
  label22903
  label22904
  label22905
  label22906
  label22907
  label22908
  label22909
  label22910
  label22911
  label22912
  label22914
  label22913
  label22916
  label22915
  label22918
  label22917
  label22919
  label22920
  label22921
  label22922
  label22923
  label22924
  label22925
  label22926
  label22927
  label22928
  label22929
  label22930
  label22931
  label22932
  label22933
  label22934
  label22935
  label22936
  label22938
  label22937
  label22939
  label22940
  label22941
  label22942
  label22943
  label22944
  label22945
  label22946
  label22947
  label22949
  label22948
  label22950
  label22951
  label22952
  label22953
  label22954
  label22955
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp22810 a22736)
 (list a22778 temp22835)
 (list temp22842 a22786)
 (list temp22806 a22729)
 (list temp22839 a22785)
 (list a22743 temp22814)
 (list a22786 temp22842)
 (list temp22818 temp22822)
 (list a22785 temp22839)
 (list temp22814 a22743)
 (list temp22846 a22793)
 (list temp22827 a22764)
 (list a22729 temp22806)
 (list a22793 temp22846)
 (list temp22822 temp22818)
 (list temp22823 a22757)
 (list a22757 temp22823)
 (list a22771 temp22831)
 (list temp22835 a22778)
 (list a22736 temp22810)
 (list temp22831 a22771)
 (list a22764 temp22827))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons a22785 7)
 (cons a22786 8)
 (cons a22778 9)
 (cons a22743 10)
 (cons a22771 11)
 (cons a22764 12)
 (cons a22757 13)
 (cons a22722 14)
 (cons a22736 15)
 (cons a22729 16)
 (cons temp22822 17)
 (cons a22797 0)
 (cons a22796 0)
 (cons a22799 0)
 (cons a22793 0)
 (cons temp22846 0)
 (cons temp22842 1)
 (cons a22798 0)
 (cons a22795 0)
 (cons a22794 0)
 (cons temp22848 0)
 (cons a22787 0)
 (cons a22789 0)
 (cons a22788 0)
 (cons a22791 0)
 (cons a22792 0)
 (cons temp22844 0)
 (cons temp22839 0)
 (cons a22790 0)
 (cons temp22835 1)
 (cons temp22831 0)
 (cons a22780 0)
 (cons a22782 0)
 (cons a22783 0)
 (cons a22781 0)
 (cons a22779 0)
 (cons a22784 0)
 (cons temp22837 0)
 (cons a22777 0)
 (cons a22776 0)
 (cons a22775 0)
 (cons a22774 0)
 (cons a22773 0)
 (cons a22772 0)
 (cons temp22827 1)
 (cons temp22833 0)
 (cons a22768 0)
 (cons a22770 0)
 (cons a22765 0)
 (cons a22769 0)
 (cons a22767 0)
 (cons a22766 0)
 (cons temp22823 0)
 (cons temp22829 0)
 (cons temp22825 0)
 (cons a22760 0)
 (cons a22763 0)
 (cons a22762 0)
 (cons a22758 0)
 (cons a22761 0)
 (cons temp22818 1)
 (cons a22759 0)
 (cons a22751 0)
 (cons temp22814 0)
 (cons a22752 0)
 (cons a22755 0)
 (cons a22750 0)
 (cons a22754 0)
 (cons a22756 0)
 (cons temp22820 0)
 (cons a22753 0)
 (cons a22745 0)
 (cons a22749 0)
 (cons a22746 0)
 (cons temp22816 0)
 (cons a22747 0)
 (cons a22748 0)
 (cons temp22810 1)
 (cons temp22806 0)
 (cons a22744 0)
 (cons a22742 0)
 (cons a22737 0)
 (cons a22739 0)
 (cons temp22812 0)
 (cons a22741 0)
 (cons a22738 0)
 (cons a22740 0)
 (cons a22733 0)
 (cons a22730 0)
 (cons temp22808 0)
 (cons a22732 0)
 (cons a22731 0)
 (cons a22734 0)
 (cons a22735 0)
 (cons x22721 0)
 (cons a22726 0)
 (cons temp22804 0)
 (cons a22724 0)
 (cons a22727 0)
 (cons a22728 0)
 (cons a22723 0)
 (cons temp22801 0)
 (cons a22725 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label22849:
    movq %r12, %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq -48(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -72(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label22851:
    movq $2, %rcx
    jmp label22849
    
label22850:
    movq $1, %rcx
    jmp label22849
    
label22853:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22850
    jmp label22851
    
label22852:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22850
    jmp label22851
    
label22855:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22852
    jmp label22853
    
label22854:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22852
    jmp label22853
    
label22856:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22854
    jmp label22855
    
label22857:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22854
    jmp label22855
    
label22858:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22856
    jmp label22857
    
label22859:
    movq $1, %r12
    jmp label22858
    
label22860:
    movq $2, %r12
    jmp label22858
    
label22862:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22859
    jmp label22860
    
label22861:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22859
    jmp label22860
    
label22863:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22861
    jmp label22862
    
label22864:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22861
    jmp label22862
    
label22866:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22863
    jmp label22864
    
label22865:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22863
    jmp label22864
    
label22867:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22865
    jmp label22866
    
label22868:
    movq $1, %r13
    jmp label22867
    
label22869:
    movq $2, %r13
    jmp label22867
    
label22870:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22868
    jmp label22869
    
label22871:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22868
    jmp label22869
    
label22872:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22870
    jmp label22871
    
label22873:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22870
    jmp label22871
    
label22874:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22872
    jmp label22873
    
label22875:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22872
    jmp label22873
    
label22876:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22874
    jmp label22875
    
label22878:
    movq $2, -48(%rbp)
    jmp label22876
    
label22877:
    movq $1, -48(%rbp)
    jmp label22876
    
label22879:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22877
    jmp label22878
    
label22880:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22877
    jmp label22878
    
label22882:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22879
    jmp label22880
    
label22881:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22879
    jmp label22880
    
label22884:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22881
    jmp label22882
    
label22883:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22881
    jmp label22882
    
label22885:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22883
    jmp label22884
    
label22886:
    movq $1, -56(%rbp)
    jmp label22885
    
label22887:
    movq $2, -56(%rbp)
    jmp label22885
    
label22888:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22886
    jmp label22887
    
label22889:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22886
    jmp label22887
    
label22890:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22888
    jmp label22889
    
label22891:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22888
    jmp label22889
    
label22892:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22890
    jmp label22891
    
label22893:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22890
    jmp label22891
    
label22894:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22892
    jmp label22893
    
label22895:
    movq $1, -64(%rbp)
    jmp label22894
    
label22896:
    movq $2, -64(%rbp)
    jmp label22894
    
label22898:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22895
    jmp label22896
    
label22897:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22895
    jmp label22896
    
label22899:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22897
    jmp label22898
    
label22900:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22897
    jmp label22898
    
label22902:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22899
    jmp label22900
    
label22901:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22899
    jmp label22900
    
label22903:
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22901
    jmp label22902
    
label22904:
    movq $1, %rcx
    jmp label22903
    
label22905:
    movq $2, %rcx
    jmp label22903
    
label22906:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22904
    jmp label22905
    
label22907:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22904
    jmp label22905
    
label22908:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22906
    jmp label22907
    
label22909:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22906
    jmp label22907
    
label22910:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22908
    jmp label22909
    
label22911:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22908
    jmp label22909
    
label22912:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22910
    jmp label22911
    
label22914:
    movq $2, %r14
    jmp label22912
    
label22913:
    movq $1, %r14
    jmp label22912
    
label22916:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22913
    jmp label22914
    
label22915:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22913
    jmp label22914
    
label22918:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22915
    jmp label22916
    
label22917:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22915
    jmp label22916
    
label22919:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22917
    jmp label22918
    
label22920:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22917
    jmp label22918
    
label22921:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22919
    jmp label22920
    
label22922:
    movq $1, -80(%rbp)
    jmp label22921
    
label22923:
    movq $2, -80(%rbp)
    jmp label22921
    
label22924:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22922
    jmp label22923
    
label22925:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22922
    jmp label22923
    
label22926:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22924
    jmp label22925
    
label22927:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22924
    jmp label22925
    
label22928:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22926
    jmp label22927
    
label22929:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22926
    jmp label22927
    
label22930:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22928
    jmp label22929
    
label22931:
    movq $1, -88(%rbp)
    jmp label22930
    
label22932:
    movq $2, -88(%rbp)
    jmp label22930
    
label22933:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22931
    jmp label22932
    
label22934:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22931
    jmp label22932
    
label22935:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22933
    jmp label22934
    
label22936:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22933
    jmp label22934
    
label22938:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22935
    jmp label22936
    
label22937:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22935
    jmp label22936
    
label22939:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22937
    jmp label22938
    
label22940:
    movq $1, -72(%rbp)
    jmp label22939
    
label22941:
    movq $2, -72(%rbp)
    jmp label22939
    
label22942:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22940
    jmp label22941
    
label22943:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22940
    jmp label22941
    
label22944:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22942
    jmp label22943
    
label22945:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22942
    jmp label22943
    
label22946:
    movq $1, %rcx
    cmpq $1, %rcx
    je label22944
    jmp label22945
    
label22947:
    movq $0, %rcx
    cmpq $1, %rcx
    je label22944
    jmp label22945
    
label22949:
    callq read_int
    movq %rax, %rcx
    cmpq $1, %rcx
    jg label22946
    jmp label22947
    
label22948:
    movq $1, %rax
    jmp conclusion
    
label22950:
    cmpq $1, %rcx
    je label22948
    jmp label22949
    
label22951:
    movq $1, %rcx
    jmp label22950
    
label22952:
    movq $0, %rcx
    jmp label22950
    
label22953:
    cmpq $8, %rcx
    jg label22951
    jmp label22952
    
label22954:
    movq $8, %rcx
    jmp label22953
    
label22955:
    movq $9, %rcx
    jmp label22953
    
start:
    movq $1, %rax
    cmpq $1, %rax
    jge label22954
    jmp label22955
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label22849:
	movq	%r12, %rdx
	addq	%rcx, %rdx
	movq	%rbx, %rcx
	addq	%rdx, %rcx
	movq	%r13, %rdx
	addq	%rcx, %rdx
	movq	-48(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-56(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-64(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-96(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%r14, %rcx
	addq	%rdx, %rcx
	movq	-80(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-88(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-72(%rbp), %rax
	addq	%rcx, %rax
	jmp _conclusion

	.align 16
_label22851:
	movq	$2, %rcx
	jmp _label22849

	.align 16
_label22850:
	movq	$1, %rcx
	jmp _label22849

	.align 16
_label22853:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22850
	jmp _label22851

	.align 16
_label22852:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22850
	jmp _label22851

	.align 16
_label22855:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22852
	jmp _label22853

	.align 16
_label22854:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22852
	jmp _label22853

	.align 16
_label22856:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22854
	jmp _label22855

	.align 16
_label22857:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22854
	jmp _label22855

	.align 16
_label22858:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22856
	jmp _label22857

	.align 16
_label22859:
	movq	$1, %r12
	jmp _label22858

	.align 16
_label22860:
	movq	$2, %r12
	jmp _label22858

	.align 16
_label22862:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22859
	jmp _label22860

	.align 16
_label22861:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22859
	jmp _label22860

	.align 16
_label22863:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22861
	jmp _label22862

	.align 16
_label22864:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22861
	jmp _label22862

	.align 16
_label22866:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22863
	jmp _label22864

	.align 16
_label22865:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22863
	jmp _label22864

	.align 16
_label22867:
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22865
	jmp _label22866

	.align 16
_label22868:
	movq	$1, %r13
	jmp _label22867

	.align 16
_label22869:
	movq	$2, %r13
	jmp _label22867

	.align 16
_label22870:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22868
	jmp _label22869

	.align 16
_label22871:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22868
	jmp _label22869

	.align 16
_label22872:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22870
	jmp _label22871

	.align 16
_label22873:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22870
	jmp _label22871

	.align 16
_label22874:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22872
	jmp _label22873

	.align 16
_label22875:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22872
	jmp _label22873

	.align 16
_label22876:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22874
	jmp _label22875

	.align 16
_label22878:
	movq	$2, -48(%rbp)
	jmp _label22876

	.align 16
_label22877:
	movq	$1, -48(%rbp)
	jmp _label22876

	.align 16
_label22879:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22877
	jmp _label22878

	.align 16
_label22880:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22877
	jmp _label22878

	.align 16
_label22882:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22879
	jmp _label22880

	.align 16
_label22881:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22879
	jmp _label22880

	.align 16
_label22884:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22881
	jmp _label22882

	.align 16
_label22883:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22881
	jmp _label22882

	.align 16
_label22885:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22883
	jmp _label22884

	.align 16
_label22886:
	movq	$1, -56(%rbp)
	jmp _label22885

	.align 16
_label22887:
	movq	$2, -56(%rbp)
	jmp _label22885

	.align 16
_label22888:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22886
	jmp _label22887

	.align 16
_label22889:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22886
	jmp _label22887

	.align 16
_label22890:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22888
	jmp _label22889

	.align 16
_label22891:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22888
	jmp _label22889

	.align 16
_label22892:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22890
	jmp _label22891

	.align 16
_label22893:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22890
	jmp _label22891

	.align 16
_label22894:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22892
	jmp _label22893

	.align 16
_label22895:
	movq	$1, -64(%rbp)
	jmp _label22894

	.align 16
_label22896:
	movq	$2, -64(%rbp)
	jmp _label22894

	.align 16
_label22898:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22895
	jmp _label22896

	.align 16
_label22897:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22895
	jmp _label22896

	.align 16
_label22899:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22897
	jmp _label22898

	.align 16
_label22900:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22897
	jmp _label22898

	.align 16
_label22902:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22899
	jmp _label22900

	.align 16
_label22901:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22899
	jmp _label22900

	.align 16
_label22903:
	callq	_read_int
	movq	%rax, -96(%rbp)
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22901
	jmp _label22902

	.align 16
_label22904:
	movq	$1, %rcx
	jmp _label22903

	.align 16
_label22905:
	movq	$2, %rcx
	jmp _label22903

	.align 16
_label22906:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22904
	jmp _label22905

	.align 16
_label22907:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22904
	jmp _label22905

	.align 16
_label22908:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22906
	jmp _label22907

	.align 16
_label22909:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22906
	jmp _label22907

	.align 16
_label22910:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22908
	jmp _label22909

	.align 16
_label22911:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22908
	jmp _label22909

	.align 16
_label22912:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22910
	jmp _label22911

	.align 16
_label22914:
	movq	$2, %r14
	jmp _label22912

	.align 16
_label22913:
	movq	$1, %r14
	jmp _label22912

	.align 16
_label22916:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22913
	jmp _label22914

	.align 16
_label22915:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22913
	jmp _label22914

	.align 16
_label22918:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22915
	jmp _label22916

	.align 16
_label22917:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22915
	jmp _label22916

	.align 16
_label22919:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22917
	jmp _label22918

	.align 16
_label22920:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22917
	jmp _label22918

	.align 16
_label22921:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22919
	jmp _label22920

	.align 16
_label22922:
	movq	$1, -80(%rbp)
	jmp _label22921

	.align 16
_label22923:
	movq	$2, -80(%rbp)
	jmp _label22921

	.align 16
_label22924:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22922
	jmp _label22923

	.align 16
_label22925:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22922
	jmp _label22923

	.align 16
_label22926:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22924
	jmp _label22925

	.align 16
_label22927:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22924
	jmp _label22925

	.align 16
_label22928:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22926
	jmp _label22927

	.align 16
_label22929:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22926
	jmp _label22927

	.align 16
_label22930:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22928
	jmp _label22929

	.align 16
_label22931:
	movq	$1, -88(%rbp)
	jmp _label22930

	.align 16
_label22932:
	movq	$2, -88(%rbp)
	jmp _label22930

	.align 16
_label22933:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22931
	jmp _label22932

	.align 16
_label22934:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22931
	jmp _label22932

	.align 16
_label22935:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22933
	jmp _label22934

	.align 16
_label22936:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22933
	jmp _label22934

	.align 16
_label22938:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22935
	jmp _label22936

	.align 16
_label22937:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22935
	jmp _label22936

	.align 16
_label22939:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22937
	jmp _label22938

	.align 16
_label22940:
	movq	$1, -72(%rbp)
	jmp _label22939

	.align 16
_label22941:
	movq	$2, -72(%rbp)
	jmp _label22939

	.align 16
_label22942:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22940
	jmp _label22941

	.align 16
_label22943:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22940
	jmp _label22941

	.align 16
_label22944:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22942
	jmp _label22943

	.align 16
_label22945:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22942
	jmp _label22943

	.align 16
_label22946:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label22944
	jmp _label22945

	.align 16
_label22947:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label22944
	jmp _label22945

	.align 16
_label22949:
	callq	_read_int
	movq	%rax, %rcx
	cmpq	$1, %rcx
	jg _label22946
	jmp _label22947

	.align 16
_label22948:
	movq	$1, %rax
	jmp _conclusion

	.align 16
_label22950:
	cmpq	$1, %rcx
	je _label22948
	jmp _label22949

	.align 16
_label22951:
	movq	$1, %rcx
	jmp _label22950

	.align 16
_label22952:
	movq	$0, %rcx
	jmp _label22950

	.align 16
_label22953:
	cmpq	$8, %rcx
	jg _label22951
	jmp _label22952

	.align 16
_label22954:
	movq	$8, %rcx
	jmp _label22953

	.align 16
_label22955:
	movq	$9, %rcx
	jmp _label22953

	.align 16
_start:
	movq	$1, %rax
	cmpq	$1, %rax
	jge _label22954
	jmp _label22955

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$56, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/cond_test_23.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (if (> (if (>= (if (> 3 (if (> 3 1)
                                    (let ([a 1])
                                       a)
                                    (let ([a 2])
                                       a))
                                 )
                           (let ([a (if (> 3 1)
                                       (let ([a 1])
                                          a)
                                       (let ([a 2])
                                          a))
                                    ])
                              a)
                           (let ([a 2])
                              a))
                         (if (> 3 (if (> 3 1)
                                     (let ([a 1])
                                        a)
                                     (let ([a 2])
                                        a))
                                  )
                            (let ([a (if (> 3 1)
                                        (let ([a 1])
                                           a)
                                        (let ([a 2])
                                           a))
                                     ])
                               a)
                            (let ([a 2])
                               a))
                         )
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      (if (> 3 (if (> 3 1)
                  (let ([a 1])
                     a)
                  (let ([a 2])
                     a))
               )
         (let ([a (if (> 3 1)
                     (let ([a 1])
                        a)
                     (let ([a 2])
                        a))
                  ])
            a)
         (let ([a 2])
            a))
      
      (let ([a (if (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      )
                                                (let ([a (if (> 3 1)
                                                            (let ([a 1])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         ])
                                                   a)
                                                (let ([a 2])
                                                   a))
                                             )
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  (if (> 3 (if (> 3 1)
                              (let ([a 1])
                                 a)
                              (let ([a 2])
                                 a))
                           )
                     (let ([a (if (> 3 1)
                                 (let ([a 1])
                                    a)
                                 (let ([a 2])
                                    a))
                              ])
                        a)
                     (let ([a 2])
                        a))
                  
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                             (let ([a 1])
                                                                a)
                                                             (let ([a 2])
                                                                a))
                                                          )
                                                    (let ([a (if (> 3 1)
                                                                (let ([a 1])
                                                                   a)
                                                                (let ([a 2])
                                                                   a))
                                                             ])
                                                       a)
                                                    (let ([a 2])
                                                       a))
                                                 )
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (if (> 3 (if (> 3 1)
                                      (let ([a 1])
                                         a)
                                      (let ([a 2])
                                         a))
                                   )
                             (let ([a (if (> 3 1)
                                         (let ([a 1])
                                            a)
                                         (let ([a 2])
                                            a))
                                      ])
                                a)
                             (let ([a 2])
                                a))
                          
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                     (let ([a 1])
                                                                        a)
                                                                     (let ([a 2])
                                                                        a))
                                                                  )
                                                            (let ([a (if (> 3 1)
                                                                        (let ([a 1])
                                                                           a)
                                                                        (let ([a 2])
                                                                           a))
                                                                     ])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         )
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (if (> 3 (if (> 3 1)
                                              (let ([a 1])
                                                 a)
                                              (let ([a 2])
                                                 a))
                                           )
                                     (let ([a (if (> 3 1)
                                                 (let ([a 1])
                                                    a)
                                                 (let ([a 2])
                                                    a))
                                              ])
                                        a)
                                     (let ([a 2])
                                        a))
                                  
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                             (let ([a 1])
                                                                                a)
                                                                             (let ([a 2])
                                                                                a))
                                                                          )
                                                                    (let ([a (if (> 3 1)
                                                                                (let ([a 1])
                                                                                   a)
                                                                                (let ([a 2])
                                                                                   a))
                                                                             ])
                                                                       a)
                                                                    (let ([a 2])
                                                                       a))
                                                                 )
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (if (> 3 (if (> 3 1)
                                                      (let ([a 1])
                                                         a)
                                                      (let ([a 2])
                                                         a))
                                                   )
                                             (let ([a (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      ])
                                                a)
                                             (let ([a 2])
                                                a))
                                          
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                     (let ([a 1])
                                                                                        a)
                                                                                     (let ([a 2])
                                                                                        a))
                                                                                  )
                                                                            (let ([a (if (> 3 1)
                                                                                        (let ([a 1])
                                                                                           a)
                                                                                        (let ([a 2])
                                                                                           a))
                                                                                     ])
                                                                               a)
                                                                            (let ([a 2])
                                                                               a))
                                                                         )
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (if (> 3 (if (> 3 1)
                                                              (let ([a 1])
                                                                 a)
                                                              (let ([a 2])
                                                                 a))
                                                           )
                                                     (let ([a (if (> 3 1)
                                                                 (let ([a 1])
                                                                    a)
                                                                 (let ([a 2])
                                                                    a))
                                                              ])
                                                        a)
                                                     (let ([a 2])
                                                        a))
                                                  
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                  (let ([a 1])
                                                                                                     a)
                                                                                                  (let ([a 2])
                                                                                                     a))
                                                                                               )
                                                                                         (let ([a (if (> 3 1)
                                                                                                     (let ([a 1])
                                                                                                        a)
                                                                                                     (let ([a 2])
                                                                                                        a))
                                                                                                  ])
                                                                                            a)
                                                                                         (let ([a 2])
                                                                                            a))
                                                                                      )
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               (if (> 3 (if (> 3 1)
                                                                           (let ([a 1])
                                                                              a)
                                                                           (let ([a 2])
                                                                              a))
                                                                        )
                                                                  (let ([a (if (> 3 1)
                                                                              (let ([a 1])
                                                                                 a)
                                                                              (let ([a 2])
                                                                                 a))
                                                                           ])
                                                                     a)
                                                                  (let ([a 2])
                                                                     a))
                                                               
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                          (let ([a 1])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       )
                                                                                                 (let ([a (if (> 3 1)
                                                                                                             (let ([a 1])
                                                                                                                a)
                                                                                                             (let ([a 2])
                                                                                                                a))
                                                                                                          ])
                                                                                                    a)
                                                                                                 (let ([a 2])
                                                                                                    a))
                                                                                              )
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (if (> 3 (if (> 3 1)
                                                                                   (let ([a 1])
                                                                                      a)
                                                                                   (let ([a 2])
                                                                                      a))
                                                                                )
                                                                          (let ([a (if (> 3 1)
                                                                                      (let ([a 1])
                                                                                         a)
                                                                                      (let ([a 2])
                                                                                         a))
                                                                                   ])
                                                                             a)
                                                                          (let ([a 2])
                                                                             a))
                                                                       
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                  (let ([a 1])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               )
                                                                                                         (let ([a (if (> 3 1)
                                                                                                                     (let ([a 1])
                                                                                                                        a)
                                                                                                                     (let ([a 2])
                                                                                                                        a))
                                                                                                                  ])
                                                                                                            a)
                                                                                                         (let ([a 2])
                                                                                                            a))
                                                                                                      )
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (if (> 3 (if (> 3 1)
                                                                                           (let ([a 1])
                                                                                              a)
                                                                                           (let ([a 2])
                                                                                              a))
                                                                                        )
                                                                                  (let ([a (if (> 3 1)
                                                                                              (let ([a 1])
                                                                                                 a)
                                                                                              (let ([a 2])
                                                                                                 a))
                                                                                           ])
                                                                                     a)
                                                                                  (let ([a 2])
                                                                                     a))
                                                                               
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                          (let ([a 1])
                                                                                                                             a)
                                                                                                                          (let ([a 2])
                                                                                                                             a))
                                                                                                                       )
                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                             (let ([a 1])
                                                                                                                                a)
                                                                                                                             (let ([a 2])
                                                                                                                                a))
                                                                                                                          ])
                                                                                                                    a)
                                                                                                                 (let ([a 2])
                                                                                                                    a))
                                                                                                              )
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (if (> 3 (if (> 3 1)
                                                                                                   (let ([a 1])
                                                                                                      a)
                                                                                                   (let ([a 2])
                                                                                                      a))
                                                                                                )
                                                                                          (let ([a (if (> 3 1)
                                                                                                      (let ([a 1])
                                                                                                         a)
                                                                                                      (let ([a 2])
                                                                                                         a))
                                                                                                   ])
                                                                                             a)
                                                                                          (let ([a 2])
                                                                                             a))
                                                                                       
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                          (let ([a 1])
                                                                                                                                             a)
                                                                                                                                          (let ([a 2])
                                                                                                                                             a))
                                                                                                                                       )
                                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                                             (let ([a 1])
                                                                                                                                                a)
                                                                                                                                             (let ([a 2])
                                                                                                                                                a))
                                                                                                                                          ])
                                                                                                                                    a)
                                                                                                                                 (let ([a 2])
                                                                                                                                    a))
                                                                                                                              )
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       (if (> 3 (if (> 3 1)
                                                                                                                   (let ([a 1])
                                                                                                                      a)
                                                                                                                   (let ([a 2])
                                                                                                                      a))
                                                                                                                )
                                                                                                          (let ([a (if (> 3 1)
                                                                                                                      (let ([a 1])
                                                                                                                         a)
                                                                                                                      (let ([a 2])
                                                                                                                         a))
                                                                                                                   ])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                  (let ([a 1])
                                                                                                                                                     a)
                                                                                                                                                  (let ([a 2])
                                                                                                                                                     a))
                                                                                                                                               )
                                                                                                                                         (let ([a (if (> 3 1)
                                                                                                                                                     (let ([a 1])
                                                                                                                                                        a)
                                                                                                                                                     (let ([a 2])
                                                                                                                                                        a))
                                                                                                                                                  ])
                                                                                                                                            a)
                                                                                                                                         (let ([a 2])
                                                                                                                                            a))
                                                                                                                                      )
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (if (> 3 (if (> 3 1)
                                                                                                                           (let ([a 1])
                                                                                                                              a)
                                                                                                                           (let ([a 2])
                                                                                                                              a))
                                                                                                                        )
                                                                                                                  (let ([a (if (> 3 1)
                                                                                                                              (let ([a 1])
                                                                                                                                 a)
                                                                                                                              (let ([a 2])
                                                                                                                                 a))
                                                                                                                           ])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (if (> (if (>= (if (> 3 (if (> 3 1)
                                    (let ([a 1])
                                       a)
                                    (let ([a 2])
                                       a))
                                 )
                           (let ([a (if (> 3 1)
                                       (let ([a 1])
                                          a)
                                       (let ([a 2])
                                          a))
                                    ])
                              a)
                           (let ([a 2])
                              a))
                         (if (> 3 (if (> 3 1)
                                     (let ([a 1])
                                        a)
                                     (let ([a 2])
                                        a))
                                  )
                            (let ([a (if (> 3 1)
                                        (let ([a 1])
                                           a)
                                        (let ([a 2])
                                           a))
                                     ])
                               a)
                            (let ([a 2])
                               a))
                         )
                   8
                   9)
                 8)
            #t
            #f)
         ])
   (if x
      (if (> 3 (if (> 3 1)
                  (let ([a 1])
                     a)
                  (let ([a 2])
                     a))
               )
         (let ([a (if (> 3 1)
                     (let ([a 1])
                        a)
                     (let ([a 2])
                        a))
                  ])
            a)
         (let ([a 2])
            a))
      
      (let ([a (if (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      )
                                                (let ([a (if (> 3 1)
                                                            (let ([a 1])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         ])
                                                   a)
                                                (let ([a 2])
                                                   a))
                                             )
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (let ([a #t])
                             a)
                          (let ([a #f])
                             a))
                       
                      #t
                      #f)
                   
                  (if (> 3 (if (> 3 1)
                              (let ([a 1])
                                 a)
                              (let ([a 2])
                                 a))
                           )
                     (let ([a (if (> 3 1)
                                 (let ([a 1])
                                    a)
                                 (let ([a 2])
                                    a))
                              ])
                        a)
                     (let ([a 2])
                        a))
                  
                  2)
               ])
         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                             (let ([a 1])
                                                                a)
                                                             (let ([a 2])
                                                                a))
                                                          )
                                                    (let ([a (if (> 3 1)
                                                                (let ([a 1])
                                                                   a)
                                                                (let ([a 2])
                                                                   a))
                                                             ])
                                                       a)
                                                    (let ([a 2])
                                                       a))
                                                 )
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (let ([a #t])
                                     a)
                                  (let ([a #f])
                                     a))
                               
                              (let ([a #t])
                                 a)
                              (let ([a #f])
                                 a))
                           
                          (if (> 3 (if (> 3 1)
                                      (let ([a 1])
                                         a)
                                      (let ([a 2])
                                         a))
                                   )
                             (let ([a (if (> 3 1)
                                         (let ([a 1])
                                            a)
                                         (let ([a 2])
                                            a))
                                      ])
                                a)
                             (let ([a 2])
                                a))
                          
                          2)
                       ])
                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                     (let ([a 1])
                                                                        a)
                                                                     (let ([a 2])
                                                                        a))
                                                                  )
                                                            (let ([a (if (> 3 1)
                                                                        (let ([a 1])
                                                                           a)
                                                                        (let ([a 2])
                                                                           a))
                                                                     ])
                                                               a)
                                                            (let ([a 2])
                                                               a))
                                                         )
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (let ([a #t])
                                             a)
                                          (let ([a #f])
                                             a))
                                       
                                      (let ([a #t])
                                         a)
                                      (let ([a #f])
                                         a))
                                   
                                  (if (> 3 (if (> 3 1)
                                              (let ([a 1])
                                                 a)
                                              (let ([a 2])
                                                 a))
                                           )
                                     (let ([a (if (> 3 1)
                                                 (let ([a 1])
                                                    a)
                                                 (let ([a 2])
                                                    a))
                                              ])
                                        a)
                                     (let ([a 2])
                                        a))
                                  
                                  2)
                               ])
                         (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                             (let ([a 1])
                                                                                a)
                                                                             (let ([a 2])
                                                                                a))
                                                                          )
                                                                    (let ([a (if (> 3 1)
                                                                                (let ([a 1])
                                                                                   a)
                                                                                (let ([a 2])
                                                                                   a))
                                                                             ])
                                                                       a)
                                                                    (let ([a 2])
                                                                       a))
                                                                 )
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (let ([a #t])
                                                     a)
                                                  (let ([a #f])
                                                     a))
                                               
                                              (let ([a #t])
                                                 a)
                                              (let ([a #f])
                                                 a))
                                           
                                          (if (> 3 (if (> 3 1)
                                                      (let ([a 1])
                                                         a)
                                                      (let ([a 2])
                                                         a))
                                                   )
                                             (let ([a (if (> 3 1)
                                                         (let ([a 1])
                                                            a)
                                                         (let ([a 2])
                                                            a))
                                                      ])
                                                a)
                                             (let ([a 2])
                                                a))
                                          
                                          2)
                                       ])
                                 (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                     (let ([a 1])
                                                                                        a)
                                                                                     (let ([a 2])
                                                                                        a))
                                                                                  )
                                                                            (let ([a (if (> 3 1)
                                                                                        (let ([a 1])
                                                                                           a)
                                                                                        (let ([a 2])
                                                                                           a))
                                                                                     ])
                                                                               a)
                                                                            (let ([a 2])
                                                                               a))
                                                                         )
                                                              (let ([a #t])
                                                                 a)
                                                              (let ([a #f])
                                                                 a))
                                                           
                                                          (let ([a #t])
                                                             a)
                                                          (let ([a #f])
                                                             a))
                                                       
                                                      (let ([a #t])
                                                         a)
                                                      (let ([a #f])
                                                         a))
                                                   
                                                  (if (> 3 (if (> 3 1)
                                                              (let ([a 1])
                                                                 a)
                                                              (let ([a 2])
                                                                 a))
                                                           )
                                                     (let ([a (if (> 3 1)
                                                                 (let ([a 1])
                                                                    a)
                                                                 (let ([a 2])
                                                                    a))
                                                              ])
                                                        a)
                                                     (let ([a 2])
                                                        a))
                                                  
                                                  2)
                                               ])
                                         (+ (read) (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                  (let ([a 1])
                                                                                                     a)
                                                                                                  (let ([a 2])
                                                                                                     a))
                                                                                               )
                                                                                         (let ([a (if (> 3 1)
                                                                                                     (let ([a 1])
                                                                                                        a)
                                                                                                     (let ([a 2])
                                                                                                        a))
                                                                                                  ])
                                                                                            a)
                                                                                         (let ([a 2])
                                                                                            a))
                                                                                      )
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (let ([a #t])
                                                                          a)
                                                                       (let ([a #f])
                                                                          a))
                                                                    
                                                                   (let ([a #t])
                                                                      a)
                                                                   (let ([a #f])
                                                                      a))
                                                                
                                                               (if (> 3 (if (> 3 1)
                                                                           (let ([a 1])
                                                                              a)
                                                                           (let ([a 2])
                                                                              a))
                                                                        )
                                                                  (let ([a (if (> 3 1)
                                                                              (let ([a 1])
                                                                                 a)
                                                                              (let ([a 2])
                                                                                 a))
                                                                           ])
                                                                     a)
                                                                  (let ([a 2])
                                                                     a))
                                                               
                                                               2)
                                                            ])
                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                          (let ([a 1])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       )
                                                                                                 (let ([a (if (> 3 1)
                                                                                                             (let ([a 1])
                                                                                                                a)
                                                                                                             (let ([a 2])
                                                                                                                a))
                                                                                                          ])
                                                                                                    a)
                                                                                                 (let ([a 2])
                                                                                                    a))
                                                                                              )
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (let ([a #t])
                                                                                  a)
                                                                               (let ([a #f])
                                                                                  a))
                                                                            
                                                                           (let ([a #t])
                                                                              a)
                                                                           (let ([a #f])
                                                                              a))
                                                                        
                                                                       (if (> 3 (if (> 3 1)
                                                                                   (let ([a 1])
                                                                                      a)
                                                                                   (let ([a 2])
                                                                                      a))
                                                                                )
                                                                          (let ([a (if (> 3 1)
                                                                                      (let ([a 1])
                                                                                         a)
                                                                                      (let ([a 2])
                                                                                         a))
                                                                                   ])
                                                                             a)
                                                                          (let ([a 2])
                                                                             a))
                                                                       
                                                                       2)
                                                                    ])
                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                  (let ([a 1])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               )
                                                                                                         (let ([a (if (> 3 1)
                                                                                                                     (let ([a 1])
                                                                                                                        a)
                                                                                                                     (let ([a 2])
                                                                                                                        a))
                                                                                                                  ])
                                                                                                            a)
                                                                                                         (let ([a 2])
                                                                                                            a))
                                                                                                      )
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (let ([a #t])
                                                                                          a)
                                                                                       (let ([a #f])
                                                                                          a))
                                                                                    
                                                                                   (let ([a #t])
                                                                                      a)
                                                                                   (let ([a #f])
                                                                                      a))
                                                                                
                                                                               (if (> 3 (if (> 3 1)
                                                                                           (let ([a 1])
                                                                                              a)
                                                                                           (let ([a 2])
                                                                                              a))
                                                                                        )
                                                                                  (let ([a (if (> 3 1)
                                                                                              (let ([a 1])
                                                                                                 a)
                                                                                              (let ([a 2])
                                                                                                 a))
                                                                                           ])
                                                                                     a)
                                                                                  (let ([a 2])
                                                                                     a))
                                                                               
                                                                               2)
                                                                            ])
                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                          (let ([a 1])
                                                                                                                             a)
                                                                                                                          (let ([a 2])
                                                                                                                             a))
                                                                                                                       )
                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                             (let ([a 1])
                                                                                                                                a)
                                                                                                                             (let ([a 2])
                                                                                                                                a))
                                                                                                                          ])
                                                                                                                    a)
                                                                                                                 (let ([a 2])
                                                                                                                    a))
                                                                                                              )
                                                                                                   (let ([a #t])
                                                                                                      a)
                                                                                                   (let ([a #f])
                                                                                                      a))
                                                                                                
                                                                                               (let ([a #t])
                                                                                                  a)
                                                                                               (let ([a #f])
                                                                                                  a))
                                                                                            
                                                                                           (let ([a #t])
                                                                                              a)
                                                                                           (let ([a #f])
                                                                                              a))
                                                                                        
                                                                                       (if (> 3 (if (> 3 1)
                                                                                                   (let ([a 1])
                                                                                                      a)
                                                                                                   (let ([a 2])
                                                                                                      a))
                                                                                                )
                                                                                          (let ([a (if (> 3 1)
                                                                                                      (let ([a 1])
                                                                                                         a)
                                                                                                      (let ([a 2])
                                                                                                         a))
                                                                                                   ])
                                                                                             a)
                                                                                          (let ([a 2])
                                                                                             a))
                                                                                       
                                                                                       2)
                                                                                    ])
                                                                              (+ a (let ([a (read)])
                                                                                      (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                          (let ([a 1])
                                                                                                                                             a)
                                                                                                                                          (let ([a 2])
                                                                                                                                             a))
                                                                                                                                       )
                                                                                                                                 (let ([a (if (> 3 1)
                                                                                                                                             (let ([a 1])
                                                                                                                                                a)
                                                                                                                                             (let ([a 2])
                                                                                                                                                a))
                                                                                                                                          ])
                                                                                                                                    a)
                                                                                                                                 (let ([a 2])
                                                                                                                                    a))
                                                                                                                              )
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (let ([a #t])
                                                                                                                  a)
                                                                                                               (let ([a #f])
                                                                                                                  a))
                                                                                                            
                                                                                                           (let ([a #t])
                                                                                                              a)
                                                                                                           (let ([a #f])
                                                                                                              a))
                                                                                                        
                                                                                                       (if (> 3 (if (> 3 1)
                                                                                                                   (let ([a 1])
                                                                                                                      a)
                                                                                                                   (let ([a 2])
                                                                                                                      a))
                                                                                                                )
                                                                                                          (let ([a (if (> 3 1)
                                                                                                                      (let ([a 1])
                                                                                                                         a)
                                                                                                                      (let ([a 2])
                                                                                                                         a))
                                                                                                                   ])
                                                                                                             a)
                                                                                                          (let ([a 2])
                                                                                                             a))
                                                                                                       
                                                                                                       2)
                                                                                                    ])
                                                                                              (+ a (let ([a (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                  (let ([a 1])
                                                                                                                                                     a)
                                                                                                                                                  (let ([a 2])
                                                                                                                                                     a))
                                                                                                                                               )
                                                                                                                                         (let ([a (if (> 3 1)
                                                                                                                                                     (let ([a 1])
                                                                                                                                                        a)
                                                                                                                                                     (let ([a 2])
                                                                                                                                                        a))
                                                                                                                                                  ])
                                                                                                                                            a)
                                                                                                                                         (let ([a 2])
                                                                                                                                            a))
                                                                                                                                      )
                                                                                                                           (let ([a #t])
                                                                                                                              a)
                                                                                                                           (let ([a #f])
                                                                                                                              a))
                                                                                                                        
                                                                                                                       (let ([a #t])
                                                                                                                          a)
                                                                                                                       (let ([a #f])
                                                                                                                          a))
                                                                                                                    
                                                                                                                   (let ([a #t])
                                                                                                                      a)
                                                                                                                   (let ([a #f])
                                                                                                                      a))
                                                                                                                
                                                                                                               (if (> 3 (if (> 3 1)
                                                                                                                           (let ([a 1])
                                                                                                                              a)
                                                                                                                           (let ([a 2])
                                                                                                                              a))
                                                                                                                        )
                                                                                                                  (let ([a (if (> 3 1)
                                                                                                                              (let ([a 1])
                                                                                                                                 a)
                                                                                                                              (let ([a 2])
                                                                                                                                 a))
                                                                                                                           ])
                                                                                                                     a)
                                                                                                                  (let ([a 2])
                                                                                                                     a))
                                                                                                               
                                                                                                               2)
                                                                                                            ])
                                                                                                      a))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22956 (if (> (if (>= (if (> 3 (if (> 3 1)
                                         (let ([a22957 1])
                                            a22957)
                                         (let ([a22958 2])
                                            a22958))
                                      )
                                (let ([a22959 (if (> 3 1)
                                                 (let ([a22960 1])
                                                    a22960)
                                                 (let ([a22961 2])
                                                    a22961))
                                              ])
                                   a22959)
                                (let ([a22962 2])
                                   a22962))
                              (if (> 3 (if (> 3 1)
                                          (let ([a22963 1])
                                             a22963)
                                          (let ([a22964 2])
                                             a22964))
                                       )
                                 (let ([a22965 (if (> 3 1)
                                                  (let ([a22966 1])
                                                     a22966)
                                                  (let ([a22967 2])
                                                     a22967))
                                               ])
                                    a22965)
                                 (let ([a22968 2])
                                    a22968))
                              )
                        8
                        9)
                      8)
                 #t
                 #f)
              ])
   (if x22956
      (if (> 3 (if (> 3 1)
                  (let ([a22969 1])
                     a22969)
                  (let ([a22970 2])
                     a22970))
               )
         (let ([a22971 (if (> 3 1)
                          (let ([a22972 1])
                             a22972)
                          (let ([a22973 2])
                             a22973))
                       ])
            a22971)
         (let ([a22974 2])
            a22974))
      
      (let ([a22975 (if (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                              (let ([a22976 1])
                                                                 a22976)
                                                              (let ([a22977 2])
                                                                 a22977))
                                                           )
                                                     (let ([a22978 (if (> 3 1)
                                                                      (let ([a22979 1])
                                                                         a22979)
                                                                      (let ([a22980 2])
                                                                         a22980))
                                                                   ])
                                                        a22978)
                                                     (let ([a22981 2])
                                                        a22981))
                                                  )
                                       (let ([a22982 #t])
                                          a22982)
                                       (let ([a22983 #f])
                                          a22983))
                                    
                                   (let ([a22984 #t])
                                      a22984)
                                   (let ([a22985 #f])
                                      a22985))
                                
                               (let ([a22986 #t])
                                  a22986)
                               (let ([a22987 #f])
                                  a22987))
                            
                           #t
                           #f)
                        
                       (if (> 3 (if (> 3 1)
                                   (let ([a22988 1])
                                      a22988)
                                   (let ([a22989 2])
                                      a22989))
                                )
                          (let ([a22990 (if (> 3 1)
                                           (let ([a22991 1])
                                              a22991)
                                           (let ([a22992 2])
                                              a22992))
                                        ])
                             a22990)
                          (let ([a22993 2])
                             a22993))
                       
                       2)
                    ])
         (+ a22975 (let ([a22994 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                       (let ([a22995 1])
                                                                          a22995)
                                                                       (let ([a22996 2])
                                                                          a22996))
                                                                    )
                                                              (let ([a22997 (if (> 3 1)
                                                                               (let ([a22998 1])
                                                                                  a22998)
                                                                               (let ([a22999 2])
                                                                                  a22999))
                                                                            ])
                                                                 a22997)
                                                              (let ([a23000 2])
                                                                 a23000))
                                                           )
                                                (let ([a23001 #t])
                                                   a23001)
                                                (let ([a23002 #f])
                                                   a23002))
                                             
                                            (let ([a23003 #t])
                                               a23003)
                                            (let ([a23004 #f])
                                               a23004))
                                         
                                        (let ([a23005 #t])
                                           a23005)
                                        (let ([a23006 #f])
                                           a23006))
                                     
                                    (if (> 3 (if (> 3 1)
                                                (let ([a23007 1])
                                                   a23007)
                                                (let ([a23008 2])
                                                   a23008))
                                             )
                                       (let ([a23009 (if (> 3 1)
                                                        (let ([a23010 1])
                                                           a23010)
                                                        (let ([a23011 2])
                                                           a23011))
                                                     ])
                                          a23009)
                                       (let ([a23012 2])
                                          a23012))
                                    
                                    2)
                                 ])
                      (+ a22994 (let ([a23013 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                    (let ([a23014 1])
                                                                                       a23014)
                                                                                    (let ([a23015 2])
                                                                                       a23015))
                                                                                 )
                                                                           (let ([a23016 (if (> 3 1)
                                                                                            (let ([a23017 1])
                                                                                               a23017)
                                                                                            (let ([a23018 2])
                                                                                               a23018))
                                                                                         ])
                                                                              a23016)
                                                                           (let ([a23019 2])
                                                                              a23019))
                                                                        )
                                                             (let ([a23020 #t])
                                                                a23020)
                                                             (let ([a23021 #f])
                                                                a23021))
                                                          
                                                         (let ([a23022 #t])
                                                            a23022)
                                                         (let ([a23023 #f])
                                                            a23023))
                                                      
                                                     (let ([a23024 #t])
                                                        a23024)
                                                     (let ([a23025 #f])
                                                        a23025))
                                                  
                                                 (if (> 3 (if (> 3 1)
                                                             (let ([a23026 1])
                                                                a23026)
                                                             (let ([a23027 2])
                                                                a23027))
                                                          )
                                                    (let ([a23028 (if (> 3 1)
                                                                     (let ([a23029 1])
                                                                        a23029)
                                                                     (let ([a23030 2])
                                                                        a23030))
                                                                  ])
                                                       a23028)
                                                    (let ([a23031 2])
                                                       a23031))
                                                 
                                                 2)
                                              ])
                                   (+ a23013 (let ([a23032 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                 (let ([a23033 1])
                                                                                                    a23033)
                                                                                                 (let ([a23034 2])
                                                                                                    a23034))
                                                                                              )
                                                                                        (let ([a23035 (if (> 3 1)
                                                                                                         (let ([a23036 1])
                                                                                                            a23036)
                                                                                                         (let ([a23037 2])
                                                                                                            a23037))
                                                                                                      ])
                                                                                           a23035)
                                                                                        (let ([a23038 2])
                                                                                           a23038))
                                                                                     )
                                                                          (let ([a23039 #t])
                                                                             a23039)
                                                                          (let ([a23040 #f])
                                                                             a23040))
                                                                       
                                                                      (let ([a23041 #t])
                                                                         a23041)
                                                                      (let ([a23042 #f])
                                                                         a23042))
                                                                   
                                                                  (let ([a23043 #t])
                                                                     a23043)
                                                                  (let ([a23044 #f])
                                                                     a23044))
                                                               
                                                              (if (> 3 (if (> 3 1)
                                                                          (let ([a23045 1])
                                                                             a23045)
                                                                          (let ([a23046 2])
                                                                             a23046))
                                                                       )
                                                                 (let ([a23047 (if (> 3 1)
                                                                                  (let ([a23048 1])
                                                                                     a23048)
                                                                                  (let ([a23049 2])
                                                                                     a23049))
                                                                               ])
                                                                    a23047)
                                                                 (let ([a23050 2])
                                                                    a23050))
                                                              
                                                              2)
                                                           ])
                                                (+ a23032 (let ([a23051 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                              (let ([a23052 1])
                                                                                                                 a23052)
                                                                                                              (let ([a23053 2])
                                                                                                                 a23053))
                                                                                                           )
                                                                                                     (let ([a23054 (if (> 3 1)
                                                                                                                      (let ([a23055 1])
                                                                                                                         a23055)
                                                                                                                      (let ([a23056 2])
                                                                                                                         a23056))
                                                                                                                   ])
                                                                                                        a23054)
                                                                                                     (let ([a23057 2])
                                                                                                        a23057))
                                                                                                  )
                                                                                       (let ([a23058 #t])
                                                                                          a23058)
                                                                                       (let ([a23059 #f])
                                                                                          a23059))
                                                                                    
                                                                                   (let ([a23060 #t])
                                                                                      a23060)
                                                                                   (let ([a23061 #f])
                                                                                      a23061))
                                                                                
                                                                               (let ([a23062 #t])
                                                                                  a23062)
                                                                               (let ([a23063 #f])
                                                                                  a23063))
                                                                            
                                                                           (if (> 3 (if (> 3 1)
                                                                                       (let ([a23064 1])
                                                                                          a23064)
                                                                                       (let ([a23065 2])
                                                                                          a23065))
                                                                                    )
                                                                              (let ([a23066 (if (> 3 1)
                                                                                               (let ([a23067 1])
                                                                                                  a23067)
                                                                                               (let ([a23068 2])
                                                                                                  a23068))
                                                                                            ])
                                                                                 a23066)
                                                                              (let ([a23069 2])
                                                                                 a23069))
                                                                           
                                                                           2)
                                                                        ])
                                                             (+ (read) (let ([a23070 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                           (let ([a23071 1])
                                                                                                                              a23071)
                                                                                                                           (let ([a23072 2])
                                                                                                                              a23072))
                                                                                                                        )
                                                                                                                  (let ([a23073 (if (> 3 1)
                                                                                                                                   (let ([a23074 1])
                                                                                                                                      a23074)
                                                                                                                                   (let ([a23075 2])
                                                                                                                                      a23075))
                                                                                                                                ])
                                                                                                                     a23073)
                                                                                                                  (let ([a23076 2])
                                                                                                                     a23076))
                                                                                                               )
                                                                                                    (let ([a23077 #t])
                                                                                                       a23077)
                                                                                                    (let ([a23078 #f])
                                                                                                       a23078))
                                                                                                 
                                                                                                (let ([a23079 #t])
                                                                                                   a23079)
                                                                                                (let ([a23080 #f])
                                                                                                   a23080))
                                                                                             
                                                                                            (let ([a23081 #t])
                                                                                               a23081)
                                                                                            (let ([a23082 #f])
                                                                                               a23082))
                                                                                         
                                                                                        (if (> 3 (if (> 3 1)
                                                                                                    (let ([a23083 1])
                                                                                                       a23083)
                                                                                                    (let ([a23084 2])
                                                                                                       a23084))
                                                                                                 )
                                                                                           (let ([a23085 (if (> 3 1)
                                                                                                            (let ([a23086 1])
                                                                                                               a23086)
                                                                                                            (let ([a23087 2])
                                                                                                               a23087))
                                                                                                         ])
                                                                                              a23085)
                                                                                           (let ([a23088 2])
                                                                                              a23088))
                                                                                        
                                                                                        2)
                                                                                     ])
                                                                          (+ a23070 (let ([a23089 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                        (let ([a23090 1])
                                                                                                                                           a23090)
                                                                                                                                        (let ([a23091 2])
                                                                                                                                           a23091))
                                                                                                                                     )
                                                                                                                               (let ([a23092 (if (> 3 1)
                                                                                                                                                (let ([a23093 1])
                                                                                                                                                   a23093)
                                                                                                                                                (let ([a23094 2])
                                                                                                                                                   a23094))
                                                                                                                                             ])
                                                                                                                                  a23092)
                                                                                                                               (let ([a23095 2])
                                                                                                                                  a23095))
                                                                                                                            )
                                                                                                                 (let ([a23096 #t])
                                                                                                                    a23096)
                                                                                                                 (let ([a23097 #f])
                                                                                                                    a23097))
                                                                                                              
                                                                                                             (let ([a23098 #t])
                                                                                                                a23098)
                                                                                                             (let ([a23099 #f])
                                                                                                                a23099))
                                                                                                          
                                                                                                         (let ([a23100 #t])
                                                                                                            a23100)
                                                                                                         (let ([a23101 #f])
                                                                                                            a23101))
                                                                                                      
                                                                                                     (if (> 3 (if (> 3 1)
                                                                                                                 (let ([a23102 1])
                                                                                                                    a23102)
                                                                                                                 (let ([a23103 2])
                                                                                                                    a23103))
                                                                                                              )
                                                                                                        (let ([a23104 (if (> 3 1)
                                                                                                                         (let ([a23105 1])
                                                                                                                            a23105)
                                                                                                                         (let ([a23106 2])
                                                                                                                            a23106))
                                                                                                                      ])
                                                                                                           a23104)
                                                                                                        (let ([a23107 2])
                                                                                                           a23107))
                                                                                                     
                                                                                                     2)
                                                                                                  ])
                                                                                       (+ a23089 (let ([a23108 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                     (let ([a23109 1])
                                                                                                                                                        a23109)
                                                                                                                                                     (let ([a23110 2])
                                                                                                                                                        a23110))
                                                                                                                                                  )
                                                                                                                                            (let ([a23111 (if (> 3 1)
                                                                                                                                                             (let ([a23112 1])
                                                                                                                                                                a23112)
                                                                                                                                                             (let ([a23113 2])
                                                                                                                                                                a23113))
                                                                                                                                                          ])
                                                                                                                                               a23111)
                                                                                                                                            (let ([a23114 2])
                                                                                                                                               a23114))
                                                                                                                                         )
                                                                                                                              (let ([a23115 #t])
                                                                                                                                 a23115)
                                                                                                                              (let ([a23116 #f])
                                                                                                                                 a23116))
                                                                                                                           
                                                                                                                          (let ([a23117 #t])
                                                                                                                             a23117)
                                                                                                                          (let ([a23118 #f])
                                                                                                                             a23118))
                                                                                                                       
                                                                                                                      (let ([a23119 #t])
                                                                                                                         a23119)
                                                                                                                      (let ([a23120 #f])
                                                                                                                         a23120))
                                                                                                                   
                                                                                                                  (if (> 3 (if (> 3 1)
                                                                                                                              (let ([a23121 1])
                                                                                                                                 a23121)
                                                                                                                              (let ([a23122 2])
                                                                                                                                 a23122))
                                                                                                                           )
                                                                                                                     (let ([a23123 (if (> 3 1)
                                                                                                                                      (let ([a23124 1])
                                                                                                                                         a23124)
                                                                                                                                      (let ([a23125 2])
                                                                                                                                         a23125))
                                                                                                                                   ])
                                                                                                                        a23123)
                                                                                                                     (let ([a23126 2])
                                                                                                                        a23126))
                                                                                                                  
                                                                                                                  2)
                                                                                                               ])
                                                                                                    (+ a23108 (let ([a23127 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                                  (let ([a23128 1])
                                                                                                                                                                     a23128)
                                                                                                                                                                  (let ([a23129 2])
                                                                                                                                                                     a23129))
                                                                                                                                                               )
                                                                                                                                                         (let ([a23130 (if (> 3 1)
                                                                                                                                                                          (let ([a23131 1])
                                                                                                                                                                             a23131)
                                                                                                                                                                          (let ([a23132 2])
                                                                                                                                                                             a23132))
                                                                                                                                                                       ])
                                                                                                                                                            a23130)
                                                                                                                                                         (let ([a23133 2])
                                                                                                                                                            a23133))
                                                                                                                                                      )
                                                                                                                                           (let ([a23134 #t])
                                                                                                                                              a23134)
                                                                                                                                           (let ([a23135 #f])
                                                                                                                                              a23135))
                                                                                                                                        
                                                                                                                                       (let ([a23136 #t])
                                                                                                                                          a23136)
                                                                                                                                       (let ([a23137 #f])
                                                                                                                                          a23137))
                                                                                                                                    
                                                                                                                                   (let ([a23138 #t])
                                                                                                                                      a23138)
                                                                                                                                   (let ([a23139 #f])
                                                                                                                                      a23139))
                                                                                                                                
                                                                                                                               (if (> 3 (if (> 3 1)
                                                                                                                                           (let ([a23140 1])
                                                                                                                                              a23140)
                                                                                                                                           (let ([a23141 2])
                                                                                                                                              a23141))
                                                                                                                                        )
                                                                                                                                  (let ([a23142 (if (> 3 1)
                                                                                                                                                   (let ([a23143 1])
                                                                                                                                                      a23143)
                                                                                                                                                   (let ([a23144 2])
                                                                                                                                                      a23144))
                                                                                                                                                ])
                                                                                                                                     a23142)
                                                                                                                                  (let ([a23145 2])
                                                                                                                                     a23145))
                                                                                                                               
                                                                                                                               2)
                                                                                                                            ])
                                                                                                                 (+ a23127 (let ([a23146 (read)])
                                                                                                                              (+ a23146 (let ([a23147 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                                                            (let ([a23148 1])
                                                                                                                                                                                               a23148)
                                                                                                                                                                                            (let ([a23149 2])
                                                                                                                                                                                               a23149))
                                                                                                                                                                                         )
                                                                                                                                                                                   (let ([a23150 (if (> 3 1)
                                                                                                                                                                                                    (let ([a23151 1])
                                                                                                                                                                                                       a23151)
                                                                                                                                                                                                    (let ([a23152 2])
                                                                                                                                                                                                       a23152))
                                                                                                                                                                                                 ])
                                                                                                                                                                                      a23150)
                                                                                                                                                                                   (let ([a23153 2])
                                                                                                                                                                                      a23153))
                                                                                                                                                                                )
                                                                                                                                                                     (let ([a23154 #t])
                                                                                                                                                                        a23154)
                                                                                                                                                                     (let ([a23155 #f])
                                                                                                                                                                        a23155))
                                                                                                                                                                  
                                                                                                                                                                 (let ([a23156 #t])
                                                                                                                                                                    a23156)
                                                                                                                                                                 (let ([a23157 #f])
                                                                                                                                                                    a23157))
                                                                                                                                                              
                                                                                                                                                             (let ([a23158 #t])
                                                                                                                                                                a23158)
                                                                                                                                                             (let ([a23159 #f])
                                                                                                                                                                a23159))
                                                                                                                                                          
                                                                                                                                                         (if (> 3 (if (> 3 1)
                                                                                                                                                                     (let ([a23160 1])
                                                                                                                                                                        a23160)
                                                                                                                                                                     (let ([a23161 2])
                                                                                                                                                                        a23161))
                                                                                                                                                                  )
                                                                                                                                                            (let ([a23162 (if (> 3 1)
                                                                                                                                                                             (let ([a23163 1])
                                                                                                                                                                                a23163)
                                                                                                                                                                             (let ([a23164 2])
                                                                                                                                                                                a23164))
                                                                                                                                                                          ])
                                                                                                                                                               a23162)
                                                                                                                                                            (let ([a23165 2])
                                                                                                                                                               a23165))
                                                                                                                                                         
                                                                                                                                                         2)
                                                                                                                                                      ])
                                                                                                                                           (+ a23147 (let ([a23166 (if (if (if (if (> (read) (if (> 3 (if (> 3 1)
                                                                                                                                                                                                         (let ([a23167 1])
                                                                                                                                                                                                            a23167)
                                                                                                                                                                                                         (let ([a23168 2])
                                                                                                                                                                                                            a23168))
                                                                                                                                                                                                      )
                                                                                                                                                                                                (let ([a23169 (if (> 3 1)
                                                                                                                                                                                                                 (let ([a23170 1])
                                                                                                                                                                                                                    a23170)
                                                                                                                                                                                                                 (let ([a23171 2])
                                                                                                                                                                                                                    a23171))
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   a23169)
                                                                                                                                                                                                (let ([a23172 2])
                                                                                                                                                                                                   a23172))
                                                                                                                                                                                             )
                                                                                                                                                                                  (let ([a23173 #t])
                                                                                                                                                                                     a23173)
                                                                                                                                                                                  (let ([a23174 #f])
                                                                                                                                                                                     a23174))
                                                                                                                                                                               
                                                                                                                                                                              (let ([a23175 #t])
                                                                                                                                                                                 a23175)
                                                                                                                                                                              (let ([a23176 #f])
                                                                                                                                                                                 a23176))
                                                                                                                                                                           
                                                                                                                                                                          (let ([a23177 #t])
                                                                                                                                                                             a23177)
                                                                                                                                                                          (let ([a23178 #f])
                                                                                                                                                                             a23178))
                                                                                                                                                                       
                                                                                                                                                                      (if (> 3 (if (> 3 1)
                                                                                                                                                                                  (let ([a23179 1])
                                                                                                                                                                                     a23179)
                                                                                                                                                                                  (let ([a23180 2])
                                                                                                                                                                                     a23180))
                                                                                                                                                                               )
                                                                                                                                                                         (let ([a23181 (if (> 3 1)
                                                                                                                                                                                          (let ([a23182 1])
                                                                                                                                                                                             a23182)
                                                                                                                                                                                          (let ([a23183 2])
                                                                                                                                                                                             a23183))
                                                                                                                                                                                       ])
                                                                                                                                                                            a23181)
                                                                                                                                                                         (let ([a23184 2])
                                                                                                                                                                            a23184))
                                                                                                                                                                      
                                                                                                                                                                      2)
                                                                                                                                                                   ])
                                                                                                                                                        a23166))))))))))))))))))))))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x22956 (if (let ([temp23186 (if (let ([temp23188 (if (let ([temp23190 (if (> 3 1)
                                                                                (let ([a22957 1])
                                                                                   a22957)
                                                                                (let ([a22958 2])
                                                                                   a22958))
                                                                             ])
                                                               (> 3 temp23190))
                                                           (let ([a22959 (if (> 3 1)
                                                                            (let ([a22960 1])
                                                                               a22960)
                                                                            (let ([a22961 2])
                                                                               a22961))
                                                                         ])
                                                              a22959)
                                                           (let ([a22962 2])
                                                              a22962))
                                                        ])
                                          (let ([temp23193 (if (let ([temp23195 (if (> 3 1)
                                                                                   (let ([a22963 1])
                                                                                      a22963)
                                                                                   (let ([a22964 2])
                                                                                      a22964))
                                                                                ])
                                                                  (> 3 temp23195))
                                                              (let ([a22965 (if (> 3 1)
                                                                               (let ([a22966 1])
                                                                                  a22966)
                                                                               (let ([a22967 2])
                                                                                  a22967))
                                                                            ])
                                                                 a22965)
                                                              (let ([a22968 2])
                                                                 a22968))
                                                           ])
                                             (>= temp23188 temp23193)))
                                      8
                                      9)
                                   ])
                     (> temp23186 8))
                 #t
                 #f)
              ])
   (if x22956
      (if (let ([temp23199 (if (> 3 1)
                              (let ([a22969 1])
                                 a22969)
                              (let ([a22970 2])
                                 a22970))
                           ])
             (> 3 temp23199))
         (let ([a22971 (if (> 3 1)
                          (let ([a22972 1])
                             a22972)
                          (let ([a22973 2])
                             a22973))
                       ])
            a22971)
         (let ([a22974 2])
            a22974))
      
      (let ([a22975 (if (if (if (if (if (let ([temp23203 (read)])
                                           (let ([temp23204 (if (let ([temp23206 (if (> 3 1)
                                                                                    (let ([a22976 1])
                                                                                       a22976)
                                                                                    (let ([a22977 2])
                                                                                       a22977))
                                                                                 ])
                                                                   (> 3 temp23206))
                                                               (let ([a22978 (if (> 3 1)
                                                                                (let ([a22979 1])
                                                                                   a22979)
                                                                                (let ([a22980 2])
                                                                                   a22980))
                                                                             ])
                                                                  a22978)
                                                               (let ([a22981 2])
                                                                  a22981))
                                                            ])
                                              (> temp23203 temp23204)))
                                       (let ([a22982 #t])
                                          a22982)
                                       (let ([a22983 #f])
                                          a22983))
                                    
                                   (let ([a22984 #t])
                                      a22984)
                                   (let ([a22985 #f])
                                      a22985))
                                
                               (let ([a22986 #t])
                                  a22986)
                               (let ([a22987 #f])
                                  a22987))
                            
                           #t
                           #f)
                        
                       (if (let ([temp23210 (if (> 3 1)
                                               (let ([a22988 1])
                                                  a22988)
                                               (let ([a22989 2])
                                                  a22989))
                                            ])
                              (> 3 temp23210))
                          (let ([a22990 (if (> 3 1)
                                           (let ([a22991 1])
                                              a22991)
                                           (let ([a22992 2])
                                              a22992))
                                        ])
                             a22990)
                          (let ([a22993 2])
                             a22993))
                       
                       2)
                    ])
         (let ([a22994 (if (if (if (if (let ([temp23216 (read)])
                                          (let ([temp23217 (if (let ([temp23219 (if (> 3 1)
                                                                                   (let ([a22995 1])
                                                                                      a22995)
                                                                                   (let ([a22996 2])
                                                                                      a22996))
                                                                                ])
                                                                  (> 3 temp23219))
                                                              (let ([a22997 (if (> 3 1)
                                                                               (let ([a22998 1])
                                                                                  a22998)
                                                                               (let ([a22999 2])
                                                                                  a22999))
                                                                            ])
                                                                 a22997)
                                                              (let ([a23000 2])
                                                                 a23000))
                                                           ])
                                             (> temp23216 temp23217)))
                                      (let ([a23001 #t])
                                         a23001)
                                      (let ([a23002 #f])
                                         a23002))
                                   
                                  (let ([a23003 #t])
                                     a23003)
                                  (let ([a23004 #f])
                                     a23004))
                               
                              (let ([a23005 #t])
                                 a23005)
                              (let ([a23006 #f])
                                 a23006))
                           
                          (if (let ([temp23223 (if (> 3 1)
                                                  (let ([a23007 1])
                                                     a23007)
                                                  (let ([a23008 2])
                                                     a23008))
                                               ])
                                 (> 3 temp23223))
                             (let ([a23009 (if (> 3 1)
                                              (let ([a23010 1])
                                                 a23010)
                                              (let ([a23011 2])
                                                 a23011))
                                           ])
                                a23009)
                             (let ([a23012 2])
                                a23012))
                          
                          2)
                       ])
            (let ([temp23214 (let ([a23013 (if (if (if (if (let ([temp23229 (read)])
                                                              (let ([temp23230 (if (let ([temp23232 (if (> 3 1)
                                                                                                       (let ([a23014 1])
                                                                                                          a23014)
                                                                                                       (let ([a23015 2])
                                                                                                          a23015))
                                                                                                    ])
                                                                                      (> 3 temp23232))
                                                                                  (let ([a23016 (if (> 3 1)
                                                                                                   (let ([a23017 1])
                                                                                                      a23017)
                                                                                                   (let ([a23018 2])
                                                                                                      a23018))
                                                                                                ])
                                                                                     a23016)
                                                                                  (let ([a23019 2])
                                                                                     a23019))
                                                                               ])
                                                                 (> temp23229 temp23230)))
                                                          (let ([a23020 #t])
                                                             a23020)
                                                          (let ([a23021 #f])
                                                             a23021))
                                                       
                                                      (let ([a23022 #t])
                                                         a23022)
                                                      (let ([a23023 #f])
                                                         a23023))
                                                   
                                                  (let ([a23024 #t])
                                                     a23024)
                                                  (let ([a23025 #f])
                                                     a23025))
                                               
                                              (if (let ([temp23236 (if (> 3 1)
                                                                      (let ([a23026 1])
                                                                         a23026)
                                                                      (let ([a23027 2])
                                                                         a23027))
                                                                   ])
                                                     (> 3 temp23236))
                                                 (let ([a23028 (if (> 3 1)
                                                                  (let ([a23029 1])
                                                                     a23029)
                                                                  (let ([a23030 2])
                                                                     a23030))
                                                               ])
                                                    a23028)
                                                 (let ([a23031 2])
                                                    a23031))
                                              
                                              2)
                                           ])
                                (let ([temp23227 (let ([a23032 (if (if (if (if (let ([temp23242 (read)])
                                                                                  (let ([temp23243 (if (let ([temp23245 (if (> 3 1)
                                                                                                                           (let ([a23033 1])
                                                                                                                              a23033)
                                                                                                                           (let ([a23034 2])
                                                                                                                              a23034))
                                                                                                                        ])
                                                                                                          (> 3 temp23245))
                                                                                                      (let ([a23035 (if (> 3 1)
                                                                                                                       (let ([a23036 1])
                                                                                                                          a23036)
                                                                                                                       (let ([a23037 2])
                                                                                                                          a23037))
                                                                                                                    ])
                                                                                                         a23035)
                                                                                                      (let ([a23038 2])
                                                                                                         a23038))
                                                                                                   ])
                                                                                     (> temp23242 temp23243)))
                                                                              (let ([a23039 #t])
                                                                                 a23039)
                                                                              (let ([a23040 #f])
                                                                                 a23040))
                                                                           
                                                                          (let ([a23041 #t])
                                                                             a23041)
                                                                          (let ([a23042 #f])
                                                                             a23042))
                                                                       
                                                                      (let ([a23043 #t])
                                                                         a23043)
                                                                      (let ([a23044 #f])
                                                                         a23044))
                                                                   
                                                                  (if (let ([temp23249 (if (> 3 1)
                                                                                          (let ([a23045 1])
                                                                                             a23045)
                                                                                          (let ([a23046 2])
                                                                                             a23046))
                                                                                       ])
                                                                         (> 3 temp23249))
                                                                     (let ([a23047 (if (> 3 1)
                                                                                      (let ([a23048 1])
                                                                                         a23048)
                                                                                      (let ([a23049 2])
                                                                                         a23049))
                                                                                   ])
                                                                        a23047)
                                                                     (let ([a23050 2])
                                                                        a23050))
                                                                  
                                                                  2)
                                                               ])
                                                    (let ([temp23240 (let ([a23051 (if (if (if (if (let ([temp23255 (read)])
                                                                                                      (let ([temp23256 (if (let ([temp23258 (if (> 3 1)
                                                                                                                                               (let ([a23052 1])
                                                                                                                                                  a23052)
                                                                                                                                               (let ([a23053 2])
                                                                                                                                                  a23053))
                                                                                                                                            ])
                                                                                                                              (> 3 temp23258))
                                                                                                                          (let ([a23054 (if (> 3 1)
                                                                                                                                           (let ([a23055 1])
                                                                                                                                              a23055)
                                                                                                                                           (let ([a23056 2])
                                                                                                                                              a23056))
                                                                                                                                        ])
                                                                                                                             a23054)
                                                                                                                          (let ([a23057 2])
                                                                                                                             a23057))
                                                                                                                       ])
                                                                                                         (> temp23255 temp23256)))
                                                                                                  (let ([a23058 #t])
                                                                                                     a23058)
                                                                                                  (let ([a23059 #f])
                                                                                                     a23059))
                                                                                               
                                                                                              (let ([a23060 #t])
                                                                                                 a23060)
                                                                                              (let ([a23061 #f])
                                                                                                 a23061))
                                                                                           
                                                                                          (let ([a23062 #t])
                                                                                             a23062)
                                                                                          (let ([a23063 #f])
                                                                                             a23063))
                                                                                       
                                                                                      (if (let ([temp23262 (if (> 3 1)
                                                                                                              (let ([a23064 1])
                                                                                                                 a23064)
                                                                                                              (let ([a23065 2])
                                                                                                                 a23065))
                                                                                                           ])
                                                                                             (> 3 temp23262))
                                                                                         (let ([a23066 (if (> 3 1)
                                                                                                          (let ([a23067 1])
                                                                                                             a23067)
                                                                                                          (let ([a23068 2])
                                                                                                             a23068))
                                                                                                       ])
                                                                                            a23066)
                                                                                         (let ([a23069 2])
                                                                                            a23069))
                                                                                      
                                                                                      2)
                                                                                   ])
                                                                        (let ([temp23253 (let ([temp23266 (read)])
                                                                                            (let ([a23070 (if (if (if (if (let ([temp23269 (read)])
                                                                                                                             (let ([temp23270 (if (let ([temp23272 (if (> 3 1)
                                                                                                                                                                      (let ([a23071 1])
                                                                                                                                                                         a23071)
                                                                                                                                                                      (let ([a23072 2])
                                                                                                                                                                         a23072))
                                                                                                                                                                   ])
                                                                                                                                                     (> 3 temp23272))
                                                                                                                                                 (let ([a23073 (if (> 3 1)
                                                                                                                                                                  (let ([a23074 1])
                                                                                                                                                                     a23074)
                                                                                                                                                                  (let ([a23075 2])
                                                                                                                                                                     a23075))
                                                                                                                                                               ])
                                                                                                                                                    a23073)
                                                                                                                                                 (let ([a23076 2])
                                                                                                                                                    a23076))
                                                                                                                                              ])
                                                                                                                                (> temp23269 temp23270)))
                                                                                                                         (let ([a23077 #t])
                                                                                                                            a23077)
                                                                                                                         (let ([a23078 #f])
                                                                                                                            a23078))
                                                                                                                      
                                                                                                                     (let ([a23079 #t])
                                                                                                                        a23079)
                                                                                                                     (let ([a23080 #f])
                                                                                                                        a23080))
                                                                                                                  
                                                                                                                 (let ([a23081 #t])
                                                                                                                    a23081)
                                                                                                                 (let ([a23082 #f])
                                                                                                                    a23082))
                                                                                                              
                                                                                                             (if (let ([temp23276 (if (> 3 1)
                                                                                                                                     (let ([a23083 1])
                                                                                                                                        a23083)
                                                                                                                                     (let ([a23084 2])
                                                                                                                                        a23084))
                                                                                                                                  ])
                                                                                                                    (> 3 temp23276))
                                                                                                                (let ([a23085 (if (> 3 1)
                                                                                                                                 (let ([a23086 1])
                                                                                                                                    a23086)
                                                                                                                                 (let ([a23087 2])
                                                                                                                                    a23087))
                                                                                                                              ])
                                                                                                                   a23085)
                                                                                                                (let ([a23088 2])
                                                                                                                   a23088))
                                                                                                             
                                                                                                             2)
                                                                                                          ])
                                                                                               (let ([temp23267 (let ([a23089 (if (if (if (if (let ([temp23282 (read)])
                                                                                                                                                 (let ([temp23283 (if (let ([temp23285 (if (> 3 1)
                                                                                                                                                                                          (let ([a23090 1])
                                                                                                                                                                                             a23090)
                                                                                                                                                                                          (let ([a23091 2])
                                                                                                                                                                                             a23091))
                                                                                                                                                                                       ])
                                                                                                                                                                         (> 3 temp23285))
                                                                                                                                                                     (let ([a23092 (if (> 3 1)
                                                                                                                                                                                      (let ([a23093 1])
                                                                                                                                                                                         a23093)
                                                                                                                                                                                      (let ([a23094 2])
                                                                                                                                                                                         a23094))
                                                                                                                                                                                   ])
                                                                                                                                                                        a23092)
                                                                                                                                                                     (let ([a23095 2])
                                                                                                                                                                        a23095))
                                                                                                                                                                  ])
                                                                                                                                                    (> temp23282 temp23283)))
                                                                                                                                             (let ([a23096 #t])
                                                                                                                                                a23096)
                                                                                                                                             (let ([a23097 #f])
                                                                                                                                                a23097))
                                                                                                                                          
                                                                                                                                         (let ([a23098 #t])
                                                                                                                                            a23098)
                                                                                                                                         (let ([a23099 #f])
                                                                                                                                            a23099))
                                                                                                                                      
                                                                                                                                     (let ([a23100 #t])
                                                                                                                                        a23100)
                                                                                                                                     (let ([a23101 #f])
                                                                                                                                        a23101))
                                                                                                                                  
                                                                                                                                 (if (let ([temp23289 (if (> 3 1)
                                                                                                                                                         (let ([a23102 1])
                                                                                                                                                            a23102)
                                                                                                                                                         (let ([a23103 2])
                                                                                                                                                            a23103))
                                                                                                                                                      ])
                                                                                                                                        (> 3 temp23289))
                                                                                                                                    (let ([a23104 (if (> 3 1)
                                                                                                                                                     (let ([a23105 1])
                                                                                                                                                        a23105)
                                                                                                                                                     (let ([a23106 2])
                                                                                                                                                        a23106))
                                                                                                                                                  ])
                                                                                                                                       a23104)
                                                                                                                                    (let ([a23107 2])
                                                                                                                                       a23107))
                                                                                                                                 
                                                                                                                                 2)
                                                                                                                              ])
                                                                                                                   (let ([temp23280 (let ([a23108 (if (if (if (if (let ([temp23295 (read)])
                                                                                                                                                                     (let ([temp23296 (if (let ([temp23298 (if (> 3 1)
                                                                                                                                                                                                              (let ([a23109 1])
                                                                                                                                                                                                                 a23109)
                                                                                                                                                                                                              (let ([a23110 2])
                                                                                                                                                                                                                 a23110))
                                                                                                                                                                                                           ])
                                                                                                                                                                                             (> 3 temp23298))
                                                                                                                                                                                         (let ([a23111 (if (> 3 1)
                                                                                                                                                                                                          (let ([a23112 1])
                                                                                                                                                                                                             a23112)
                                                                                                                                                                                                          (let ([a23113 2])
                                                                                                                                                                                                             a23113))
                                                                                                                                                                                                       ])
                                                                                                                                                                                            a23111)
                                                                                                                                                                                         (let ([a23114 2])
                                                                                                                                                                                            a23114))
                                                                                                                                                                                      ])
                                                                                                                                                                        (> temp23295 temp23296)))
                                                                                                                                                                 (let ([a23115 #t])
                                                                                                                                                                    a23115)
                                                                                                                                                                 (let ([a23116 #f])
                                                                                                                                                                    a23116))
                                                                                                                                                              
                                                                                                                                                             (let ([a23117 #t])
                                                                                                                                                                a23117)
                                                                                                                                                             (let ([a23118 #f])
                                                                                                                                                                a23118))
                                                                                                                                                          
                                                                                                                                                         (let ([a23119 #t])
                                                                                                                                                            a23119)
                                                                                                                                                         (let ([a23120 #f])
                                                                                                                                                            a23120))
                                                                                                                                                      
                                                                                                                                                     (if (let ([temp23302 (if (> 3 1)
                                                                                                                                                                             (let ([a23121 1])
                                                                                                                                                                                a23121)
                                                                                                                                                                             (let ([a23122 2])
                                                                                                                                                                                a23122))
                                                                                                                                                                          ])
                                                                                                                                                            (> 3 temp23302))
                                                                                                                                                        (let ([a23123 (if (> 3 1)
                                                                                                                                                                         (let ([a23124 1])
                                                                                                                                                                            a23124)
                                                                                                                                                                         (let ([a23125 2])
                                                                                                                                                                            a23125))
                                                                                                                                                                      ])
                                                                                                                                                           a23123)
                                                                                                                                                        (let ([a23126 2])
                                                                                                                                                           a23126))
                                                                                                                                                     
                                                                                                                                                     2)
                                                                                                                                                  ])
                                                                                                                                       (let ([temp23293 (let ([a23127 (if (if (if (if (let ([temp23308 (read)])
                                                                                                                                                                                         (let ([temp23309 (if (let ([temp23311 (if (> 3 1)
                                                                                                                                                                                                                                  (let ([a23128 1])
                                                                                                                                                                                                                                     a23128)
                                                                                                                                                                                                                                  (let ([a23129 2])
                                                                                                                                                                                                                                     a23129))
                                                                                                                                                                                                                               ])
                                                                                                                                                                                                                 (> 3 temp23311))
                                                                                                                                                                                                             (let ([a23130 (if (> 3 1)
                                                                                                                                                                                                                              (let ([a23131 1])
                                                                                                                                                                                                                                 a23131)
                                                                                                                                                                                                                              (let ([a23132 2])
                                                                                                                                                                                                                                 a23132))
                                                                                                                                                                                                                           ])
                                                                                                                                                                                                                a23130)
                                                                                                                                                                                                             (let ([a23133 2])
                                                                                                                                                                                                                a23133))
                                                                                                                                                                                                          ])
                                                                                                                                                                                            (> temp23308 temp23309)))
                                                                                                                                                                                     (let ([a23134 #t])
                                                                                                                                                                                        a23134)
                                                                                                                                                                                     (let ([a23135 #f])
                                                                                                                                                                                        a23135))
                                                                                                                                                                                  
                                                                                                                                                                                 (let ([a23136 #t])
                                                                                                                                                                                    a23136)
                                                                                                                                                                                 (let ([a23137 #f])
                                                                                                                                                                                    a23137))
                                                                                                                                                                              
                                                                                                                                                                             (let ([a23138 #t])
                                                                                                                                                                                a23138)
                                                                                                                                                                             (let ([a23139 #f])
                                                                                                                                                                                a23139))
                                                                                                                                                                          
                                                                                                                                                                         (if (let ([temp23315 (if (> 3 1)
                                                                                                                                                                                                 (let ([a23140 1])
                                                                                                                                                                                                    a23140)
                                                                                                                                                                                                 (let ([a23141 2])
                                                                                                                                                                                                    a23141))
                                                                                                                                                                                              ])
                                                                                                                                                                                (> 3 temp23315))
                                                                                                                                                                            (let ([a23142 (if (> 3 1)
                                                                                                                                                                                             (let ([a23143 1])
                                                                                                                                                                                                a23143)
                                                                                                                                                                                             (let ([a23144 2])
                                                                                                                                                                                                a23144))
                                                                                                                                                                                          ])
                                                                                                                                                                               a23142)
                                                                                                                                                                            (let ([a23145 2])
                                                                                                                                                                               a23145))
                                                                                                                                                                         
                                                                                                                                                                         2)
                                                                                                                                                                      ])
                                                                                                                                                           (let ([temp23306 (let ([a23146 (read)])
                                                                                                                                                                               (let ([temp23319 (let ([a23147 (if (if (if (if (let ([temp23324 (read)])
                                                                                                                                                                                                                                 (let ([temp23325 (if (let ([temp23327 (if (> 3 1)
                                                                                                                                                                                                                                                                          (let ([a23148 1])
                                                                                                                                                                                                                                                                             a23148)
                                                                                                                                                                                                                                                                          (let ([a23149 2])
                                                                                                                                                                                                                                                                             a23149))
                                                                                                                                                                                                                                                                       ])
                                                                                                                                                                                                                                                         (> 3 temp23327))
                                                                                                                                                                                                                                                     (let ([a23150 (if (> 3 1)
                                                                                                                                                                                                                                                                      (let ([a23151 1])
                                                                                                                                                                                                                                                                         a23151)
                                                                                                                                                                                                                                                                      (let ([a23152 2])
                                                                                                                                                                                                                                                                         a23152))
                                                                                                                                                                                                                                                                   ])
                                                                                                                                                                                                                                                        a23150)
                                                                                                                                                                                                                                                     (let ([a23153 2])
                                                                                                                                                                                                                                                        a23153))
                                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                                    (> temp23324 temp23325)))
                                                                                                                                                                                                                             (let ([a23154 #t])
                                                                                                                                                                                                                                a23154)
                                                                                                                                                                                                                             (let ([a23155 #f])
                                                                                                                                                                                                                                a23155))
                                                                                                                                                                                                                          
                                                                                                                                                                                                                         (let ([a23156 #t])
                                                                                                                                                                                                                            a23156)
                                                                                                                                                                                                                         (let ([a23157 #f])
                                                                                                                                                                                                                            a23157))
                                                                                                                                                                                                                      
                                                                                                                                                                                                                     (let ([a23158 #t])
                                                                                                                                                                                                                        a23158)
                                                                                                                                                                                                                     (let ([a23159 #f])
                                                                                                                                                                                                                        a23159))
                                                                                                                                                                                                                  
                                                                                                                                                                                                                 (if (let ([temp23331 (if (> 3 1)
                                                                                                                                                                                                                                         (let ([a23160 1])
                                                                                                                                                                                                                                            a23160)
                                                                                                                                                                                                                                         (let ([a23161 2])
                                                                                                                                                                                                                                            a23161))
                                                                                                                                                                                                                                      ])
                                                                                                                                                                                                                        (> 3 temp23331))
                                                                                                                                                                                                                    (let ([a23162 (if (> 3 1)
                                                                                                                                                                                                                                     (let ([a23163 1])
                                                                                                                                                                                                                                        a23163)
                                                                                                                                                                                                                                     (let ([a23164 2])
                                                                                                                                                                                                                                        a23164))
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       a23162)
                                                                                                                                                                                                                    (let ([a23165 2])
                                                                                                                                                                                                                       a23165))
                                                                                                                                                                                                                 
                                                                                                                                                                                                                 2)
                                                                                                                                                                                                              ])
                                                                                                                                                                                                   (let ([temp23322 (let ([a23166 (if (if (if (if (let ([temp23337 (read)])
                                                                                                                                                                                                                                                     (let ([temp23338 (if (let ([temp23340 (if (> 3 1)
                                                                                                                                                                                                                                                                                              (let ([a23167 1])
                                                                                                                                                                                                                                                                                                 a23167)
                                                                                                                                                                                                                                                                                              (let ([a23168 2])
                                                                                                                                                                                                                                                                                                 a23168))
                                                                                                                                                                                                                                                                                           ])
                                                                                                                                                                                                                                                                             (> 3 temp23340))
                                                                                                                                                                                                                                                                         (let ([a23169 (if (> 3 1)
                                                                                                                                                                                                                                                                                          (let ([a23170 1])
                                                                                                                                                                                                                                                                                             a23170)
                                                                                                                                                                                                                                                                                          (let ([a23171 2])
                                                                                                                                                                                                                                                                                             a23171))
                                                                                                                                                                                                                                                                                       ])
                                                                                                                                                                                                                                                                            a23169)
                                                                                                                                                                                                                                                                         (let ([a23172 2])
                                                                                                                                                                                                                                                                            a23172))
                                                                                                                                                                                                                                                                      ])
                                                                                                                                                                                                                                                        (> temp23337 temp23338)))
                                                                                                                                                                                                                                                 (let ([a23173 #t])
                                                                                                                                                                                                                                                    a23173)
                                                                                                                                                                                                                                                 (let ([a23174 #f])
                                                                                                                                                                                                                                                    a23174))
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                             (let ([a23175 #t])
                                                                                                                                                                                                                                                a23175)
                                                                                                                                                                                                                                             (let ([a23176 #f])
                                                                                                                                                                                                                                                a23176))
                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                         (let ([a23177 #t])
                                                                                                                                                                                                                                            a23177)
                                                                                                                                                                                                                                         (let ([a23178 #f])
                                                                                                                                                                                                                                            a23178))
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                     (if (let ([temp23344 (if (> 3 1)
                                                                                                                                                                                                                                                             (let ([a23179 1])
                                                                                                                                                                                                                                                                a23179)
                                                                                                                                                                                                                                                             (let ([a23180 2])
                                                                                                                                                                                                                                                                a23180))
                                                                                                                                                                                                                                                          ])
                                                                                                                                                                                                                                            (> 3 temp23344))
                                                                                                                                                                                                                                        (let ([a23181 (if (> 3 1)
                                                                                                                                                                                                                                                         (let ([a23182 1])
                                                                                                                                                                                                                                                            a23182)
                                                                                                                                                                                                                                                         (let ([a23183 2])
                                                                                                                                                                                                                                                            a23183))
                                                                                                                                                                                                                                                      ])
                                                                                                                                                                                                                                           a23181)
                                                                                                                                                                                                                                        (let ([a23184 2])
                                                                                                                                                                                                                                           a23184))
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                  ])
                                                                                                                                                                                                                       (let ([temp23335 a23166])
                                                                                                                                                                                                                          (+ a23147 temp23335)))])
                                                                                                                                                                                                      (+ a23146 temp23322)))])
                                                                                                                                                                                  (+ a23127 temp23319)))])
                                                                                                                                                              (+ a23108 temp23306)))])
                                                                                                                                          (+ a23089 temp23293)))])
                                                                                                                      (+ a23070 temp23280)))])
                                                                                                  (+ temp23266 temp23267))))])
                                                                           (+ a23032 temp23253)))])
                                                       (+ a23013 temp23240)))])
                                   (+ a22994 temp23227)))])
               (+ a22975 temp23214)))))
   )


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
label23464:
    a23107 = 2;
    a23089 = a23107;
    goto label23459;
label23465:
    if (> 3 temp23289)
       goto label23463;
    else
       goto label23464;
label23466:
    a23102 = 1;
    temp23289 = a23102;
    goto label23465;
label23467:
    a23103 = 2;
    temp23289 = a23103;
    goto label23465;
label23460:
    a23089 = a23104;
    goto label23459;
label23461:
    a23105 = 1;
    a23104 = a23105;
    goto label23460;
label23462:
    a23106 = 2;
    a23104 = a23106;
    goto label23460;
label23463:
    if (> 3 1)
       goto label23461;
    else
       goto label23462;
label23472:
    a23098 = #t;
    if (eq? a23098 #t)
       goto label23470;
    else
       goto label23471;
label23473:
    a23099 = #f;
    if (eq? a23099 #t)
       goto label23470;
    else
       goto label23471;
label23474:
    a23096 = #t;
    if (eq? a23096 #t)
       goto label23472;
    else
       goto label23473;
label23475:
    a23097 = #f;
    if (eq? a23097 #t)
       goto label23472;
    else
       goto label23473;
label23468:
    if (> 3 1)
       goto label23466;
    else
       goto label23467;
label23469:
    a23089 = 2;
    goto label23459;
label23470:
    a23100 = #t;
    if (eq? a23100 #t)
       goto label23468;
    else
       goto label23469;
label23471:
    a23101 = #f;
    if (eq? a23101 #t)
       goto label23468;
    else
       goto label23469;
label23448:
    a23115 = #t;
    if (eq? a23115 #t)
       goto label23446;
    else
       goto label23447;
label23449:
    a23116 = #f;
    if (eq? a23116 #t)
       goto label23446;
    else
       goto label23447;
label23450:
    if (> temp23295 temp23296)
       goto label23448;
    else
       goto label23449;
label23451:
    temp23296 = a23111;
    goto label23450;
label23444:
    a23119 = #t;
    if (eq? a23119 #t)
       goto label23442;
    else
       goto label23443;
label23445:
    a23120 = #f;
    if (eq? a23120 #t)
       goto label23442;
    else
       goto label23443;
label23446:
    a23117 = #t;
    if (eq? a23117 #t)
       goto label23444;
    else
       goto label23445;
label23447:
    a23118 = #f;
    if (eq? a23118 #t)
       goto label23444;
    else
       goto label23445;
label23456:
    if (> 3 temp23298)
       goto label23454;
    else
       goto label23455;
label23457:
    a23109 = 1;
    temp23298 = a23109;
    goto label23456;
label23458:
    a23110 = 2;
    temp23298 = a23110;
    goto label23456;
label23459:
    temp23295 = (read);
    if (> 3 1)
       goto label23457;
    else
       goto label23458;
label23452:
    a23112 = 1;
    a23111 = a23112;
    goto label23451;
label23453:
    a23113 = 2;
    a23111 = a23113;
    goto label23451;
label23454:
    if (> 3 1)
       goto label23452;
    else
       goto label23453;
label23455:
    a23114 = 2;
    temp23296 = a23114;
    goto label23450;
label23496:
    a23081 = #t;
    if (eq? a23081 #t)
       goto label23494;
    else
       goto label23495;
label23497:
    a23082 = #f;
    if (eq? a23082 #t)
       goto label23494;
    else
       goto label23495;
label23498:
    a23079 = #t;
    if (eq? a23079 #t)
       goto label23496;
    else
       goto label23497;
label23499:
    a23080 = #f;
    if (eq? a23080 #t)
       goto label23496;
    else
       goto label23497;
label23492:
    a23083 = 1;
    temp23276 = a23083;
    goto label23491;
label23493:
    a23084 = 2;
    temp23276 = a23084;
    goto label23491;
label23494:
    if (> 3 1)
       goto label23492;
    else
       goto label23493;
label23495:
    a23070 = 2;
    goto label23485;
label23504:
    a23074 = 1;
    a23073 = a23074;
    goto label23503;
label23505:
    a23075 = 2;
    a23073 = a23075;
    goto label23503;
label23506:
    if (> 3 1)
       goto label23504;
    else
       goto label23505;
label23507:
    a23076 = 2;
    temp23270 = a23076;
    goto label23502;
label23500:
    a23077 = #t;
    if (eq? a23077 #t)
       goto label23498;
    else
       goto label23499;
label23501:
    a23078 = #f;
    if (eq? a23078 #t)
       goto label23498;
    else
       goto label23499;
label23502:
    if (> temp23269 temp23270)
       goto label23500;
    else
       goto label23501;
label23503:
    temp23270 = a23073;
    goto label23502;
label23480:
    if (> 3 1)
       goto label23478;
    else
       goto label23479;
label23481:
    a23095 = 2;
    temp23283 = a23095;
    goto label23476;
label23482:
    if (> 3 temp23285)
       goto label23480;
    else
       goto label23481;
label23483:
    a23090 = 1;
    temp23285 = a23090;
    goto label23482;
label23476:
    if (> temp23282 temp23283)
       goto label23474;
    else
       goto label23475;
label23477:
    temp23283 = a23092;
    goto label23476;
label23478:
    a23093 = 1;
    a23092 = a23093;
    goto label23477;
label23479:
    a23094 = 2;
    a23092 = a23094;
    goto label23477;
label23488:
    a23087 = 2;
    a23085 = a23087;
    goto label23486;
label23489:
    if (> 3 1)
       goto label23487;
    else
       goto label23488;
label23490:
    a23088 = 2;
    a23070 = a23088;
    goto label23485;
label23491:
    if (> 3 temp23276)
       goto label23489;
    else
       goto label23490;
label23484:
    a23091 = 2;
    temp23285 = a23091;
    goto label23482;
label23485:
    temp23282 = (read);
    if (> 3 1)
       goto label23483;
    else
       goto label23484;
label23486:
    a23070 = a23085;
    goto label23485;
label23487:
    a23086 = 1;
    a23085 = a23086;
    goto label23486;
label23400:
    a23151 = 1;
    a23150 = a23151;
    goto label23399;
label23401:
    a23152 = 2;
    a23150 = a23152;
    goto label23399;
label23402:
    if (> 3 1)
       goto label23400;
    else
       goto label23401;
label23403:
    a23153 = 2;
    temp23325 = a23153;
    goto label23398;
label23396:
    a23154 = #t;
    if (eq? a23154 #t)
       goto label23394;
    else
       goto label23395;
label23397:
    a23155 = #f;
    if (eq? a23155 #t)
       goto label23394;
    else
       goto label23395;
label23398:
    if (> temp23324 temp23325)
       goto label23396;
    else
       goto label23397;
label23399:
    temp23325 = a23150;
    goto label23398;
label23408:
    a23127 = a23142;
    goto label23407;
label23409:
    a23143 = 1;
    a23142 = a23143;
    goto label23408;
label23410:
    a23144 = 2;
    a23142 = a23144;
    goto label23408;
label23411:
    if (> 3 1)
       goto label23409;
    else
       goto label23410;
label23404:
    if (> 3 temp23327)
       goto label23402;
    else
       goto label23403;
label23405:
    a23148 = 1;
    temp23327 = a23148;
    goto label23404;
label23406:
    a23149 = 2;
    temp23327 = a23149;
    goto label23404;
label23407:
    a23146 = (read);
    temp23324 = (read);
    if (> 3 1)
       goto label23405;
    else
       goto label23406;
label23384:
    a23164 = 2;
    a23162 = a23164;
    goto label23382;
label23385:
    if (> 3 1)
       goto label23383;
    else
       goto label23384;
label23386:
    a23165 = 2;
    a23147 = a23165;
    goto label23381;
label23387:
    if (> 3 temp23331)
       goto label23385;
    else
       goto label23386;
label23380:
    a23168 = 2;
    temp23340 = a23168;
    goto label23378;
label23381:
    temp23337 = (read);
    if (> 3 1)
       goto label23379;
    else
       goto label23380;
label23382:
    a23147 = a23162;
    goto label23381;
label23383:
    a23163 = 1;
    a23162 = a23163;
    goto label23382;
label23392:
    a23158 = #t;
    if (eq? a23158 #t)
       goto label23390;
    else
       goto label23391;
label23393:
    a23159 = #f;
    if (eq? a23159 #t)
       goto label23390;
    else
       goto label23391;
label23394:
    a23156 = #t;
    if (eq? a23156 #t)
       goto label23392;
    else
       goto label23393;
label23395:
    a23157 = #f;
    if (eq? a23157 #t)
       goto label23392;
    else
       goto label23393;
label23388:
    a23160 = 1;
    temp23331 = a23160;
    goto label23387;
label23389:
    a23161 = 2;
    temp23331 = a23161;
    goto label23387;
label23390:
    if (> 3 1)
       goto label23388;
    else
       goto label23389;
label23391:
    a23147 = 2;
    goto label23381;
label23432:
    a23129 = 2;
    temp23311 = a23129;
    goto label23430;
label23433:
    temp23308 = (read);
    if (> 3 1)
       goto label23431;
    else
       goto label23432;
label23434:
    a23108 = a23123;
    goto label23433;
label23435:
    a23124 = 1;
    a23123 = a23124;
    goto label23434;
label23428:
    if (> 3 1)
       goto label23426;
    else
       goto label23427;
label23429:
    a23133 = 2;
    temp23309 = a23133;
    goto label23424;
label23430:
    if (> 3 temp23311)
       goto label23428;
    else
       goto label23429;
label23431:
    a23128 = 1;
    temp23311 = a23128;
    goto label23430;
label23440:
    a23121 = 1;
    temp23302 = a23121;
    goto label23439;
label23441:
    a23122 = 2;
    temp23302 = a23122;
    goto label23439;
label23442:
    if (> 3 1)
       goto label23440;
    else
       goto label23441;
label23443:
    a23108 = 2;
    goto label23433;
label23436:
    a23125 = 2;
    a23123 = a23125;
    goto label23434;
label23437:
    if (> 3 1)
       goto label23435;
    else
       goto label23436;
label23438:
    a23126 = 2;
    a23108 = a23126;
    goto label23433;
label23439:
    if (> 3 temp23302)
       goto label23437;
    else
       goto label23438;
label23416:
    if (> 3 1)
       goto label23414;
    else
       goto label23415;
label23417:
    a23127 = 2;
    goto label23407;
label23418:
    a23138 = #t;
    if (eq? a23138 #t)
       goto label23416;
    else
       goto label23417;
label23419:
    a23139 = #f;
    if (eq? a23139 #t)
       goto label23416;
    else
       goto label23417;
label23412:
    a23145 = 2;
    a23127 = a23145;
    goto label23407;
label23413:
    if (> 3 temp23315)
       goto label23411;
    else
       goto label23412;
label23414:
    a23140 = 1;
    temp23315 = a23140;
    goto label23413;
label23415:
    a23141 = 2;
    temp23315 = a23141;
    goto label23413;
label23424:
    if (> temp23308 temp23309)
       goto label23422;
    else
       goto label23423;
label23425:
    temp23309 = a23130;
    goto label23424;
label23426:
    a23131 = 1;
    a23130 = a23131;
    goto label23425;
label23427:
    a23132 = 2;
    a23130 = a23132;
    goto label23425;
label23420:
    a23136 = #t;
    if (eq? a23136 #t)
       goto label23418;
    else
       goto label23419;
label23421:
    a23137 = #f;
    if (eq? a23137 #t)
       goto label23418;
    else
       goto label23419;
label23422:
    a23134 = #t;
    if (eq? a23134 #t)
       goto label23420;
    else
       goto label23421;
label23423:
    a23135 = #f;
    if (eq? a23135 #t)
       goto label23420;
    else
       goto label23421;
label23347:
    return a22971;
label23368:
    a23175 = #t;
    if (eq? a23175 #t)
       goto label23366;
    else
       goto label23367;
label23369:
    a23176 = #f;
    if (eq? a23176 #t)
       goto label23366;
    else
       goto label23367;
label23370:
    a23173 = #t;
    if (eq? a23173 #t)
       goto label23368;
    else
       goto label23369;
label23371:
    a23174 = #f;
    if (eq? a23174 #t)
       goto label23368;
    else
       goto label23369;
label23364:
    if (> 3 1)
       goto label23362;
    else
       goto label23363;
label23365:
    a23166 = 2;
    goto label23355;
label23366:
    a23177 = #t;
    if (eq? a23177 #t)
       goto label23364;
    else
       goto label23365;
label23367:
    a23178 = #f;
    if (eq? a23178 #t)
       goto label23364;
    else
       goto label23365;
label23376:
    if (> 3 1)
       goto label23374;
    else
       goto label23375;
label23377:
    a23172 = 2;
    temp23338 = a23172;
    goto label23372;
label23378:
    if (> 3 temp23340)
       goto label23376;
    else
       goto label23377;
label23379:
    a23167 = 1;
    temp23340 = a23167;
    goto label23378;
label23372:
    if (> temp23337 temp23338)
       goto label23370;
    else
       goto label23371;
label23373:
    temp23338 = a23169;
    goto label23372;
label23374:
    a23170 = 1;
    a23169 = a23170;
    goto label23373;
label23375:
    a23171 = 2;
    a23169 = a23171;
    goto label23373;
label23352:
    if (> 3 temp23199)
       goto label23350;
    else
       goto label23351;
label23353:
    a22969 = 1;
    temp23199 = a22969;
    goto label23352;
label23354:
    a22970 = 2;
    temp23199 = a22970;
    goto label23352;
label23355:
    temp23335 = a23166;
    temp23322 = (+ a23147 temp23335);
    temp23319 = (+ a23146 temp23322);
    temp23306 = (+ a23127 temp23319);
    temp23293 = (+ a23108 temp23306);
    temp23280 = (+ a23089 temp23293);
    temp23267 = (+ a23070 temp23280);
    temp23253 = (+ temp23266 temp23267);
    temp23240 = (+ a23032 temp23253);
    temp23227 = (+ a23013 temp23240);
    temp23214 = (+ a22994 temp23227);
    return (+ a22975 temp23214);
label23348:
    a22972 = 1;
    a22971 = a22972;
    goto label23347;
label23349:
    a22973 = 2;
    a22971 = a22973;
    goto label23347;
label23350:
    if (> 3 1)
       goto label23348;
    else
       goto label23349;
label23351:
    a22974 = 2;
    return a22974;
label23360:
    a23184 = 2;
    a23166 = a23184;
    goto label23355;
label23361:
    if (> 3 temp23344)
       goto label23359;
    else
       goto label23360;
label23362:
    a23179 = 1;
    temp23344 = a23179;
    goto label23361;
label23363:
    a23180 = 2;
    temp23344 = a23180;
    goto label23361;
label23356:
    a23166 = a23181;
    goto label23355;
label23357:
    a23182 = 1;
    a23181 = a23182;
    goto label23356;
label23358:
    a23183 = 2;
    a23181 = a23183;
    goto label23356;
label23359:
    if (> 3 1)
       goto label23357;
    else
       goto label23358;
label23657:
    a22964 = 2;
    temp23195 = a22964;
    goto label23655;
label23656:
    a22963 = 1;
    temp23195 = a22963;
    goto label23655;
label23659:
    temp23188 = a22959;
    goto label23658;
label23658:
    if (> 3 1)
       goto label23656;
    else
       goto label23657;
label23653:
    if (> 3 1)
       goto label23651;
    else
       goto label23652;
label23652:
    a22967 = 2;
    a22965 = a22967;
    goto label23650;
label23655:
    if (> 3 temp23195)
       goto label23653;
    else
       goto label23654;
label23654:
    a22968 = 2;
    temp23193 = a22968;
    goto label23649;
label23665:
    a22957 = 1;
    temp23190 = a22957;
    goto label23664;
label23664:
    if (> 3 temp23190)
       goto label23662;
    else
       goto label23663;
label23666:
    a22958 = 2;
    temp23190 = a22958;
    goto label23664;
label23661:
    a22961 = 2;
    a22959 = a22961;
    goto label23659;
label23660:
    a22960 = 1;
    a22959 = a22960;
    goto label23659;
label23663:
    a22962 = 2;
    temp23188 = a22962;
    goto label23658;
label23662:
    if (> 3 1)
       goto label23660;
    else
       goto label23661;
label23641:
    if (> 3 1)
       goto label23353;
    else
       goto label23354;
label23640:
    a22977 = 2;
    temp23206 = a22977;
    goto label23638;
label23643:
    if (eq? x22956 #t)
       goto label23641;
    else
       goto label23642;
label23642:
    temp23203 = (read);
    if (> 3 1)
       goto label23639;
    else
       goto label23640;
label23637:
    a22981 = 2;
    temp23204 = a22981;
    goto label23632;
label23636:
    if (> 3 1)
       goto label23634;
    else
       goto label23635;
label23639:
    a22976 = 1;
    temp23206 = a22976;
    goto label23638;
label23638:
    if (> 3 temp23206)
       goto label23636;
    else
       goto label23637;
label23649:
    if (>= temp23188 temp23193)
       goto label23647;
    else
       goto label23648;
label23648:
    temp23186 = 9;
    goto label23646;
label23651:
    a22966 = 1;
    a22965 = a22966;
    goto label23650;
label23650:
    temp23193 = a22965;
    goto label23649;
label23645:
    x22956 = #f;
    goto label23643;
label23644:
    x22956 = #t;
    goto label23643;
label23647:
    temp23186 = 8;
    goto label23646;
label23646:
    if (> temp23186 8)
       goto label23644;
    else
       goto label23645;
label23593:
    if (> 3 1)
       goto label23591;
    else
       goto label23592;
label23592:
    a23011 = 2;
    a23009 = a23011;
    goto label23590;
label23595:
    if (> 3 temp23223)
       goto label23593;
    else
       goto label23594;
label23594:
    a23012 = 2;
    a22994 = a23012;
    goto label23589;
label23589:
    temp23229 = (read);
    if (> 3 1)
       goto label23587;
    else
       goto label23588;
label23588:
    a23015 = 2;
    temp23232 = a23015;
    goto label23586;
label23591:
    a23010 = 1;
    a23009 = a23010;
    goto label23590;
label23590:
    a22994 = a23009;
    goto label23589;
label23601:
    a23006 = #f;
    if (eq? a23006 #t)
       goto label23598;
    else
       goto label23599;
label23600:
    a23005 = #t;
    if (eq? a23005 #t)
       goto label23598;
    else
       goto label23599;
label23603:
    a23004 = #f;
    if (eq? a23004 #t)
       goto label23600;
    else
       goto label23601;
label23602:
    a23003 = #t;
    if (eq? a23003 #t)
       goto label23600;
    else
       goto label23601;
label23597:
    a23008 = 2;
    temp23223 = a23008;
    goto label23595;
label23596:
    a23007 = 1;
    temp23223 = a23007;
    goto label23595;
label23599:
    a22994 = 2;
    goto label23589;
label23598:
    if (> 3 1)
       goto label23596;
    else
       goto label23597;
label23577:
    a23023 = #f;
    if (eq? a23023 #t)
       goto label23574;
    else
       goto label23575;
label23576:
    a23022 = #t;
    if (eq? a23022 #t)
       goto label23574;
    else
       goto label23575;
label23579:
    a23021 = #f;
    if (eq? a23021 #t)
       goto label23576;
    else
       goto label23577;
label23578:
    a23020 = #t;
    if (eq? a23020 #t)
       goto label23576;
    else
       goto label23577;
label23573:
    a23013 = 2;
    goto label23563;
label23572:
    if (> 3 1)
       goto label23570;
    else
       goto label23571;
label23575:
    a23025 = #f;
    if (eq? a23025 #t)
       goto label23572;
    else
       goto label23573;
label23574:
    a23024 = #t;
    if (eq? a23024 #t)
       goto label23572;
    else
       goto label23573;
label23585:
    a23019 = 2;
    temp23230 = a23019;
    goto label23580;
label23584:
    if (> 3 1)
       goto label23582;
    else
       goto label23583;
label23587:
    a23014 = 1;
    temp23232 = a23014;
    goto label23586;
label23586:
    if (> 3 temp23232)
       goto label23584;
    else
       goto label23585;
label23581:
    temp23230 = a23016;
    goto label23580;
label23580:
    if (> temp23229 temp23230)
       goto label23578;
    else
       goto label23579;
label23583:
    a23018 = 2;
    a23016 = a23018;
    goto label23581;
label23582:
    a23017 = 1;
    a23016 = a23017;
    goto label23581;
label23625:
    a22975 = 2;
    goto label23615;
label23624:
    if (> 3 1)
       goto label23622;
    else
       goto label23623;
label23627:
    a22987 = #f;
    if (eq? a22987 #t)
       goto label23624;
    else
       goto label23625;
label23626:
    a22986 = #t;
    if (eq? a22986 #t)
       goto label23624;
    else
       goto label23625;
label23621:
    if (> 3 temp23210)
       goto label23619;
    else
       goto label23620;
label23620:
    a22993 = 2;
    a22975 = a22993;
    goto label23615;
label23623:
    a22989 = 2;
    temp23210 = a22989;
    goto label23621;
label23622:
    a22988 = 1;
    temp23210 = a22988;
    goto label23621;
label23633:
    temp23204 = a22978;
    goto label23632;
label23632:
    if (> temp23203 temp23204)
       goto label23630;
    else
       goto label23631;
label23635:
    a22980 = 2;
    a22978 = a22980;
    goto label23633;
label23634:
    a22979 = 1;
    a22978 = a22979;
    goto label23633;
label23629:
    a22985 = #f;
    if (eq? a22985 #t)
       goto label23626;
    else
       goto label23627;
label23628:
    a22984 = #t;
    if (eq? a22984 #t)
       goto label23626;
    else
       goto label23627;
label23631:
    a22983 = #f;
    if (eq? a22983 #t)
       goto label23628;
    else
       goto label23629;
label23630:
    a22982 = #t;
    if (eq? a22982 #t)
       goto label23628;
    else
       goto label23629;
label23609:
    a22999 = 2;
    a22997 = a22999;
    goto label23607;
label23608:
    a22998 = 1;
    a22997 = a22998;
    goto label23607;
label23611:
    a23000 = 2;
    temp23217 = a23000;
    goto label23606;
label23610:
    if (> 3 1)
       goto label23608;
    else
       goto label23609;
label23605:
    a23002 = #f;
    if (eq? a23002 #t)
       goto label23602;
    else
       goto label23603;
label23604:
    a23001 = #t;
    if (eq? a23001 #t)
       goto label23602;
    else
       goto label23603;
label23607:
    temp23217 = a22997;
    goto label23606;
label23606:
    if (> temp23216 temp23217)
       goto label23604;
    else
       goto label23605;
label23617:
    a22991 = 1;
    a22990 = a22991;
    goto label23616;
start:
    if (> 3 1)
       goto label23665;
    else
       goto label23666;
label23616:
    a22975 = a22990;
    goto label23615;
label23619:
    if (> 3 1)
       goto label23617;
    else
       goto label23618;
label23618:
    a22992 = 2;
    a22990 = a22992;
    goto label23616;
label23613:
    a22995 = 1;
    temp23219 = a22995;
    goto label23612;
label23612:
    if (> 3 temp23219)
       goto label23610;
    else
       goto label23611;
label23615:
    temp23216 = (read);
    if (> 3 1)
       goto label23613;
    else
       goto label23614;
label23614:
    a22996 = 2;
    temp23219 = a22996;
    goto label23612;
label23529:
    temp23256 = a23054;
    goto label23528;
label23528:
    if (> temp23255 temp23256)
       goto label23526;
    else
       goto label23527;
label23531:
    a23056 = 2;
    a23054 = a23056;
    goto label23529;
label23530:
    a23055 = 1;
    a23054 = a23055;
    goto label23529;
label23525:
    a23061 = #f;
    if (eq? a23061 #t)
       goto label23522;
    else
       goto label23523;
label23524:
    a23060 = #t;
    if (eq? a23060 #t)
       goto label23522;
    else
       goto label23523;
label23527:
    a23059 = #f;
    if (eq? a23059 #t)
       goto label23524;
    else
       goto label23525;
label23526:
    a23058 = #t;
    if (eq? a23058 #t)
       goto label23524;
    else
       goto label23525;
label23537:
    temp23255 = (read);
    if (> 3 1)
       goto label23535;
    else
       goto label23536;
label23536:
    a23053 = 2;
    temp23258 = a23053;
    goto label23534;
label23539:
    a23048 = 1;
    a23047 = a23048;
    goto label23538;
label23538:
    a23032 = a23047;
    goto label23537;
label23533:
    a23057 = 2;
    temp23256 = a23057;
    goto label23528;
label23532:
    if (> 3 1)
       goto label23530;
    else
       goto label23531;
label23535:
    a23052 = 1;
    temp23258 = a23052;
    goto label23534;
label23534:
    if (> 3 temp23258)
       goto label23532;
    else
       goto label23533;
label23513:
    a23067 = 1;
    a23066 = a23067;
    goto label23512;
label23512:
    a23051 = a23066;
    goto label23511;
label23515:
    if (> 3 1)
       goto label23513;
    else
       goto label23514;
label23514:
    a23068 = 2;
    a23066 = a23068;
    goto label23512;
label23509:
    a23071 = 1;
    temp23272 = a23071;
    goto label23508;
label23508:
    if (> 3 temp23272)
       goto label23506;
    else
       goto label23507;
label23511:
    temp23266 = (read);
    temp23269 = (read);
    if (> 3 1)
       goto label23509;
    else
       goto label23510;
label23510:
    a23072 = 2;
    temp23272 = a23072;
    goto label23508;
label23521:
    a23051 = 2;
    goto label23511;
label23520:
    if (> 3 1)
       goto label23518;
    else
       goto label23519;
label23523:
    a23063 = #f;
    if (eq? a23063 #t)
       goto label23520;
    else
       goto label23521;
label23522:
    a23062 = #t;
    if (eq? a23062 #t)
       goto label23520;
    else
       goto label23521;
label23517:
    if (> 3 temp23262)
       goto label23515;
    else
       goto label23516;
label23516:
    a23069 = 2;
    a23051 = a23069;
    goto label23511;
label23519:
    a23065 = 2;
    temp23262 = a23065;
    goto label23517;
label23518:
    a23064 = 1;
    temp23262 = a23064;
    goto label23517;
label23561:
    a23033 = 1;
    temp23245 = a23033;
    goto label23560;
label23560:
    if (> 3 temp23245)
       goto label23558;
    else
       goto label23559;
label23563:
    temp23242 = (read);
    if (> 3 1)
       goto label23561;
    else
       goto label23562;
label23562:
    a23034 = 2;
    temp23245 = a23034;
    goto label23560;
label23557:
    a23037 = 2;
    a23035 = a23037;
    goto label23555;
label23556:
    a23036 = 1;
    a23035 = a23036;
    goto label23555;
label23559:
    a23038 = 2;
    temp23243 = a23038;
    goto label23554;
label23558:
    if (> 3 1)
       goto label23556;
    else
       goto label23557;
label23569:
    if (> 3 temp23236)
       goto label23567;
    else
       goto label23568;
label23568:
    a23031 = 2;
    a23013 = a23031;
    goto label23563;
label23571:
    a23027 = 2;
    temp23236 = a23027;
    goto label23569;
label23570:
    a23026 = 1;
    temp23236 = a23026;
    goto label23569;
label23565:
    a23029 = 1;
    a23028 = a23029;
    goto label23564;
label23564:
    a23013 = a23028;
    goto label23563;
label23567:
    if (> 3 1)
       goto label23565;
    else
       goto label23566;
label23566:
    a23030 = 2;
    a23028 = a23030;
    goto label23564;
label23545:
    a23046 = 2;
    temp23249 = a23046;
    goto label23543;
label23544:
    a23045 = 1;
    temp23249 = a23045;
    goto label23543;
label23547:
    a23032 = 2;
    goto label23537;
label23546:
    if (> 3 1)
       goto label23544;
    else
       goto label23545;
label23541:
    if (> 3 1)
       goto label23539;
    else
       goto label23540;
label23540:
    a23049 = 2;
    a23047 = a23049;
    goto label23538;
label23543:
    if (> 3 temp23249)
       goto label23541;
    else
       goto label23542;
label23542:
    a23050 = 2;
    a23032 = a23050;
    goto label23537;
label23553:
    a23040 = #f;
    if (eq? a23040 #t)
       goto label23550;
    else
       goto label23551;
label23552:
    a23039 = #t;
    if (eq? a23039 #t)
       goto label23550;
    else
       goto label23551;
label23555:
    temp23243 = a23035;
    goto label23554;
label23554:
    if (> temp23242 temp23243)
       goto label23552;
    else
       goto label23553;
label23549:
    a23044 = #f;
    if (eq? a23044 #t)
       goto label23546;
    else
       goto label23547;
label23548:
    a23043 = #t;
    if (eq? a23043 #t)
       goto label23546;
    else
       goto label23547;
label23551:
    a23042 = #f;
    if (eq? a23042 #t)
       goto label23548;
    else
       goto label23549;
label23550:
    a23041 = #t;
    if (eq? a23041 #t)
       goto label23548;
    else
       goto label23549;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22958 : 'Integer, a22959 : 'Integer, x22956 : 'Boolean, a22957 : 'Integer, a22962 : 'Integer, a22963 : 'Integer, a22960 : 'Integer, a22961 : 'Integer, a22982 : 'Boolean, a22983 : 'Boolean, a22980 : 'Integer, a22981 : 'Integer, a22986 : 'Boolean, a22987 : 'Boolean, a22984 : 'Boolean, a22985 : 'Boolean, a22990 : 'Integer, a22991 : 'Integer, a22988 : 'Integer, a22989 : 'Integer, a22994 : 'Integer, a22995 : 'Integer, a22992 : 'Integer, a22993 : 'Integer, a22966 : 'Integer, a22967 : 'Integer, a22964 : 'Integer, a22965 : 'Integer, a22970 : 'Integer, a22971 : 'Integer, a22968 : 'Integer, a22969 : 'Integer, a22974 : 'Integer, a22975 : 'Integer, a22972 : 'Integer, a22973 : 'Integer, a22978 : 'Integer, a22979 : 'Integer, a22976 : 'Integer, a22977 : 'Integer, temp23337 : 'Integer, temp23338 : 'Integer, temp23335 : 'Integer, temp23344 : 'Integer, temp23340 : 'Integer, temp23322 : 'Integer, temp23319 : 'Integer, temp23331 : 'Integer, temp23324 : 'Integer, temp23325 : 'Integer, temp23327 : 'Integer, temp23272 : 'Integer, temp23269 : 'Integer, temp23270 : 'Integer, temp23280 : 'Integer, temp23282 : 'Integer, temp23283 : 'Integer, temp23276 : 'Integer, temp23256 : 'Integer, temp23258 : 'Integer, temp23253 : 'Integer, temp23255 : 'Integer, temp23266 : 'Integer, temp23267 : 'Integer, temp23262 : 'Integer, temp23306 : 'Integer, temp23302 : 'Integer, temp23315 : 'Integer, temp23308 : 'Integer, temp23309 : 'Integer, temp23311 : 'Integer, temp23289 : 'Integer, temp23285 : 'Integer, temp23296 : 'Integer, temp23298 : 'Integer, temp23293 : 'Integer, temp23295 : 'Integer, temp23206 : 'Integer, temp23204 : 'Integer, temp23210 : 'Integer, temp23214 : 'Integer, temp23219 : 'Integer, temp23217 : 'Integer, temp23216 : 'Integer, temp23190 : 'Integer, temp23188 : 'Integer, temp23195 : 'Integer, temp23193 : 'Integer, temp23199 : 'Integer, temp23203 : 'Integer, temp23236 : 'Integer, temp23243 : 'Integer, temp23242 : 'Integer, temp23240 : 'Integer, temp23245 : 'Integer, temp23249 : 'Integer, temp23223 : 'Integer, temp23227 : 'Integer, temp23230 : 'Integer, temp23229 : 'Integer, temp23232 : 'Integer, a23143 : 'Integer, a23142 : 'Integer, a23141 : 'Integer, a23140 : 'Integer, a23147 : 'Integer, a23146 : 'Integer, a23145 : 'Integer, a23144 : 'Integer, a23151 : 'Integer, a23150 : 'Integer, a23149 : 'Integer, a23148 : 'Integer, a23155 : 'Boolean, a23154 : 'Boolean, a23153 : 'Integer, a23152 : 'Integer, a23127 : 'Integer, a23126 : 'Integer, a23125 : 'Integer, a23124 : 'Integer, a23131 : 'Integer, a23130 : 'Integer, a23129 : 'Integer, a23128 : 'Integer, a23135 : 'Boolean, a23134 : 'Boolean, a23133 : 'Integer, a23132 : 'Integer, a23139 : 'Boolean, a23138 : 'Boolean, a23137 : 'Boolean, a23136 : 'Boolean, a23175 : 'Boolean, a23174 : 'Boolean, a23173 : 'Boolean, a23172 : 'Integer, a23179 : 'Integer, a23178 : 'Boolean, a23177 : 'Boolean, a23176 : 'Boolean, a23183 : 'Integer, a23182 : 'Integer, a23181 : 'Integer, a23180 : 'Integer, temp23186 : 'Integer, a23184 : 'Integer, a23159 : 'Boolean, a23158 : 'Boolean, a23157 : 'Boolean, a23156 : 'Boolean, a23163 : 'Integer, a23162 : 'Integer, a23161 : 'Integer, a23160 : 'Integer, a23167 : 'Integer, a23166 : 'Integer, a23165 : 'Integer, a23164 : 'Integer, a23171 : 'Integer, a23170 : 'Integer, a23169 : 'Integer, a23168 : 'Integer, a23079 : 'Boolean, a23078 : 'Boolean, a23077 : 'Boolean, a23076 : 'Integer, a23083 : 'Integer, a23082 : 'Boolean, a23081 : 'Boolean, a23080 : 'Boolean, a23087 : 'Integer, a23086 : 'Integer, a23085 : 'Integer, a23084 : 'Integer, a23091 : 'Integer, a23090 : 'Integer, a23089 : 'Integer, a23088 : 'Integer, a23063 : 'Boolean, a23062 : 'Boolean, a23061 : 'Boolean, a23060 : 'Boolean, a23067 : 'Integer, a23066 : 'Integer, a23065 : 'Integer, a23064 : 'Integer, a23071 : 'Integer, a23070 : 'Integer, a23069 : 'Integer, a23068 : 'Integer, a23075 : 'Integer, a23074 : 'Integer, a23073 : 'Integer, a23072 : 'Integer, a23111 : 'Integer, a23110 : 'Integer, a23109 : 'Integer, a23108 : 'Integer, a23115 : 'Boolean, a23114 : 'Integer, a23113 : 'Integer, a23112 : 'Integer, a23119 : 'Boolean, a23118 : 'Boolean, a23117 : 'Boolean, a23116 : 'Boolean, a23123 : 'Integer, a23122 : 'Integer, a23121 : 'Integer, a23120 : 'Boolean, a23095 : 'Integer, a23094 : 'Integer, a23093 : 'Integer, a23092 : 'Integer, a23099 : 'Boolean, a23098 : 'Boolean, a23097 : 'Boolean, a23096 : 'Boolean, a23103 : 'Integer, a23102 : 'Integer, a23101 : 'Boolean, a23100 : 'Boolean, a23107 : 'Integer, a23106 : 'Integer, a23105 : 'Integer, a23104 : 'Integer, a23015 : 'Integer, a23014 : 'Integer, a23013 : 'Integer, a23012 : 'Integer, a23019 : 'Integer, a23018 : 'Integer, a23017 : 'Integer, a23016 : 'Integer, a23023 : 'Boolean, a23022 : 'Boolean, a23021 : 'Boolean, a23020 : 'Boolean, a23027 : 'Integer, a23026 : 'Integer, a23025 : 'Boolean, a23024 : 'Boolean, a22999 : 'Integer, a22998 : 'Integer, a22997 : 'Integer, a22996 : 'Integer, a23003 : 'Boolean, a23002 : 'Boolean, a23001 : 'Boolean, a23000 : 'Integer, a23007 : 'Integer, a23006 : 'Boolean, a23005 : 'Boolean, a23004 : 'Boolean, a23011 : 'Integer, a23010 : 'Integer, a23009 : 'Integer, a23008 : 'Integer, a23047 : 'Integer, a23046 : 'Integer, a23045 : 'Integer, a23044 : 'Boolean, a23051 : 'Integer, a23050 : 'Integer, a23049 : 'Integer, a23048 : 'Integer, a23055 : 'Integer, a23054 : 'Integer, a23053 : 'Integer, a23052 : 'Integer, a23059 : 'Boolean, a23058 : 'Boolean, a23057 : 'Integer, a23056 : 'Integer, a23031 : 'Integer, a23030 : 'Integer, a23029 : 'Integer, a23028 : 'Integer, a23035 : 'Integer, a23034 : 'Integer, a23033 : 'Integer, a23032 : 'Integer, a23039 : 'Boolean, a23038 : 'Integer, a23037 : 'Integer, a23036 : 'Integer, a23043 : 'Boolean, a23042 : 'Boolean, a23041 : 'Boolean, a23040 : 'Boolean, 
label23464:
    movq $2, a23107
    movq a23107, a23089
    jmp label23459
    
label23465:
    cmpq temp23289, $3
    jg label23463
    jmp label23464
    
label23466:
    movq $1, a23102
    movq a23102, temp23289
    jmp label23465
    
label23467:
    movq $2, a23103
    movq a23103, temp23289
    jmp label23465
    
label23460:
    movq a23104, a23089
    jmp label23459
    
label23461:
    movq $1, a23105
    movq a23105, a23104
    jmp label23460
    
label23462:
    movq $2, a23106
    movq a23106, a23104
    jmp label23460
    
label23463:
    cmpq $1, $3
    jg label23461
    jmp label23462
    
label23472:
    movq $1, a23098
    cmpq $1, a23098
    je label23470
    jmp label23471
    
label23473:
    movq $0, a23099
    cmpq $1, a23099
    je label23470
    jmp label23471
    
label23474:
    movq $1, a23096
    cmpq $1, a23096
    je label23472
    jmp label23473
    
label23475:
    movq $0, a23097
    cmpq $1, a23097
    je label23472
    jmp label23473
    
label23468:
    cmpq $1, $3
    jg label23466
    jmp label23467
    
label23469:
    movq $2, a23089
    jmp label23459
    
label23470:
    movq $1, a23100
    cmpq $1, a23100
    je label23468
    jmp label23469
    
label23471:
    movq $0, a23101
    cmpq $1, a23101
    je label23468
    jmp label23469
    
label23448:
    movq $1, a23115
    cmpq $1, a23115
    je label23446
    jmp label23447
    
label23449:
    movq $0, a23116
    cmpq $1, a23116
    je label23446
    jmp label23447
    
label23450:
    cmpq temp23296, temp23295
    jg label23448
    jmp label23449
    
label23451:
    movq a23111, temp23296
    jmp label23450
    
label23444:
    movq $1, a23119
    cmpq $1, a23119
    je label23442
    jmp label23443
    
label23445:
    movq $0, a23120
    cmpq $1, a23120
    je label23442
    jmp label23443
    
label23446:
    movq $1, a23117
    cmpq $1, a23117
    je label23444
    jmp label23445
    
label23447:
    movq $0, a23118
    cmpq $1, a23118
    je label23444
    jmp label23445
    
label23456:
    cmpq temp23298, $3
    jg label23454
    jmp label23455
    
label23457:
    movq $1, a23109
    movq a23109, temp23298
    jmp label23456
    
label23458:
    movq $2, a23110
    movq a23110, temp23298
    jmp label23456
    
label23459:
    callq read_int
    movq %rax, temp23295
    cmpq $1, $3
    jg label23457
    jmp label23458
    
label23452:
    movq $1, a23112
    movq a23112, a23111
    jmp label23451
    
label23453:
    movq $2, a23113
    movq a23113, a23111
    jmp label23451
    
label23454:
    cmpq $1, $3
    jg label23452
    jmp label23453
    
label23455:
    movq $2, a23114
    movq a23114, temp23296
    jmp label23450
    
label23496:
    movq $1, a23081
    cmpq $1, a23081
    je label23494
    jmp label23495
    
label23497:
    movq $0, a23082
    cmpq $1, a23082
    je label23494
    jmp label23495
    
label23498:
    movq $1, a23079
    cmpq $1, a23079
    je label23496
    jmp label23497
    
label23499:
    movq $0, a23080
    cmpq $1, a23080
    je label23496
    jmp label23497
    
label23492:
    movq $1, a23083
    movq a23083, temp23276
    jmp label23491
    
label23493:
    movq $2, a23084
    movq a23084, temp23276
    jmp label23491
    
label23494:
    cmpq $1, $3
    jg label23492
    jmp label23493
    
label23495:
    movq $2, a23070
    jmp label23485
    
label23504:
    movq $1, a23074
    movq a23074, a23073
    jmp label23503
    
label23505:
    movq $2, a23075
    movq a23075, a23073
    jmp label23503
    
label23506:
    cmpq $1, $3
    jg label23504
    jmp label23505
    
label23507:
    movq $2, a23076
    movq a23076, temp23270
    jmp label23502
    
label23500:
    movq $1, a23077
    cmpq $1, a23077
    je label23498
    jmp label23499
    
label23501:
    movq $0, a23078
    cmpq $1, a23078
    je label23498
    jmp label23499
    
label23502:
    cmpq temp23270, temp23269
    jg label23500
    jmp label23501
    
label23503:
    movq a23073, temp23270
    jmp label23502
    
label23480:
    cmpq $1, $3
    jg label23478
    jmp label23479
    
label23481:
    movq $2, a23095
    movq a23095, temp23283
    jmp label23476
    
label23482:
    cmpq temp23285, $3
    jg label23480
    jmp label23481
    
label23483:
    movq $1, a23090
    movq a23090, temp23285
    jmp label23482
    
label23476:
    cmpq temp23283, temp23282
    jg label23474
    jmp label23475
    
label23477:
    movq a23092, temp23283
    jmp label23476
    
label23478:
    movq $1, a23093
    movq a23093, a23092
    jmp label23477
    
label23479:
    movq $2, a23094
    movq a23094, a23092
    jmp label23477
    
label23488:
    movq $2, a23087
    movq a23087, a23085
    jmp label23486
    
label23489:
    cmpq $1, $3
    jg label23487
    jmp label23488
    
label23490:
    movq $2, a23088
    movq a23088, a23070
    jmp label23485
    
label23491:
    cmpq temp23276, $3
    jg label23489
    jmp label23490
    
label23484:
    movq $2, a23091
    movq a23091, temp23285
    jmp label23482
    
label23485:
    callq read_int
    movq %rax, temp23282
    cmpq $1, $3
    jg label23483
    jmp label23484
    
label23486:
    movq a23085, a23070
    jmp label23485
    
label23487:
    movq $1, a23086
    movq a23086, a23085
    jmp label23486
    
label23400:
    movq $1, a23151
    movq a23151, a23150
    jmp label23399
    
label23401:
    movq $2, a23152
    movq a23152, a23150
    jmp label23399
    
label23402:
    cmpq $1, $3
    jg label23400
    jmp label23401
    
label23403:
    movq $2, a23153
    movq a23153, temp23325
    jmp label23398
    
label23396:
    movq $1, a23154
    cmpq $1, a23154
    je label23394
    jmp label23395
    
label23397:
    movq $0, a23155
    cmpq $1, a23155
    je label23394
    jmp label23395
    
label23398:
    cmpq temp23325, temp23324
    jg label23396
    jmp label23397
    
label23399:
    movq a23150, temp23325
    jmp label23398
    
label23408:
    movq a23142, a23127
    jmp label23407
    
label23409:
    movq $1, a23143
    movq a23143, a23142
    jmp label23408
    
label23410:
    movq $2, a23144
    movq a23144, a23142
    jmp label23408
    
label23411:
    cmpq $1, $3
    jg label23409
    jmp label23410
    
label23404:
    cmpq temp23327, $3
    jg label23402
    jmp label23403
    
label23405:
    movq $1, a23148
    movq a23148, temp23327
    jmp label23404
    
label23406:
    movq $2, a23149
    movq a23149, temp23327
    jmp label23404
    
label23407:
    callq read_int
    movq %rax, a23146
    callq read_int
    movq %rax, temp23324
    cmpq $1, $3
    jg label23405
    jmp label23406
    
label23384:
    movq $2, a23164
    movq a23164, a23162
    jmp label23382
    
label23385:
    cmpq $1, $3
    jg label23383
    jmp label23384
    
label23386:
    movq $2, a23165
    movq a23165, a23147
    jmp label23381
    
label23387:
    cmpq temp23331, $3
    jg label23385
    jmp label23386
    
label23380:
    movq $2, a23168
    movq a23168, temp23340
    jmp label23378
    
label23381:
    callq read_int
    movq %rax, temp23337
    cmpq $1, $3
    jg label23379
    jmp label23380
    
label23382:
    movq a23162, a23147
    jmp label23381
    
label23383:
    movq $1, a23163
    movq a23163, a23162
    jmp label23382
    
label23392:
    movq $1, a23158
    cmpq $1, a23158
    je label23390
    jmp label23391
    
label23393:
    movq $0, a23159
    cmpq $1, a23159
    je label23390
    jmp label23391
    
label23394:
    movq $1, a23156
    cmpq $1, a23156
    je label23392
    jmp label23393
    
label23395:
    movq $0, a23157
    cmpq $1, a23157
    je label23392
    jmp label23393
    
label23388:
    movq $1, a23160
    movq a23160, temp23331
    jmp label23387
    
label23389:
    movq $2, a23161
    movq a23161, temp23331
    jmp label23387
    
label23390:
    cmpq $1, $3
    jg label23388
    jmp label23389
    
label23391:
    movq $2, a23147
    jmp label23381
    
label23432:
    movq $2, a23129
    movq a23129, temp23311
    jmp label23430
    
label23433:
    callq read_int
    movq %rax, temp23308
    cmpq $1, $3
    jg label23431
    jmp label23432
    
label23434:
    movq a23123, a23108
    jmp label23433
    
label23435:
    movq $1, a23124
    movq a23124, a23123
    jmp label23434
    
label23428:
    cmpq $1, $3
    jg label23426
    jmp label23427
    
label23429:
    movq $2, a23133
    movq a23133, temp23309
    jmp label23424
    
label23430:
    cmpq temp23311, $3
    jg label23428
    jmp label23429
    
label23431:
    movq $1, a23128
    movq a23128, temp23311
    jmp label23430
    
label23440:
    movq $1, a23121
    movq a23121, temp23302
    jmp label23439
    
label23441:
    movq $2, a23122
    movq a23122, temp23302
    jmp label23439
    
label23442:
    cmpq $1, $3
    jg label23440
    jmp label23441
    
label23443:
    movq $2, a23108
    jmp label23433
    
label23436:
    movq $2, a23125
    movq a23125, a23123
    jmp label23434
    
label23437:
    cmpq $1, $3
    jg label23435
    jmp label23436
    
label23438:
    movq $2, a23126
    movq a23126, a23108
    jmp label23433
    
label23439:
    cmpq temp23302, $3
    jg label23437
    jmp label23438
    
label23416:
    cmpq $1, $3
    jg label23414
    jmp label23415
    
label23417:
    movq $2, a23127
    jmp label23407
    
label23418:
    movq $1, a23138
    cmpq $1, a23138
    je label23416
    jmp label23417
    
label23419:
    movq $0, a23139
    cmpq $1, a23139
    je label23416
    jmp label23417
    
label23412:
    movq $2, a23145
    movq a23145, a23127
    jmp label23407
    
label23413:
    cmpq temp23315, $3
    jg label23411
    jmp label23412
    
label23414:
    movq $1, a23140
    movq a23140, temp23315
    jmp label23413
    
label23415:
    movq $2, a23141
    movq a23141, temp23315
    jmp label23413
    
label23424:
    cmpq temp23309, temp23308
    jg label23422
    jmp label23423
    
label23425:
    movq a23130, temp23309
    jmp label23424
    
label23426:
    movq $1, a23131
    movq a23131, a23130
    jmp label23425
    
label23427:
    movq $2, a23132
    movq a23132, a23130
    jmp label23425
    
label23420:
    movq $1, a23136
    cmpq $1, a23136
    je label23418
    jmp label23419
    
label23421:
    movq $0, a23137
    cmpq $1, a23137
    je label23418
    jmp label23419
    
label23422:
    movq $1, a23134
    cmpq $1, a23134
    je label23420
    jmp label23421
    
label23423:
    movq $0, a23135
    cmpq $1, a23135
    je label23420
    jmp label23421
    
label23347:
    movq a22971, %rax
    jmp conclusion
    
label23368:
    movq $1, a23175
    cmpq $1, a23175
    je label23366
    jmp label23367
    
label23369:
    movq $0, a23176
    cmpq $1, a23176
    je label23366
    jmp label23367
    
label23370:
    movq $1, a23173
    cmpq $1, a23173
    je label23368
    jmp label23369
    
label23371:
    movq $0, a23174
    cmpq $1, a23174
    je label23368
    jmp label23369
    
label23364:
    cmpq $1, $3
    jg label23362
    jmp label23363
    
label23365:
    movq $2, a23166
    jmp label23355
    
label23366:
    movq $1, a23177
    cmpq $1, a23177
    je label23364
    jmp label23365
    
label23367:
    movq $0, a23178
    cmpq $1, a23178
    je label23364
    jmp label23365
    
label23376:
    cmpq $1, $3
    jg label23374
    jmp label23375
    
label23377:
    movq $2, a23172
    movq a23172, temp23338
    jmp label23372
    
label23378:
    cmpq temp23340, $3
    jg label23376
    jmp label23377
    
label23379:
    movq $1, a23167
    movq a23167, temp23340
    jmp label23378
    
label23372:
    cmpq temp23338, temp23337
    jg label23370
    jmp label23371
    
label23373:
    movq a23169, temp23338
    jmp label23372
    
label23374:
    movq $1, a23170
    movq a23170, a23169
    jmp label23373
    
label23375:
    movq $2, a23171
    movq a23171, a23169
    jmp label23373
    
label23352:
    cmpq temp23199, $3
    jg label23350
    jmp label23351
    
label23353:
    movq $1, a22969
    movq a22969, temp23199
    jmp label23352
    
label23354:
    movq $2, a22970
    movq a22970, temp23199
    jmp label23352
    
label23355:
    movq a23166, temp23335
    movq a23147, temp23322
    addq temp23335, temp23322
    movq a23146, temp23319
    addq temp23322, temp23319
    movq a23127, temp23306
    addq temp23319, temp23306
    movq a23108, temp23293
    addq temp23306, temp23293
    movq a23089, temp23280
    addq temp23293, temp23280
    movq a23070, temp23267
    addq temp23280, temp23267
    movq temp23266, temp23253
    addq temp23267, temp23253
    movq a23032, temp23240
    addq temp23253, temp23240
    movq a23013, temp23227
    addq temp23240, temp23227
    movq a22994, temp23214
    addq temp23227, temp23214
    movq a22975, %rax
    addq temp23214, %rax
    jmp conclusion
    
label23348:
    movq $1, a22972
    movq a22972, a22971
    jmp label23347
    
label23349:
    movq $2, a22973
    movq a22973, a22971
    jmp label23347
    
label23350:
    cmpq $1, $3
    jg label23348
    jmp label23349
    
label23351:
    movq $2, a22974
    movq a22974, %rax
    jmp conclusion
    
label23360:
    movq $2, a23184
    movq a23184, a23166
    jmp label23355
    
label23361:
    cmpq temp23344, $3
    jg label23359
    jmp label23360
    
label23362:
    movq $1, a23179
    movq a23179, temp23344
    jmp label23361
    
label23363:
    movq $2, a23180
    movq a23180, temp23344
    jmp label23361
    
label23356:
    movq a23181, a23166
    jmp label23355
    
label23357:
    movq $1, a23182
    movq a23182, a23181
    jmp label23356
    
label23358:
    movq $2, a23183
    movq a23183, a23181
    jmp label23356
    
label23359:
    cmpq $1, $3
    jg label23357
    jmp label23358
    
label23657:
    movq $2, a22964
    movq a22964, temp23195
    jmp label23655
    
label23656:
    movq $1, a22963
    movq a22963, temp23195
    jmp label23655
    
label23659:
    movq a22959, temp23188
    jmp label23658
    
label23658:
    cmpq $1, $3
    jg label23656
    jmp label23657
    
label23653:
    cmpq $1, $3
    jg label23651
    jmp label23652
    
label23652:
    movq $2, a22967
    movq a22967, a22965
    jmp label23650
    
label23655:
    cmpq temp23195, $3
    jg label23653
    jmp label23654
    
label23654:
    movq $2, a22968
    movq a22968, temp23193
    jmp label23649
    
label23665:
    movq $1, a22957
    movq a22957, temp23190
    jmp label23664
    
label23664:
    cmpq temp23190, $3
    jg label23662
    jmp label23663
    
label23666:
    movq $2, a22958
    movq a22958, temp23190
    jmp label23664
    
label23661:
    movq $2, a22961
    movq a22961, a22959
    jmp label23659
    
label23660:
    movq $1, a22960
    movq a22960, a22959
    jmp label23659
    
label23663:
    movq $2, a22962
    movq a22962, temp23188
    jmp label23658
    
label23662:
    cmpq $1, $3
    jg label23660
    jmp label23661
    
label23641:
    cmpq $1, $3
    jg label23353
    jmp label23354
    
label23640:
    movq $2, a22977
    movq a22977, temp23206
    jmp label23638
    
label23643:
    cmpq $1, x22956
    je label23641
    jmp label23642
    
label23642:
    callq read_int
    movq %rax, temp23203
    cmpq $1, $3
    jg label23639
    jmp label23640
    
label23637:
    movq $2, a22981
    movq a22981, temp23204
    jmp label23632
    
label23636:
    cmpq $1, $3
    jg label23634
    jmp label23635
    
label23639:
    movq $1, a22976
    movq a22976, temp23206
    jmp label23638
    
label23638:
    cmpq temp23206, $3
    jg label23636
    jmp label23637
    
label23649:
    cmpq temp23193, temp23188
    jge label23647
    jmp label23648
    
label23648:
    movq $9, temp23186
    jmp label23646
    
label23651:
    movq $1, a22966
    movq a22966, a22965
    jmp label23650
    
label23650:
    movq a22965, temp23193
    jmp label23649
    
label23645:
    movq $0, x22956
    jmp label23643
    
label23644:
    movq $1, x22956
    jmp label23643
    
label23647:
    movq $8, temp23186
    jmp label23646
    
label23646:
    cmpq $8, temp23186
    jg label23644
    jmp label23645
    
label23593:
    cmpq $1, $3
    jg label23591
    jmp label23592
    
label23592:
    movq $2, a23011
    movq a23011, a23009
    jmp label23590
    
label23595:
    cmpq temp23223, $3
    jg label23593
    jmp label23594
    
label23594:
    movq $2, a23012
    movq a23012, a22994
    jmp label23589
    
label23589:
    callq read_int
    movq %rax, temp23229
    cmpq $1, $3
    jg label23587
    jmp label23588
    
label23588:
    movq $2, a23015
    movq a23015, temp23232
    jmp label23586
    
label23591:
    movq $1, a23010
    movq a23010, a23009
    jmp label23590
    
label23590:
    movq a23009, a22994
    jmp label23589
    
label23601:
    movq $0, a23006
    cmpq $1, a23006
    je label23598
    jmp label23599
    
label23600:
    movq $1, a23005
    cmpq $1, a23005
    je label23598
    jmp label23599
    
label23603:
    movq $0, a23004
    cmpq $1, a23004
    je label23600
    jmp label23601
    
label23602:
    movq $1, a23003
    cmpq $1, a23003
    je label23600
    jmp label23601
    
label23597:
    movq $2, a23008
    movq a23008, temp23223
    jmp label23595
    
label23596:
    movq $1, a23007
    movq a23007, temp23223
    jmp label23595
    
label23599:
    movq $2, a22994
    jmp label23589
    
label23598:
    cmpq $1, $3
    jg label23596
    jmp label23597
    
label23577:
    movq $0, a23023
    cmpq $1, a23023
    je label23574
    jmp label23575
    
label23576:
    movq $1, a23022
    cmpq $1, a23022
    je label23574
    jmp label23575
    
label23579:
    movq $0, a23021
    cmpq $1, a23021
    je label23576
    jmp label23577
    
label23578:
    movq $1, a23020
    cmpq $1, a23020
    je label23576
    jmp label23577
    
label23573:
    movq $2, a23013
    jmp label23563
    
label23572:
    cmpq $1, $3
    jg label23570
    jmp label23571
    
label23575:
    movq $0, a23025
    cmpq $1, a23025
    je label23572
    jmp label23573
    
label23574:
    movq $1, a23024
    cmpq $1, a23024
    je label23572
    jmp label23573
    
label23585:
    movq $2, a23019
    movq a23019, temp23230
    jmp label23580
    
label23584:
    cmpq $1, $3
    jg label23582
    jmp label23583
    
label23587:
    movq $1, a23014
    movq a23014, temp23232
    jmp label23586
    
label23586:
    cmpq temp23232, $3
    jg label23584
    jmp label23585
    
label23581:
    movq a23016, temp23230
    jmp label23580
    
label23580:
    cmpq temp23230, temp23229
    jg label23578
    jmp label23579
    
label23583:
    movq $2, a23018
    movq a23018, a23016
    jmp label23581
    
label23582:
    movq $1, a23017
    movq a23017, a23016
    jmp label23581
    
label23625:
    movq $2, a22975
    jmp label23615
    
label23624:
    cmpq $1, $3
    jg label23622
    jmp label23623
    
label23627:
    movq $0, a22987
    cmpq $1, a22987
    je label23624
    jmp label23625
    
label23626:
    movq $1, a22986
    cmpq $1, a22986
    je label23624
    jmp label23625
    
label23621:
    cmpq temp23210, $3
    jg label23619
    jmp label23620
    
label23620:
    movq $2, a22993
    movq a22993, a22975
    jmp label23615
    
label23623:
    movq $2, a22989
    movq a22989, temp23210
    jmp label23621
    
label23622:
    movq $1, a22988
    movq a22988, temp23210
    jmp label23621
    
label23633:
    movq a22978, temp23204
    jmp label23632
    
label23632:
    cmpq temp23204, temp23203
    jg label23630
    jmp label23631
    
label23635:
    movq $2, a22980
    movq a22980, a22978
    jmp label23633
    
label23634:
    movq $1, a22979
    movq a22979, a22978
    jmp label23633
    
label23629:
    movq $0, a22985
    cmpq $1, a22985
    je label23626
    jmp label23627
    
label23628:
    movq $1, a22984
    cmpq $1, a22984
    je label23626
    jmp label23627
    
label23631:
    movq $0, a22983
    cmpq $1, a22983
    je label23628
    jmp label23629
    
label23630:
    movq $1, a22982
    cmpq $1, a22982
    je label23628
    jmp label23629
    
label23609:
    movq $2, a22999
    movq a22999, a22997
    jmp label23607
    
label23608:
    movq $1, a22998
    movq a22998, a22997
    jmp label23607
    
label23611:
    movq $2, a23000
    movq a23000, temp23217
    jmp label23606
    
label23610:
    cmpq $1, $3
    jg label23608
    jmp label23609
    
label23605:
    movq $0, a23002
    cmpq $1, a23002
    je label23602
    jmp label23603
    
label23604:
    movq $1, a23001
    cmpq $1, a23001
    je label23602
    jmp label23603
    
label23607:
    movq a22997, temp23217
    jmp label23606
    
label23606:
    cmpq temp23217, temp23216
    jg label23604
    jmp label23605
    
label23617:
    movq $1, a22991
    movq a22991, a22990
    jmp label23616
    
start:
    cmpq $1, $3
    jg label23665
    jmp label23666
    
label23616:
    movq a22990, a22975
    jmp label23615
    
label23619:
    cmpq $1, $3
    jg label23617
    jmp label23618
    
label23618:
    movq $2, a22992
    movq a22992, a22990
    jmp label23616
    
label23613:
    movq $1, a22995
    movq a22995, temp23219
    jmp label23612
    
label23612:
    cmpq temp23219, $3
    jg label23610
    jmp label23611
    
label23615:
    callq read_int
    movq %rax, temp23216
    cmpq $1, $3
    jg label23613
    jmp label23614
    
label23614:
    movq $2, a22996
    movq a22996, temp23219
    jmp label23612
    
label23529:
    movq a23054, temp23256
    jmp label23528
    
label23528:
    cmpq temp23256, temp23255
    jg label23526
    jmp label23527
    
label23531:
    movq $2, a23056
    movq a23056, a23054
    jmp label23529
    
label23530:
    movq $1, a23055
    movq a23055, a23054
    jmp label23529
    
label23525:
    movq $0, a23061
    cmpq $1, a23061
    je label23522
    jmp label23523
    
label23524:
    movq $1, a23060
    cmpq $1, a23060
    je label23522
    jmp label23523
    
label23527:
    movq $0, a23059
    cmpq $1, a23059
    je label23524
    jmp label23525
    
label23526:
    movq $1, a23058
    cmpq $1, a23058
    je label23524
    jmp label23525
    
label23537:
    callq read_int
    movq %rax, temp23255
    cmpq $1, $3
    jg label23535
    jmp label23536
    
label23536:
    movq $2, a23053
    movq a23053, temp23258
    jmp label23534
    
label23539:
    movq $1, a23048
    movq a23048, a23047
    jmp label23538
    
label23538:
    movq a23047, a23032
    jmp label23537
    
label23533:
    movq $2, a23057
    movq a23057, temp23256
    jmp label23528
    
label23532:
    cmpq $1, $3
    jg label23530
    jmp label23531
    
label23535:
    movq $1, a23052
    movq a23052, temp23258
    jmp label23534
    
label23534:
    cmpq temp23258, $3
    jg label23532
    jmp label23533
    
label23513:
    movq $1, a23067
    movq a23067, a23066
    jmp label23512
    
label23512:
    movq a23066, a23051
    jmp label23511
    
label23515:
    cmpq $1, $3
    jg label23513
    jmp label23514
    
label23514:
    movq $2, a23068
    movq a23068, a23066
    jmp label23512
    
label23509:
    movq $1, a23071
    movq a23071, temp23272
    jmp label23508
    
label23508:
    cmpq temp23272, $3
    jg label23506
    jmp label23507
    
label23511:
    callq read_int
    movq %rax, temp23266
    callq read_int
    movq %rax, temp23269
    cmpq $1, $3
    jg label23509
    jmp label23510
    
label23510:
    movq $2, a23072
    movq a23072, temp23272
    jmp label23508
    
label23521:
    movq $2, a23051
    jmp label23511
    
label23520:
    cmpq $1, $3
    jg label23518
    jmp label23519
    
label23523:
    movq $0, a23063
    cmpq $1, a23063
    je label23520
    jmp label23521
    
label23522:
    movq $1, a23062
    cmpq $1, a23062
    je label23520
    jmp label23521
    
label23517:
    cmpq temp23262, $3
    jg label23515
    jmp label23516
    
label23516:
    movq $2, a23069
    movq a23069, a23051
    jmp label23511
    
label23519:
    movq $2, a23065
    movq a23065, temp23262
    jmp label23517
    
label23518:
    movq $1, a23064
    movq a23064, temp23262
    jmp label23517
    
label23561:
    movq $1, a23033
    movq a23033, temp23245
    jmp label23560
    
label23560:
    cmpq temp23245, $3
    jg label23558
    jmp label23559
    
label23563:
    callq read_int
    movq %rax, temp23242
    cmpq $1, $3
    jg label23561
    jmp label23562
    
label23562:
    movq $2, a23034
    movq a23034, temp23245
    jmp label23560
    
label23557:
    movq $2, a23037
    movq a23037, a23035
    jmp label23555
    
label23556:
    movq $1, a23036
    movq a23036, a23035
    jmp label23555
    
label23559:
    movq $2, a23038
    movq a23038, temp23243
    jmp label23554
    
label23558:
    cmpq $1, $3
    jg label23556
    jmp label23557
    
label23569:
    cmpq temp23236, $3
    jg label23567
    jmp label23568
    
label23568:
    movq $2, a23031
    movq a23031, a23013
    jmp label23563
    
label23571:
    movq $2, a23027
    movq a23027, temp23236
    jmp label23569
    
label23570:
    movq $1, a23026
    movq a23026, temp23236
    jmp label23569
    
label23565:
    movq $1, a23029
    movq a23029, a23028
    jmp label23564
    
label23564:
    movq a23028, a23013
    jmp label23563
    
label23567:
    cmpq $1, $3
    jg label23565
    jmp label23566
    
label23566:
    movq $2, a23030
    movq a23030, a23028
    jmp label23564
    
label23545:
    movq $2, a23046
    movq a23046, temp23249
    jmp label23543
    
label23544:
    movq $1, a23045
    movq a23045, temp23249
    jmp label23543
    
label23547:
    movq $2, a23032
    jmp label23537
    
label23546:
    cmpq $1, $3
    jg label23544
    jmp label23545
    
label23541:
    cmpq $1, $3
    jg label23539
    jmp label23540
    
label23540:
    movq $2, a23049
    movq a23049, a23047
    jmp label23538
    
label23543:
    cmpq temp23249, $3
    jg label23541
    jmp label23542
    
label23542:
    movq $2, a23050
    movq a23050, a23032
    jmp label23537
    
label23553:
    movq $0, a23040
    cmpq $1, a23040
    je label23550
    jmp label23551
    
label23552:
    movq $1, a23039
    cmpq $1, a23039
    je label23550
    jmp label23551
    
label23555:
    movq a23035, temp23243
    jmp label23554
    
label23554:
    cmpq temp23243, temp23242
    jg label23552
    jmp label23553
    
label23549:
    movq $0, a23044
    cmpq $1, a23044
    je label23546
    jmp label23547
    
label23548:
    movq $1, a23043
    cmpq $1, a23043
    je label23546
    jmp label23547
    
label23551:
    movq $0, a23042
    cmpq $1, a23042
    je label23548
    jmp label23549
    
label23550:
    movq $1, a23041
    cmpq $1, a23041
    je label23548
    jmp label23549
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22958 : 'Integer, a22959 : 'Integer, x22956 : 'Boolean, a22957 : 'Integer, a22962 : 'Integer, a22963 : 'Integer, a22960 : 'Integer, a22961 : 'Integer, a22982 : 'Boolean, a22983 : 'Boolean, a22980 : 'Integer, a22981 : 'Integer, a22986 : 'Boolean, a22987 : 'Boolean, a22984 : 'Boolean, a22985 : 'Boolean, a22990 : 'Integer, a22991 : 'Integer, a22988 : 'Integer, a22989 : 'Integer, a22994 : 'Integer, a22995 : 'Integer, a22992 : 'Integer, a22993 : 'Integer, a22966 : 'Integer, a22967 : 'Integer, a22964 : 'Integer, a22965 : 'Integer, a22970 : 'Integer, a22971 : 'Integer, a22968 : 'Integer, a22969 : 'Integer, a22974 : 'Integer, a22975 : 'Integer, a22972 : 'Integer, a22973 : 'Integer, a22978 : 'Integer, a22979 : 'Integer, a22976 : 'Integer, a22977 : 'Integer, temp23337 : 'Integer, temp23338 : 'Integer, temp23335 : 'Integer, temp23344 : 'Integer, temp23340 : 'Integer, temp23322 : 'Integer, temp23319 : 'Integer, temp23331 : 'Integer, temp23324 : 'Integer, temp23325 : 'Integer, temp23327 : 'Integer, temp23272 : 'Integer, temp23269 : 'Integer, temp23270 : 'Integer, temp23280 : 'Integer, temp23282 : 'Integer, temp23283 : 'Integer, temp23276 : 'Integer, temp23256 : 'Integer, temp23258 : 'Integer, temp23253 : 'Integer, temp23255 : 'Integer, temp23266 : 'Integer, temp23267 : 'Integer, temp23262 : 'Integer, temp23306 : 'Integer, temp23302 : 'Integer, temp23315 : 'Integer, temp23308 : 'Integer, temp23309 : 'Integer, temp23311 : 'Integer, temp23289 : 'Integer, temp23285 : 'Integer, temp23296 : 'Integer, temp23298 : 'Integer, temp23293 : 'Integer, temp23295 : 'Integer, temp23206 : 'Integer, temp23204 : 'Integer, temp23210 : 'Integer, temp23214 : 'Integer, temp23219 : 'Integer, temp23217 : 'Integer, temp23216 : 'Integer, temp23190 : 'Integer, temp23188 : 'Integer, temp23195 : 'Integer, temp23193 : 'Integer, temp23199 : 'Integer, temp23203 : 'Integer, temp23236 : 'Integer, temp23243 : 'Integer, temp23242 : 'Integer, temp23240 : 'Integer, temp23245 : 'Integer, temp23249 : 'Integer, temp23223 : 'Integer, temp23227 : 'Integer, temp23230 : 'Integer, temp23229 : 'Integer, temp23232 : 'Integer, a23143 : 'Integer, a23142 : 'Integer, a23141 : 'Integer, a23140 : 'Integer, a23147 : 'Integer, a23146 : 'Integer, a23145 : 'Integer, a23144 : 'Integer, a23151 : 'Integer, a23150 : 'Integer, a23149 : 'Integer, a23148 : 'Integer, a23155 : 'Boolean, a23154 : 'Boolean, a23153 : 'Integer, a23152 : 'Integer, a23127 : 'Integer, a23126 : 'Integer, a23125 : 'Integer, a23124 : 'Integer, a23131 : 'Integer, a23130 : 'Integer, a23129 : 'Integer, a23128 : 'Integer, a23135 : 'Boolean, a23134 : 'Boolean, a23133 : 'Integer, a23132 : 'Integer, a23139 : 'Boolean, a23138 : 'Boolean, a23137 : 'Boolean, a23136 : 'Boolean, a23175 : 'Boolean, a23174 : 'Boolean, a23173 : 'Boolean, a23172 : 'Integer, a23179 : 'Integer, a23178 : 'Boolean, a23177 : 'Boolean, a23176 : 'Boolean, a23183 : 'Integer, a23182 : 'Integer, a23181 : 'Integer, a23180 : 'Integer, temp23186 : 'Integer, a23184 : 'Integer, a23159 : 'Boolean, a23158 : 'Boolean, a23157 : 'Boolean, a23156 : 'Boolean, a23163 : 'Integer, a23162 : 'Integer, a23161 : 'Integer, a23160 : 'Integer, a23167 : 'Integer, a23166 : 'Integer, a23165 : 'Integer, a23164 : 'Integer, a23171 : 'Integer, a23170 : 'Integer, a23169 : 'Integer, a23168 : 'Integer, a23079 : 'Boolean, a23078 : 'Boolean, a23077 : 'Boolean, a23076 : 'Integer, a23083 : 'Integer, a23082 : 'Boolean, a23081 : 'Boolean, a23080 : 'Boolean, a23087 : 'Integer, a23086 : 'Integer, a23085 : 'Integer, a23084 : 'Integer, a23091 : 'Integer, a23090 : 'Integer, a23089 : 'Integer, a23088 : 'Integer, a23063 : 'Boolean, a23062 : 'Boolean, a23061 : 'Boolean, a23060 : 'Boolean, a23067 : 'Integer, a23066 : 'Integer, a23065 : 'Integer, a23064 : 'Integer, a23071 : 'Integer, a23070 : 'Integer, a23069 : 'Integer, a23068 : 'Integer, a23075 : 'Integer, a23074 : 'Integer, a23073 : 'Integer, a23072 : 'Integer, a23111 : 'Integer, a23110 : 'Integer, a23109 : 'Integer, a23108 : 'Integer, a23115 : 'Boolean, a23114 : 'Integer, a23113 : 'Integer, a23112 : 'Integer, a23119 : 'Boolean, a23118 : 'Boolean, a23117 : 'Boolean, a23116 : 'Boolean, a23123 : 'Integer, a23122 : 'Integer, a23121 : 'Integer, a23120 : 'Boolean, a23095 : 'Integer, a23094 : 'Integer, a23093 : 'Integer, a23092 : 'Integer, a23099 : 'Boolean, a23098 : 'Boolean, a23097 : 'Boolean, a23096 : 'Boolean, a23103 : 'Integer, a23102 : 'Integer, a23101 : 'Boolean, a23100 : 'Boolean, a23107 : 'Integer, a23106 : 'Integer, a23105 : 'Integer, a23104 : 'Integer, a23015 : 'Integer, a23014 : 'Integer, a23013 : 'Integer, a23012 : 'Integer, a23019 : 'Integer, a23018 : 'Integer, a23017 : 'Integer, a23016 : 'Integer, a23023 : 'Boolean, a23022 : 'Boolean, a23021 : 'Boolean, a23020 : 'Boolean, a23027 : 'Integer, a23026 : 'Integer, a23025 : 'Boolean, a23024 : 'Boolean, a22999 : 'Integer, a22998 : 'Integer, a22997 : 'Integer, a22996 : 'Integer, a23003 : 'Boolean, a23002 : 'Boolean, a23001 : 'Boolean, a23000 : 'Integer, a23007 : 'Integer, a23006 : 'Boolean, a23005 : 'Boolean, a23004 : 'Boolean, a23011 : 'Integer, a23010 : 'Integer, a23009 : 'Integer, a23008 : 'Integer, a23047 : 'Integer, a23046 : 'Integer, a23045 : 'Integer, a23044 : 'Boolean, a23051 : 'Integer, a23050 : 'Integer, a23049 : 'Integer, a23048 : 'Integer, a23055 : 'Integer, a23054 : 'Integer, a23053 : 'Integer, a23052 : 'Integer, a23059 : 'Boolean, a23058 : 'Boolean, a23057 : 'Integer, a23056 : 'Integer, a23031 : 'Integer, a23030 : 'Integer, a23029 : 'Integer, a23028 : 'Integer, a23035 : 'Integer, a23034 : 'Integer, a23033 : 'Integer, a23032 : 'Integer, a23039 : 'Boolean, a23038 : 'Integer, a23037 : 'Integer, a23036 : 'Integer, a23043 : 'Boolean, a23042 : 'Boolean, a23041 : 'Boolean, a23040 : 'Boolean, 
tsorted
:
'(label23351
  label23355
  label23360
  label23356
  label23357
  label23358
  label23359
  label23361
  label23362
  label23363
  label23365
  label23364
  label23366
  label23367
  label23369
  label23368
  label23370
  label23371
  label23372
  label23377
  label23373
  label23374
  label23375
  label23376
  label23378
  label23379
  label23347
  label23348
  label23349
  label23350
  label23352
  label23353
  label23354
  label23641
  label23380
  label23381
  label23382
  label23383
  label23391
  label23386
  label23384
  label23385
  label23387
  label23388
  label23389
  label23390
  label23392
  label23393
  label23394
  label23395
  label23397
  label23396
  label23398
  label23399
  label23403
  label23401
  label23400
  label23402
  label23404
  label23405
  label23406
  label23407
  label23408
  label23409
  label23410
  label23411
  label23417
  label23412
  label23413
  label23414
  label23415
  label23416
  label23418
  label23419
  label23420
  label23421
  label23422
  label23423
  label23424
  label23429
  label23425
  label23426
  label23427
  label23428
  label23430
  label23432
  label23431
  label23433
  label23434
  label23435
  label23436
  label23437
  label23443
  label23438
  label23439
  label23440
  label23441
  label23442
  label23445
  label23444
  label23446
  label23447
  label23449
  label23448
  label23450
  label23451
  label23452
  label23453
  label23454
  label23455
  label23456
  label23457
  label23458
  label23459
  label23469
  label23460
  label23461
  label23462
  label23463
  label23464
  label23465
  label23466
  label23467
  label23468
  label23470
  label23471
  label23472
  label23473
  label23474
  label23475
  label23476
  label23481
  label23477
  label23478
  label23479
  label23480
  label23482
  label23483
  label23484
  label23485
  label23495
  label23490
  label23486
  label23488
  label23487
  label23489
  label23491
  label23492
  label23493
  label23494
  label23496
  label23497
  label23498
  label23499
  label23500
  label23501
  label23502
  label23507
  label23503
  label23504
  label23505
  label23506
  label23508
  label23509
  label23510
  label23511
  label23512
  label23513
  label23514
  label23515
  label23521
  label23516
  label23517
  label23519
  label23518
  label23520
  label23523
  label23522
  label23525
  label23524
  label23527
  label23526
  label23528
  label23529
  label23531
  label23530
  label23532
  label23533
  label23534
  label23536
  label23535
  label23537
  label23538
  label23539
  label23540
  label23541
  label23547
  label23542
  label23543
  label23545
  label23544
  label23546
  label23549
  label23548
  label23551
  label23550
  label23553
  label23552
  label23554
  label23559
  label23555
  label23557
  label23556
  label23558
  label23560
  label23561
  label23562
  label23563
  label23573
  label23568
  label23564
  label23565
  label23566
  label23567
  label23569
  label23571
  label23570
  label23572
  label23575
  label23574
  label23577
  label23576
  label23579
  label23578
  label23580
  label23585
  label23581
  label23583
  label23582
  label23584
  label23586
  label23588
  label23587
  label23589
  label23594
  label23590
  label23592
  label23591
  label23593
  label23595
  label23597
  label23596
  label23598
  label23599
  label23601
  label23600
  label23603
  label23602
  label23605
  label23604
  label23606
  label23611
  label23607
  label23609
  label23608
  label23610
  label23612
  label23613
  label23614
  label23615
  label23625
  label23620
  label23616
  label23617
  label23618
  label23619
  label23621
  label23623
  label23622
  label23624
  label23627
  label23626
  label23629
  label23628
  label23631
  label23630
  label23632
  label23637
  label23633
  label23635
  label23634
  label23636
  label23638
  label23640
  label23639
  label23642
  label23643
  label23645
  label23644
  label23646
  label23648
  label23647
  label23649
  label23654
  label23650
  label23652
  label23651
  label23653
  label23655
  label23657
  label23656
  label23658
  label23659
  label23661
  label23660
  label23662
  label23663
  label23664
  label23665
  label23666
  start)
CFG
:
#<multigraph>
label23351:
    liveness
:
(list (set %rsp) (set a22974 %rsp) (set %rax %rsp))
movq $2, a22974
movq a22974, %rax
jmp conclusion

label23355:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a22975
  a23089
  %rsp
  a23070
  a23166
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  temp23335
  a23127
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23070
  a22975
  a23089
  %rsp
  temp23335
  a23127
  temp23322
  a23146
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23070
  a22975
  a23089
  %rsp
  temp23322
  a23146
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23322
  a23070
  a22975
  a23089
  %rsp
  temp23319
  a23127
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23070
  a22975
  a23089
  %rsp
  temp23319
  a23127
  a22994
  temp23266)
 (set
  a23108
  a23013
  temp23319
  a23032
  temp23306
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23306
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23013
  a23032
  temp23306
  temp23293
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set a23013 a23032 temp23293 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 temp23293 a23070 a22975 temp23280 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 temp23280 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 temp23280 a22994 temp23266 temp23267 %rsp)
 (set a23013 a23032 a22975 a22994 temp23266 temp23267 %rsp)
 (set a23032 a22975 a22994 temp23253 a23013 temp23267 %rsp)
 (set a23032 a22975 a22994 %rsp temp23253 a23013)
 (set temp23240 a22975 a22994 %rsp temp23253 a23013)
 (set a23013 temp23240 a22975 a22994 %rsp)
 (set temp23240 temp23227 a22975 a22994 %rsp)
 (set temp23227 a22975 a22994 %rsp)
 (set temp23227 temp23214 a22975 %rsp)
 (set temp23214 a22975 %rsp)
 (set %rax temp23214 %rsp)
 (set %rax %rsp))
movq a23166, temp23335
movq a23147, temp23322
addq temp23335, temp23322
movq a23146, temp23319
addq temp23322, temp23319
movq a23127, temp23306
addq temp23319, temp23306
movq a23108, temp23293
addq temp23306, temp23293
movq a23089, temp23280
addq temp23293, temp23280
movq a23070, temp23267
addq temp23280, temp23267
movq temp23266, temp23253
addq temp23267, temp23253
movq a23032, temp23240
addq temp23253, temp23240
movq a23013, temp23227
addq temp23240, temp23227
movq a22994, temp23214
addq temp23227, temp23214
movq a22975, %rax
addq temp23214, %rax
jmp conclusion

label23360:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23184
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a22975
  a23089
  %rsp
  a23070
  a23166
  a22994
  temp23266))
movq $2, a23184
movq a23184, a23166
jmp label23355

label23356:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23181
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a22975
  a23089
  %rsp
  a23070
  a23166
  a22994
  temp23266))
movq a23181, a23166
jmp label23355

label23357:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a22975
  a23089
  %rsp
  a23070
  a23182
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23181
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23182
movq a23182, a23181
jmp label23356

label23358:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a23089
  %rsp
  a23183
  a22975
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23181
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $2, a23183
movq a23183, a23181
jmp label23356

label23359:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq $1, $3
jg label23357
jmp label23358

label23361:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  temp23344
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq temp23344, $3
jg label23359
jmp label23360

label23362:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a23147
  a23179
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  temp23344
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23179
movq a23179, temp23344
jmp label23361

label23363:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23180
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  temp23344
  a23089
  %rsp
  a22994
  temp23266))
movq $2, a23180
movq a23180, temp23344
jmp label23361

label23365:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a22975
  a23089
  %rsp
  a23070
  a23166
  a22994
  temp23266))
movq $2, a23166
jmp label23355

label23364:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq $1, $3
jg label23362
jmp label23363

label23366:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23177
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23177
cmpq $1, a23177
je label23364
jmp label23365

label23367:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23147
  a23070
  a22975
  a23089
  %rsp
  a23146
  a23178
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $0, a23178
cmpq $1, a23178
je label23364
jmp label23365

label23369:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a23032
  a23176
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $0, a23176
cmpq $1, a23176
je label23366
jmp label23367

label23368:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a23127
  a23175
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23175
cmpq $1, a23175
je label23366
jmp label23367

label23370:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a23013
  a23173
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23173
cmpq $1, a23173
je label23368
jmp label23369

label23371:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23174
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $0, a23174
cmpq $1, a23174
je label23368
jmp label23369

label23372:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23147
  a23070
  a22975
  a23089
  %rsp
  temp23338
  a23146
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq temp23338, temp23337
jg label23370
jmp label23371

label23377:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a23108
  a23172
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23147
  a23070
  a22975
  a23089
  %rsp
  temp23338
  a23146
  a22994
  temp23266))
movq $2, a23172
movq a23172, temp23338
jmp label23372

label23373:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  %rsp
  a23089
  a23169
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23147
  a23070
  a22975
  a23089
  %rsp
  temp23338
  a23146
  a22994
  temp23266))
movq a23169, temp23338
jmp label23372

label23374:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266
  a23170)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  %rsp
  a23089
  a23169
  a22994
  temp23266))
movq $1, a23170
movq a23170, a23169
jmp label23373

label23375:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  a22994
  temp23266
  %rsp
  a23171)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  %rsp
  a23089
  a23169
  a22994
  temp23266))
movq $2, a23171
movq a23171, a23169
jmp label23373

label23376:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq $1, $3
jg label23374
jmp label23375

label23378:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  temp23340
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq temp23340, $3
jg label23376
jmp label23377

label23379:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a23089
  %rsp
  a23167
  a22975
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  temp23340
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23167
movq a23167, temp23340
jmp label23378

label23347:
    liveness
:
(list (set a22971 %rsp) (set %rax %rsp))
movq a22971, %rax
jmp conclusion

label23348:
    liveness
:
(list (set %rsp) (set a22972 %rsp) (set a22971 %rsp))
movq $1, a22972
movq a22972, a22971
jmp label23347

label23349:
    liveness
:
(list (set %rsp) (set a22973 %rsp) (set a22971 %rsp))
movq $2, a22973
movq a22973, a22971
jmp label23347

label23350:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label23348
jmp label23349

label23352:
    liveness
:
(list (set temp23199 %rsp) (set %rsp) (set %rsp))
cmpq temp23199, $3
jg label23350
jmp label23351

label23353:
    liveness
:
(list (set %rsp) (set a22969 %rsp) (set temp23199 %rsp))
movq $1, a22969
movq a22969, temp23199
jmp label23352

label23354:
    liveness
:
(list (set %rsp) (set a22970 %rsp) (set temp23199 %rsp))
movq $2, a22970
movq a22970, temp23199
jmp label23352

label23641:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label23353
jmp label23354

label23380:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23168
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  temp23340
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $2, a23168
movq a23168, temp23340
jmp label23378

label23381:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  %rax
  a23108
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  temp23337
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
callq read_int
movq %rax, temp23337
cmpq $1, $3
jg label23379
jmp label23380

label23382:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23070
  a22975
  a23089
  %rsp
  a23146
  a23162
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq a23162, a23147
jmp label23381

label23383:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23163
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23070
  a22975
  a23089
  %rsp
  a23146
  a23162
  a22994
  temp23266))
movq $1, a23163
movq a23163, a23162
jmp label23382

label23391:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $2, a23147
jmp label23381

label23386:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23165
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23147
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $2, a23165
movq a23165, a23147
jmp label23381

label23384:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23164
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23070
  a22975
  a23089
  %rsp
  a23146
  a23162
  a22994
  temp23266))
movq $2, a23164
movq a23164, a23162
jmp label23382

label23385:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq $1, $3
jg label23383
jmp label23384

label23387:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  a22994
  temp23266
  temp23331
  %rsp)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq temp23331, $3
jg label23385
jmp label23386

label23388:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23146
  a23070
  a22975
  a23089
  %rsp
  a23032
  a23160
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  a22994
  temp23266
  temp23331
  %rsp))
movq $1, a23160
movq a23160, temp23331
jmp label23387

label23389:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23161
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  a22994
  temp23266
  temp23331
  %rsp))
movq $2, a23161
movq a23161, temp23331
jmp label23387

label23390:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq $1, $3
jg label23388
jmp label23389

label23392:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23158
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23158
cmpq $1, a23158
je label23390
jmp label23391

label23393:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a23127
  a23159
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $0, a23159
cmpq $1, a23159
je label23390
jmp label23391

label23394:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a23108
  a23156
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23156
cmpq $1, a23156
je label23392
jmp label23393

label23395:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a23013
  a23157
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $0, a23157
cmpq $1, a23157
je label23392
jmp label23393

label23397:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  a22994
  temp23266
  %rsp
  a23155)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $0, a23155
cmpq $1, a23155
je label23394
jmp label23395

label23396:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266
  a23154)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23154
cmpq $1, a23154
je label23394
jmp label23395

label23398:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  temp23325
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq temp23325, temp23324
jg label23396
jmp label23397

label23399:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a22975
  a23089
  %rsp
  a23070
  a23150
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  temp23325
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq a23150, temp23325
jmp label23398

label23403:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  %rsp
  a23089
  a23153
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  temp23325
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $2, a23153
movq a23153, temp23325
jmp label23398

label23401:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23152
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a22975
  a23089
  %rsp
  a23070
  a23150
  a22994
  temp23266))
movq $2, a23152
movq a23152, a23150
jmp label23399

label23400:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a23089
  %rsp
  a23151
  a22975
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a22975
  a23089
  %rsp
  a23070
  a23150
  a22994
  temp23266))
movq $1, a23151
movq a23151, a23150
jmp label23399

label23402:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq $1, $3
jg label23400
jmp label23401

label23404:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a23089
  %rsp
  temp23327
  a22975
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq temp23327, $3
jg label23402
jmp label23403

label23405:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  temp23324
  a23148
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a23089
  %rsp
  temp23327
  a22975
  a22994
  temp23266))
movq $1, a23148
movq a23148, temp23327
jmp label23404

label23406:
    liveness
:
(list
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23149
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a23089
  %rsp
  temp23327
  a22975
  a22994
  temp23266))
movq $2, a23149
movq a23149, temp23327
jmp label23404

label23407:
    liveness
:
(list
 (set a23108 a23013 a23127 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set
  a23013
  a23127
  a23032
  a23070
  a22975
  a23089
  %rsp
  %rax
  a23108
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23013
  a23127
  a23032
  a23146
  a23070
  a22975
  a23089
  %rsp
  %rax
  a23108
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23127
  a23032
  a23146
  temp23324
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
callq read_int
movq %rax, a23146
callq read_int
movq %rax, temp23324
cmpq $1, $3
jg label23405
jmp label23406

label23408:
    liveness
:
(list
 (set a23108 a23013 a23142 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23127 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq a23142, a23127
jmp label23407

label23409:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23143 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23142 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $1, a23143
movq a23143, a23142
jmp label23408

label23410:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23070 a22975 a23089 %rsp a23032 a23144 a22994 temp23266)
 (set a23108 a23013 a23142 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $2, a23144
movq a23144, a23142
jmp label23408

label23411:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
cmpq $1, $3
jg label23409
jmp label23410

label23417:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23127 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $2, a23127
jmp label23407

label23412:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23145 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23127 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $2, a23145
movq a23145, a23127
jmp label23407

label23413:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  a23070
  a22975
  a23089
  a22994
  temp23266
  temp23315
  %rsp)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
cmpq temp23315, $3
jg label23411
jmp label23412

label23414:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a23108 a23140 a22994 temp23266)
 (set
  a23108
  a23013
  a23032
  a23070
  a22975
  a23089
  a22994
  temp23266
  temp23315
  %rsp))
movq $1, a23140
movq a23140, temp23315
jmp label23413

label23415:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23032 a23070 a22975 a23089 %rsp a23013 a23141 a22994 temp23266)
 (set
  a23108
  a23013
  a23032
  a23070
  a22975
  a23089
  a22994
  temp23266
  temp23315
  %rsp))
movq $2, a23141
movq a23141, temp23315
jmp label23413

label23416:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
cmpq $1, $3
jg label23414
jmp label23415

label23418:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266 a23138)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $1, a23138
cmpq $1, a23138
je label23416
jmp label23417

label23419:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 a22994 temp23266 a23139 %rsp)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $0, a23139
cmpq $1, a23139
je label23416
jmp label23417

label23420:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23136 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $1, a23136
cmpq $1, a23136
je label23418
jmp label23419

label23421:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 %rsp a23089 a23137 a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $0, a23137
cmpq $1, a23137
je label23418
jmp label23419

label23422:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a22975 a23089 %rsp a23070 a23134 a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $1, a23134
cmpq $1, a23134
je label23420
jmp label23421

label23423:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a23089 %rsp a23135 a22975 a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $0, a23135
cmpq $1, a23135
je label23420
jmp label23421

label23424:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  temp23308
  temp23309
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
cmpq temp23309, temp23308
jg label23422
jmp label23423

label23429:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23133
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  temp23309
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $2, a23133
movq a23133, temp23309
jmp label23424

label23425:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  a23130
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  temp23309
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq a23130, temp23309
jmp label23424

label23426:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23131
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23130
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $1, a23131
movq a23131, a23130
jmp label23425

label23427:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23070
  a22975
  a23089
  %rsp
  temp23308
  a23132
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23130
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
movq $2, a23132
movq a23132, a23130
jmp label23425

label23428:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq $1, $3
jg label23426
jmp label23427

label23430:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a23089
  %rsp
  temp23311
  a22975
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
cmpq temp23311, $3
jg label23428
jmp label23429

label23432:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  a23129
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a23089
  %rsp
  temp23311
  a22975
  a22994
  temp23266))
movq $2, a23129
movq a23129, temp23311
jmp label23430

label23431:
    liveness
:
(list
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a23032
  a23128
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a23089
  %rsp
  temp23311
  a22975
  a22994
  temp23266))
movq $1, a23128
movq a23128, temp23311
jmp label23430

label23433:
    liveness
:
(list
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp %rax a23108 a22994 temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266)
 (set
  a23108
  a23013
  a23032
  temp23308
  a23070
  a22975
  a23089
  %rsp
  a22994
  temp23266))
callq read_int
movq %rax, temp23308
cmpq $1, $3
jg label23431
jmp label23432

label23434:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 a22994 temp23266 a23123 %rsp)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq a23123, a23108
jmp label23433

label23435:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23124 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 a22994 temp23266 a23123 %rsp))
movq $1, a23124
movq a23124, a23123
jmp label23434

label23436:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23032 a23070 a22975 a23089 %rsp a23013 a23125 a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 a22994 temp23266 a23123 %rsp))
movq $2, a23125
movq a23125, a23123
jmp label23434

label23437:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
cmpq $1, $3
jg label23435
jmp label23436

label23443:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $2, a23108
jmp label23433

label23438:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23126 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23108 a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $2, a23126
movq a23126, a23108
jmp label23433

label23439:
    liveness
:
(list
 (set a23013 temp23302 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
cmpq temp23302, $3
jg label23437
jmp label23438

label23440:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a23089 a23121 a22994 temp23266)
 (set a23013 temp23302 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $1, a23121
movq a23121, temp23302
jmp label23439

label23441:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266 a23122)
 (set a23013 temp23302 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $2, a23122
movq a23122, temp23302
jmp label23439

label23442:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
cmpq $1, $3
jg label23440
jmp label23441

label23445:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23120 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $0, a23120
cmpq $1, a23120
je label23442
jmp label23443

label23444:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a23089 %rsp a23119 a22975 a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $1, a23119
cmpq $1, a23119
je label23442
jmp label23443

label23446:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23117 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $1, a23117
cmpq $1, a23117
je label23444
jmp label23445

label23447:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 a23089 %rsp a23070 a23118 a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $0, a23118
cmpq $1, a23118
je label23444
jmp label23445

label23449:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23116 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $0, a23116
cmpq $1, a23116
je label23446
jmp label23447

label23448:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23115 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $1, a23115
cmpq $1, a23115
je label23446
jmp label23447

label23450:
    liveness
:
(list
 (set
  a23013
  a23032
  a23070
  temp23296
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
cmpq temp23296, temp23295
jg label23448
jmp label23449

label23451:
    liveness
:
(list
 (set
  a23013
  a23111
  a23032
  a23070
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266)
 (set
  a23013
  a23032
  a23070
  temp23296
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266))
movq a23111, temp23296
jmp label23450

label23452:
    liveness
:
(list
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set
  a23013
  a23070
  a23089
  %rsp
  a23032
  a23112
  temp23295
  a22975
  a22994
  temp23266)
 (set
  a23013
  a23111
  a23032
  a23070
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266))
movq $1, a23112
movq a23112, a23111
jmp label23451

label23453:
    liveness
:
(list
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set
  a23013
  a23032
  a23113
  a23070
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266)
 (set
  a23013
  a23111
  a23032
  a23070
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266))
movq $2, a23113
movq a23113, a23111
jmp label23451

label23454:
    liveness
:
(list
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266))
cmpq $1, $3
jg label23452
jmp label23453

label23455:
    liveness
:
(list
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set
  a23013
  a23032
  a23114
  a23070
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266)
 (set
  a23013
  a23032
  a23070
  temp23296
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266))
movq $2, a23114
movq a23114, temp23296
jmp label23450

label23456:
    liveness
:
(list
 (set
  a23013
  a23032
  a23070
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266
  temp23298)
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266))
cmpq temp23298, $3
jg label23454
jmp label23455

label23457:
    liveness
:
(list
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set
  a23032
  a23070
  a23089
  %rsp
  a23013
  a23109
  temp23295
  a22975
  a22994
  temp23266)
 (set
  a23013
  a23032
  a23070
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266
  temp23298))
movq $1, a23109
movq a23109, temp23298
jmp label23456

label23458:
    liveness
:
(list
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set
  a23013
  a23110
  a23032
  a23070
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266)
 (set
  a23013
  a23032
  a23070
  a23089
  %rsp
  temp23295
  a22975
  a22994
  temp23266
  temp23298))
movq $2, a23110
movq a23110, temp23298
jmp label23456

label23459:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set %rax a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266)
 (set a23013 a23032 a23070 a23089 %rsp temp23295 a22975 a22994 temp23266))
callq read_int
movq %rax, temp23295
cmpq $1, $3
jg label23457
jmp label23458

label23469:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $2, a23089
jmp label23459

label23460:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a23104 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq a23104, a23089
jmp label23459

label23461:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23105 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a23104 %rsp a22994 temp23266))
movq $1, a23105
movq a23105, a23104
jmp label23460

label23462:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 a23106)
 (set a23013 a23032 a23070 a22975 a23104 %rsp a22994 temp23266))
movq $2, a23106
movq a23106, a23104
jmp label23460

label23463:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
cmpq $1, $3
jg label23461
jmp label23462

label23464:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 a22994 temp23266 a23107 %rsp)
 (set a23013 a23032 a23070 a22975 a23089 %rsp a22994 temp23266))
movq $2, a23107
movq a23107, a23089
jmp label23459

label23465:
    liveness
:
(list
 (set a23013 a23032 temp23289 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
cmpq temp23289, $3
jg label23463
jmp label23464

label23466:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a23070 a23102 a22994 temp23266)
 (set a23013 a23032 temp23289 a23070 a22975 %rsp a22994 temp23266))
movq $1, a23102
movq a23102, temp23289
jmp label23465

label23467:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 %rsp a23103 a22975 a22994 temp23266)
 (set a23013 a23032 temp23289 a23070 a22975 %rsp a22994 temp23266))
movq $2, a23103
movq a23103, temp23289
jmp label23465

label23468:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
cmpq $1, $3
jg label23466
jmp label23467

label23470:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23100 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
movq $1, a23100
cmpq $1, a23100
je label23468
jmp label23469

label23471:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23101 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
movq $0, a23101
cmpq $1, a23101
je label23468
jmp label23469

label23472:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23098 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
movq $1, a23098
cmpq $1, a23098
je label23470
jmp label23471

label23473:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23099 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
movq $0, a23099
cmpq $1, a23099
je label23470
jmp label23471

label23474:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23070 a22975 %rsp a23032 a23096 a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
movq $1, a23096
cmpq $1, a23096
je label23472
jmp label23473

label23475:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23097 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
movq $0, a23097
cmpq $1, a23097
je label23472
jmp label23473

label23476:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 a22994 temp23266 temp23282 temp23283 %rsp)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
cmpq temp23283, temp23282
jg label23474
jmp label23475

label23481:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23095 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 a22994 temp23266 temp23282 temp23283 %rsp))
movq $2, a23095
movq a23095, temp23283
jmp label23476

label23477:
    liveness
:
(list
 (set a23092 a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 a22994 temp23266 temp23282 temp23283 %rsp))
movq a23092, temp23283
jmp label23476

label23478:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23032 a23070 a22975 %rsp a23013 a23093 a22994 temp23266 temp23282)
 (set a23092 a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282))
movq $1, a23093
movq a23093, a23092
jmp label23477

label23479:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23094 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23092 a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282))
movq $2, a23094
movq a23094, a23092
jmp label23477

label23480:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282))
cmpq $1, $3
jg label23478
jmp label23479

label23482:
    liveness
:
(list
 (set a23032 a23070 a22975 %rsp a23013 temp23285 a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282))
cmpq temp23285, $3
jg label23480
jmp label23481

label23483:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282 a23090)
 (set a23032 a23070 a22975 %rsp a23013 temp23285 a22994 temp23266 temp23282))
movq $1, a23090
movq a23090, temp23285
jmp label23482

label23484:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 a22994 temp23266 temp23282 a23091 %rsp)
 (set a23032 a23070 a22975 %rsp a23013 temp23285 a22994 temp23266 temp23282))
movq $2, a23091
movq a23091, temp23285
jmp label23482

label23485:
    liveness
:
(list
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set %rax a23013 a23032 a23070 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266 temp23282))
callq read_int
movq %rax, temp23282
cmpq $1, $3
jg label23483
jmp label23484

label23495:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
movq $2, a23070
jmp label23485

label23490:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 a23088 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
movq $2, a23088
movq a23088, a23070
jmp label23485

label23486:
    liveness
:
(list
 (set a23013 a23032 a23085 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23070 a22975 %rsp a22994 temp23266))
movq a23085, a23070
jmp label23485

label23488:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 %rsp a23087 a22975 a22994 temp23266)
 (set a23013 a23032 a23085 a22975 %rsp a22994 temp23266))
movq $2, a23087
movq a23087, a23085
jmp label23486

label23487:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23086 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23085 a22975 %rsp a22994 temp23266))
movq $1, a23086
movq a23086, a23085
jmp label23486

label23489:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
cmpq $1, $3
jg label23487
jmp label23488

label23491:
    liveness
:
(list
 (set a23013 a23032 temp23276 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
cmpq temp23276, $3
jg label23489
jmp label23490

label23492:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23083 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 temp23276 a22975 %rsp a22994 temp23266))
movq $1, a23083
movq a23083, temp23276
jmp label23491

label23493:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23084 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 temp23276 a22975 %rsp a22994 temp23266))
movq $2, a23084
movq a23084, temp23276
jmp label23491

label23494:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
cmpq $1, $3
jg label23492
jmp label23493

label23496:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23081 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
movq $1, a23081
cmpq $1, a23081
je label23494
jmp label23495

label23497:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a23082 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
movq $0, a23082
cmpq $1, a23082
je label23494
jmp label23495

label23498:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23079 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
movq $1, a23079
cmpq $1, a23079
je label23496
jmp label23497

label23499:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a22975 %rsp a23032 a23080 a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
movq $0, a23080
cmpq $1, a23080
je label23496
jmp label23497

label23500:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23032 a22975 %rsp a23013 a23077 a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
movq $1, a23077
cmpq $1, a23077
je label23498
jmp label23499

label23501:
    liveness
:
(list
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23078 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
movq $0, a23078
cmpq $1, a23078
je label23498
jmp label23499

label23502:
    liveness
:
(list
 (set temp23270 a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23013 a23032 a22975 %rsp a22994 temp23266))
cmpq temp23270, temp23269
jg label23500
jmp label23501

label23507:
    liveness
:
(list
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23076 a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set temp23270 a23032 a22975 %rsp a23013 temp23269 a22994 temp23266))
movq $2, a23076
movq a23076, temp23270
jmp label23502

label23503:
    liveness
:
(list
 (set a23032 a22975 a23073 %rsp a23013 temp23269 a22994 temp23266)
 (set temp23270 a23032 a22975 %rsp a23013 temp23269 a22994 temp23266))
movq a23073, temp23270
jmp label23502

label23504:
    liveness
:
(list
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266 a23074)
 (set a23032 a22975 a23073 %rsp a23013 temp23269 a22994 temp23266))
movq $1, a23074
movq a23074, a23073
jmp label23503

label23505:
    liveness
:
(list
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23032 a22975 a23013 temp23269 a22994 temp23266 a23075 %rsp)
 (set a23032 a22975 a23073 %rsp a23013 temp23269 a22994 temp23266))
movq $2, a23075
movq a23075, a23073
jmp label23503

label23506:
    liveness
:
(list
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266))
cmpq $1, $3
jg label23504
jmp label23505

label23508:
    liveness
:
(list
 (set a22975 %rsp a23013 temp23269 temp23272 a23032 a22994 temp23266)
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266))
cmpq temp23272, $3
jg label23506
jmp label23507

label23509:
    liveness
:
(list
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23032 %rsp a23013 temp23269 a23071 a22975 a22994 temp23266)
 (set a22975 %rsp a23013 temp23269 temp23272 a23032 a22994 temp23266))
movq $1, a23071
movq a23071, temp23272
jmp label23508

label23510:
    liveness
:
(list
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23032 a22975 a23072 %rsp a23013 temp23269 a22994 temp23266)
 (set a22975 %rsp a23013 temp23269 temp23272 a23032 a22994 temp23266))
movq $2, a23072
movq a23072, temp23272
jmp label23508

label23511:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set %rax a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 %rsp a22994 temp23266)
 (set %rax a23013 a23032 a22975 %rsp a22994 temp23266)
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266)
 (set a23032 a22975 %rsp a23013 temp23269 a22994 temp23266))
callq read_int
movq %rax, temp23266
callq read_int
movq %rax, temp23269
cmpq $1, $3
jg label23509
jmp label23510

label23512:
    liveness
:
(list
 (set a23013 a23032 a23066 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq a23066, a23051
jmp label23511

label23513:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a23067 a22975 a22994 %rsp)
 (set a23013 a23032 a23066 a22975 a22994 %rsp))
movq $1, a23067
movq a23067, a23066
jmp label23512

label23514:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a23068 a22975 a22994 %rsp)
 (set a23013 a23032 a23066 a22975 a22994 %rsp))
movq $2, a23068
movq a23068, a23066
jmp label23512

label23515:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
cmpq $1, $3
jg label23513
jmp label23514

label23521:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq $2, a23051
jmp label23511

label23516:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a23069 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq $2, a23069
movq a23069, a23051
jmp label23511

label23517:
    liveness
:
(list
 (set a23013 a23032 temp23262 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
cmpq temp23262, $3
jg label23515
jmp label23516

label23519:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a23065 a22975 a22994 %rsp)
 (set a23013 a23032 temp23262 a22975 a22994 %rsp))
movq $2, a23065
movq a23065, temp23262
jmp label23517

label23518:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp a23032 a23064)
 (set a23013 a23032 temp23262 a22975 a22994 %rsp))
movq $1, a23064
movq a23064, temp23262
jmp label23517

label23520:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
cmpq $1, $3
jg label23518
jmp label23519

label23523:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23063 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq $0, a23063
cmpq $1, a23063
je label23520
jmp label23521

label23522:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23062 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq $1, a23062
cmpq $1, a23062
je label23520
jmp label23521

label23525:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23032 a22975 a22994 %rsp a23013 a23061)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq $0, a23061
cmpq $1, a23061
je label23522
jmp label23523

label23524:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23060 a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq $1, a23060
cmpq $1, a23060
je label23522
jmp label23523

label23527:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 a23059 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq $0, a23059
cmpq $1, a23059
je label23524
jmp label23525

label23526:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 %rsp a22994 a23058)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq $1, a23058
cmpq $1, a23058
je label23524
jmp label23525

label23528:
    liveness
:
(list
 (set a23013 temp23255 a22975 a22994 %rsp temp23256 a23032)
 (set a23013 a23032 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
cmpq temp23256, temp23255
jg label23526
jmp label23527

label23529:
    liveness
:
(list
 (set a23013 temp23255 a23032 a23054 a22975 a22994 %rsp)
 (set a23013 temp23255 a22975 a22994 %rsp temp23256 a23032))
movq a23054, temp23256
jmp label23528

label23531:
    liveness
:
(list
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22975 a23056 a22994 %rsp)
 (set a23013 temp23255 a23032 a23054 a22975 a22994 %rsp))
movq $2, a23056
movq a23056, a23054
jmp label23529

label23530:
    liveness
:
(list
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22994 %rsp a23055 a22975)
 (set a23013 temp23255 a23032 a23054 a22975 a22994 %rsp))
movq $1, a23055
movq a23055, a23054
jmp label23529

label23532:
    liveness
:
(list
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22975 a22994 %rsp))
cmpq $1, $3
jg label23530
jmp label23531

label23533:
    liveness
:
(list
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22975 a23057 a22994 %rsp)
 (set a23013 temp23255 a22975 a22994 %rsp temp23256 a23032))
movq $2, a23057
movq a23057, temp23256
jmp label23528

label23534:
    liveness
:
(list
 (set a23013 temp23255 a23032 temp23258 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22975 a22994 %rsp))
cmpq temp23258, $3
jg label23532
jmp label23533

label23536:
    liveness
:
(list
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a23053 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 temp23258 a22975 a22994 %rsp))
movq $2, a23053
movq a23053, temp23258
jmp label23534

label23535:
    liveness
:
(list
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a23052 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 temp23258 a22975 a22994 %rsp))
movq $1, a23052
movq a23052, temp23258
jmp label23534

label23537:
    liveness
:
(list
 (set a23013 a23032 a22975 a22994 %rsp)
 (set %rax a23013 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22975 a22994 %rsp)
 (set a23013 temp23255 a23032 a22975 a22994 %rsp))
callq read_int
movq %rax, temp23255
cmpq $1, $3
jg label23535
jmp label23536

label23538:
    liveness
:
(list
 (set a23013 a23047 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq a23047, a23032
jmp label23537

label23539:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a23048 a22975 a22994 %rsp)
 (set a23013 a23047 a22975 a22994 %rsp))
movq $1, a23048
movq a23048, a23047
jmp label23538

label23540:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a23049 a22975 a22994 %rsp)
 (set a23013 a23047 a22975 a22994 %rsp))
movq $2, a23049
movq a23049, a23047
jmp label23538

label23541:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
cmpq $1, $3
jg label23539
jmp label23540

label23547:
    liveness
:
(list (set a23013 a22975 a22994 %rsp) (set a23013 a23032 a22975 a22994 %rsp))
movq $2, a23032
jmp label23537

label23542:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a23050 a22975 a22994 %rsp)
 (set a23013 a23032 a22975 a22994 %rsp))
movq $2, a23050
movq a23050, a23032
jmp label23537

label23543:
    liveness
:
(list
 (set a23013 a22975 temp23249 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
cmpq temp23249, $3
jg label23541
jmp label23542

label23545:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a23046 a22975 a22994 %rsp)
 (set a23013 a22975 temp23249 a22994 %rsp))
movq $2, a23046
movq a23046, temp23249
jmp label23543

label23544:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a22975 a22994 %rsp a23013 a23045)
 (set a23013 a22975 temp23249 a22994 %rsp))
movq $1, a23045
movq a23045, temp23249
jmp label23543

label23546:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
cmpq $1, $3
jg label23544
jmp label23545

label23549:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23044 a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
movq $0, a23044
cmpq $1, a23044
je label23546
jmp label23547

label23548:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 a23043 %rsp)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
movq $1, a23043
cmpq $1, a23043
je label23546
jmp label23547

label23551:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 %rsp a22994 a23042)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
movq $0, a23042
cmpq $1, a23042
je label23548
jmp label23549

label23550:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a23041 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
movq $1, a23041
cmpq $1, a23041
je label23548
jmp label23549

label23553:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a23040 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
movq $0, a23040
cmpq $1, a23040
je label23550
jmp label23551

label23552:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22994 %rsp a23039 a22975)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
movq $1, a23039
cmpq $1, a23039
je label23550
jmp label23551

label23554:
    liveness
:
(list
 (set a23013 temp23242 temp23243 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
cmpq temp23243, temp23242
jg label23552
jmp label23553

label23559:
    liveness
:
(list
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 temp23242 a23038 a22975 a22994 %rsp)
 (set a23013 temp23242 temp23243 a22975 a22994 %rsp))
movq $2, a23038
movq a23038, temp23243
jmp label23554

label23555:
    liveness
:
(list
 (set a23013 temp23242 a23035 a22975 a22994 %rsp)
 (set a23013 temp23242 temp23243 a22975 a22994 %rsp))
movq a23035, temp23243
jmp label23554

label23557:
    liveness
:
(list
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 temp23242 a23037 a22975 a22994 %rsp)
 (set a23013 temp23242 a23035 a22975 a22994 %rsp))
movq $2, a23037
movq a23037, a23035
jmp label23555

label23556:
    liveness
:
(list
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 temp23242 a23036 a22975 a22994 %rsp)
 (set a23013 temp23242 a23035 a22975 a22994 %rsp))
movq $1, a23036
movq a23036, a23035
jmp label23555

label23558:
    liveness
:
(list
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 temp23242 a22975 a22994 %rsp))
cmpq $1, $3
jg label23556
jmp label23557

label23560:
    liveness
:
(list
 (set a23013 temp23242 temp23245 a22975 a22994 %rsp)
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 temp23242 a22975 a22994 %rsp))
cmpq temp23245, $3
jg label23558
jmp label23559

label23561:
    liveness
:
(list
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 a23033 temp23242 a22975 a22994 %rsp)
 (set a23013 temp23242 temp23245 a22975 a22994 %rsp))
movq $1, a23033
movq a23033, temp23245
jmp label23560

label23562:
    liveness
:
(list
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp temp23242 a23034)
 (set a23013 temp23242 temp23245 a22975 a22994 %rsp))
movq $2, a23034
movq a23034, temp23245
jmp label23560

label23563:
    liveness
:
(list
 (set a23013 a22975 a22994 %rsp)
 (set %rax a23013 a22975 a22994 %rsp)
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 temp23242 a22975 a22994 %rsp)
 (set a23013 temp23242 a22975 a22994 %rsp))
callq read_int
movq %rax, temp23242
cmpq $1, $3
jg label23561
jmp label23562

label23573:
    liveness
:
(list (set a22975 a22994 %rsp) (set a23013 a22975 a22994 %rsp))
movq $2, a23013
jmp label23563

label23568:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a23031 a22975 a22994 %rsp)
 (set a23013 a22975 a22994 %rsp))
movq $2, a23031
movq a23031, a23013
jmp label23563

label23564:
    liveness
:
(list (set a23028 a22975 a22994 %rsp) (set a23013 a22975 a22994 %rsp))
movq a23028, a23013
jmp label23563

label23565:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a23029 a22975 a22994 %rsp)
 (set a23028 a22975 a22994 %rsp))
movq $1, a23029
movq a23029, a23028
jmp label23564

label23566:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a23030 a22975 a22994 %rsp)
 (set a23028 a22975 a22994 %rsp))
movq $2, a23030
movq a23030, a23028
jmp label23564

label23567:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
cmpq $1, $3
jg label23565
jmp label23566

label23569:
    liveness
:
(list
 (set temp23236 a22975 a22994 %rsp)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
cmpq temp23236, $3
jg label23567
jmp label23568

label23571:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a22975 a22994 a23027 %rsp)
 (set temp23236 a22975 a22994 %rsp))
movq $2, a23027
movq a23027, temp23236
jmp label23569

label23570:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a22975 %rsp a22994 a23026)
 (set temp23236 a22975 a22994 %rsp))
movq $1, a23026
movq a23026, temp23236
jmp label23569

label23572:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
cmpq $1, $3
jg label23570
jmp label23571

label23575:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a22975 a23025 a22994 %rsp)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
movq $0, a23025
cmpq $1, a23025
je label23572
jmp label23573

label23574:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a22975 a23024 a22994 %rsp)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
movq $1, a23024
cmpq $1, a23024
je label23572
jmp label23573

label23577:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a22994 %rsp a23023 a22975)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
movq $0, a23023
cmpq $1, a23023
je label23574
jmp label23575

label23576:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a23022 a22975 a22994 %rsp)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
movq $1, a23022
cmpq $1, a23022
je label23574
jmp label23575

label23579:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a23021 a22975 a22994 %rsp)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
movq $0, a23021
cmpq $1, a23021
je label23576
jmp label23577

label23578:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set a23020 a22975 a22994 %rsp)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
movq $1, a23020
cmpq $1, a23020
je label23576
jmp label23577

label23580:
    liveness
:
(list
 (set temp23229 temp23230 a22975 a22994 %rsp)
 (set a22975 a22994 %rsp)
 (set a22975 a22994 %rsp))
cmpq temp23230, temp23229
jg label23578
jmp label23579

label23585:
    liveness
:
(list
 (set temp23229 a22975 a22994 %rsp)
 (set a23019 temp23229 a22975 a22994 %rsp)
 (set temp23229 temp23230 a22975 a22994 %rsp))
movq $2, a23019
movq a23019, temp23230
jmp label23580

label23581:
    liveness
:
(list
 (set a23016 temp23229 a22975 a22994 %rsp)
 (set temp23229 temp23230 a22975 a22994 %rsp))
movq a23016, temp23230
jmp label23580

label23583:
    liveness
:
(list
 (set temp23229 a22975 a22994 %rsp)
 (set a23018 temp23229 a22975 a22994 %rsp)
 (set a23016 temp23229 a22975 a22994 %rsp))
movq $2, a23018
movq a23018, a23016
jmp label23581

label23582:
    liveness
:
(list
 (set temp23229 a22975 a22994 %rsp)
 (set a23017 temp23229 a22975 a22994 %rsp)
 (set a23016 temp23229 a22975 a22994 %rsp))
movq $1, a23017
movq a23017, a23016
jmp label23581

label23584:
    liveness
:
(list
 (set temp23229 a22975 a22994 %rsp)
 (set temp23229 a22975 a22994 %rsp)
 (set temp23229 a22975 a22994 %rsp))
cmpq $1, $3
jg label23582
jmp label23583

label23586:
    liveness
:
(list
 (set temp23229 a22975 temp23232 a22994 %rsp)
 (set temp23229 a22975 a22994 %rsp)
 (set temp23229 a22975 a22994 %rsp))
cmpq temp23232, $3
jg label23584
jmp label23585

label23588:
    liveness
:
(list
 (set temp23229 a22975 a22994 %rsp)
 (set a23015 temp23229 a22975 a22994 %rsp)
 (set temp23229 a22975 temp23232 a22994 %rsp))
movq $2, a23015
movq a23015, temp23232
jmp label23586

label23587:
    liveness
:
(list
 (set temp23229 a22975 a22994 %rsp)
 (set a23014 temp23229 a22975 a22994 %rsp)
 (set temp23229 a22975 temp23232 a22994 %rsp))
movq $1, a23014
movq a23014, temp23232
jmp label23586

label23589:
    liveness
:
(list
 (set a22975 a22994 %rsp)
 (set %rax a22975 a22994 %rsp)
 (set temp23229 a22975 a22994 %rsp)
 (set temp23229 a22975 a22994 %rsp)
 (set temp23229 a22975 a22994 %rsp))
callq read_int
movq %rax, temp23229
cmpq $1, $3
jg label23587
jmp label23588

label23594:
    liveness
:
(list (set a22975 %rsp) (set a23012 a22975 %rsp) (set a22975 a22994 %rsp))
movq $2, a23012
movq a23012, a22994
jmp label23589

label23590:
    liveness
:
(list (set a22975 a23009 %rsp) (set a22975 a22994 %rsp))
movq a23009, a22994
jmp label23589

label23592:
    liveness
:
(list (set a22975 %rsp) (set a22975 a23011 %rsp) (set a22975 a23009 %rsp))
movq $2, a23011
movq a23011, a23009
jmp label23590

label23591:
    liveness
:
(list (set a22975 %rsp) (set a22975 a23010 %rsp) (set a22975 a23009 %rsp))
movq $1, a23010
movq a23010, a23009
jmp label23590

label23593:
    liveness
:
(list (set a22975 %rsp) (set a22975 %rsp) (set a22975 %rsp))
cmpq $1, $3
jg label23591
jmp label23592

label23595:
    liveness
:
(list (set temp23223 a22975 %rsp) (set a22975 %rsp) (set a22975 %rsp))
cmpq temp23223, $3
jg label23593
jmp label23594

label23597:
    liveness
:
(list (set a22975 %rsp) (set a22975 a23008 %rsp) (set temp23223 a22975 %rsp))
movq $2, a23008
movq a23008, temp23223
jmp label23595

label23596:
    liveness
:
(list (set a22975 %rsp) (set %rsp a23007 a22975) (set temp23223 a22975 %rsp))
movq $1, a23007
movq a23007, temp23223
jmp label23595

label23598:
    liveness
:
(list (set a22975 %rsp) (set a22975 %rsp) (set a22975 %rsp))
cmpq $1, $3
jg label23596
jmp label23597

label23599:
    liveness
:
(list (set a22975 %rsp) (set a22975 a22994 %rsp))
movq $2, a22994
jmp label23589

label23601:
    liveness
:
(list
 (set a22975 %rsp)
 (set a23006 a22975 %rsp)
 (set a22975 %rsp)
 (set a22975 %rsp))
movq $0, a23006
cmpq $1, a23006
je label23598
jmp label23599

label23600:
    liveness
:
(list
 (set a22975 %rsp)
 (set a23005 a22975 %rsp)
 (set a22975 %rsp)
 (set a22975 %rsp))
movq $1, a23005
cmpq $1, a23005
je label23598
jmp label23599

label23603:
    liveness
:
(list
 (set a22975 %rsp)
 (set a23004 a22975 %rsp)
 (set a22975 %rsp)
 (set a22975 %rsp))
movq $0, a23004
cmpq $1, a23004
je label23600
jmp label23601

label23602:
    liveness
:
(list
 (set a22975 %rsp)
 (set a23003 a22975 %rsp)
 (set a22975 %rsp)
 (set a22975 %rsp))
movq $1, a23003
cmpq $1, a23003
je label23600
jmp label23601

label23605:
    liveness
:
(list
 (set a22975 %rsp)
 (set a23002 a22975 %rsp)
 (set a22975 %rsp)
 (set a22975 %rsp))
movq $0, a23002
cmpq $1, a23002
je label23602
jmp label23603

label23604:
    liveness
:
(list
 (set a22975 %rsp)
 (set a23001 a22975 %rsp)
 (set a22975 %rsp)
 (set a22975 %rsp))
movq $1, a23001
cmpq $1, a23001
je label23602
jmp label23603

label23606:
    liveness
:
(list
 (set a22975 temp23216 temp23217 %rsp)
 (set a22975 %rsp)
 (set a22975 %rsp))
cmpq temp23217, temp23216
jg label23604
jmp label23605

label23611:
    liveness
:
(list
 (set a22975 temp23216 %rsp)
 (set a23000 a22975 temp23216 %rsp)
 (set a22975 temp23216 temp23217 %rsp))
movq $2, a23000
movq a23000, temp23217
jmp label23606

label23607:
    liveness
:
(list (set a22997 a22975 temp23216 %rsp) (set a22975 temp23216 temp23217 %rsp))
movq a22997, temp23217
jmp label23606

label23609:
    liveness
:
(list
 (set a22975 temp23216 %rsp)
 (set a22999 a22975 temp23216 %rsp)
 (set a22997 a22975 temp23216 %rsp))
movq $2, a22999
movq a22999, a22997
jmp label23607

label23608:
    liveness
:
(list
 (set a22975 temp23216 %rsp)
 (set a22998 a22975 temp23216 %rsp)
 (set a22997 a22975 temp23216 %rsp))
movq $1, a22998
movq a22998, a22997
jmp label23607

label23610:
    liveness
:
(list
 (set a22975 temp23216 %rsp)
 (set a22975 temp23216 %rsp)
 (set a22975 temp23216 %rsp))
cmpq $1, $3
jg label23608
jmp label23609

label23612:
    liveness
:
(list
 (set a22975 temp23216 %rsp temp23219)
 (set a22975 temp23216 %rsp)
 (set a22975 temp23216 %rsp))
cmpq temp23219, $3
jg label23610
jmp label23611

label23613:
    liveness
:
(list
 (set a22975 temp23216 %rsp)
 (set a22975 temp23216 a22995 %rsp)
 (set a22975 temp23216 %rsp temp23219))
movq $1, a22995
movq a22995, temp23219
jmp label23612

label23614:
    liveness
:
(list
 (set a22975 temp23216 %rsp)
 (set a22996 a22975 temp23216 %rsp)
 (set a22975 temp23216 %rsp temp23219))
movq $2, a22996
movq a22996, temp23219
jmp label23612

label23615:
    liveness
:
(list
 (set a22975 %rsp)
 (set %rax a22975 %rsp)
 (set a22975 temp23216 %rsp)
 (set a22975 temp23216 %rsp)
 (set a22975 temp23216 %rsp))
callq read_int
movq %rax, temp23216
cmpq $1, $3
jg label23613
jmp label23614

label23625:
    liveness
:
(list (set %rsp) (set a22975 %rsp))
movq $2, a22975
jmp label23615

label23620:
    liveness
:
(list (set %rsp) (set a22993 %rsp) (set a22975 %rsp))
movq $2, a22993
movq a22993, a22975
jmp label23615

label23616:
    liveness
:
(list (set a22990 %rsp) (set a22975 %rsp))
movq a22990, a22975
jmp label23615

label23617:
    liveness
:
(list (set %rsp) (set a22991 %rsp) (set a22990 %rsp))
movq $1, a22991
movq a22991, a22990
jmp label23616

label23618:
    liveness
:
(list (set %rsp) (set a22992 %rsp) (set a22990 %rsp))
movq $2, a22992
movq a22992, a22990
jmp label23616

label23619:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label23617
jmp label23618

label23621:
    liveness
:
(list (set temp23210 %rsp) (set %rsp) (set %rsp))
cmpq temp23210, $3
jg label23619
jmp label23620

label23623:
    liveness
:
(list (set %rsp) (set a22989 %rsp) (set temp23210 %rsp))
movq $2, a22989
movq a22989, temp23210
jmp label23621

label23622:
    liveness
:
(list (set %rsp) (set a22988 %rsp) (set temp23210 %rsp))
movq $1, a22988
movq a22988, temp23210
jmp label23621

label23624:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label23622
jmp label23623

label23627:
    liveness
:
(list (set %rsp) (set a22987 %rsp) (set %rsp) (set %rsp))
movq $0, a22987
cmpq $1, a22987
je label23624
jmp label23625

label23626:
    liveness
:
(list (set %rsp) (set a22986 %rsp) (set %rsp) (set %rsp))
movq $1, a22986
cmpq $1, a22986
je label23624
jmp label23625

label23629:
    liveness
:
(list (set %rsp) (set a22985 %rsp) (set %rsp) (set %rsp))
movq $0, a22985
cmpq $1, a22985
je label23626
jmp label23627

label23628:
    liveness
:
(list (set %rsp) (set a22984 %rsp) (set %rsp) (set %rsp))
movq $1, a22984
cmpq $1, a22984
je label23626
jmp label23627

label23631:
    liveness
:
(list (set %rsp) (set a22983 %rsp) (set %rsp) (set %rsp))
movq $0, a22983
cmpq $1, a22983
je label23628
jmp label23629

label23630:
    liveness
:
(list (set %rsp) (set a22982 %rsp) (set %rsp) (set %rsp))
movq $1, a22982
cmpq $1, a22982
je label23628
jmp label23629

label23632:
    liveness
:
(list (set temp23204 %rsp temp23203) (set %rsp) (set %rsp))
cmpq temp23204, temp23203
jg label23630
jmp label23631

label23637:
    liveness
:
(list
 (set %rsp temp23203)
 (set a22981 %rsp temp23203)
 (set temp23204 %rsp temp23203))
movq $2, a22981
movq a22981, temp23204
jmp label23632

label23633:
    liveness
:
(list (set a22978 %rsp temp23203) (set temp23204 %rsp temp23203))
movq a22978, temp23204
jmp label23632

label23635:
    liveness
:
(list
 (set %rsp temp23203)
 (set a22980 %rsp temp23203)
 (set a22978 %rsp temp23203))
movq $2, a22980
movq a22980, a22978
jmp label23633

label23634:
    liveness
:
(list
 (set %rsp temp23203)
 (set %rsp temp23203 a22979)
 (set a22978 %rsp temp23203))
movq $1, a22979
movq a22979, a22978
jmp label23633

label23636:
    liveness
:
(list (set %rsp temp23203) (set %rsp temp23203) (set %rsp temp23203))
cmpq $1, $3
jg label23634
jmp label23635

label23638:
    liveness
:
(list (set temp23206 %rsp temp23203) (set %rsp temp23203) (set %rsp temp23203))
cmpq temp23206, $3
jg label23636
jmp label23637

label23640:
    liveness
:
(list
 (set %rsp temp23203)
 (set a22977 %rsp temp23203)
 (set temp23206 %rsp temp23203))
movq $2, a22977
movq a22977, temp23206
jmp label23638

label23639:
    liveness
:
(list
 (set %rsp temp23203)
 (set a22976 %rsp temp23203)
 (set temp23206 %rsp temp23203))
movq $1, a22976
movq a22976, temp23206
jmp label23638

label23642:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set %rsp temp23203)
 (set %rsp temp23203)
 (set %rsp temp23203))
callq read_int
movq %rax, temp23203
cmpq $1, $3
jg label23639
jmp label23640

label23643:
    liveness
:
(list (set x22956 %rsp) (set %rsp) (set %rsp))
cmpq $1, x22956
je label23641
jmp label23642

label23645:
    liveness
:
(list (set %rsp) (set x22956 %rsp))
movq $0, x22956
jmp label23643

label23644:
    liveness
:
(list (set %rsp) (set x22956 %rsp))
movq $1, x22956
jmp label23643

label23646:
    liveness
:
(list (set temp23186 %rsp) (set %rsp) (set %rsp))
cmpq $8, temp23186
jg label23644
jmp label23645

label23648:
    liveness
:
(list (set %rsp) (set temp23186 %rsp))
movq $9, temp23186
jmp label23646

label23647:
    liveness
:
(list (set %rsp) (set temp23186 %rsp))
movq $8, temp23186
jmp label23646

label23649:
    liveness
:
(list (set temp23188 temp23193 %rsp) (set %rsp) (set %rsp))
cmpq temp23193, temp23188
jge label23647
jmp label23648

label23654:
    liveness
:
(list
 (set temp23188 %rsp)
 (set temp23188 a22968 %rsp)
 (set temp23188 temp23193 %rsp))
movq $2, a22968
movq a22968, temp23193
jmp label23649

label23650:
    liveness
:
(list (set temp23188 a22965 %rsp) (set temp23188 temp23193 %rsp))
movq a22965, temp23193
jmp label23649

label23652:
    liveness
:
(list
 (set temp23188 %rsp)
 (set temp23188 a22967 %rsp)
 (set temp23188 a22965 %rsp))
movq $2, a22967
movq a22967, a22965
jmp label23650

label23651:
    liveness
:
(list
 (set temp23188 %rsp)
 (set temp23188 a22966 %rsp)
 (set temp23188 a22965 %rsp))
movq $1, a22966
movq a22966, a22965
jmp label23650

label23653:
    liveness
:
(list (set temp23188 %rsp) (set temp23188 %rsp) (set temp23188 %rsp))
cmpq $1, $3
jg label23651
jmp label23652

label23655:
    liveness
:
(list (set temp23188 temp23195 %rsp) (set temp23188 %rsp) (set temp23188 %rsp))
cmpq temp23195, $3
jg label23653
jmp label23654

label23657:
    liveness
:
(list
 (set temp23188 %rsp)
 (set %rsp temp23188 a22964)
 (set temp23188 temp23195 %rsp))
movq $2, a22964
movq a22964, temp23195
jmp label23655

label23656:
    liveness
:
(list
 (set temp23188 %rsp)
 (set temp23188 %rsp a22963)
 (set temp23188 temp23195 %rsp))
movq $1, a22963
movq a22963, temp23195
jmp label23655

label23658:
    liveness
:
(list (set temp23188 %rsp) (set temp23188 %rsp) (set temp23188 %rsp))
cmpq $1, $3
jg label23656
jmp label23657

label23659:
    liveness
:
(list (set a22959 %rsp) (set temp23188 %rsp))
movq a22959, temp23188
jmp label23658

label23661:
    liveness
:
(list (set %rsp) (set a22961 %rsp) (set a22959 %rsp))
movq $2, a22961
movq a22961, a22959
jmp label23659

label23660:
    liveness
:
(list (set %rsp) (set a22960 %rsp) (set a22959 %rsp))
movq $1, a22960
movq a22960, a22959
jmp label23659

label23662:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label23660
jmp label23661

label23663:
    liveness
:
(list (set %rsp) (set a22962 %rsp) (set temp23188 %rsp))
movq $2, a22962
movq a22962, temp23188
jmp label23658

label23664:
    liveness
:
(list (set temp23190 %rsp) (set %rsp) (set %rsp))
cmpq temp23190, $3
jg label23662
jmp label23663

label23665:
    liveness
:
(list (set %rsp) (set a22957 %rsp) (set temp23190 %rsp))
movq $1, a22957
movq a22957, temp23190
jmp label23664

label23666:
    liveness
:
(list (set %rsp) (set a22958 %rsp) (set temp23190 %rsp))
movq $2, a22958
movq a22958, temp23190
jmp label23664

start:
    liveness
:
(list (set %rsp) (set %rsp) (set %rsp))
cmpq $1, $3
jg label23665
jmp label23666




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22958 : 'Integer, a22959 : 'Integer, x22956 : 'Boolean, a22957 : 'Integer, a22962 : 'Integer, a22963 : 'Integer, a22960 : 'Integer, a22961 : 'Integer, a22982 : 'Boolean, a22983 : 'Boolean, a22980 : 'Integer, a22981 : 'Integer, a22986 : 'Boolean, a22987 : 'Boolean, a22984 : 'Boolean, a22985 : 'Boolean, a22990 : 'Integer, a22991 : 'Integer, a22988 : 'Integer, a22989 : 'Integer, a22994 : 'Integer, a22995 : 'Integer, a22992 : 'Integer, a22993 : 'Integer, a22966 : 'Integer, a22967 : 'Integer, a22964 : 'Integer, a22965 : 'Integer, a22970 : 'Integer, a22971 : 'Integer, a22968 : 'Integer, a22969 : 'Integer, a22974 : 'Integer, a22975 : 'Integer, a22972 : 'Integer, a22973 : 'Integer, a22978 : 'Integer, a22979 : 'Integer, a22976 : 'Integer, a22977 : 'Integer, temp23337 : 'Integer, temp23338 : 'Integer, temp23335 : 'Integer, temp23344 : 'Integer, temp23340 : 'Integer, temp23322 : 'Integer, temp23319 : 'Integer, temp23331 : 'Integer, temp23324 : 'Integer, temp23325 : 'Integer, temp23327 : 'Integer, temp23272 : 'Integer, temp23269 : 'Integer, temp23270 : 'Integer, temp23280 : 'Integer, temp23282 : 'Integer, temp23283 : 'Integer, temp23276 : 'Integer, temp23256 : 'Integer, temp23258 : 'Integer, temp23253 : 'Integer, temp23255 : 'Integer, temp23266 : 'Integer, temp23267 : 'Integer, temp23262 : 'Integer, temp23306 : 'Integer, temp23302 : 'Integer, temp23315 : 'Integer, temp23308 : 'Integer, temp23309 : 'Integer, temp23311 : 'Integer, temp23289 : 'Integer, temp23285 : 'Integer, temp23296 : 'Integer, temp23298 : 'Integer, temp23293 : 'Integer, temp23295 : 'Integer, temp23206 : 'Integer, temp23204 : 'Integer, temp23210 : 'Integer, temp23214 : 'Integer, temp23219 : 'Integer, temp23217 : 'Integer, temp23216 : 'Integer, temp23190 : 'Integer, temp23188 : 'Integer, temp23195 : 'Integer, temp23193 : 'Integer, temp23199 : 'Integer, temp23203 : 'Integer, temp23236 : 'Integer, temp23243 : 'Integer, temp23242 : 'Integer, temp23240 : 'Integer, temp23245 : 'Integer, temp23249 : 'Integer, temp23223 : 'Integer, temp23227 : 'Integer, temp23230 : 'Integer, temp23229 : 'Integer, temp23232 : 'Integer, a23143 : 'Integer, a23142 : 'Integer, a23141 : 'Integer, a23140 : 'Integer, a23147 : 'Integer, a23146 : 'Integer, a23145 : 'Integer, a23144 : 'Integer, a23151 : 'Integer, a23150 : 'Integer, a23149 : 'Integer, a23148 : 'Integer, a23155 : 'Boolean, a23154 : 'Boolean, a23153 : 'Integer, a23152 : 'Integer, a23127 : 'Integer, a23126 : 'Integer, a23125 : 'Integer, a23124 : 'Integer, a23131 : 'Integer, a23130 : 'Integer, a23129 : 'Integer, a23128 : 'Integer, a23135 : 'Boolean, a23134 : 'Boolean, a23133 : 'Integer, a23132 : 'Integer, a23139 : 'Boolean, a23138 : 'Boolean, a23137 : 'Boolean, a23136 : 'Boolean, a23175 : 'Boolean, a23174 : 'Boolean, a23173 : 'Boolean, a23172 : 'Integer, a23179 : 'Integer, a23178 : 'Boolean, a23177 : 'Boolean, a23176 : 'Boolean, a23183 : 'Integer, a23182 : 'Integer, a23181 : 'Integer, a23180 : 'Integer, temp23186 : 'Integer, a23184 : 'Integer, a23159 : 'Boolean, a23158 : 'Boolean, a23157 : 'Boolean, a23156 : 'Boolean, a23163 : 'Integer, a23162 : 'Integer, a23161 : 'Integer, a23160 : 'Integer, a23167 : 'Integer, a23166 : 'Integer, a23165 : 'Integer, a23164 : 'Integer, a23171 : 'Integer, a23170 : 'Integer, a23169 : 'Integer, a23168 : 'Integer, a23079 : 'Boolean, a23078 : 'Boolean, a23077 : 'Boolean, a23076 : 'Integer, a23083 : 'Integer, a23082 : 'Boolean, a23081 : 'Boolean, a23080 : 'Boolean, a23087 : 'Integer, a23086 : 'Integer, a23085 : 'Integer, a23084 : 'Integer, a23091 : 'Integer, a23090 : 'Integer, a23089 : 'Integer, a23088 : 'Integer, a23063 : 'Boolean, a23062 : 'Boolean, a23061 : 'Boolean, a23060 : 'Boolean, a23067 : 'Integer, a23066 : 'Integer, a23065 : 'Integer, a23064 : 'Integer, a23071 : 'Integer, a23070 : 'Integer, a23069 : 'Integer, a23068 : 'Integer, a23075 : 'Integer, a23074 : 'Integer, a23073 : 'Integer, a23072 : 'Integer, a23111 : 'Integer, a23110 : 'Integer, a23109 : 'Integer, a23108 : 'Integer, a23115 : 'Boolean, a23114 : 'Integer, a23113 : 'Integer, a23112 : 'Integer, a23119 : 'Boolean, a23118 : 'Boolean, a23117 : 'Boolean, a23116 : 'Boolean, a23123 : 'Integer, a23122 : 'Integer, a23121 : 'Integer, a23120 : 'Boolean, a23095 : 'Integer, a23094 : 'Integer, a23093 : 'Integer, a23092 : 'Integer, a23099 : 'Boolean, a23098 : 'Boolean, a23097 : 'Boolean, a23096 : 'Boolean, a23103 : 'Integer, a23102 : 'Integer, a23101 : 'Boolean, a23100 : 'Boolean, a23107 : 'Integer, a23106 : 'Integer, a23105 : 'Integer, a23104 : 'Integer, a23015 : 'Integer, a23014 : 'Integer, a23013 : 'Integer, a23012 : 'Integer, a23019 : 'Integer, a23018 : 'Integer, a23017 : 'Integer, a23016 : 'Integer, a23023 : 'Boolean, a23022 : 'Boolean, a23021 : 'Boolean, a23020 : 'Boolean, a23027 : 'Integer, a23026 : 'Integer, a23025 : 'Boolean, a23024 : 'Boolean, a22999 : 'Integer, a22998 : 'Integer, a22997 : 'Integer, a22996 : 'Integer, a23003 : 'Boolean, a23002 : 'Boolean, a23001 : 'Boolean, a23000 : 'Integer, a23007 : 'Integer, a23006 : 'Boolean, a23005 : 'Boolean, a23004 : 'Boolean, a23011 : 'Integer, a23010 : 'Integer, a23009 : 'Integer, a23008 : 'Integer, a23047 : 'Integer, a23046 : 'Integer, a23045 : 'Integer, a23044 : 'Boolean, a23051 : 'Integer, a23050 : 'Integer, a23049 : 'Integer, a23048 : 'Integer, a23055 : 'Integer, a23054 : 'Integer, a23053 : 'Integer, a23052 : 'Integer, a23059 : 'Boolean, a23058 : 'Boolean, a23057 : 'Integer, a23056 : 'Integer, a23031 : 'Integer, a23030 : 'Integer, a23029 : 'Integer, a23028 : 'Integer, a23035 : 'Integer, a23034 : 'Integer, a23033 : 'Integer, a23032 : 'Integer, a23039 : 'Boolean, a23038 : 'Integer, a23037 : 'Integer, a23036 : 'Integer, a23043 : 'Boolean, a23042 : 'Boolean, a23041 : 'Boolean, a23040 : 'Boolean, 
tsorted
:
'(label23351
  label23355
  label23360
  label23356
  label23357
  label23358
  label23359
  label23361
  label23362
  label23363
  label23365
  label23364
  label23366
  label23367
  label23369
  label23368
  label23370
  label23371
  label23372
  label23377
  label23373
  label23374
  label23375
  label23376
  label23378
  label23379
  label23347
  label23348
  label23349
  label23350
  label23352
  label23353
  label23354
  label23641
  label23380
  label23381
  label23382
  label23383
  label23391
  label23386
  label23384
  label23385
  label23387
  label23388
  label23389
  label23390
  label23392
  label23393
  label23394
  label23395
  label23397
  label23396
  label23398
  label23399
  label23403
  label23401
  label23400
  label23402
  label23404
  label23405
  label23406
  label23407
  label23408
  label23409
  label23410
  label23411
  label23417
  label23412
  label23413
  label23414
  label23415
  label23416
  label23418
  label23419
  label23420
  label23421
  label23422
  label23423
  label23424
  label23429
  label23425
  label23426
  label23427
  label23428
  label23430
  label23432
  label23431
  label23433
  label23434
  label23435
  label23436
  label23437
  label23443
  label23438
  label23439
  label23440
  label23441
  label23442
  label23445
  label23444
  label23446
  label23447
  label23449
  label23448
  label23450
  label23451
  label23452
  label23453
  label23454
  label23455
  label23456
  label23457
  label23458
  label23459
  label23469
  label23460
  label23461
  label23462
  label23463
  label23464
  label23465
  label23466
  label23467
  label23468
  label23470
  label23471
  label23472
  label23473
  label23474
  label23475
  label23476
  label23481
  label23477
  label23478
  label23479
  label23480
  label23482
  label23483
  label23484
  label23485
  label23495
  label23490
  label23486
  label23488
  label23487
  label23489
  label23491
  label23492
  label23493
  label23494
  label23496
  label23497
  label23498
  label23499
  label23500
  label23501
  label23502
  label23507
  label23503
  label23504
  label23505
  label23506
  label23508
  label23509
  label23510
  label23511
  label23512
  label23513
  label23514
  label23515
  label23521
  label23516
  label23517
  label23519
  label23518
  label23520
  label23523
  label23522
  label23525
  label23524
  label23527
  label23526
  label23528
  label23529
  label23531
  label23530
  label23532
  label23533
  label23534
  label23536
  label23535
  label23537
  label23538
  label23539
  label23540
  label23541
  label23547
  label23542
  label23543
  label23545
  label23544
  label23546
  label23549
  label23548
  label23551
  label23550
  label23553
  label23552
  label23554
  label23559
  label23555
  label23557
  label23556
  label23558
  label23560
  label23561
  label23562
  label23563
  label23573
  label23568
  label23564
  label23565
  label23566
  label23567
  label23569
  label23571
  label23570
  label23572
  label23575
  label23574
  label23577
  label23576
  label23579
  label23578
  label23580
  label23585
  label23581
  label23583
  label23582
  label23584
  label23586
  label23588
  label23587
  label23589
  label23594
  label23590
  label23592
  label23591
  label23593
  label23595
  label23597
  label23596
  label23598
  label23599
  label23601
  label23600
  label23603
  label23602
  label23605
  label23604
  label23606
  label23611
  label23607
  label23609
  label23608
  label23610
  label23612
  label23613
  label23614
  label23615
  label23625
  label23620
  label23616
  label23617
  label23618
  label23619
  label23621
  label23623
  label23622
  label23624
  label23627
  label23626
  label23629
  label23628
  label23631
  label23630
  label23632
  label23637
  label23633
  label23635
  label23634
  label23636
  label23638
  label23640
  label23639
  label23642
  label23643
  label23645
  label23644
  label23646
  label23648
  label23647
  label23649
  label23654
  label23650
  label23652
  label23651
  label23653
  label23655
  label23657
  label23656
  label23658
  label23659
  label23661
  label23660
  label23662
  label23663
  label23664
  label23665
  label23666
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23195 a22964)
 (list temp23195 a22963)
 (list temp23193 a22965)
 (list temp23193 a22968)
 (list temp23190 a22957)
 (list temp23190 a22958)
 (list temp23188 a22959)
 (list temp23188 a22962)
 (list temp23199 a22969)
 (list temp23199 a22970)
 (list a23179 temp23344)
 (list a23172 temp23338)
 (list a23184 a23166)
 (list a23183 a23181)
 (list a23182 a23181)
 (list a23181 a23183)
 (list a23181 a23166)
 (list a23181 a23182)
 (list a23180 temp23344)
 (list a22970 temp23199)
 (list temp23227 a23013)
 (list a22971 a22972)
 (list a22971 a22973)
 (list a22968 temp23193)
 (list a22969 temp23199)
 (list a22966 a22965)
 (list temp23223 a23007)
 (list temp23223 a23008)
 (list a22967 a22965)
 (list a22964 temp23195)
 (list a22965 a22966)
 (list a22965 a22967)
 (list a22965 temp23193)
 (list a22978 a22979)
 (list a22978 a22980)
 (list a22978 temp23204)
 (list a22979 a22978)
 (list a22976 temp23206)
 (list a22977 temp23206)
 (list temp23232 a23014)
 (list temp23232 a23015)
 (list a22975 a22990)
 (list a22975 a22993)
 (list temp23230 a23016)
 (list temp23230 a23019)
 (list a22972 a22971)
 (list a22973 a22971)
 (list temp23210 a22988)
 (list temp23210 a22989)
 (list temp23206 a22976)
 (list temp23206 a22977)
 (list temp23204 a22981)
 (list temp23204 a22978)
 (list a22962 temp23188)
 (list temp23219 a22996)
 (list temp23219 a22995)
 (list a22963 temp23195)
 (list a22960 a22959)
 (list temp23217 a22997)
 (list temp23217 a23000)
 (list a22961 a22959)
 (list a22958 temp23190)
 (list a22959 temp23188)
 (list a22959 a22960)
 (list a22959 a22961)
 (list temp23214 a22994)
 (list a22957 temp23190)
 (list a23131 a23130)
 (list a23130 a23131)
 (list a23130 a23132)
 (list a23130 temp23309)
 (list a23129 temp23311)
 (list a23128 temp23311)
 (list a23127 a23142)
 (list a23127 a23145)
 (list a23127 temp23306)
 (list a23126 a23108)
 (list a23125 a23123)
 (list a23124 a23123)
 (list a23133 temp23309)
 (list a23132 a23130)
 (list a23114 temp23296)
 (list a23113 a23111)
 (list a23112 a23111)
 (list a23111 a23112)
 (list a23111 a23113)
 (list a23111 temp23296)
 (list a23110 temp23298)
 (list a23109 temp23298)
 (list a23108 a23126)
 (list a23108 temp23293)
 (list a23108 a23123)
 (list a23123 a23125)
 (list a23123 a23108)
 (list a23123 a23124)
 (list a23122 temp23302)
 (list a23121 temp23302)
 (list a23163 a23162)
 (list a23162 a23164)
 (list a23162 a23147)
 (list a23162 a23163)
 (list a23161 temp23331)
 (list a23160 temp23331)
 (list a23171 a23169)
 (list a23170 a23169)
 (list a23169 temp23338)
 (list a23169 a23170)
 (list a23169 a23171)
 (list a23168 temp23340)
 (list a23167 temp23340)
 (list a23166 temp23335)
 (list a23166 a23181)
 (list a23166 a23184)
 (list a23165 a23147)
 (list a23164 a23162)
 (list a23147 a23165)
 (list a23147 temp23322)
 (list a23147 a23162)
 (list a23146 temp23319)
 (list a23145 a23127)
 (list a23144 a23142)
 (list a23143 a23142)
 (list a23142 a23144)
 (list a23142 a23127)
 (list a23142 a23143)
 (list a23141 temp23315)
 (list a23140 temp23315)
 (list a23153 temp23325)
 (list a23152 a23150)
 (list a23151 a23150)
 (list a23150 temp23325)
 (list a23150 a23151)
 (list a23150 a23152)
 (list a23149 temp23327)
 (list a23148 temp23327)
 (list a23067 a23066)
 (list temp23325 a23150)
 (list temp23325 a23153)
 (list a23066 a23068)
 (list a23066 a23051)
 (list a23066 a23067)
 (list a23065 temp23262)
 (list temp23327 a23148)
 (list temp23327 a23149)
 (list a23064 temp23262)
 (list temp23331 a23160)
 (list temp23331 a23161)
 (list a23075 a23073)
 (list a23074 a23073)
 (list a23073 temp23270)
 (list a23073 a23074)
 (list a23073 a23075)
 (list temp23319 a23146)
 (list a23072 temp23272)
 (list a23071 temp23272)
 (list a23070 a23085)
 (list a23070 a23088)
 (list a23070 temp23267)
 (list temp23322 a23147)
 (list a23069 a23051)
 (list a23068 a23066)
 (list a23051 a23066)
 (list a23051 a23069)
 (list a23050 a23032)
 (list temp23309 a23130)
 (list temp23309 a23133)
 (list a23049 a23047)
 (list a23048 a23047)
 (list temp23311 a23128)
 (list temp23311 a23129)
 (list a23047 a23049)
 (list a23047 a23032)
 (list a23047 a23048)
 (list a23046 temp23249)
 (list a23045 temp23249)
 (list temp23315 a23140)
 (list temp23315 a23141)
 (list a23057 temp23256)
 (list temp23302 a23121)
 (list temp23302 a23122)
 (list a23056 a23054)
 (list a23055 a23054)
 (list a23054 temp23256)
 (list a23054 a23055)
 (list a23054 a23056)
 (list a23053 temp23258)
 (list temp23306 a23127)
 (list a23052 temp23258)
 (list a23095 temp23283)
 (list a23094 a23092)
 (list a23093 a23092)
 (list a23092 a23093)
 (list a23092 a23094)
 (list a23092 temp23283)
 (list a23107 a23089)
 (list a23106 a23104)
 (list a23105 a23104)
 (list a23104 a23106)
 (list a23104 a23089)
 (list a23104 a23105)
 (list a23103 temp23289)
 (list a23102 temp23289)
 (list temp23340 a23167)
 (list temp23340 a23168)
 (list a23083 temp23276)
 (list temp23344 a23179)
 (list temp23344 a23180)
 (list a23076 temp23270)
 (list a23091 temp23285)
 (list a23090 temp23285)
 (list a23089 a23107)
 (list a23089 temp23280)
 (list a23089 a23104)
 (list temp23335 a23166)
 (list a23088 a23070)
 (list a23087 a23085)
 (list a23086 a23085)
 (list temp23338 a23172)
 (list temp23338 a23169)
 (list a23085 a23087)
 (list a23085 a23070)
 (list a23085 a23086)
 (list a23084 temp23276)
 (list temp23262 a23064)
 (list temp23262 a23065)
 (list a23000 temp23217)
 (list a22999 a22997)
 (list a22998 a22997)
 (list a22997 a22998)
 (list a22997 a22999)
 (list a22997 temp23217)
 (list temp23266 temp23253)
 (list a22996 temp23219)
 (list temp23267 a23070)
 (list a23011 a23009)
 (list a23010 a23009)
 (list temp23253 temp23266)
 (list a23009 a23011)
 (list a23009 a22994)
 (list a23009 a23010)
 (list a23008 temp23223)
 (list a23007 temp23223)
 (list temp23256 a23054)
 (list temp23256 a23057)
 (list temp23258 a23052)
 (list temp23258 a23053)
 (list temp23245 a23033)
 (list temp23245 a23034)
 (list temp23249 a23045)
 (list temp23249 a23046)
 (list a22981 temp23204)
 (list a22980 a22978)
 (list a22995 temp23219)
 (list temp23236 a23026)
 (list temp23236 a23027)
 (list a22994 a23012)
 (list a22994 temp23214)
 (list a22994 a23009)
 (list a22993 a22975)
 (list a22992 a22990)
 (list a22991 a22990)
 (list temp23240 a23032)
 (list a22990 a22992)
 (list a22990 a22991)
 (list a22990 a22975)
 (list a22989 temp23210)
 (list a22988 temp23210)
 (list temp23243 a23035)
 (list temp23243 a23038)
 (list a23035 temp23243)
 (list a23035 a23036)
 (list a23035 a23037)
 (list a23034 temp23245)
 (list temp23293 a23108)
 (list a23033 temp23245)
 (list a23032 a23047)
 (list a23032 temp23240)
 (list a23032 a23050)
 (list a23031 a23013)
 (list temp23296 a23111)
 (list temp23296 a23114)
 (list a23030 a23028)
 (list a23029 a23028)
 (list temp23298 a23109)
 (list temp23298 a23110)
 (list a23028 a23030)
 (list a23028 a23013)
 (list a23028 a23029)
 (list temp23285 a23090)
 (list temp23285 a23091)
 (list a23038 temp23243)
 (list temp23289 a23102)
 (list temp23289 a23103)
 (list a23037 a23035)
 (list a23036 a23035)
 (list a23019 temp23230)
 (list temp23276 a23083)
 (list temp23276 a23084)
 (list a23018 a23016)
 (list a23017 a23016)
 (list a23016 a23017)
 (list a23016 a23018)
 (list a23016 temp23230)
 (list a23015 temp23232)
 (list temp23280 a23089)
 (list a23014 temp23232)
 (list a23013 a23028)
 (list a23013 a23031)
 (list a23013 temp23227)
 (list a23012 a22994)
 (list temp23283 a23092)
 (list temp23283 a23095)
 (list a23027 temp23236)
 (list a23026 temp23236)
 (list temp23270 a23076)
 (list temp23270 a23073)
 (list temp23272 a23071)
 (list temp23272 a23072))
label23351:
    movq $2, a22974
    movq a22974, %rax
    jmp conclusion
    
label23355:
    movq a23166, temp23335
    movq a23147, temp23322
    addq temp23335, temp23322
    movq a23146, temp23319
    addq temp23322, temp23319
    movq a23127, temp23306
    addq temp23319, temp23306
    movq a23108, temp23293
    addq temp23306, temp23293
    movq a23089, temp23280
    addq temp23293, temp23280
    movq a23070, temp23267
    addq temp23280, temp23267
    movq temp23266, temp23253
    addq temp23267, temp23253
    movq a23032, temp23240
    addq temp23253, temp23240
    movq a23013, temp23227
    addq temp23240, temp23227
    movq a22994, temp23214
    addq temp23227, temp23214
    movq a22975, %rax
    addq temp23214, %rax
    jmp conclusion
    
label23360:
    movq $2, a23184
    movq a23184, a23166
    jmp label23355
    
label23356:
    movq a23181, a23166
    jmp label23355
    
label23357:
    movq $1, a23182
    movq a23182, a23181
    jmp label23356
    
label23358:
    movq $2, a23183
    movq a23183, a23181
    jmp label23356
    
label23359:
    cmpq $1, $3
    jg label23357
    jmp label23358
    
label23361:
    cmpq temp23344, $3
    jg label23359
    jmp label23360
    
label23362:
    movq $1, a23179
    movq a23179, temp23344
    jmp label23361
    
label23363:
    movq $2, a23180
    movq a23180, temp23344
    jmp label23361
    
label23365:
    movq $2, a23166
    jmp label23355
    
label23364:
    cmpq $1, $3
    jg label23362
    jmp label23363
    
label23366:
    movq $1, a23177
    cmpq $1, a23177
    je label23364
    jmp label23365
    
label23367:
    movq $0, a23178
    cmpq $1, a23178
    je label23364
    jmp label23365
    
label23369:
    movq $0, a23176
    cmpq $1, a23176
    je label23366
    jmp label23367
    
label23368:
    movq $1, a23175
    cmpq $1, a23175
    je label23366
    jmp label23367
    
label23370:
    movq $1, a23173
    cmpq $1, a23173
    je label23368
    jmp label23369
    
label23371:
    movq $0, a23174
    cmpq $1, a23174
    je label23368
    jmp label23369
    
label23372:
    cmpq temp23338, temp23337
    jg label23370
    jmp label23371
    
label23377:
    movq $2, a23172
    movq a23172, temp23338
    jmp label23372
    
label23373:
    movq a23169, temp23338
    jmp label23372
    
label23374:
    movq $1, a23170
    movq a23170, a23169
    jmp label23373
    
label23375:
    movq $2, a23171
    movq a23171, a23169
    jmp label23373
    
label23376:
    cmpq $1, $3
    jg label23374
    jmp label23375
    
label23378:
    cmpq temp23340, $3
    jg label23376
    jmp label23377
    
label23379:
    movq $1, a23167
    movq a23167, temp23340
    jmp label23378
    
label23347:
    movq a22971, %rax
    jmp conclusion
    
label23348:
    movq $1, a22972
    movq a22972, a22971
    jmp label23347
    
label23349:
    movq $2, a22973
    movq a22973, a22971
    jmp label23347
    
label23350:
    cmpq $1, $3
    jg label23348
    jmp label23349
    
label23352:
    cmpq temp23199, $3
    jg label23350
    jmp label23351
    
label23353:
    movq $1, a22969
    movq a22969, temp23199
    jmp label23352
    
label23354:
    movq $2, a22970
    movq a22970, temp23199
    jmp label23352
    
label23641:
    cmpq $1, $3
    jg label23353
    jmp label23354
    
label23380:
    movq $2, a23168
    movq a23168, temp23340
    jmp label23378
    
label23381:
    callq read_int
    movq %rax, temp23337
    cmpq $1, $3
    jg label23379
    jmp label23380
    
label23382:
    movq a23162, a23147
    jmp label23381
    
label23383:
    movq $1, a23163
    movq a23163, a23162
    jmp label23382
    
label23391:
    movq $2, a23147
    jmp label23381
    
label23386:
    movq $2, a23165
    movq a23165, a23147
    jmp label23381
    
label23384:
    movq $2, a23164
    movq a23164, a23162
    jmp label23382
    
label23385:
    cmpq $1, $3
    jg label23383
    jmp label23384
    
label23387:
    cmpq temp23331, $3
    jg label23385
    jmp label23386
    
label23388:
    movq $1, a23160
    movq a23160, temp23331
    jmp label23387
    
label23389:
    movq $2, a23161
    movq a23161, temp23331
    jmp label23387
    
label23390:
    cmpq $1, $3
    jg label23388
    jmp label23389
    
label23392:
    movq $1, a23158
    cmpq $1, a23158
    je label23390
    jmp label23391
    
label23393:
    movq $0, a23159
    cmpq $1, a23159
    je label23390
    jmp label23391
    
label23394:
    movq $1, a23156
    cmpq $1, a23156
    je label23392
    jmp label23393
    
label23395:
    movq $0, a23157
    cmpq $1, a23157
    je label23392
    jmp label23393
    
label23397:
    movq $0, a23155
    cmpq $1, a23155
    je label23394
    jmp label23395
    
label23396:
    movq $1, a23154
    cmpq $1, a23154
    je label23394
    jmp label23395
    
label23398:
    cmpq temp23325, temp23324
    jg label23396
    jmp label23397
    
label23399:
    movq a23150, temp23325
    jmp label23398
    
label23403:
    movq $2, a23153
    movq a23153, temp23325
    jmp label23398
    
label23401:
    movq $2, a23152
    movq a23152, a23150
    jmp label23399
    
label23400:
    movq $1, a23151
    movq a23151, a23150
    jmp label23399
    
label23402:
    cmpq $1, $3
    jg label23400
    jmp label23401
    
label23404:
    cmpq temp23327, $3
    jg label23402
    jmp label23403
    
label23405:
    movq $1, a23148
    movq a23148, temp23327
    jmp label23404
    
label23406:
    movq $2, a23149
    movq a23149, temp23327
    jmp label23404
    
label23407:
    callq read_int
    movq %rax, a23146
    callq read_int
    movq %rax, temp23324
    cmpq $1, $3
    jg label23405
    jmp label23406
    
label23408:
    movq a23142, a23127
    jmp label23407
    
label23409:
    movq $1, a23143
    movq a23143, a23142
    jmp label23408
    
label23410:
    movq $2, a23144
    movq a23144, a23142
    jmp label23408
    
label23411:
    cmpq $1, $3
    jg label23409
    jmp label23410
    
label23417:
    movq $2, a23127
    jmp label23407
    
label23412:
    movq $2, a23145
    movq a23145, a23127
    jmp label23407
    
label23413:
    cmpq temp23315, $3
    jg label23411
    jmp label23412
    
label23414:
    movq $1, a23140
    movq a23140, temp23315
    jmp label23413
    
label23415:
    movq $2, a23141
    movq a23141, temp23315
    jmp label23413
    
label23416:
    cmpq $1, $3
    jg label23414
    jmp label23415
    
label23418:
    movq $1, a23138
    cmpq $1, a23138
    je label23416
    jmp label23417
    
label23419:
    movq $0, a23139
    cmpq $1, a23139
    je label23416
    jmp label23417
    
label23420:
    movq $1, a23136
    cmpq $1, a23136
    je label23418
    jmp label23419
    
label23421:
    movq $0, a23137
    cmpq $1, a23137
    je label23418
    jmp label23419
    
label23422:
    movq $1, a23134
    cmpq $1, a23134
    je label23420
    jmp label23421
    
label23423:
    movq $0, a23135
    cmpq $1, a23135
    je label23420
    jmp label23421
    
label23424:
    cmpq temp23309, temp23308
    jg label23422
    jmp label23423
    
label23429:
    movq $2, a23133
    movq a23133, temp23309
    jmp label23424
    
label23425:
    movq a23130, temp23309
    jmp label23424
    
label23426:
    movq $1, a23131
    movq a23131, a23130
    jmp label23425
    
label23427:
    movq $2, a23132
    movq a23132, a23130
    jmp label23425
    
label23428:
    cmpq $1, $3
    jg label23426
    jmp label23427
    
label23430:
    cmpq temp23311, $3
    jg label23428
    jmp label23429
    
label23432:
    movq $2, a23129
    movq a23129, temp23311
    jmp label23430
    
label23431:
    movq $1, a23128
    movq a23128, temp23311
    jmp label23430
    
label23433:
    callq read_int
    movq %rax, temp23308
    cmpq $1, $3
    jg label23431
    jmp label23432
    
label23434:
    movq a23123, a23108
    jmp label23433
    
label23435:
    movq $1, a23124
    movq a23124, a23123
    jmp label23434
    
label23436:
    movq $2, a23125
    movq a23125, a23123
    jmp label23434
    
label23437:
    cmpq $1, $3
    jg label23435
    jmp label23436
    
label23443:
    movq $2, a23108
    jmp label23433
    
label23438:
    movq $2, a23126
    movq a23126, a23108
    jmp label23433
    
label23439:
    cmpq temp23302, $3
    jg label23437
    jmp label23438
    
label23440:
    movq $1, a23121
    movq a23121, temp23302
    jmp label23439
    
label23441:
    movq $2, a23122
    movq a23122, temp23302
    jmp label23439
    
label23442:
    cmpq $1, $3
    jg label23440
    jmp label23441
    
label23445:
    movq $0, a23120
    cmpq $1, a23120
    je label23442
    jmp label23443
    
label23444:
    movq $1, a23119
    cmpq $1, a23119
    je label23442
    jmp label23443
    
label23446:
    movq $1, a23117
    cmpq $1, a23117
    je label23444
    jmp label23445
    
label23447:
    movq $0, a23118
    cmpq $1, a23118
    je label23444
    jmp label23445
    
label23449:
    movq $0, a23116
    cmpq $1, a23116
    je label23446
    jmp label23447
    
label23448:
    movq $1, a23115
    cmpq $1, a23115
    je label23446
    jmp label23447
    
label23450:
    cmpq temp23296, temp23295
    jg label23448
    jmp label23449
    
label23451:
    movq a23111, temp23296
    jmp label23450
    
label23452:
    movq $1, a23112
    movq a23112, a23111
    jmp label23451
    
label23453:
    movq $2, a23113
    movq a23113, a23111
    jmp label23451
    
label23454:
    cmpq $1, $3
    jg label23452
    jmp label23453
    
label23455:
    movq $2, a23114
    movq a23114, temp23296
    jmp label23450
    
label23456:
    cmpq temp23298, $3
    jg label23454
    jmp label23455
    
label23457:
    movq $1, a23109
    movq a23109, temp23298
    jmp label23456
    
label23458:
    movq $2, a23110
    movq a23110, temp23298
    jmp label23456
    
label23459:
    callq read_int
    movq %rax, temp23295
    cmpq $1, $3
    jg label23457
    jmp label23458
    
label23469:
    movq $2, a23089
    jmp label23459
    
label23460:
    movq a23104, a23089
    jmp label23459
    
label23461:
    movq $1, a23105
    movq a23105, a23104
    jmp label23460
    
label23462:
    movq $2, a23106
    movq a23106, a23104
    jmp label23460
    
label23463:
    cmpq $1, $3
    jg label23461
    jmp label23462
    
label23464:
    movq $2, a23107
    movq a23107, a23089
    jmp label23459
    
label23465:
    cmpq temp23289, $3
    jg label23463
    jmp label23464
    
label23466:
    movq $1, a23102
    movq a23102, temp23289
    jmp label23465
    
label23467:
    movq $2, a23103
    movq a23103, temp23289
    jmp label23465
    
label23468:
    cmpq $1, $3
    jg label23466
    jmp label23467
    
label23470:
    movq $1, a23100
    cmpq $1, a23100
    je label23468
    jmp label23469
    
label23471:
    movq $0, a23101
    cmpq $1, a23101
    je label23468
    jmp label23469
    
label23472:
    movq $1, a23098
    cmpq $1, a23098
    je label23470
    jmp label23471
    
label23473:
    movq $0, a23099
    cmpq $1, a23099
    je label23470
    jmp label23471
    
label23474:
    movq $1, a23096
    cmpq $1, a23096
    je label23472
    jmp label23473
    
label23475:
    movq $0, a23097
    cmpq $1, a23097
    je label23472
    jmp label23473
    
label23476:
    cmpq temp23283, temp23282
    jg label23474
    jmp label23475
    
label23481:
    movq $2, a23095
    movq a23095, temp23283
    jmp label23476
    
label23477:
    movq a23092, temp23283
    jmp label23476
    
label23478:
    movq $1, a23093
    movq a23093, a23092
    jmp label23477
    
label23479:
    movq $2, a23094
    movq a23094, a23092
    jmp label23477
    
label23480:
    cmpq $1, $3
    jg label23478
    jmp label23479
    
label23482:
    cmpq temp23285, $3
    jg label23480
    jmp label23481
    
label23483:
    movq $1, a23090
    movq a23090, temp23285
    jmp label23482
    
label23484:
    movq $2, a23091
    movq a23091, temp23285
    jmp label23482
    
label23485:
    callq read_int
    movq %rax, temp23282
    cmpq $1, $3
    jg label23483
    jmp label23484
    
label23495:
    movq $2, a23070
    jmp label23485
    
label23490:
    movq $2, a23088
    movq a23088, a23070
    jmp label23485
    
label23486:
    movq a23085, a23070
    jmp label23485
    
label23488:
    movq $2, a23087
    movq a23087, a23085
    jmp label23486
    
label23487:
    movq $1, a23086
    movq a23086, a23085
    jmp label23486
    
label23489:
    cmpq $1, $3
    jg label23487
    jmp label23488
    
label23491:
    cmpq temp23276, $3
    jg label23489
    jmp label23490
    
label23492:
    movq $1, a23083
    movq a23083, temp23276
    jmp label23491
    
label23493:
    movq $2, a23084
    movq a23084, temp23276
    jmp label23491
    
label23494:
    cmpq $1, $3
    jg label23492
    jmp label23493
    
label23496:
    movq $1, a23081
    cmpq $1, a23081
    je label23494
    jmp label23495
    
label23497:
    movq $0, a23082
    cmpq $1, a23082
    je label23494
    jmp label23495
    
label23498:
    movq $1, a23079
    cmpq $1, a23079
    je label23496
    jmp label23497
    
label23499:
    movq $0, a23080
    cmpq $1, a23080
    je label23496
    jmp label23497
    
label23500:
    movq $1, a23077
    cmpq $1, a23077
    je label23498
    jmp label23499
    
label23501:
    movq $0, a23078
    cmpq $1, a23078
    je label23498
    jmp label23499
    
label23502:
    cmpq temp23270, temp23269
    jg label23500
    jmp label23501
    
label23507:
    movq $2, a23076
    movq a23076, temp23270
    jmp label23502
    
label23503:
    movq a23073, temp23270
    jmp label23502
    
label23504:
    movq $1, a23074
    movq a23074, a23073
    jmp label23503
    
label23505:
    movq $2, a23075
    movq a23075, a23073
    jmp label23503
    
label23506:
    cmpq $1, $3
    jg label23504
    jmp label23505
    
label23508:
    cmpq temp23272, $3
    jg label23506
    jmp label23507
    
label23509:
    movq $1, a23071
    movq a23071, temp23272
    jmp label23508
    
label23510:
    movq $2, a23072
    movq a23072, temp23272
    jmp label23508
    
label23511:
    callq read_int
    movq %rax, temp23266
    callq read_int
    movq %rax, temp23269
    cmpq $1, $3
    jg label23509
    jmp label23510
    
label23512:
    movq a23066, a23051
    jmp label23511
    
label23513:
    movq $1, a23067
    movq a23067, a23066
    jmp label23512
    
label23514:
    movq $2, a23068
    movq a23068, a23066
    jmp label23512
    
label23515:
    cmpq $1, $3
    jg label23513
    jmp label23514
    
label23521:
    movq $2, a23051
    jmp label23511
    
label23516:
    movq $2, a23069
    movq a23069, a23051
    jmp label23511
    
label23517:
    cmpq temp23262, $3
    jg label23515
    jmp label23516
    
label23519:
    movq $2, a23065
    movq a23065, temp23262
    jmp label23517
    
label23518:
    movq $1, a23064
    movq a23064, temp23262
    jmp label23517
    
label23520:
    cmpq $1, $3
    jg label23518
    jmp label23519
    
label23523:
    movq $0, a23063
    cmpq $1, a23063
    je label23520
    jmp label23521
    
label23522:
    movq $1, a23062
    cmpq $1, a23062
    je label23520
    jmp label23521
    
label23525:
    movq $0, a23061
    cmpq $1, a23061
    je label23522
    jmp label23523
    
label23524:
    movq $1, a23060
    cmpq $1, a23060
    je label23522
    jmp label23523
    
label23527:
    movq $0, a23059
    cmpq $1, a23059
    je label23524
    jmp label23525
    
label23526:
    movq $1, a23058
    cmpq $1, a23058
    je label23524
    jmp label23525
    
label23528:
    cmpq temp23256, temp23255
    jg label23526
    jmp label23527
    
label23529:
    movq a23054, temp23256
    jmp label23528
    
label23531:
    movq $2, a23056
    movq a23056, a23054
    jmp label23529
    
label23530:
    movq $1, a23055
    movq a23055, a23054
    jmp label23529
    
label23532:
    cmpq $1, $3
    jg label23530
    jmp label23531
    
label23533:
    movq $2, a23057
    movq a23057, temp23256
    jmp label23528
    
label23534:
    cmpq temp23258, $3
    jg label23532
    jmp label23533
    
label23536:
    movq $2, a23053
    movq a23053, temp23258
    jmp label23534
    
label23535:
    movq $1, a23052
    movq a23052, temp23258
    jmp label23534
    
label23537:
    callq read_int
    movq %rax, temp23255
    cmpq $1, $3
    jg label23535
    jmp label23536
    
label23538:
    movq a23047, a23032
    jmp label23537
    
label23539:
    movq $1, a23048
    movq a23048, a23047
    jmp label23538
    
label23540:
    movq $2, a23049
    movq a23049, a23047
    jmp label23538
    
label23541:
    cmpq $1, $3
    jg label23539
    jmp label23540
    
label23547:
    movq $2, a23032
    jmp label23537
    
label23542:
    movq $2, a23050
    movq a23050, a23032
    jmp label23537
    
label23543:
    cmpq temp23249, $3
    jg label23541
    jmp label23542
    
label23545:
    movq $2, a23046
    movq a23046, temp23249
    jmp label23543
    
label23544:
    movq $1, a23045
    movq a23045, temp23249
    jmp label23543
    
label23546:
    cmpq $1, $3
    jg label23544
    jmp label23545
    
label23549:
    movq $0, a23044
    cmpq $1, a23044
    je label23546
    jmp label23547
    
label23548:
    movq $1, a23043
    cmpq $1, a23043
    je label23546
    jmp label23547
    
label23551:
    movq $0, a23042
    cmpq $1, a23042
    je label23548
    jmp label23549
    
label23550:
    movq $1, a23041
    cmpq $1, a23041
    je label23548
    jmp label23549
    
label23553:
    movq $0, a23040
    cmpq $1, a23040
    je label23550
    jmp label23551
    
label23552:
    movq $1, a23039
    cmpq $1, a23039
    je label23550
    jmp label23551
    
label23554:
    cmpq temp23243, temp23242
    jg label23552
    jmp label23553
    
label23559:
    movq $2, a23038
    movq a23038, temp23243
    jmp label23554
    
label23555:
    movq a23035, temp23243
    jmp label23554
    
label23557:
    movq $2, a23037
    movq a23037, a23035
    jmp label23555
    
label23556:
    movq $1, a23036
    movq a23036, a23035
    jmp label23555
    
label23558:
    cmpq $1, $3
    jg label23556
    jmp label23557
    
label23560:
    cmpq temp23245, $3
    jg label23558
    jmp label23559
    
label23561:
    movq $1, a23033
    movq a23033, temp23245
    jmp label23560
    
label23562:
    movq $2, a23034
    movq a23034, temp23245
    jmp label23560
    
label23563:
    callq read_int
    movq %rax, temp23242
    cmpq $1, $3
    jg label23561
    jmp label23562
    
label23573:
    movq $2, a23013
    jmp label23563
    
label23568:
    movq $2, a23031
    movq a23031, a23013
    jmp label23563
    
label23564:
    movq a23028, a23013
    jmp label23563
    
label23565:
    movq $1, a23029
    movq a23029, a23028
    jmp label23564
    
label23566:
    movq $2, a23030
    movq a23030, a23028
    jmp label23564
    
label23567:
    cmpq $1, $3
    jg label23565
    jmp label23566
    
label23569:
    cmpq temp23236, $3
    jg label23567
    jmp label23568
    
label23571:
    movq $2, a23027
    movq a23027, temp23236
    jmp label23569
    
label23570:
    movq $1, a23026
    movq a23026, temp23236
    jmp label23569
    
label23572:
    cmpq $1, $3
    jg label23570
    jmp label23571
    
label23575:
    movq $0, a23025
    cmpq $1, a23025
    je label23572
    jmp label23573
    
label23574:
    movq $1, a23024
    cmpq $1, a23024
    je label23572
    jmp label23573
    
label23577:
    movq $0, a23023
    cmpq $1, a23023
    je label23574
    jmp label23575
    
label23576:
    movq $1, a23022
    cmpq $1, a23022
    je label23574
    jmp label23575
    
label23579:
    movq $0, a23021
    cmpq $1, a23021
    je label23576
    jmp label23577
    
label23578:
    movq $1, a23020
    cmpq $1, a23020
    je label23576
    jmp label23577
    
label23580:
    cmpq temp23230, temp23229
    jg label23578
    jmp label23579
    
label23585:
    movq $2, a23019
    movq a23019, temp23230
    jmp label23580
    
label23581:
    movq a23016, temp23230
    jmp label23580
    
label23583:
    movq $2, a23018
    movq a23018, a23016
    jmp label23581
    
label23582:
    movq $1, a23017
    movq a23017, a23016
    jmp label23581
    
label23584:
    cmpq $1, $3
    jg label23582
    jmp label23583
    
label23586:
    cmpq temp23232, $3
    jg label23584
    jmp label23585
    
label23588:
    movq $2, a23015
    movq a23015, temp23232
    jmp label23586
    
label23587:
    movq $1, a23014
    movq a23014, temp23232
    jmp label23586
    
label23589:
    callq read_int
    movq %rax, temp23229
    cmpq $1, $3
    jg label23587
    jmp label23588
    
label23594:
    movq $2, a23012
    movq a23012, a22994
    jmp label23589
    
label23590:
    movq a23009, a22994
    jmp label23589
    
label23592:
    movq $2, a23011
    movq a23011, a23009
    jmp label23590
    
label23591:
    movq $1, a23010
    movq a23010, a23009
    jmp label23590
    
label23593:
    cmpq $1, $3
    jg label23591
    jmp label23592
    
label23595:
    cmpq temp23223, $3
    jg label23593
    jmp label23594
    
label23597:
    movq $2, a23008
    movq a23008, temp23223
    jmp label23595
    
label23596:
    movq $1, a23007
    movq a23007, temp23223
    jmp label23595
    
label23598:
    cmpq $1, $3
    jg label23596
    jmp label23597
    
label23599:
    movq $2, a22994
    jmp label23589
    
label23601:
    movq $0, a23006
    cmpq $1, a23006
    je label23598
    jmp label23599
    
label23600:
    movq $1, a23005
    cmpq $1, a23005
    je label23598
    jmp label23599
    
label23603:
    movq $0, a23004
    cmpq $1, a23004
    je label23600
    jmp label23601
    
label23602:
    movq $1, a23003
    cmpq $1, a23003
    je label23600
    jmp label23601
    
label23605:
    movq $0, a23002
    cmpq $1, a23002
    je label23602
    jmp label23603
    
label23604:
    movq $1, a23001
    cmpq $1, a23001
    je label23602
    jmp label23603
    
label23606:
    cmpq temp23217, temp23216
    jg label23604
    jmp label23605
    
label23611:
    movq $2, a23000
    movq a23000, temp23217
    jmp label23606
    
label23607:
    movq a22997, temp23217
    jmp label23606
    
label23609:
    movq $2, a22999
    movq a22999, a22997
    jmp label23607
    
label23608:
    movq $1, a22998
    movq a22998, a22997
    jmp label23607
    
label23610:
    cmpq $1, $3
    jg label23608
    jmp label23609
    
label23612:
    cmpq temp23219, $3
    jg label23610
    jmp label23611
    
label23613:
    movq $1, a22995
    movq a22995, temp23219
    jmp label23612
    
label23614:
    movq $2, a22996
    movq a22996, temp23219
    jmp label23612
    
label23615:
    callq read_int
    movq %rax, temp23216
    cmpq $1, $3
    jg label23613
    jmp label23614
    
label23625:
    movq $2, a22975
    jmp label23615
    
label23620:
    movq $2, a22993
    movq a22993, a22975
    jmp label23615
    
label23616:
    movq a22990, a22975
    jmp label23615
    
label23617:
    movq $1, a22991
    movq a22991, a22990
    jmp label23616
    
label23618:
    movq $2, a22992
    movq a22992, a22990
    jmp label23616
    
label23619:
    cmpq $1, $3
    jg label23617
    jmp label23618
    
label23621:
    cmpq temp23210, $3
    jg label23619
    jmp label23620
    
label23623:
    movq $2, a22989
    movq a22989, temp23210
    jmp label23621
    
label23622:
    movq $1, a22988
    movq a22988, temp23210
    jmp label23621
    
label23624:
    cmpq $1, $3
    jg label23622
    jmp label23623
    
label23627:
    movq $0, a22987
    cmpq $1, a22987
    je label23624
    jmp label23625
    
label23626:
    movq $1, a22986
    cmpq $1, a22986
    je label23624
    jmp label23625
    
label23629:
    movq $0, a22985
    cmpq $1, a22985
    je label23626
    jmp label23627
    
label23628:
    movq $1, a22984
    cmpq $1, a22984
    je label23626
    jmp label23627
    
label23631:
    movq $0, a22983
    cmpq $1, a22983
    je label23628
    jmp label23629
    
label23630:
    movq $1, a22982
    cmpq $1, a22982
    je label23628
    jmp label23629
    
label23632:
    cmpq temp23204, temp23203
    jg label23630
    jmp label23631
    
label23637:
    movq $2, a22981
    movq a22981, temp23204
    jmp label23632
    
label23633:
    movq a22978, temp23204
    jmp label23632
    
label23635:
    movq $2, a22980
    movq a22980, a22978
    jmp label23633
    
label23634:
    movq $1, a22979
    movq a22979, a22978
    jmp label23633
    
label23636:
    cmpq $1, $3
    jg label23634
    jmp label23635
    
label23638:
    cmpq temp23206, $3
    jg label23636
    jmp label23637
    
label23640:
    movq $2, a22977
    movq a22977, temp23206
    jmp label23638
    
label23639:
    movq $1, a22976
    movq a22976, temp23206
    jmp label23638
    
label23642:
    callq read_int
    movq %rax, temp23203
    cmpq $1, $3
    jg label23639
    jmp label23640
    
label23643:
    cmpq $1, x22956
    je label23641
    jmp label23642
    
label23645:
    movq $0, x22956
    jmp label23643
    
label23644:
    movq $1, x22956
    jmp label23643
    
label23646:
    cmpq $8, temp23186
    jg label23644
    jmp label23645
    
label23648:
    movq $9, temp23186
    jmp label23646
    
label23647:
    movq $8, temp23186
    jmp label23646
    
label23649:
    cmpq temp23193, temp23188
    jge label23647
    jmp label23648
    
label23654:
    movq $2, a22968
    movq a22968, temp23193
    jmp label23649
    
label23650:
    movq a22965, temp23193
    jmp label23649
    
label23652:
    movq $2, a22967
    movq a22967, a22965
    jmp label23650
    
label23651:
    movq $1, a22966
    movq a22966, a22965
    jmp label23650
    
label23653:
    cmpq $1, $3
    jg label23651
    jmp label23652
    
label23655:
    cmpq temp23195, $3
    jg label23653
    jmp label23654
    
label23657:
    movq $2, a22964
    movq a22964, temp23195
    jmp label23655
    
label23656:
    movq $1, a22963
    movq a22963, temp23195
    jmp label23655
    
label23658:
    cmpq $1, $3
    jg label23656
    jmp label23657
    
label23659:
    movq a22959, temp23188
    jmp label23658
    
label23661:
    movq $2, a22961
    movq a22961, a22959
    jmp label23659
    
label23660:
    movq $1, a22960
    movq a22960, a22959
    jmp label23659
    
label23662:
    cmpq $1, $3
    jg label23660
    jmp label23661
    
label23663:
    movq $2, a22962
    movq a22962, temp23188
    jmp label23658
    
label23664:
    cmpq temp23190, $3
    jg label23662
    jmp label23663
    
label23665:
    movq $1, a22957
    movq a22957, temp23190
    jmp label23664
    
label23666:
    movq $2, a22958
    movq a22958, temp23190
    jmp label23664
    
start:
    cmpq $1, $3
    jg label23665
    jmp label23666
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22958 : 'Integer, a22959 : 'Integer, x22956 : 'Boolean, a22957 : 'Integer, a22962 : 'Integer, a22963 : 'Integer, a22960 : 'Integer, a22961 : 'Integer, a22982 : 'Boolean, a22983 : 'Boolean, a22980 : 'Integer, a22981 : 'Integer, a22986 : 'Boolean, a22987 : 'Boolean, a22984 : 'Boolean, a22985 : 'Boolean, a22990 : 'Integer, a22991 : 'Integer, a22988 : 'Integer, a22989 : 'Integer, a22994 : 'Integer, a22995 : 'Integer, a22992 : 'Integer, a22993 : 'Integer, a22966 : 'Integer, a22967 : 'Integer, a22964 : 'Integer, a22965 : 'Integer, a22970 : 'Integer, a22971 : 'Integer, a22968 : 'Integer, a22969 : 'Integer, a22974 : 'Integer, a22975 : 'Integer, a22972 : 'Integer, a22973 : 'Integer, a22978 : 'Integer, a22979 : 'Integer, a22976 : 'Integer, a22977 : 'Integer, temp23337 : 'Integer, temp23338 : 'Integer, temp23335 : 'Integer, temp23344 : 'Integer, temp23340 : 'Integer, temp23322 : 'Integer, temp23319 : 'Integer, temp23331 : 'Integer, temp23324 : 'Integer, temp23325 : 'Integer, temp23327 : 'Integer, temp23272 : 'Integer, temp23269 : 'Integer, temp23270 : 'Integer, temp23280 : 'Integer, temp23282 : 'Integer, temp23283 : 'Integer, temp23276 : 'Integer, temp23256 : 'Integer, temp23258 : 'Integer, temp23253 : 'Integer, temp23255 : 'Integer, temp23266 : 'Integer, temp23267 : 'Integer, temp23262 : 'Integer, temp23306 : 'Integer, temp23302 : 'Integer, temp23315 : 'Integer, temp23308 : 'Integer, temp23309 : 'Integer, temp23311 : 'Integer, temp23289 : 'Integer, temp23285 : 'Integer, temp23296 : 'Integer, temp23298 : 'Integer, temp23293 : 'Integer, temp23295 : 'Integer, temp23206 : 'Integer, temp23204 : 'Integer, temp23210 : 'Integer, temp23214 : 'Integer, temp23219 : 'Integer, temp23217 : 'Integer, temp23216 : 'Integer, temp23190 : 'Integer, temp23188 : 'Integer, temp23195 : 'Integer, temp23193 : 'Integer, temp23199 : 'Integer, temp23203 : 'Integer, temp23236 : 'Integer, temp23243 : 'Integer, temp23242 : 'Integer, temp23240 : 'Integer, temp23245 : 'Integer, temp23249 : 'Integer, temp23223 : 'Integer, temp23227 : 'Integer, temp23230 : 'Integer, temp23229 : 'Integer, temp23232 : 'Integer, a23143 : 'Integer, a23142 : 'Integer, a23141 : 'Integer, a23140 : 'Integer, a23147 : 'Integer, a23146 : 'Integer, a23145 : 'Integer, a23144 : 'Integer, a23151 : 'Integer, a23150 : 'Integer, a23149 : 'Integer, a23148 : 'Integer, a23155 : 'Boolean, a23154 : 'Boolean, a23153 : 'Integer, a23152 : 'Integer, a23127 : 'Integer, a23126 : 'Integer, a23125 : 'Integer, a23124 : 'Integer, a23131 : 'Integer, a23130 : 'Integer, a23129 : 'Integer, a23128 : 'Integer, a23135 : 'Boolean, a23134 : 'Boolean, a23133 : 'Integer, a23132 : 'Integer, a23139 : 'Boolean, a23138 : 'Boolean, a23137 : 'Boolean, a23136 : 'Boolean, a23175 : 'Boolean, a23174 : 'Boolean, a23173 : 'Boolean, a23172 : 'Integer, a23179 : 'Integer, a23178 : 'Boolean, a23177 : 'Boolean, a23176 : 'Boolean, a23183 : 'Integer, a23182 : 'Integer, a23181 : 'Integer, a23180 : 'Integer, temp23186 : 'Integer, a23184 : 'Integer, a23159 : 'Boolean, a23158 : 'Boolean, a23157 : 'Boolean, a23156 : 'Boolean, a23163 : 'Integer, a23162 : 'Integer, a23161 : 'Integer, a23160 : 'Integer, a23167 : 'Integer, a23166 : 'Integer, a23165 : 'Integer, a23164 : 'Integer, a23171 : 'Integer, a23170 : 'Integer, a23169 : 'Integer, a23168 : 'Integer, a23079 : 'Boolean, a23078 : 'Boolean, a23077 : 'Boolean, a23076 : 'Integer, a23083 : 'Integer, a23082 : 'Boolean, a23081 : 'Boolean, a23080 : 'Boolean, a23087 : 'Integer, a23086 : 'Integer, a23085 : 'Integer, a23084 : 'Integer, a23091 : 'Integer, a23090 : 'Integer, a23089 : 'Integer, a23088 : 'Integer, a23063 : 'Boolean, a23062 : 'Boolean, a23061 : 'Boolean, a23060 : 'Boolean, a23067 : 'Integer, a23066 : 'Integer, a23065 : 'Integer, a23064 : 'Integer, a23071 : 'Integer, a23070 : 'Integer, a23069 : 'Integer, a23068 : 'Integer, a23075 : 'Integer, a23074 : 'Integer, a23073 : 'Integer, a23072 : 'Integer, a23111 : 'Integer, a23110 : 'Integer, a23109 : 'Integer, a23108 : 'Integer, a23115 : 'Boolean, a23114 : 'Integer, a23113 : 'Integer, a23112 : 'Integer, a23119 : 'Boolean, a23118 : 'Boolean, a23117 : 'Boolean, a23116 : 'Boolean, a23123 : 'Integer, a23122 : 'Integer, a23121 : 'Integer, a23120 : 'Boolean, a23095 : 'Integer, a23094 : 'Integer, a23093 : 'Integer, a23092 : 'Integer, a23099 : 'Boolean, a23098 : 'Boolean, a23097 : 'Boolean, a23096 : 'Boolean, a23103 : 'Integer, a23102 : 'Integer, a23101 : 'Boolean, a23100 : 'Boolean, a23107 : 'Integer, a23106 : 'Integer, a23105 : 'Integer, a23104 : 'Integer, a23015 : 'Integer, a23014 : 'Integer, a23013 : 'Integer, a23012 : 'Integer, a23019 : 'Integer, a23018 : 'Integer, a23017 : 'Integer, a23016 : 'Integer, a23023 : 'Boolean, a23022 : 'Boolean, a23021 : 'Boolean, a23020 : 'Boolean, a23027 : 'Integer, a23026 : 'Integer, a23025 : 'Boolean, a23024 : 'Boolean, a22999 : 'Integer, a22998 : 'Integer, a22997 : 'Integer, a22996 : 'Integer, a23003 : 'Boolean, a23002 : 'Boolean, a23001 : 'Boolean, a23000 : 'Integer, a23007 : 'Integer, a23006 : 'Boolean, a23005 : 'Boolean, a23004 : 'Boolean, a23011 : 'Integer, a23010 : 'Integer, a23009 : 'Integer, a23008 : 'Integer, a23047 : 'Integer, a23046 : 'Integer, a23045 : 'Integer, a23044 : 'Boolean, a23051 : 'Integer, a23050 : 'Integer, a23049 : 'Integer, a23048 : 'Integer, a23055 : 'Integer, a23054 : 'Integer, a23053 : 'Integer, a23052 : 'Integer, a23059 : 'Boolean, a23058 : 'Boolean, a23057 : 'Integer, a23056 : 'Integer, a23031 : 'Integer, a23030 : 'Integer, a23029 : 'Integer, a23028 : 'Integer, a23035 : 'Integer, a23034 : 'Integer, a23033 : 'Integer, a23032 : 'Integer, a23039 : 'Boolean, a23038 : 'Integer, a23037 : 'Integer, a23036 : 'Integer, a23043 : 'Boolean, a23042 : 'Boolean, a23041 : 'Boolean, a23040 : 'Boolean, 
tsorted
:
'(label23351
  label23355
  label23360
  label23356
  label23357
  label23358
  label23359
  label23361
  label23362
  label23363
  label23365
  label23364
  label23366
  label23367
  label23369
  label23368
  label23370
  label23371
  label23372
  label23377
  label23373
  label23374
  label23375
  label23376
  label23378
  label23379
  label23347
  label23348
  label23349
  label23350
  label23352
  label23353
  label23354
  label23641
  label23380
  label23381
  label23382
  label23383
  label23391
  label23386
  label23384
  label23385
  label23387
  label23388
  label23389
  label23390
  label23392
  label23393
  label23394
  label23395
  label23397
  label23396
  label23398
  label23399
  label23403
  label23401
  label23400
  label23402
  label23404
  label23405
  label23406
  label23407
  label23408
  label23409
  label23410
  label23411
  label23417
  label23412
  label23413
  label23414
  label23415
  label23416
  label23418
  label23419
  label23420
  label23421
  label23422
  label23423
  label23424
  label23429
  label23425
  label23426
  label23427
  label23428
  label23430
  label23432
  label23431
  label23433
  label23434
  label23435
  label23436
  label23437
  label23443
  label23438
  label23439
  label23440
  label23441
  label23442
  label23445
  label23444
  label23446
  label23447
  label23449
  label23448
  label23450
  label23451
  label23452
  label23453
  label23454
  label23455
  label23456
  label23457
  label23458
  label23459
  label23469
  label23460
  label23461
  label23462
  label23463
  label23464
  label23465
  label23466
  label23467
  label23468
  label23470
  label23471
  label23472
  label23473
  label23474
  label23475
  label23476
  label23481
  label23477
  label23478
  label23479
  label23480
  label23482
  label23483
  label23484
  label23485
  label23495
  label23490
  label23486
  label23488
  label23487
  label23489
  label23491
  label23492
  label23493
  label23494
  label23496
  label23497
  label23498
  label23499
  label23500
  label23501
  label23502
  label23507
  label23503
  label23504
  label23505
  label23506
  label23508
  label23509
  label23510
  label23511
  label23512
  label23513
  label23514
  label23515
  label23521
  label23516
  label23517
  label23519
  label23518
  label23520
  label23523
  label23522
  label23525
  label23524
  label23527
  label23526
  label23528
  label23529
  label23531
  label23530
  label23532
  label23533
  label23534
  label23536
  label23535
  label23537
  label23538
  label23539
  label23540
  label23541
  label23547
  label23542
  label23543
  label23545
  label23544
  label23546
  label23549
  label23548
  label23551
  label23550
  label23553
  label23552
  label23554
  label23559
  label23555
  label23557
  label23556
  label23558
  label23560
  label23561
  label23562
  label23563
  label23573
  label23568
  label23564
  label23565
  label23566
  label23567
  label23569
  label23571
  label23570
  label23572
  label23575
  label23574
  label23577
  label23576
  label23579
  label23578
  label23580
  label23585
  label23581
  label23583
  label23582
  label23584
  label23586
  label23588
  label23587
  label23589
  label23594
  label23590
  label23592
  label23591
  label23593
  label23595
  label23597
  label23596
  label23598
  label23599
  label23601
  label23600
  label23603
  label23602
  label23605
  label23604
  label23606
  label23611
  label23607
  label23609
  label23608
  label23610
  label23612
  label23613
  label23614
  label23615
  label23625
  label23620
  label23616
  label23617
  label23618
  label23619
  label23621
  label23623
  label23622
  label23624
  label23627
  label23626
  label23629
  label23628
  label23631
  label23630
  label23632
  label23637
  label23633
  label23635
  label23634
  label23636
  label23638
  label23640
  label23639
  label23642
  label23643
  label23645
  label23644
  label23646
  label23648
  label23647
  label23649
  label23654
  label23650
  label23652
  label23651
  label23653
  label23655
  label23657
  label23656
  label23658
  label23659
  label23661
  label23660
  label23662
  label23663
  label23664
  label23665
  label23666
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23195 a22964)
 (list temp23195 a22963)
 (list temp23193 a22965)
 (list temp23193 a22968)
 (list temp23190 a22957)
 (list temp23190 a22958)
 (list temp23188 a22959)
 (list temp23188 a22962)
 (list temp23199 a22969)
 (list temp23199 a22970)
 (list a23179 temp23344)
 (list a23172 temp23338)
 (list a23184 a23166)
 (list a23183 a23181)
 (list a23182 a23181)
 (list a23181 a23183)
 (list a23181 a23166)
 (list a23181 a23182)
 (list a23180 temp23344)
 (list a22970 temp23199)
 (list temp23227 a23013)
 (list a22971 a22972)
 (list a22971 a22973)
 (list a22968 temp23193)
 (list a22969 temp23199)
 (list a22966 a22965)
 (list temp23223 a23007)
 (list temp23223 a23008)
 (list a22967 a22965)
 (list a22964 temp23195)
 (list a22965 a22966)
 (list a22965 a22967)
 (list a22965 temp23193)
 (list a22978 a22979)
 (list a22978 a22980)
 (list a22978 temp23204)
 (list a22979 a22978)
 (list a22976 temp23206)
 (list a22977 temp23206)
 (list temp23232 a23014)
 (list temp23232 a23015)
 (list a22975 a22990)
 (list a22975 a22993)
 (list temp23230 a23016)
 (list temp23230 a23019)
 (list a22972 a22971)
 (list a22973 a22971)
 (list temp23210 a22988)
 (list temp23210 a22989)
 (list temp23206 a22976)
 (list temp23206 a22977)
 (list temp23204 a22981)
 (list temp23204 a22978)
 (list a22962 temp23188)
 (list temp23219 a22996)
 (list temp23219 a22995)
 (list a22963 temp23195)
 (list a22960 a22959)
 (list temp23217 a22997)
 (list temp23217 a23000)
 (list a22961 a22959)
 (list a22958 temp23190)
 (list a22959 temp23188)
 (list a22959 a22960)
 (list a22959 a22961)
 (list temp23214 a22994)
 (list a22957 temp23190)
 (list a23131 a23130)
 (list a23130 a23131)
 (list a23130 a23132)
 (list a23130 temp23309)
 (list a23129 temp23311)
 (list a23128 temp23311)
 (list a23127 a23142)
 (list a23127 a23145)
 (list a23127 temp23306)
 (list a23126 a23108)
 (list a23125 a23123)
 (list a23124 a23123)
 (list a23133 temp23309)
 (list a23132 a23130)
 (list a23114 temp23296)
 (list a23113 a23111)
 (list a23112 a23111)
 (list a23111 a23112)
 (list a23111 a23113)
 (list a23111 temp23296)
 (list a23110 temp23298)
 (list a23109 temp23298)
 (list a23108 a23126)
 (list a23108 temp23293)
 (list a23108 a23123)
 (list a23123 a23125)
 (list a23123 a23108)
 (list a23123 a23124)
 (list a23122 temp23302)
 (list a23121 temp23302)
 (list a23163 a23162)
 (list a23162 a23164)
 (list a23162 a23147)
 (list a23162 a23163)
 (list a23161 temp23331)
 (list a23160 temp23331)
 (list a23171 a23169)
 (list a23170 a23169)
 (list a23169 temp23338)
 (list a23169 a23170)
 (list a23169 a23171)
 (list a23168 temp23340)
 (list a23167 temp23340)
 (list a23166 temp23335)
 (list a23166 a23181)
 (list a23166 a23184)
 (list a23165 a23147)
 (list a23164 a23162)
 (list a23147 a23165)
 (list a23147 temp23322)
 (list a23147 a23162)
 (list a23146 temp23319)
 (list a23145 a23127)
 (list a23144 a23142)
 (list a23143 a23142)
 (list a23142 a23144)
 (list a23142 a23127)
 (list a23142 a23143)
 (list a23141 temp23315)
 (list a23140 temp23315)
 (list a23153 temp23325)
 (list a23152 a23150)
 (list a23151 a23150)
 (list a23150 temp23325)
 (list a23150 a23151)
 (list a23150 a23152)
 (list a23149 temp23327)
 (list a23148 temp23327)
 (list a23067 a23066)
 (list temp23325 a23150)
 (list temp23325 a23153)
 (list a23066 a23068)
 (list a23066 a23051)
 (list a23066 a23067)
 (list a23065 temp23262)
 (list temp23327 a23148)
 (list temp23327 a23149)
 (list a23064 temp23262)
 (list temp23331 a23160)
 (list temp23331 a23161)
 (list a23075 a23073)
 (list a23074 a23073)
 (list a23073 temp23270)
 (list a23073 a23074)
 (list a23073 a23075)
 (list temp23319 a23146)
 (list a23072 temp23272)
 (list a23071 temp23272)
 (list a23070 a23085)
 (list a23070 a23088)
 (list a23070 temp23267)
 (list temp23322 a23147)
 (list a23069 a23051)
 (list a23068 a23066)
 (list a23051 a23066)
 (list a23051 a23069)
 (list a23050 a23032)
 (list temp23309 a23130)
 (list temp23309 a23133)
 (list a23049 a23047)
 (list a23048 a23047)
 (list temp23311 a23128)
 (list temp23311 a23129)
 (list a23047 a23049)
 (list a23047 a23032)
 (list a23047 a23048)
 (list a23046 temp23249)
 (list a23045 temp23249)
 (list temp23315 a23140)
 (list temp23315 a23141)
 (list a23057 temp23256)
 (list temp23302 a23121)
 (list temp23302 a23122)
 (list a23056 a23054)
 (list a23055 a23054)
 (list a23054 temp23256)
 (list a23054 a23055)
 (list a23054 a23056)
 (list a23053 temp23258)
 (list temp23306 a23127)
 (list a23052 temp23258)
 (list a23095 temp23283)
 (list a23094 a23092)
 (list a23093 a23092)
 (list a23092 a23093)
 (list a23092 a23094)
 (list a23092 temp23283)
 (list a23107 a23089)
 (list a23106 a23104)
 (list a23105 a23104)
 (list a23104 a23106)
 (list a23104 a23089)
 (list a23104 a23105)
 (list a23103 temp23289)
 (list a23102 temp23289)
 (list temp23340 a23167)
 (list temp23340 a23168)
 (list a23083 temp23276)
 (list temp23344 a23179)
 (list temp23344 a23180)
 (list a23076 temp23270)
 (list a23091 temp23285)
 (list a23090 temp23285)
 (list a23089 a23107)
 (list a23089 temp23280)
 (list a23089 a23104)
 (list temp23335 a23166)
 (list a23088 a23070)
 (list a23087 a23085)
 (list a23086 a23085)
 (list temp23338 a23172)
 (list temp23338 a23169)
 (list a23085 a23087)
 (list a23085 a23070)
 (list a23085 a23086)
 (list a23084 temp23276)
 (list temp23262 a23064)
 (list temp23262 a23065)
 (list a23000 temp23217)
 (list a22999 a22997)
 (list a22998 a22997)
 (list a22997 a22998)
 (list a22997 a22999)
 (list a22997 temp23217)
 (list temp23266 temp23253)
 (list a22996 temp23219)
 (list temp23267 a23070)
 (list a23011 a23009)
 (list a23010 a23009)
 (list temp23253 temp23266)
 (list a23009 a23011)
 (list a23009 a22994)
 (list a23009 a23010)
 (list a23008 temp23223)
 (list a23007 temp23223)
 (list temp23256 a23054)
 (list temp23256 a23057)
 (list temp23258 a23052)
 (list temp23258 a23053)
 (list temp23245 a23033)
 (list temp23245 a23034)
 (list temp23249 a23045)
 (list temp23249 a23046)
 (list a22981 temp23204)
 (list a22980 a22978)
 (list a22995 temp23219)
 (list temp23236 a23026)
 (list temp23236 a23027)
 (list a22994 a23012)
 (list a22994 temp23214)
 (list a22994 a23009)
 (list a22993 a22975)
 (list a22992 a22990)
 (list a22991 a22990)
 (list temp23240 a23032)
 (list a22990 a22992)
 (list a22990 a22991)
 (list a22990 a22975)
 (list a22989 temp23210)
 (list a22988 temp23210)
 (list temp23243 a23035)
 (list temp23243 a23038)
 (list a23035 temp23243)
 (list a23035 a23036)
 (list a23035 a23037)
 (list a23034 temp23245)
 (list temp23293 a23108)
 (list a23033 temp23245)
 (list a23032 a23047)
 (list a23032 temp23240)
 (list a23032 a23050)
 (list a23031 a23013)
 (list temp23296 a23111)
 (list temp23296 a23114)
 (list a23030 a23028)
 (list a23029 a23028)
 (list temp23298 a23109)
 (list temp23298 a23110)
 (list a23028 a23030)
 (list a23028 a23013)
 (list a23028 a23029)
 (list temp23285 a23090)
 (list temp23285 a23091)
 (list a23038 temp23243)
 (list temp23289 a23102)
 (list temp23289 a23103)
 (list a23037 a23035)
 (list a23036 a23035)
 (list a23019 temp23230)
 (list temp23276 a23083)
 (list temp23276 a23084)
 (list a23018 a23016)
 (list a23017 a23016)
 (list a23016 a23017)
 (list a23016 a23018)
 (list a23016 temp23230)
 (list a23015 temp23232)
 (list temp23280 a23089)
 (list a23014 temp23232)
 (list a23013 a23028)
 (list a23013 a23031)
 (list a23013 temp23227)
 (list a23012 a22994)
 (list temp23283 a23092)
 (list temp23283 a23095)
 (list a23027 temp23236)
 (list a23026 temp23236)
 (list temp23270 a23076)
 (list temp23270 a23073)
 (list temp23272 a23071)
 (list temp23272 a23072))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdx 1)
 (cons %r11 -4)
 (cons a23032 7)
 (cons a23013 8)
 (cons a23108 9)
 (cons a23070 10)
 (cons a23089 11)
 (cons a23127 12)
 (cons a23146 13)
 (cons a23147 14)
 (cons temp23266 15)
 (cons a22975 16)
 (cons a22994 17)
 (cons a23168 0)
 (cons temp23337 1)
 (cons a23169 0)
 (cons a23170 0)
 (cons temp23340 0)
 (cons a23171 0)
 (cons a23167 0)
 (cons temp23338 0)
 (cons a23172 0)
 (cons a23166 0)
 (cons a23184 0)
 (cons a23181 0)
 (cons a23180 0)
 (cons a23178 0)
 (cons a23174 0)
 (cons a23175 0)
 (cons a23173 0)
 (cons temp23344 0)
 (cons a23179 0)
 (cons a23182 0)
 (cons a23183 0)
 (cons a23176 0)
 (cons a23177 0)
 (cons temp23335 0)
 (cons temp23322 1)
 (cons temp23319 0)
 (cons a23152 0)
 (cons temp23324 1)
 (cons a23153 0)
 (cons a23148 0)
 (cons temp23325 0)
 (cons a23149 0)
 (cons a23150 0)
 (cons a23151 0)
 (cons temp23327 0)
 (cons temp23331 0)
 (cons a23154 0)
 (cons a23155 0)
 (cons a23164 0)
 (cons a23165 0)
 (cons a23158 0)
 (cons a23159 0)
 (cons a23162 0)
 (cons a23156 0)
 (cons a23163 0)
 (cons a23157 0)
 (cons a23160 0)
 (cons a23161 0)
 (cons temp23306 1)
 (cons temp23293 0)
 (cons a23144 0)
 (cons a23140 0)
 (cons a23141 0)
 (cons a23128 0)
 (cons temp23308 1)
 (cons a23132 0)
 (cons a23130 0)
 (cons a23131 0)
 (cons a23133 0)
 (cons temp23309 0)
 (cons a23129 0)
 (cons temp23311 0)
 (cons a23142 0)
 (cons a23145 0)
 (cons temp23315 0)
 (cons a23143 0)
 (cons a23136 0)
 (cons a23138 0)
 (cons a23137 0)
 (cons a23139 0)
 (cons a23134 0)
 (cons a23135 0)
 (cons temp23280 1)
 (cons a23126 0)
 (cons a23125 0)
 (cons temp23302 0)
 (cons a23124 0)
 (cons a23122 0)
 (cons a23123 0)
 (cons a23117 0)
 (cons a23116 0)
 (cons a23121 0)
 (cons a23120 0)
 (cons a23119 0)
 (cons a23112 0)
 (cons temp23295 1)
 (cons a23113 0)
 (cons a23109 0)
 (cons a23110 0)
 (cons a23111 0)
 (cons temp23298 0)
 (cons a23114 0)
 (cons temp23296 0)
 (cons a23115 0)
 (cons a23118 0)
 (cons a23105 0)
 (cons a23101 0)
 (cons a23102 0)
 (cons a23100 0)
 (cons a23107 0)
 (cons temp23283 0)
 (cons temp23282 1)
 (cons a23092 0)
 (cons a23094 0)
 (cons a23090 0)
 (cons a23093 0)
 (cons a23095 0)
 (cons a23091 0)
 (cons temp23285 0)
 (cons a23103 0)
 (cons a23096 0)
 (cons a23098 0)
 (cons a23097 0)
 (cons a23104 0)
 (cons temp23289 0)
 (cons a23099 0)
 (cons temp23267 0)
 (cons a23106 0)
 (cons temp23253 1)
 (cons temp23269 0)
 (cons a23072 1)
 (cons a23073 1)
 (cons a23074 1)
 (cons a23075 1)
 (cons temp23272 1)
 (cons a23071 1)
 (cons a23076 1)
 (cons temp23270 1)
 (cons a23087 0)
 (cons temp23276 0)
 (cons a23088 0)
 (cons a23084 0)
 (cons a23081 0)
 (cons a23085 0)
 (cons a23080 0)
 (cons a23086 0)
 (cons a23079 0)
 (cons a23078 0)
 (cons a23077 0)
 (cons a23083 0)
 (cons a23082 0)
 (cons temp23256 0)
 (cons temp23255 1)
 (cons a23056 0)
 (cons a23057 0)
 (cons a23054 0)
 (cons a23052 0)
 (cons a23053 0)
 (cons a23055 0)
 (cons temp23258 0)
 (cons a23067 0)
 (cons a23051 0)
 (cons a23061 0)
 (cons a23069 0)
 (cons temp23240 0)
 (cons a23068 0)
 (cons a23060 0)
 (cons a23063 0)
 (cons a23066 0)
 (cons a23062 0)
 (cons a23065 0)
 (cons a23058 0)
 (cons a23059 0)
 (cons a23064 0)
 (cons temp23262 0)
 (cons temp23227 1)
 (cons temp23214 0)
 (cons a23043 0)
 (cons temp23245 0)
 (cons temp23242 1)
 (cons a23036 0)
 (cons a23037 0)
 (cons a23038 0)
 (cons a23033 0)
 (cons temp23243 0)
 (cons a23034 0)
 (cons a23035 0)
 (cons a23048 0)
 (cons a23042 0)
 (cons a23039 0)
 (cons a23046 0)
 (cons a23049 0)
 (cons a23047 0)
 (cons a23041 0)
 (cons a23050 0)
 (cons temp23249 0)
 (cons a23044 0)
 (cons a23045 0)
 (cons a23040 0)
 (cons a23023 0)
 (cons a23026 0)
 (cons a23027 0)
 (cons a23022 0)
 (cons a23016 0)
 (cons temp23229 1)
 (cons a23017 0)
 (cons a23018 0)
 (cons a23014 0)
 (cons temp23232 0)
 (cons temp23230 0)
 (cons a23019 0)
 (cons a23015 0)
 (cons a23025 0)
 (cons a23028 0)
 (cons a23020 0)
 (cons temp23236 0)
 (cons a23021 0)
 (cons a23024 0)
 (cons a23030 0)
 (cons a23031 0)
 (cons a23029 0)
 (cons a22998 0)
 (cons temp23216 1)
 (cons a23000 0)
 (cons a22996 0)
 (cons a22999 0)
 (cons a22995 0)
 (cons a22997 0)
 (cons temp23219 0)
 (cons temp23217 0)
 (cons a23010 0)
 (cons a23006 0)
 (cons a23012 0)
 (cons a23001 0)
 (cons temp23223 0)
 (cons a23007 0)
 (cons a23003 0)
 (cons a23002 0)
 (cons a23005 0)
 (cons a23004 0)
 (cons a23011 0)
 (cons a23008 0)
 (cons a23009 0)
 (cons a22980 0)
 (cons temp23203 1)
 (cons temp23204 0)
 (cons a22977 0)
 (cons a22978 0)
 (cons a22981 0)
 (cons temp23206 0)
 (cons a22976 0)
 (cons a22979 0)
 (cons temp23190 0)
 (cons a22982 0)
 (cons a22959 0)
 (cons a22970 0)
 (cons temp23210 0)
 (cons a22972 0)
 (cons a22992 0)
 (cons a22983 0)
 (cons temp23188 0)
 (cons temp23193 1)
 (cons temp23195 1)
 (cons a22968 1)
 (cons a22965 1)
 (cons a22964 1)
 (cons a22963 1)
 (cons a22967 1)
 (cons a22966 1)
 (cons a22961 0)
 (cons a22985 0)
 (cons a22988 0)
 (cons a22974 0)
 (cons a22957 0)
 (cons temp23199 0)
 (cons temp23186 0)
 (cons a22971 0)
 (cons a22991 0)
 (cons a22989 0)
 (cons a22962 0)
 (cons a22987 0)
 (cons a22986 0)
 (cons a22990 0)
 (cons a22973 0)
 (cons a22958 0)
 (cons a22969 0)
 (cons x22956 0)
 (cons a22960 0)
 (cons a22993 0)
 (cons a22984 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label23351:
    movq $2, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label23355:
    movq %rcx, %rcx
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r12, %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label23360:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23355
    
label23356:
    movq %rcx, %rcx
    jmp label23355
    
label23357:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23356
    
label23358:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23356
    
label23359:
    cmpq $1, $3
    jg label23357
    jmp label23358
    
label23361:
    cmpq %rcx, $3
    jg label23359
    jmp label23360
    
label23362:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23361
    
label23363:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23361
    
label23365:
    movq $2, %rcx
    jmp label23355
    
label23364:
    cmpq $1, $3
    jg label23362
    jmp label23363
    
label23366:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23364
    jmp label23365
    
label23367:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23364
    jmp label23365
    
label23369:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23366
    jmp label23367
    
label23368:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23366
    jmp label23367
    
label23370:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23368
    jmp label23369
    
label23371:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23368
    jmp label23369
    
label23372:
    cmpq %rcx, %rdx
    jg label23370
    jmp label23371
    
label23377:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23372
    
label23373:
    movq %rcx, %rcx
    jmp label23372
    
label23374:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23373
    
label23375:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23373
    
label23376:
    cmpq $1, $3
    jg label23374
    jmp label23375
    
label23378:
    cmpq %rcx, $3
    jg label23376
    jmp label23377
    
label23379:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23378
    
label23347:
    movq %rcx, %rax
    jmp conclusion
    
label23348:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23347
    
label23349:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23347
    
label23350:
    cmpq $1, $3
    jg label23348
    jmp label23349
    
label23352:
    cmpq %rcx, $3
    jg label23350
    jmp label23351
    
label23353:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23352
    
label23354:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23352
    
label23641:
    cmpq $1, $3
    jg label23353
    jmp label23354
    
label23380:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23378
    
label23381:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23379
    jmp label23380
    
label23382:
    movq %rcx, -72(%rbp)
    jmp label23381
    
label23383:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23382
    
label23391:
    movq $2, -72(%rbp)
    jmp label23381
    
label23386:
    movq $2, %rcx
    movq %rcx, -72(%rbp)
    jmp label23381
    
label23384:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23382
    
label23385:
    cmpq $1, $3
    jg label23383
    jmp label23384
    
label23387:
    cmpq %rcx, $3
    jg label23385
    jmp label23386
    
label23388:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23387
    
label23389:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23387
    
label23390:
    cmpq $1, $3
    jg label23388
    jmp label23389
    
label23392:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23390
    jmp label23391
    
label23393:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23390
    jmp label23391
    
label23394:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23392
    jmp label23393
    
label23395:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23392
    jmp label23393
    
label23397:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23394
    jmp label23395
    
label23396:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23394
    jmp label23395
    
label23398:
    cmpq %rcx, %rdx
    jg label23396
    jmp label23397
    
label23399:
    movq %rcx, %rcx
    jmp label23398
    
label23403:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23398
    
label23401:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23399
    
label23400:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23399
    
label23402:
    cmpq $1, $3
    jg label23400
    jmp label23401
    
label23404:
    cmpq %rcx, $3
    jg label23402
    jmp label23403
    
label23405:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23404
    
label23406:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23404
    
label23407:
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23405
    jmp label23406
    
label23408:
    movq %rcx, -56(%rbp)
    jmp label23407
    
label23409:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23408
    
label23410:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23408
    
label23411:
    cmpq $1, $3
    jg label23409
    jmp label23410
    
label23417:
    movq $2, -56(%rbp)
    jmp label23407
    
label23412:
    movq $2, %rcx
    movq %rcx, -56(%rbp)
    jmp label23407
    
label23413:
    cmpq %rcx, $3
    jg label23411
    jmp label23412
    
label23414:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23413
    
label23415:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23413
    
label23416:
    cmpq $1, $3
    jg label23414
    jmp label23415
    
label23418:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23416
    jmp label23417
    
label23419:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23416
    jmp label23417
    
label23420:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23418
    jmp label23419
    
label23421:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23418
    jmp label23419
    
label23422:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23420
    jmp label23421
    
label23423:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23420
    jmp label23421
    
label23424:
    cmpq %rcx, %rdx
    jg label23422
    jmp label23423
    
label23429:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23424
    
label23425:
    movq %rcx, %rcx
    jmp label23424
    
label23426:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23425
    
label23427:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23425
    
label23428:
    cmpq $1, $3
    jg label23426
    jmp label23427
    
label23430:
    cmpq %rcx, $3
    jg label23428
    jmp label23429
    
label23432:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23430
    
label23431:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23430
    
label23433:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23431
    jmp label23432
    
label23434:
    movq %rcx, %r13
    jmp label23433
    
label23435:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23434
    
label23436:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23434
    
label23437:
    cmpq $1, $3
    jg label23435
    jmp label23436
    
label23443:
    movq $2, %r13
    jmp label23433
    
label23438:
    movq $2, %rcx
    movq %rcx, %r13
    jmp label23433
    
label23439:
    cmpq %rcx, $3
    jg label23437
    jmp label23438
    
label23440:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23439
    
label23441:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23439
    
label23442:
    cmpq $1, $3
    jg label23440
    jmp label23441
    
label23445:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23442
    jmp label23443
    
label23444:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23442
    jmp label23443
    
label23446:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23444
    jmp label23445
    
label23447:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23444
    jmp label23445
    
label23449:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23446
    jmp label23447
    
label23448:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23446
    jmp label23447
    
label23450:
    cmpq %rcx, %rdx
    jg label23448
    jmp label23449
    
label23451:
    movq %rcx, %rcx
    jmp label23450
    
label23452:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23451
    
label23453:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23451
    
label23454:
    cmpq $1, $3
    jg label23452
    jmp label23453
    
label23455:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23450
    
label23456:
    cmpq %rcx, $3
    jg label23454
    jmp label23455
    
label23457:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23456
    
label23458:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23456
    
label23459:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23457
    jmp label23458
    
label23469:
    movq $2, -48(%rbp)
    jmp label23459
    
label23460:
    movq %rcx, -48(%rbp)
    jmp label23459
    
label23461:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23460
    
label23462:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23460
    
label23463:
    cmpq $1, $3
    jg label23461
    jmp label23462
    
label23464:
    movq $2, %rcx
    movq %rcx, -48(%rbp)
    jmp label23459
    
label23465:
    cmpq %rcx, $3
    jg label23463
    jmp label23464
    
label23466:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23465
    
label23467:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23465
    
label23468:
    cmpq $1, $3
    jg label23466
    jmp label23467
    
label23470:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23468
    jmp label23469
    
label23471:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23468
    jmp label23469
    
label23472:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23470
    jmp label23471
    
label23473:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23470
    jmp label23471
    
label23474:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23472
    jmp label23473
    
label23475:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23472
    jmp label23473
    
label23476:
    cmpq %rcx, %rdx
    jg label23474
    jmp label23475
    
label23481:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23476
    
label23477:
    movq %rcx, %rcx
    jmp label23476
    
label23478:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23477
    
label23479:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23477
    
label23480:
    cmpq $1, $3
    jg label23478
    jmp label23479
    
label23482:
    cmpq %rcx, $3
    jg label23480
    jmp label23481
    
label23483:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23482
    
label23484:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23482
    
label23485:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23483
    jmp label23484
    
label23495:
    movq $2, %r14
    jmp label23485
    
label23490:
    movq $2, %rcx
    movq %rcx, %r14
    jmp label23485
    
label23486:
    movq %rcx, %r14
    jmp label23485
    
label23488:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23486
    
label23487:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23486
    
label23489:
    cmpq $1, $3
    jg label23487
    jmp label23488
    
label23491:
    cmpq %rcx, $3
    jg label23489
    jmp label23490
    
label23492:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23491
    
label23493:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23491
    
label23494:
    cmpq $1, $3
    jg label23492
    jmp label23493
    
label23496:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23494
    jmp label23495
    
label23497:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23494
    jmp label23495
    
label23498:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23496
    jmp label23497
    
label23499:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23496
    jmp label23497
    
label23500:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23498
    jmp label23499
    
label23501:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23498
    jmp label23499
    
label23502:
    cmpq %rdx, %rcx
    jg label23500
    jmp label23501
    
label23507:
    movq $2, %rdx
    movq %rdx, %rdx
    jmp label23502
    
label23503:
    movq %rdx, %rdx
    jmp label23502
    
label23504:
    movq $1, %rdx
    movq %rdx, %rdx
    jmp label23503
    
label23505:
    movq $2, %rdx
    movq %rdx, %rdx
    jmp label23503
    
label23506:
    cmpq $1, $3
    jg label23504
    jmp label23505
    
label23508:
    cmpq %rdx, $3
    jg label23506
    jmp label23507
    
label23509:
    movq $1, %rdx
    movq %rdx, %rdx
    jmp label23508
    
label23510:
    movq $2, %rdx
    movq %rdx, %rdx
    jmp label23508
    
label23511:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    cmpq $1, $3
    jg label23509
    jmp label23510
    
label23512:
    movq %rcx, %rcx
    jmp label23511
    
label23513:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23512
    
label23514:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23512
    
label23515:
    cmpq $1, $3
    jg label23513
    jmp label23514
    
label23521:
    movq $2, %rcx
    jmp label23511
    
label23516:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23511
    
label23517:
    cmpq %rcx, $3
    jg label23515
    jmp label23516
    
label23519:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23517
    
label23518:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23517
    
label23520:
    cmpq $1, $3
    jg label23518
    jmp label23519
    
label23523:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23520
    jmp label23521
    
label23522:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23520
    jmp label23521
    
label23525:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23522
    jmp label23523
    
label23524:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23522
    jmp label23523
    
label23527:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23524
    jmp label23525
    
label23526:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23524
    jmp label23525
    
label23528:
    cmpq %rcx, %rdx
    jg label23526
    jmp label23527
    
label23529:
    movq %rcx, %rcx
    jmp label23528
    
label23531:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23529
    
label23530:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23529
    
label23532:
    cmpq $1, $3
    jg label23530
    jmp label23531
    
label23533:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23528
    
label23534:
    cmpq %rcx, $3
    jg label23532
    jmp label23533
    
label23536:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23534
    
label23535:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23534
    
label23537:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23535
    jmp label23536
    
label23538:
    movq %rcx, %rbx
    jmp label23537
    
label23539:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23538
    
label23540:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23538
    
label23541:
    cmpq $1, $3
    jg label23539
    jmp label23540
    
label23547:
    movq $2, %rbx
    jmp label23537
    
label23542:
    movq $2, %rcx
    movq %rcx, %rbx
    jmp label23537
    
label23543:
    cmpq %rcx, $3
    jg label23541
    jmp label23542
    
label23545:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23543
    
label23544:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23543
    
label23546:
    cmpq $1, $3
    jg label23544
    jmp label23545
    
label23549:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23546
    jmp label23547
    
label23548:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23546
    jmp label23547
    
label23551:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23548
    jmp label23549
    
label23550:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23548
    jmp label23549
    
label23553:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23550
    jmp label23551
    
label23552:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23550
    jmp label23551
    
label23554:
    cmpq %rcx, %rdx
    jg label23552
    jmp label23553
    
label23559:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23554
    
label23555:
    movq %rcx, %rcx
    jmp label23554
    
label23557:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23555
    
label23556:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23555
    
label23558:
    cmpq $1, $3
    jg label23556
    jmp label23557
    
label23560:
    cmpq %rcx, $3
    jg label23558
    jmp label23559
    
label23561:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23560
    
label23562:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23560
    
label23563:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23561
    jmp label23562
    
label23573:
    movq $2, %r12
    jmp label23563
    
label23568:
    movq $2, %rcx
    movq %rcx, %r12
    jmp label23563
    
label23564:
    movq %rcx, %r12
    jmp label23563
    
label23565:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23564
    
label23566:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23564
    
label23567:
    cmpq $1, $3
    jg label23565
    jmp label23566
    
label23569:
    cmpq %rcx, $3
    jg label23567
    jmp label23568
    
label23571:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23569
    
label23570:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23569
    
label23572:
    cmpq $1, $3
    jg label23570
    jmp label23571
    
label23575:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23572
    jmp label23573
    
label23574:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23572
    jmp label23573
    
label23577:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23574
    jmp label23575
    
label23576:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23574
    jmp label23575
    
label23579:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23576
    jmp label23577
    
label23578:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23576
    jmp label23577
    
label23580:
    cmpq %rcx, %rdx
    jg label23578
    jmp label23579
    
label23585:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23580
    
label23581:
    movq %rcx, %rcx
    jmp label23580
    
label23583:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23581
    
label23582:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23581
    
label23584:
    cmpq $1, $3
    jg label23582
    jmp label23583
    
label23586:
    cmpq %rcx, $3
    jg label23584
    jmp label23585
    
label23588:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23586
    
label23587:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23586
    
label23589:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23587
    jmp label23588
    
label23594:
    movq $2, %rcx
    movq %rcx, -96(%rbp)
    jmp label23589
    
label23590:
    movq %rcx, -96(%rbp)
    jmp label23589
    
label23592:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23590
    
label23591:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23590
    
label23593:
    cmpq $1, $3
    jg label23591
    jmp label23592
    
label23595:
    cmpq %rcx, $3
    jg label23593
    jmp label23594
    
label23597:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23595
    
label23596:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23595
    
label23598:
    cmpq $1, $3
    jg label23596
    jmp label23597
    
label23599:
    movq $2, -96(%rbp)
    jmp label23589
    
label23601:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23598
    jmp label23599
    
label23600:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23598
    jmp label23599
    
label23603:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23600
    jmp label23601
    
label23602:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23600
    jmp label23601
    
label23605:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23602
    jmp label23603
    
label23604:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23602
    jmp label23603
    
label23606:
    cmpq %rcx, %rdx
    jg label23604
    jmp label23605
    
label23611:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23606
    
label23607:
    movq %rcx, %rcx
    jmp label23606
    
label23609:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23607
    
label23608:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23607
    
label23610:
    cmpq $1, $3
    jg label23608
    jmp label23609
    
label23612:
    cmpq %rcx, $3
    jg label23610
    jmp label23611
    
label23613:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23612
    
label23614:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23612
    
label23615:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23613
    jmp label23614
    
label23625:
    movq $2, -88(%rbp)
    jmp label23615
    
label23620:
    movq $2, %rcx
    movq %rcx, -88(%rbp)
    jmp label23615
    
label23616:
    movq %rcx, -88(%rbp)
    jmp label23615
    
label23617:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23616
    
label23618:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23616
    
label23619:
    cmpq $1, $3
    jg label23617
    jmp label23618
    
label23621:
    cmpq %rcx, $3
    jg label23619
    jmp label23620
    
label23623:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23621
    
label23622:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23621
    
label23624:
    cmpq $1, $3
    jg label23622
    jmp label23623
    
label23627:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23624
    jmp label23625
    
label23626:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23624
    jmp label23625
    
label23629:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23626
    jmp label23627
    
label23628:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23626
    jmp label23627
    
label23631:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23628
    jmp label23629
    
label23630:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23628
    jmp label23629
    
label23632:
    cmpq %rcx, %rdx
    jg label23630
    jmp label23631
    
label23637:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23632
    
label23633:
    movq %rcx, %rcx
    jmp label23632
    
label23635:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23633
    
label23634:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23633
    
label23636:
    cmpq $1, $3
    jg label23634
    jmp label23635
    
label23638:
    cmpq %rcx, $3
    jg label23636
    jmp label23637
    
label23640:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23638
    
label23639:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23638
    
label23642:
    callq read_int
    movq %rax, %rdx
    cmpq $1, $3
    jg label23639
    jmp label23640
    
label23643:
    cmpq $1, %rcx
    je label23641
    jmp label23642
    
label23645:
    movq $0, %rcx
    jmp label23643
    
label23644:
    movq $1, %rcx
    jmp label23643
    
label23646:
    cmpq $8, %rcx
    jg label23644
    jmp label23645
    
label23648:
    movq $9, %rcx
    jmp label23646
    
label23647:
    movq $8, %rcx
    jmp label23646
    
label23649:
    cmpq %rdx, %rcx
    jge label23647
    jmp label23648
    
label23654:
    movq $2, %rdx
    movq %rdx, %rdx
    jmp label23649
    
label23650:
    movq %rdx, %rdx
    jmp label23649
    
label23652:
    movq $2, %rdx
    movq %rdx, %rdx
    jmp label23650
    
label23651:
    movq $1, %rdx
    movq %rdx, %rdx
    jmp label23650
    
label23653:
    cmpq $1, $3
    jg label23651
    jmp label23652
    
label23655:
    cmpq %rdx, $3
    jg label23653
    jmp label23654
    
label23657:
    movq $2, %rdx
    movq %rdx, %rdx
    jmp label23655
    
label23656:
    movq $1, %rdx
    movq %rdx, %rdx
    jmp label23655
    
label23658:
    cmpq $1, $3
    jg label23656
    jmp label23657
    
label23659:
    movq %rcx, %rcx
    jmp label23658
    
label23661:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23659
    
label23660:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23659
    
label23662:
    cmpq $1, $3
    jg label23660
    jmp label23661
    
label23663:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23658
    
label23664:
    cmpq %rcx, $3
    jg label23662
    jmp label23663
    
label23665:
    movq $1, %rcx
    movq %rcx, %rcx
    jmp label23664
    
label23666:
    movq $2, %rcx
    movq %rcx, %rcx
    jmp label23664
    
start:
    cmpq $1, $3
    jg label23665
    jmp label23666
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22958 : 'Integer, a22959 : 'Integer, x22956 : 'Boolean, a22957 : 'Integer, a22962 : 'Integer, a22963 : 'Integer, a22960 : 'Integer, a22961 : 'Integer, a22982 : 'Boolean, a22983 : 'Boolean, a22980 : 'Integer, a22981 : 'Integer, a22986 : 'Boolean, a22987 : 'Boolean, a22984 : 'Boolean, a22985 : 'Boolean, a22990 : 'Integer, a22991 : 'Integer, a22988 : 'Integer, a22989 : 'Integer, a22994 : 'Integer, a22995 : 'Integer, a22992 : 'Integer, a22993 : 'Integer, a22966 : 'Integer, a22967 : 'Integer, a22964 : 'Integer, a22965 : 'Integer, a22970 : 'Integer, a22971 : 'Integer, a22968 : 'Integer, a22969 : 'Integer, a22974 : 'Integer, a22975 : 'Integer, a22972 : 'Integer, a22973 : 'Integer, a22978 : 'Integer, a22979 : 'Integer, a22976 : 'Integer, a22977 : 'Integer, temp23337 : 'Integer, temp23338 : 'Integer, temp23335 : 'Integer, temp23344 : 'Integer, temp23340 : 'Integer, temp23322 : 'Integer, temp23319 : 'Integer, temp23331 : 'Integer, temp23324 : 'Integer, temp23325 : 'Integer, temp23327 : 'Integer, temp23272 : 'Integer, temp23269 : 'Integer, temp23270 : 'Integer, temp23280 : 'Integer, temp23282 : 'Integer, temp23283 : 'Integer, temp23276 : 'Integer, temp23256 : 'Integer, temp23258 : 'Integer, temp23253 : 'Integer, temp23255 : 'Integer, temp23266 : 'Integer, temp23267 : 'Integer, temp23262 : 'Integer, temp23306 : 'Integer, temp23302 : 'Integer, temp23315 : 'Integer, temp23308 : 'Integer, temp23309 : 'Integer, temp23311 : 'Integer, temp23289 : 'Integer, temp23285 : 'Integer, temp23296 : 'Integer, temp23298 : 'Integer, temp23293 : 'Integer, temp23295 : 'Integer, temp23206 : 'Integer, temp23204 : 'Integer, temp23210 : 'Integer, temp23214 : 'Integer, temp23219 : 'Integer, temp23217 : 'Integer, temp23216 : 'Integer, temp23190 : 'Integer, temp23188 : 'Integer, temp23195 : 'Integer, temp23193 : 'Integer, temp23199 : 'Integer, temp23203 : 'Integer, temp23236 : 'Integer, temp23243 : 'Integer, temp23242 : 'Integer, temp23240 : 'Integer, temp23245 : 'Integer, temp23249 : 'Integer, temp23223 : 'Integer, temp23227 : 'Integer, temp23230 : 'Integer, temp23229 : 'Integer, temp23232 : 'Integer, a23143 : 'Integer, a23142 : 'Integer, a23141 : 'Integer, a23140 : 'Integer, a23147 : 'Integer, a23146 : 'Integer, a23145 : 'Integer, a23144 : 'Integer, a23151 : 'Integer, a23150 : 'Integer, a23149 : 'Integer, a23148 : 'Integer, a23155 : 'Boolean, a23154 : 'Boolean, a23153 : 'Integer, a23152 : 'Integer, a23127 : 'Integer, a23126 : 'Integer, a23125 : 'Integer, a23124 : 'Integer, a23131 : 'Integer, a23130 : 'Integer, a23129 : 'Integer, a23128 : 'Integer, a23135 : 'Boolean, a23134 : 'Boolean, a23133 : 'Integer, a23132 : 'Integer, a23139 : 'Boolean, a23138 : 'Boolean, a23137 : 'Boolean, a23136 : 'Boolean, a23175 : 'Boolean, a23174 : 'Boolean, a23173 : 'Boolean, a23172 : 'Integer, a23179 : 'Integer, a23178 : 'Boolean, a23177 : 'Boolean, a23176 : 'Boolean, a23183 : 'Integer, a23182 : 'Integer, a23181 : 'Integer, a23180 : 'Integer, temp23186 : 'Integer, a23184 : 'Integer, a23159 : 'Boolean, a23158 : 'Boolean, a23157 : 'Boolean, a23156 : 'Boolean, a23163 : 'Integer, a23162 : 'Integer, a23161 : 'Integer, a23160 : 'Integer, a23167 : 'Integer, a23166 : 'Integer, a23165 : 'Integer, a23164 : 'Integer, a23171 : 'Integer, a23170 : 'Integer, a23169 : 'Integer, a23168 : 'Integer, a23079 : 'Boolean, a23078 : 'Boolean, a23077 : 'Boolean, a23076 : 'Integer, a23083 : 'Integer, a23082 : 'Boolean, a23081 : 'Boolean, a23080 : 'Boolean, a23087 : 'Integer, a23086 : 'Integer, a23085 : 'Integer, a23084 : 'Integer, a23091 : 'Integer, a23090 : 'Integer, a23089 : 'Integer, a23088 : 'Integer, a23063 : 'Boolean, a23062 : 'Boolean, a23061 : 'Boolean, a23060 : 'Boolean, a23067 : 'Integer, a23066 : 'Integer, a23065 : 'Integer, a23064 : 'Integer, a23071 : 'Integer, a23070 : 'Integer, a23069 : 'Integer, a23068 : 'Integer, a23075 : 'Integer, a23074 : 'Integer, a23073 : 'Integer, a23072 : 'Integer, a23111 : 'Integer, a23110 : 'Integer, a23109 : 'Integer, a23108 : 'Integer, a23115 : 'Boolean, a23114 : 'Integer, a23113 : 'Integer, a23112 : 'Integer, a23119 : 'Boolean, a23118 : 'Boolean, a23117 : 'Boolean, a23116 : 'Boolean, a23123 : 'Integer, a23122 : 'Integer, a23121 : 'Integer, a23120 : 'Boolean, a23095 : 'Integer, a23094 : 'Integer, a23093 : 'Integer, a23092 : 'Integer, a23099 : 'Boolean, a23098 : 'Boolean, a23097 : 'Boolean, a23096 : 'Boolean, a23103 : 'Integer, a23102 : 'Integer, a23101 : 'Boolean, a23100 : 'Boolean, a23107 : 'Integer, a23106 : 'Integer, a23105 : 'Integer, a23104 : 'Integer, a23015 : 'Integer, a23014 : 'Integer, a23013 : 'Integer, a23012 : 'Integer, a23019 : 'Integer, a23018 : 'Integer, a23017 : 'Integer, a23016 : 'Integer, a23023 : 'Boolean, a23022 : 'Boolean, a23021 : 'Boolean, a23020 : 'Boolean, a23027 : 'Integer, a23026 : 'Integer, a23025 : 'Boolean, a23024 : 'Boolean, a22999 : 'Integer, a22998 : 'Integer, a22997 : 'Integer, a22996 : 'Integer, a23003 : 'Boolean, a23002 : 'Boolean, a23001 : 'Boolean, a23000 : 'Integer, a23007 : 'Integer, a23006 : 'Boolean, a23005 : 'Boolean, a23004 : 'Boolean, a23011 : 'Integer, a23010 : 'Integer, a23009 : 'Integer, a23008 : 'Integer, a23047 : 'Integer, a23046 : 'Integer, a23045 : 'Integer, a23044 : 'Boolean, a23051 : 'Integer, a23050 : 'Integer, a23049 : 'Integer, a23048 : 'Integer, a23055 : 'Integer, a23054 : 'Integer, a23053 : 'Integer, a23052 : 'Integer, a23059 : 'Boolean, a23058 : 'Boolean, a23057 : 'Integer, a23056 : 'Integer, a23031 : 'Integer, a23030 : 'Integer, a23029 : 'Integer, a23028 : 'Integer, a23035 : 'Integer, a23034 : 'Integer, a23033 : 'Integer, a23032 : 'Integer, a23039 : 'Boolean, a23038 : 'Integer, a23037 : 'Integer, a23036 : 'Integer, a23043 : 'Boolean, a23042 : 'Boolean, a23041 : 'Boolean, a23040 : 'Boolean, 
tsorted
:
'(label23351
  label23355
  label23360
  label23356
  label23357
  label23358
  label23359
  label23361
  label23362
  label23363
  label23365
  label23364
  label23366
  label23367
  label23369
  label23368
  label23370
  label23371
  label23372
  label23377
  label23373
  label23374
  label23375
  label23376
  label23378
  label23379
  label23347
  label23348
  label23349
  label23350
  label23352
  label23353
  label23354
  label23641
  label23380
  label23381
  label23382
  label23383
  label23391
  label23386
  label23384
  label23385
  label23387
  label23388
  label23389
  label23390
  label23392
  label23393
  label23394
  label23395
  label23397
  label23396
  label23398
  label23399
  label23403
  label23401
  label23400
  label23402
  label23404
  label23405
  label23406
  label23407
  label23408
  label23409
  label23410
  label23411
  label23417
  label23412
  label23413
  label23414
  label23415
  label23416
  label23418
  label23419
  label23420
  label23421
  label23422
  label23423
  label23424
  label23429
  label23425
  label23426
  label23427
  label23428
  label23430
  label23432
  label23431
  label23433
  label23434
  label23435
  label23436
  label23437
  label23443
  label23438
  label23439
  label23440
  label23441
  label23442
  label23445
  label23444
  label23446
  label23447
  label23449
  label23448
  label23450
  label23451
  label23452
  label23453
  label23454
  label23455
  label23456
  label23457
  label23458
  label23459
  label23469
  label23460
  label23461
  label23462
  label23463
  label23464
  label23465
  label23466
  label23467
  label23468
  label23470
  label23471
  label23472
  label23473
  label23474
  label23475
  label23476
  label23481
  label23477
  label23478
  label23479
  label23480
  label23482
  label23483
  label23484
  label23485
  label23495
  label23490
  label23486
  label23488
  label23487
  label23489
  label23491
  label23492
  label23493
  label23494
  label23496
  label23497
  label23498
  label23499
  label23500
  label23501
  label23502
  label23507
  label23503
  label23504
  label23505
  label23506
  label23508
  label23509
  label23510
  label23511
  label23512
  label23513
  label23514
  label23515
  label23521
  label23516
  label23517
  label23519
  label23518
  label23520
  label23523
  label23522
  label23525
  label23524
  label23527
  label23526
  label23528
  label23529
  label23531
  label23530
  label23532
  label23533
  label23534
  label23536
  label23535
  label23537
  label23538
  label23539
  label23540
  label23541
  label23547
  label23542
  label23543
  label23545
  label23544
  label23546
  label23549
  label23548
  label23551
  label23550
  label23553
  label23552
  label23554
  label23559
  label23555
  label23557
  label23556
  label23558
  label23560
  label23561
  label23562
  label23563
  label23573
  label23568
  label23564
  label23565
  label23566
  label23567
  label23569
  label23571
  label23570
  label23572
  label23575
  label23574
  label23577
  label23576
  label23579
  label23578
  label23580
  label23585
  label23581
  label23583
  label23582
  label23584
  label23586
  label23588
  label23587
  label23589
  label23594
  label23590
  label23592
  label23591
  label23593
  label23595
  label23597
  label23596
  label23598
  label23599
  label23601
  label23600
  label23603
  label23602
  label23605
  label23604
  label23606
  label23611
  label23607
  label23609
  label23608
  label23610
  label23612
  label23613
  label23614
  label23615
  label23625
  label23620
  label23616
  label23617
  label23618
  label23619
  label23621
  label23623
  label23622
  label23624
  label23627
  label23626
  label23629
  label23628
  label23631
  label23630
  label23632
  label23637
  label23633
  label23635
  label23634
  label23636
  label23638
  label23640
  label23639
  label23642
  label23643
  label23645
  label23644
  label23646
  label23648
  label23647
  label23649
  label23654
  label23650
  label23652
  label23651
  label23653
  label23655
  label23657
  label23656
  label23658
  label23659
  label23661
  label23660
  label23662
  label23663
  label23664
  label23665
  label23666
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23195 a22964)
 (list temp23195 a22963)
 (list temp23193 a22965)
 (list temp23193 a22968)
 (list temp23190 a22957)
 (list temp23190 a22958)
 (list temp23188 a22959)
 (list temp23188 a22962)
 (list temp23199 a22969)
 (list temp23199 a22970)
 (list a23179 temp23344)
 (list a23172 temp23338)
 (list a23184 a23166)
 (list a23183 a23181)
 (list a23182 a23181)
 (list a23181 a23183)
 (list a23181 a23166)
 (list a23181 a23182)
 (list a23180 temp23344)
 (list a22970 temp23199)
 (list temp23227 a23013)
 (list a22971 a22972)
 (list a22971 a22973)
 (list a22968 temp23193)
 (list a22969 temp23199)
 (list a22966 a22965)
 (list temp23223 a23007)
 (list temp23223 a23008)
 (list a22967 a22965)
 (list a22964 temp23195)
 (list a22965 a22966)
 (list a22965 a22967)
 (list a22965 temp23193)
 (list a22978 a22979)
 (list a22978 a22980)
 (list a22978 temp23204)
 (list a22979 a22978)
 (list a22976 temp23206)
 (list a22977 temp23206)
 (list temp23232 a23014)
 (list temp23232 a23015)
 (list a22975 a22990)
 (list a22975 a22993)
 (list temp23230 a23016)
 (list temp23230 a23019)
 (list a22972 a22971)
 (list a22973 a22971)
 (list temp23210 a22988)
 (list temp23210 a22989)
 (list temp23206 a22976)
 (list temp23206 a22977)
 (list temp23204 a22981)
 (list temp23204 a22978)
 (list a22962 temp23188)
 (list temp23219 a22996)
 (list temp23219 a22995)
 (list a22963 temp23195)
 (list a22960 a22959)
 (list temp23217 a22997)
 (list temp23217 a23000)
 (list a22961 a22959)
 (list a22958 temp23190)
 (list a22959 temp23188)
 (list a22959 a22960)
 (list a22959 a22961)
 (list temp23214 a22994)
 (list a22957 temp23190)
 (list a23131 a23130)
 (list a23130 a23131)
 (list a23130 a23132)
 (list a23130 temp23309)
 (list a23129 temp23311)
 (list a23128 temp23311)
 (list a23127 a23142)
 (list a23127 a23145)
 (list a23127 temp23306)
 (list a23126 a23108)
 (list a23125 a23123)
 (list a23124 a23123)
 (list a23133 temp23309)
 (list a23132 a23130)
 (list a23114 temp23296)
 (list a23113 a23111)
 (list a23112 a23111)
 (list a23111 a23112)
 (list a23111 a23113)
 (list a23111 temp23296)
 (list a23110 temp23298)
 (list a23109 temp23298)
 (list a23108 a23126)
 (list a23108 temp23293)
 (list a23108 a23123)
 (list a23123 a23125)
 (list a23123 a23108)
 (list a23123 a23124)
 (list a23122 temp23302)
 (list a23121 temp23302)
 (list a23163 a23162)
 (list a23162 a23164)
 (list a23162 a23147)
 (list a23162 a23163)
 (list a23161 temp23331)
 (list a23160 temp23331)
 (list a23171 a23169)
 (list a23170 a23169)
 (list a23169 temp23338)
 (list a23169 a23170)
 (list a23169 a23171)
 (list a23168 temp23340)
 (list a23167 temp23340)
 (list a23166 temp23335)
 (list a23166 a23181)
 (list a23166 a23184)
 (list a23165 a23147)
 (list a23164 a23162)
 (list a23147 a23165)
 (list a23147 temp23322)
 (list a23147 a23162)
 (list a23146 temp23319)
 (list a23145 a23127)
 (list a23144 a23142)
 (list a23143 a23142)
 (list a23142 a23144)
 (list a23142 a23127)
 (list a23142 a23143)
 (list a23141 temp23315)
 (list a23140 temp23315)
 (list a23153 temp23325)
 (list a23152 a23150)
 (list a23151 a23150)
 (list a23150 temp23325)
 (list a23150 a23151)
 (list a23150 a23152)
 (list a23149 temp23327)
 (list a23148 temp23327)
 (list a23067 a23066)
 (list temp23325 a23150)
 (list temp23325 a23153)
 (list a23066 a23068)
 (list a23066 a23051)
 (list a23066 a23067)
 (list a23065 temp23262)
 (list temp23327 a23148)
 (list temp23327 a23149)
 (list a23064 temp23262)
 (list temp23331 a23160)
 (list temp23331 a23161)
 (list a23075 a23073)
 (list a23074 a23073)
 (list a23073 temp23270)
 (list a23073 a23074)
 (list a23073 a23075)
 (list temp23319 a23146)
 (list a23072 temp23272)
 (list a23071 temp23272)
 (list a23070 a23085)
 (list a23070 a23088)
 (list a23070 temp23267)
 (list temp23322 a23147)
 (list a23069 a23051)
 (list a23068 a23066)
 (list a23051 a23066)
 (list a23051 a23069)
 (list a23050 a23032)
 (list temp23309 a23130)
 (list temp23309 a23133)
 (list a23049 a23047)
 (list a23048 a23047)
 (list temp23311 a23128)
 (list temp23311 a23129)
 (list a23047 a23049)
 (list a23047 a23032)
 (list a23047 a23048)
 (list a23046 temp23249)
 (list a23045 temp23249)
 (list temp23315 a23140)
 (list temp23315 a23141)
 (list a23057 temp23256)
 (list temp23302 a23121)
 (list temp23302 a23122)
 (list a23056 a23054)
 (list a23055 a23054)
 (list a23054 temp23256)
 (list a23054 a23055)
 (list a23054 a23056)
 (list a23053 temp23258)
 (list temp23306 a23127)
 (list a23052 temp23258)
 (list a23095 temp23283)
 (list a23094 a23092)
 (list a23093 a23092)
 (list a23092 a23093)
 (list a23092 a23094)
 (list a23092 temp23283)
 (list a23107 a23089)
 (list a23106 a23104)
 (list a23105 a23104)
 (list a23104 a23106)
 (list a23104 a23089)
 (list a23104 a23105)
 (list a23103 temp23289)
 (list a23102 temp23289)
 (list temp23340 a23167)
 (list temp23340 a23168)
 (list a23083 temp23276)
 (list temp23344 a23179)
 (list temp23344 a23180)
 (list a23076 temp23270)
 (list a23091 temp23285)
 (list a23090 temp23285)
 (list a23089 a23107)
 (list a23089 temp23280)
 (list a23089 a23104)
 (list temp23335 a23166)
 (list a23088 a23070)
 (list a23087 a23085)
 (list a23086 a23085)
 (list temp23338 a23172)
 (list temp23338 a23169)
 (list a23085 a23087)
 (list a23085 a23070)
 (list a23085 a23086)
 (list a23084 temp23276)
 (list temp23262 a23064)
 (list temp23262 a23065)
 (list a23000 temp23217)
 (list a22999 a22997)
 (list a22998 a22997)
 (list a22997 a22998)
 (list a22997 a22999)
 (list a22997 temp23217)
 (list temp23266 temp23253)
 (list a22996 temp23219)
 (list temp23267 a23070)
 (list a23011 a23009)
 (list a23010 a23009)
 (list temp23253 temp23266)
 (list a23009 a23011)
 (list a23009 a22994)
 (list a23009 a23010)
 (list a23008 temp23223)
 (list a23007 temp23223)
 (list temp23256 a23054)
 (list temp23256 a23057)
 (list temp23258 a23052)
 (list temp23258 a23053)
 (list temp23245 a23033)
 (list temp23245 a23034)
 (list temp23249 a23045)
 (list temp23249 a23046)
 (list a22981 temp23204)
 (list a22980 a22978)
 (list a22995 temp23219)
 (list temp23236 a23026)
 (list temp23236 a23027)
 (list a22994 a23012)
 (list a22994 temp23214)
 (list a22994 a23009)
 (list a22993 a22975)
 (list a22992 a22990)
 (list a22991 a22990)
 (list temp23240 a23032)
 (list a22990 a22992)
 (list a22990 a22991)
 (list a22990 a22975)
 (list a22989 temp23210)
 (list a22988 temp23210)
 (list temp23243 a23035)
 (list temp23243 a23038)
 (list a23035 temp23243)
 (list a23035 a23036)
 (list a23035 a23037)
 (list a23034 temp23245)
 (list temp23293 a23108)
 (list a23033 temp23245)
 (list a23032 a23047)
 (list a23032 temp23240)
 (list a23032 a23050)
 (list a23031 a23013)
 (list temp23296 a23111)
 (list temp23296 a23114)
 (list a23030 a23028)
 (list a23029 a23028)
 (list temp23298 a23109)
 (list temp23298 a23110)
 (list a23028 a23030)
 (list a23028 a23013)
 (list a23028 a23029)
 (list temp23285 a23090)
 (list temp23285 a23091)
 (list a23038 temp23243)
 (list temp23289 a23102)
 (list temp23289 a23103)
 (list a23037 a23035)
 (list a23036 a23035)
 (list a23019 temp23230)
 (list temp23276 a23083)
 (list temp23276 a23084)
 (list a23018 a23016)
 (list a23017 a23016)
 (list a23016 a23017)
 (list a23016 a23018)
 (list a23016 temp23230)
 (list a23015 temp23232)
 (list temp23280 a23089)
 (list a23014 temp23232)
 (list a23013 a23028)
 (list a23013 a23031)
 (list a23013 temp23227)
 (list a23012 a22994)
 (list temp23283 a23092)
 (list temp23283 a23095)
 (list a23027 temp23236)
 (list a23026 temp23236)
 (list temp23270 a23076)
 (list temp23270 a23073)
 (list temp23272 a23071)
 (list temp23272 a23072))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdx 1)
 (cons %r11 -4)
 (cons a23032 7)
 (cons a23013 8)
 (cons a23108 9)
 (cons a23070 10)
 (cons a23089 11)
 (cons a23127 12)
 (cons a23146 13)
 (cons a23147 14)
 (cons temp23266 15)
 (cons a22975 16)
 (cons a22994 17)
 (cons a23168 0)
 (cons temp23337 1)
 (cons a23169 0)
 (cons a23170 0)
 (cons temp23340 0)
 (cons a23171 0)
 (cons a23167 0)
 (cons temp23338 0)
 (cons a23172 0)
 (cons a23166 0)
 (cons a23184 0)
 (cons a23181 0)
 (cons a23180 0)
 (cons a23178 0)
 (cons a23174 0)
 (cons a23175 0)
 (cons a23173 0)
 (cons temp23344 0)
 (cons a23179 0)
 (cons a23182 0)
 (cons a23183 0)
 (cons a23176 0)
 (cons a23177 0)
 (cons temp23335 0)
 (cons temp23322 1)
 (cons temp23319 0)
 (cons a23152 0)
 (cons temp23324 1)
 (cons a23153 0)
 (cons a23148 0)
 (cons temp23325 0)
 (cons a23149 0)
 (cons a23150 0)
 (cons a23151 0)
 (cons temp23327 0)
 (cons temp23331 0)
 (cons a23154 0)
 (cons a23155 0)
 (cons a23164 0)
 (cons a23165 0)
 (cons a23158 0)
 (cons a23159 0)
 (cons a23162 0)
 (cons a23156 0)
 (cons a23163 0)
 (cons a23157 0)
 (cons a23160 0)
 (cons a23161 0)
 (cons temp23306 1)
 (cons temp23293 0)
 (cons a23144 0)
 (cons a23140 0)
 (cons a23141 0)
 (cons a23128 0)
 (cons temp23308 1)
 (cons a23132 0)
 (cons a23130 0)
 (cons a23131 0)
 (cons a23133 0)
 (cons temp23309 0)
 (cons a23129 0)
 (cons temp23311 0)
 (cons a23142 0)
 (cons a23145 0)
 (cons temp23315 0)
 (cons a23143 0)
 (cons a23136 0)
 (cons a23138 0)
 (cons a23137 0)
 (cons a23139 0)
 (cons a23134 0)
 (cons a23135 0)
 (cons temp23280 1)
 (cons a23126 0)
 (cons a23125 0)
 (cons temp23302 0)
 (cons a23124 0)
 (cons a23122 0)
 (cons a23123 0)
 (cons a23117 0)
 (cons a23116 0)
 (cons a23121 0)
 (cons a23120 0)
 (cons a23119 0)
 (cons a23112 0)
 (cons temp23295 1)
 (cons a23113 0)
 (cons a23109 0)
 (cons a23110 0)
 (cons a23111 0)
 (cons temp23298 0)
 (cons a23114 0)
 (cons temp23296 0)
 (cons a23115 0)
 (cons a23118 0)
 (cons a23105 0)
 (cons a23101 0)
 (cons a23102 0)
 (cons a23100 0)
 (cons a23107 0)
 (cons temp23283 0)
 (cons temp23282 1)
 (cons a23092 0)
 (cons a23094 0)
 (cons a23090 0)
 (cons a23093 0)
 (cons a23095 0)
 (cons a23091 0)
 (cons temp23285 0)
 (cons a23103 0)
 (cons a23096 0)
 (cons a23098 0)
 (cons a23097 0)
 (cons a23104 0)
 (cons temp23289 0)
 (cons a23099 0)
 (cons temp23267 0)
 (cons a23106 0)
 (cons temp23253 1)
 (cons temp23269 0)
 (cons a23072 1)
 (cons a23073 1)
 (cons a23074 1)
 (cons a23075 1)
 (cons temp23272 1)
 (cons a23071 1)
 (cons a23076 1)
 (cons temp23270 1)
 (cons a23087 0)
 (cons temp23276 0)
 (cons a23088 0)
 (cons a23084 0)
 (cons a23081 0)
 (cons a23085 0)
 (cons a23080 0)
 (cons a23086 0)
 (cons a23079 0)
 (cons a23078 0)
 (cons a23077 0)
 (cons a23083 0)
 (cons a23082 0)
 (cons temp23256 0)
 (cons temp23255 1)
 (cons a23056 0)
 (cons a23057 0)
 (cons a23054 0)
 (cons a23052 0)
 (cons a23053 0)
 (cons a23055 0)
 (cons temp23258 0)
 (cons a23067 0)
 (cons a23051 0)
 (cons a23061 0)
 (cons a23069 0)
 (cons temp23240 0)
 (cons a23068 0)
 (cons a23060 0)
 (cons a23063 0)
 (cons a23066 0)
 (cons a23062 0)
 (cons a23065 0)
 (cons a23058 0)
 (cons a23059 0)
 (cons a23064 0)
 (cons temp23262 0)
 (cons temp23227 1)
 (cons temp23214 0)
 (cons a23043 0)
 (cons temp23245 0)
 (cons temp23242 1)
 (cons a23036 0)
 (cons a23037 0)
 (cons a23038 0)
 (cons a23033 0)
 (cons temp23243 0)
 (cons a23034 0)
 (cons a23035 0)
 (cons a23048 0)
 (cons a23042 0)
 (cons a23039 0)
 (cons a23046 0)
 (cons a23049 0)
 (cons a23047 0)
 (cons a23041 0)
 (cons a23050 0)
 (cons temp23249 0)
 (cons a23044 0)
 (cons a23045 0)
 (cons a23040 0)
 (cons a23023 0)
 (cons a23026 0)
 (cons a23027 0)
 (cons a23022 0)
 (cons a23016 0)
 (cons temp23229 1)
 (cons a23017 0)
 (cons a23018 0)
 (cons a23014 0)
 (cons temp23232 0)
 (cons temp23230 0)
 (cons a23019 0)
 (cons a23015 0)
 (cons a23025 0)
 (cons a23028 0)
 (cons a23020 0)
 (cons temp23236 0)
 (cons a23021 0)
 (cons a23024 0)
 (cons a23030 0)
 (cons a23031 0)
 (cons a23029 0)
 (cons a22998 0)
 (cons temp23216 1)
 (cons a23000 0)
 (cons a22996 0)
 (cons a22999 0)
 (cons a22995 0)
 (cons a22997 0)
 (cons temp23219 0)
 (cons temp23217 0)
 (cons a23010 0)
 (cons a23006 0)
 (cons a23012 0)
 (cons a23001 0)
 (cons temp23223 0)
 (cons a23007 0)
 (cons a23003 0)
 (cons a23002 0)
 (cons a23005 0)
 (cons a23004 0)
 (cons a23011 0)
 (cons a23008 0)
 (cons a23009 0)
 (cons a22980 0)
 (cons temp23203 1)
 (cons temp23204 0)
 (cons a22977 0)
 (cons a22978 0)
 (cons a22981 0)
 (cons temp23206 0)
 (cons a22976 0)
 (cons a22979 0)
 (cons temp23190 0)
 (cons a22982 0)
 (cons a22959 0)
 (cons a22970 0)
 (cons temp23210 0)
 (cons a22972 0)
 (cons a22992 0)
 (cons a22983 0)
 (cons temp23188 0)
 (cons temp23193 1)
 (cons temp23195 1)
 (cons a22968 1)
 (cons a22965 1)
 (cons a22964 1)
 (cons a22963 1)
 (cons a22967 1)
 (cons a22966 1)
 (cons a22961 0)
 (cons a22985 0)
 (cons a22988 0)
 (cons a22974 0)
 (cons a22957 0)
 (cons temp23199 0)
 (cons temp23186 0)
 (cons a22971 0)
 (cons a22991 0)
 (cons a22989 0)
 (cons a22962 0)
 (cons a22987 0)
 (cons a22986 0)
 (cons a22990 0)
 (cons a22973 0)
 (cons a22958 0)
 (cons a22969 0)
 (cons x22956 0)
 (cons a22960 0)
 (cons a22993 0)
 (cons a22984 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label23351:
    movq $2, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label23355:
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r12, %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label23360:
    movq $2, %rcx
    jmp label23355
    
label23356:
    jmp label23355
    
label23357:
    movq $1, %rcx
    jmp label23356
    
label23358:
    movq $2, %rcx
    jmp label23356
    
label23359:
    movq $3, %rax
    cmpq $1, %rax
    jg label23357
    jmp label23358
    
label23361:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23359
    jmp label23360
    
label23362:
    movq $1, %rcx
    jmp label23361
    
label23363:
    movq $2, %rcx
    jmp label23361
    
label23365:
    movq $2, %rcx
    jmp label23355
    
label23364:
    movq $3, %rax
    cmpq $1, %rax
    jg label23362
    jmp label23363
    
label23366:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23364
    jmp label23365
    
label23367:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23364
    jmp label23365
    
label23369:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23366
    jmp label23367
    
label23368:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23366
    jmp label23367
    
label23370:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23368
    jmp label23369
    
label23371:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23368
    jmp label23369
    
label23372:
    cmpq %rcx, %rdx
    jg label23370
    jmp label23371
    
label23377:
    movq $2, %rcx
    jmp label23372
    
label23373:
    jmp label23372
    
label23374:
    movq $1, %rcx
    jmp label23373
    
label23375:
    movq $2, %rcx
    jmp label23373
    
label23376:
    movq $3, %rax
    cmpq $1, %rax
    jg label23374
    jmp label23375
    
label23378:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23376
    jmp label23377
    
label23379:
    movq $1, %rcx
    jmp label23378
    
label23347:
    movq %rcx, %rax
    jmp conclusion
    
label23348:
    movq $1, %rcx
    jmp label23347
    
label23349:
    movq $2, %rcx
    jmp label23347
    
label23350:
    movq $3, %rax
    cmpq $1, %rax
    jg label23348
    jmp label23349
    
label23352:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23350
    jmp label23351
    
label23353:
    movq $1, %rcx
    jmp label23352
    
label23354:
    movq $2, %rcx
    jmp label23352
    
label23641:
    movq $3, %rax
    cmpq $1, %rax
    jg label23353
    jmp label23354
    
label23380:
    movq $2, %rcx
    jmp label23378
    
label23381:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23379
    jmp label23380
    
label23382:
    movq %rcx, -72(%rbp)
    jmp label23381
    
label23383:
    movq $1, %rcx
    jmp label23382
    
label23391:
    movq $2, -72(%rbp)
    jmp label23381
    
label23386:
    movq $2, %rcx
    movq %rcx, -72(%rbp)
    jmp label23381
    
label23384:
    movq $2, %rcx
    jmp label23382
    
label23385:
    movq $3, %rax
    cmpq $1, %rax
    jg label23383
    jmp label23384
    
label23387:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23385
    jmp label23386
    
label23388:
    movq $1, %rcx
    jmp label23387
    
label23389:
    movq $2, %rcx
    jmp label23387
    
label23390:
    movq $3, %rax
    cmpq $1, %rax
    jg label23388
    jmp label23389
    
label23392:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23390
    jmp label23391
    
label23393:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23390
    jmp label23391
    
label23394:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23392
    jmp label23393
    
label23395:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23392
    jmp label23393
    
label23397:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23394
    jmp label23395
    
label23396:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23394
    jmp label23395
    
label23398:
    cmpq %rcx, %rdx
    jg label23396
    jmp label23397
    
label23399:
    jmp label23398
    
label23403:
    movq $2, %rcx
    jmp label23398
    
label23401:
    movq $2, %rcx
    jmp label23399
    
label23400:
    movq $1, %rcx
    jmp label23399
    
label23402:
    movq $3, %rax
    cmpq $1, %rax
    jg label23400
    jmp label23401
    
label23404:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23402
    jmp label23403
    
label23405:
    movq $1, %rcx
    jmp label23404
    
label23406:
    movq $2, %rcx
    jmp label23404
    
label23407:
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23405
    jmp label23406
    
label23408:
    movq %rcx, -56(%rbp)
    jmp label23407
    
label23409:
    movq $1, %rcx
    jmp label23408
    
label23410:
    movq $2, %rcx
    jmp label23408
    
label23411:
    movq $3, %rax
    cmpq $1, %rax
    jg label23409
    jmp label23410
    
label23417:
    movq $2, -56(%rbp)
    jmp label23407
    
label23412:
    movq $2, %rcx
    movq %rcx, -56(%rbp)
    jmp label23407
    
label23413:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23411
    jmp label23412
    
label23414:
    movq $1, %rcx
    jmp label23413
    
label23415:
    movq $2, %rcx
    jmp label23413
    
label23416:
    movq $3, %rax
    cmpq $1, %rax
    jg label23414
    jmp label23415
    
label23418:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23416
    jmp label23417
    
label23419:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23416
    jmp label23417
    
label23420:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23418
    jmp label23419
    
label23421:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23418
    jmp label23419
    
label23422:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23420
    jmp label23421
    
label23423:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23420
    jmp label23421
    
label23424:
    cmpq %rcx, %rdx
    jg label23422
    jmp label23423
    
label23429:
    movq $2, %rcx
    jmp label23424
    
label23425:
    jmp label23424
    
label23426:
    movq $1, %rcx
    jmp label23425
    
label23427:
    movq $2, %rcx
    jmp label23425
    
label23428:
    movq $3, %rax
    cmpq $1, %rax
    jg label23426
    jmp label23427
    
label23430:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23428
    jmp label23429
    
label23432:
    movq $2, %rcx
    jmp label23430
    
label23431:
    movq $1, %rcx
    jmp label23430
    
label23433:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23431
    jmp label23432
    
label23434:
    movq %rcx, %r13
    jmp label23433
    
label23435:
    movq $1, %rcx
    jmp label23434
    
label23436:
    movq $2, %rcx
    jmp label23434
    
label23437:
    movq $3, %rax
    cmpq $1, %rax
    jg label23435
    jmp label23436
    
label23443:
    movq $2, %r13
    jmp label23433
    
label23438:
    movq $2, %rcx
    movq %rcx, %r13
    jmp label23433
    
label23439:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23437
    jmp label23438
    
label23440:
    movq $1, %rcx
    jmp label23439
    
label23441:
    movq $2, %rcx
    jmp label23439
    
label23442:
    movq $3, %rax
    cmpq $1, %rax
    jg label23440
    jmp label23441
    
label23445:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23442
    jmp label23443
    
label23444:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23442
    jmp label23443
    
label23446:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23444
    jmp label23445
    
label23447:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23444
    jmp label23445
    
label23449:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23446
    jmp label23447
    
label23448:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23446
    jmp label23447
    
label23450:
    cmpq %rcx, %rdx
    jg label23448
    jmp label23449
    
label23451:
    jmp label23450
    
label23452:
    movq $1, %rcx
    jmp label23451
    
label23453:
    movq $2, %rcx
    jmp label23451
    
label23454:
    movq $3, %rax
    cmpq $1, %rax
    jg label23452
    jmp label23453
    
label23455:
    movq $2, %rcx
    jmp label23450
    
label23456:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23454
    jmp label23455
    
label23457:
    movq $1, %rcx
    jmp label23456
    
label23458:
    movq $2, %rcx
    jmp label23456
    
label23459:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23457
    jmp label23458
    
label23469:
    movq $2, -48(%rbp)
    jmp label23459
    
label23460:
    movq %rcx, -48(%rbp)
    jmp label23459
    
label23461:
    movq $1, %rcx
    jmp label23460
    
label23462:
    movq $2, %rcx
    jmp label23460
    
label23463:
    movq $3, %rax
    cmpq $1, %rax
    jg label23461
    jmp label23462
    
label23464:
    movq $2, %rcx
    movq %rcx, -48(%rbp)
    jmp label23459
    
label23465:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23463
    jmp label23464
    
label23466:
    movq $1, %rcx
    jmp label23465
    
label23467:
    movq $2, %rcx
    jmp label23465
    
label23468:
    movq $3, %rax
    cmpq $1, %rax
    jg label23466
    jmp label23467
    
label23470:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23468
    jmp label23469
    
label23471:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23468
    jmp label23469
    
label23472:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23470
    jmp label23471
    
label23473:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23470
    jmp label23471
    
label23474:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23472
    jmp label23473
    
label23475:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23472
    jmp label23473
    
label23476:
    cmpq %rcx, %rdx
    jg label23474
    jmp label23475
    
label23481:
    movq $2, %rcx
    jmp label23476
    
label23477:
    jmp label23476
    
label23478:
    movq $1, %rcx
    jmp label23477
    
label23479:
    movq $2, %rcx
    jmp label23477
    
label23480:
    movq $3, %rax
    cmpq $1, %rax
    jg label23478
    jmp label23479
    
label23482:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23480
    jmp label23481
    
label23483:
    movq $1, %rcx
    jmp label23482
    
label23484:
    movq $2, %rcx
    jmp label23482
    
label23485:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23483
    jmp label23484
    
label23495:
    movq $2, %r14
    jmp label23485
    
label23490:
    movq $2, %rcx
    movq %rcx, %r14
    jmp label23485
    
label23486:
    movq %rcx, %r14
    jmp label23485
    
label23488:
    movq $2, %rcx
    jmp label23486
    
label23487:
    movq $1, %rcx
    jmp label23486
    
label23489:
    movq $3, %rax
    cmpq $1, %rax
    jg label23487
    jmp label23488
    
label23491:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23489
    jmp label23490
    
label23492:
    movq $1, %rcx
    jmp label23491
    
label23493:
    movq $2, %rcx
    jmp label23491
    
label23494:
    movq $3, %rax
    cmpq $1, %rax
    jg label23492
    jmp label23493
    
label23496:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23494
    jmp label23495
    
label23497:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23494
    jmp label23495
    
label23498:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23496
    jmp label23497
    
label23499:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23496
    jmp label23497
    
label23500:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23498
    jmp label23499
    
label23501:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23498
    jmp label23499
    
label23502:
    cmpq %rdx, %rcx
    jg label23500
    jmp label23501
    
label23507:
    movq $2, %rdx
    jmp label23502
    
label23503:
    jmp label23502
    
label23504:
    movq $1, %rdx
    jmp label23503
    
label23505:
    movq $2, %rdx
    jmp label23503
    
label23506:
    movq $3, %rax
    cmpq $1, %rax
    jg label23504
    jmp label23505
    
label23508:
    movq $3, %rax
    cmpq %rdx, %rax
    jg label23506
    jmp label23507
    
label23509:
    movq $1, %rdx
    jmp label23508
    
label23510:
    movq $2, %rdx
    jmp label23508
    
label23511:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    movq $3, %rax
    cmpq $1, %rax
    jg label23509
    jmp label23510
    
label23512:
    jmp label23511
    
label23513:
    movq $1, %rcx
    jmp label23512
    
label23514:
    movq $2, %rcx
    jmp label23512
    
label23515:
    movq $3, %rax
    cmpq $1, %rax
    jg label23513
    jmp label23514
    
label23521:
    movq $2, %rcx
    jmp label23511
    
label23516:
    movq $2, %rcx
    jmp label23511
    
label23517:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23515
    jmp label23516
    
label23519:
    movq $2, %rcx
    jmp label23517
    
label23518:
    movq $1, %rcx
    jmp label23517
    
label23520:
    movq $3, %rax
    cmpq $1, %rax
    jg label23518
    jmp label23519
    
label23523:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23520
    jmp label23521
    
label23522:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23520
    jmp label23521
    
label23525:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23522
    jmp label23523
    
label23524:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23522
    jmp label23523
    
label23527:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23524
    jmp label23525
    
label23526:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23524
    jmp label23525
    
label23528:
    cmpq %rcx, %rdx
    jg label23526
    jmp label23527
    
label23529:
    jmp label23528
    
label23531:
    movq $2, %rcx
    jmp label23529
    
label23530:
    movq $1, %rcx
    jmp label23529
    
label23532:
    movq $3, %rax
    cmpq $1, %rax
    jg label23530
    jmp label23531
    
label23533:
    movq $2, %rcx
    jmp label23528
    
label23534:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23532
    jmp label23533
    
label23536:
    movq $2, %rcx
    jmp label23534
    
label23535:
    movq $1, %rcx
    jmp label23534
    
label23537:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23535
    jmp label23536
    
label23538:
    movq %rcx, %rbx
    jmp label23537
    
label23539:
    movq $1, %rcx
    jmp label23538
    
label23540:
    movq $2, %rcx
    jmp label23538
    
label23541:
    movq $3, %rax
    cmpq $1, %rax
    jg label23539
    jmp label23540
    
label23547:
    movq $2, %rbx
    jmp label23537
    
label23542:
    movq $2, %rcx
    movq %rcx, %rbx
    jmp label23537
    
label23543:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23541
    jmp label23542
    
label23545:
    movq $2, %rcx
    jmp label23543
    
label23544:
    movq $1, %rcx
    jmp label23543
    
label23546:
    movq $3, %rax
    cmpq $1, %rax
    jg label23544
    jmp label23545
    
label23549:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23546
    jmp label23547
    
label23548:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23546
    jmp label23547
    
label23551:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23548
    jmp label23549
    
label23550:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23548
    jmp label23549
    
label23553:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23550
    jmp label23551
    
label23552:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23550
    jmp label23551
    
label23554:
    cmpq %rcx, %rdx
    jg label23552
    jmp label23553
    
label23559:
    movq $2, %rcx
    jmp label23554
    
label23555:
    jmp label23554
    
label23557:
    movq $2, %rcx
    jmp label23555
    
label23556:
    movq $1, %rcx
    jmp label23555
    
label23558:
    movq $3, %rax
    cmpq $1, %rax
    jg label23556
    jmp label23557
    
label23560:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23558
    jmp label23559
    
label23561:
    movq $1, %rcx
    jmp label23560
    
label23562:
    movq $2, %rcx
    jmp label23560
    
label23563:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23561
    jmp label23562
    
label23573:
    movq $2, %r12
    jmp label23563
    
label23568:
    movq $2, %rcx
    movq %rcx, %r12
    jmp label23563
    
label23564:
    movq %rcx, %r12
    jmp label23563
    
label23565:
    movq $1, %rcx
    jmp label23564
    
label23566:
    movq $2, %rcx
    jmp label23564
    
label23567:
    movq $3, %rax
    cmpq $1, %rax
    jg label23565
    jmp label23566
    
label23569:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23567
    jmp label23568
    
label23571:
    movq $2, %rcx
    jmp label23569
    
label23570:
    movq $1, %rcx
    jmp label23569
    
label23572:
    movq $3, %rax
    cmpq $1, %rax
    jg label23570
    jmp label23571
    
label23575:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23572
    jmp label23573
    
label23574:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23572
    jmp label23573
    
label23577:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23574
    jmp label23575
    
label23576:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23574
    jmp label23575
    
label23579:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23576
    jmp label23577
    
label23578:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23576
    jmp label23577
    
label23580:
    cmpq %rcx, %rdx
    jg label23578
    jmp label23579
    
label23585:
    movq $2, %rcx
    jmp label23580
    
label23581:
    jmp label23580
    
label23583:
    movq $2, %rcx
    jmp label23581
    
label23582:
    movq $1, %rcx
    jmp label23581
    
label23584:
    movq $3, %rax
    cmpq $1, %rax
    jg label23582
    jmp label23583
    
label23586:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23584
    jmp label23585
    
label23588:
    movq $2, %rcx
    jmp label23586
    
label23587:
    movq $1, %rcx
    jmp label23586
    
label23589:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23587
    jmp label23588
    
label23594:
    movq $2, %rcx
    movq %rcx, -96(%rbp)
    jmp label23589
    
label23590:
    movq %rcx, -96(%rbp)
    jmp label23589
    
label23592:
    movq $2, %rcx
    jmp label23590
    
label23591:
    movq $1, %rcx
    jmp label23590
    
label23593:
    movq $3, %rax
    cmpq $1, %rax
    jg label23591
    jmp label23592
    
label23595:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23593
    jmp label23594
    
label23597:
    movq $2, %rcx
    jmp label23595
    
label23596:
    movq $1, %rcx
    jmp label23595
    
label23598:
    movq $3, %rax
    cmpq $1, %rax
    jg label23596
    jmp label23597
    
label23599:
    movq $2, -96(%rbp)
    jmp label23589
    
label23601:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23598
    jmp label23599
    
label23600:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23598
    jmp label23599
    
label23603:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23600
    jmp label23601
    
label23602:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23600
    jmp label23601
    
label23605:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23602
    jmp label23603
    
label23604:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23602
    jmp label23603
    
label23606:
    cmpq %rcx, %rdx
    jg label23604
    jmp label23605
    
label23611:
    movq $2, %rcx
    jmp label23606
    
label23607:
    jmp label23606
    
label23609:
    movq $2, %rcx
    jmp label23607
    
label23608:
    movq $1, %rcx
    jmp label23607
    
label23610:
    movq $3, %rax
    cmpq $1, %rax
    jg label23608
    jmp label23609
    
label23612:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23610
    jmp label23611
    
label23613:
    movq $1, %rcx
    jmp label23612
    
label23614:
    movq $2, %rcx
    jmp label23612
    
label23615:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23613
    jmp label23614
    
label23625:
    movq $2, -88(%rbp)
    jmp label23615
    
label23620:
    movq $2, %rcx
    movq %rcx, -88(%rbp)
    jmp label23615
    
label23616:
    movq %rcx, -88(%rbp)
    jmp label23615
    
label23617:
    movq $1, %rcx
    jmp label23616
    
label23618:
    movq $2, %rcx
    jmp label23616
    
label23619:
    movq $3, %rax
    cmpq $1, %rax
    jg label23617
    jmp label23618
    
label23621:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23619
    jmp label23620
    
label23623:
    movq $2, %rcx
    jmp label23621
    
label23622:
    movq $1, %rcx
    jmp label23621
    
label23624:
    movq $3, %rax
    cmpq $1, %rax
    jg label23622
    jmp label23623
    
label23627:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23624
    jmp label23625
    
label23626:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23624
    jmp label23625
    
label23629:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23626
    jmp label23627
    
label23628:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23626
    jmp label23627
    
label23631:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23628
    jmp label23629
    
label23630:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23628
    jmp label23629
    
label23632:
    cmpq %rcx, %rdx
    jg label23630
    jmp label23631
    
label23637:
    movq $2, %rcx
    jmp label23632
    
label23633:
    jmp label23632
    
label23635:
    movq $2, %rcx
    jmp label23633
    
label23634:
    movq $1, %rcx
    jmp label23633
    
label23636:
    movq $3, %rax
    cmpq $1, %rax
    jg label23634
    jmp label23635
    
label23638:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23636
    jmp label23637
    
label23640:
    movq $2, %rcx
    jmp label23638
    
label23639:
    movq $1, %rcx
    jmp label23638
    
label23642:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23639
    jmp label23640
    
label23643:
    cmpq $1, %rcx
    je label23641
    jmp label23642
    
label23645:
    movq $0, %rcx
    jmp label23643
    
label23644:
    movq $1, %rcx
    jmp label23643
    
label23646:
    cmpq $8, %rcx
    jg label23644
    jmp label23645
    
label23648:
    movq $9, %rcx
    jmp label23646
    
label23647:
    movq $8, %rcx
    jmp label23646
    
label23649:
    cmpq %rdx, %rcx
    jge label23647
    jmp label23648
    
label23654:
    movq $2, %rdx
    jmp label23649
    
label23650:
    jmp label23649
    
label23652:
    movq $2, %rdx
    jmp label23650
    
label23651:
    movq $1, %rdx
    jmp label23650
    
label23653:
    movq $3, %rax
    cmpq $1, %rax
    jg label23651
    jmp label23652
    
label23655:
    movq $3, %rax
    cmpq %rdx, %rax
    jg label23653
    jmp label23654
    
label23657:
    movq $2, %rdx
    jmp label23655
    
label23656:
    movq $1, %rdx
    jmp label23655
    
label23658:
    movq $3, %rax
    cmpq $1, %rax
    jg label23656
    jmp label23657
    
label23659:
    jmp label23658
    
label23661:
    movq $2, %rcx
    jmp label23659
    
label23660:
    movq $1, %rcx
    jmp label23659
    
label23662:
    movq $3, %rax
    cmpq $1, %rax
    jg label23660
    jmp label23661
    
label23663:
    movq $2, %rcx
    jmp label23658
    
label23664:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23662
    jmp label23663
    
label23665:
    movq $1, %rcx
    jmp label23664
    
label23666:
    movq $2, %rcx
    jmp label23664
    
start:
    movq $3, %rax
    cmpq $1, %rax
    jg label23665
    jmp label23666
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    a22958 : 'Integer, a22959 : 'Integer, x22956 : 'Boolean, a22957 : 'Integer, a22962 : 'Integer, a22963 : 'Integer, a22960 : 'Integer, a22961 : 'Integer, a22982 : 'Boolean, a22983 : 'Boolean, a22980 : 'Integer, a22981 : 'Integer, a22986 : 'Boolean, a22987 : 'Boolean, a22984 : 'Boolean, a22985 : 'Boolean, a22990 : 'Integer, a22991 : 'Integer, a22988 : 'Integer, a22989 : 'Integer, a22994 : 'Integer, a22995 : 'Integer, a22992 : 'Integer, a22993 : 'Integer, a22966 : 'Integer, a22967 : 'Integer, a22964 : 'Integer, a22965 : 'Integer, a22970 : 'Integer, a22971 : 'Integer, a22968 : 'Integer, a22969 : 'Integer, a22974 : 'Integer, a22975 : 'Integer, a22972 : 'Integer, a22973 : 'Integer, a22978 : 'Integer, a22979 : 'Integer, a22976 : 'Integer, a22977 : 'Integer, temp23337 : 'Integer, temp23338 : 'Integer, temp23335 : 'Integer, temp23344 : 'Integer, temp23340 : 'Integer, temp23322 : 'Integer, temp23319 : 'Integer, temp23331 : 'Integer, temp23324 : 'Integer, temp23325 : 'Integer, temp23327 : 'Integer, temp23272 : 'Integer, temp23269 : 'Integer, temp23270 : 'Integer, temp23280 : 'Integer, temp23282 : 'Integer, temp23283 : 'Integer, temp23276 : 'Integer, temp23256 : 'Integer, temp23258 : 'Integer, temp23253 : 'Integer, temp23255 : 'Integer, temp23266 : 'Integer, temp23267 : 'Integer, temp23262 : 'Integer, temp23306 : 'Integer, temp23302 : 'Integer, temp23315 : 'Integer, temp23308 : 'Integer, temp23309 : 'Integer, temp23311 : 'Integer, temp23289 : 'Integer, temp23285 : 'Integer, temp23296 : 'Integer, temp23298 : 'Integer, temp23293 : 'Integer, temp23295 : 'Integer, temp23206 : 'Integer, temp23204 : 'Integer, temp23210 : 'Integer, temp23214 : 'Integer, temp23219 : 'Integer, temp23217 : 'Integer, temp23216 : 'Integer, temp23190 : 'Integer, temp23188 : 'Integer, temp23195 : 'Integer, temp23193 : 'Integer, temp23199 : 'Integer, temp23203 : 'Integer, temp23236 : 'Integer, temp23243 : 'Integer, temp23242 : 'Integer, temp23240 : 'Integer, temp23245 : 'Integer, temp23249 : 'Integer, temp23223 : 'Integer, temp23227 : 'Integer, temp23230 : 'Integer, temp23229 : 'Integer, temp23232 : 'Integer, a23143 : 'Integer, a23142 : 'Integer, a23141 : 'Integer, a23140 : 'Integer, a23147 : 'Integer, a23146 : 'Integer, a23145 : 'Integer, a23144 : 'Integer, a23151 : 'Integer, a23150 : 'Integer, a23149 : 'Integer, a23148 : 'Integer, a23155 : 'Boolean, a23154 : 'Boolean, a23153 : 'Integer, a23152 : 'Integer, a23127 : 'Integer, a23126 : 'Integer, a23125 : 'Integer, a23124 : 'Integer, a23131 : 'Integer, a23130 : 'Integer, a23129 : 'Integer, a23128 : 'Integer, a23135 : 'Boolean, a23134 : 'Boolean, a23133 : 'Integer, a23132 : 'Integer, a23139 : 'Boolean, a23138 : 'Boolean, a23137 : 'Boolean, a23136 : 'Boolean, a23175 : 'Boolean, a23174 : 'Boolean, a23173 : 'Boolean, a23172 : 'Integer, a23179 : 'Integer, a23178 : 'Boolean, a23177 : 'Boolean, a23176 : 'Boolean, a23183 : 'Integer, a23182 : 'Integer, a23181 : 'Integer, a23180 : 'Integer, temp23186 : 'Integer, a23184 : 'Integer, a23159 : 'Boolean, a23158 : 'Boolean, a23157 : 'Boolean, a23156 : 'Boolean, a23163 : 'Integer, a23162 : 'Integer, a23161 : 'Integer, a23160 : 'Integer, a23167 : 'Integer, a23166 : 'Integer, a23165 : 'Integer, a23164 : 'Integer, a23171 : 'Integer, a23170 : 'Integer, a23169 : 'Integer, a23168 : 'Integer, a23079 : 'Boolean, a23078 : 'Boolean, a23077 : 'Boolean, a23076 : 'Integer, a23083 : 'Integer, a23082 : 'Boolean, a23081 : 'Boolean, a23080 : 'Boolean, a23087 : 'Integer, a23086 : 'Integer, a23085 : 'Integer, a23084 : 'Integer, a23091 : 'Integer, a23090 : 'Integer, a23089 : 'Integer, a23088 : 'Integer, a23063 : 'Boolean, a23062 : 'Boolean, a23061 : 'Boolean, a23060 : 'Boolean, a23067 : 'Integer, a23066 : 'Integer, a23065 : 'Integer, a23064 : 'Integer, a23071 : 'Integer, a23070 : 'Integer, a23069 : 'Integer, a23068 : 'Integer, a23075 : 'Integer, a23074 : 'Integer, a23073 : 'Integer, a23072 : 'Integer, a23111 : 'Integer, a23110 : 'Integer, a23109 : 'Integer, a23108 : 'Integer, a23115 : 'Boolean, a23114 : 'Integer, a23113 : 'Integer, a23112 : 'Integer, a23119 : 'Boolean, a23118 : 'Boolean, a23117 : 'Boolean, a23116 : 'Boolean, a23123 : 'Integer, a23122 : 'Integer, a23121 : 'Integer, a23120 : 'Boolean, a23095 : 'Integer, a23094 : 'Integer, a23093 : 'Integer, a23092 : 'Integer, a23099 : 'Boolean, a23098 : 'Boolean, a23097 : 'Boolean, a23096 : 'Boolean, a23103 : 'Integer, a23102 : 'Integer, a23101 : 'Boolean, a23100 : 'Boolean, a23107 : 'Integer, a23106 : 'Integer, a23105 : 'Integer, a23104 : 'Integer, a23015 : 'Integer, a23014 : 'Integer, a23013 : 'Integer, a23012 : 'Integer, a23019 : 'Integer, a23018 : 'Integer, a23017 : 'Integer, a23016 : 'Integer, a23023 : 'Boolean, a23022 : 'Boolean, a23021 : 'Boolean, a23020 : 'Boolean, a23027 : 'Integer, a23026 : 'Integer, a23025 : 'Boolean, a23024 : 'Boolean, a22999 : 'Integer, a22998 : 'Integer, a22997 : 'Integer, a22996 : 'Integer, a23003 : 'Boolean, a23002 : 'Boolean, a23001 : 'Boolean, a23000 : 'Integer, a23007 : 'Integer, a23006 : 'Boolean, a23005 : 'Boolean, a23004 : 'Boolean, a23011 : 'Integer, a23010 : 'Integer, a23009 : 'Integer, a23008 : 'Integer, a23047 : 'Integer, a23046 : 'Integer, a23045 : 'Integer, a23044 : 'Boolean, a23051 : 'Integer, a23050 : 'Integer, a23049 : 'Integer, a23048 : 'Integer, a23055 : 'Integer, a23054 : 'Integer, a23053 : 'Integer, a23052 : 'Integer, a23059 : 'Boolean, a23058 : 'Boolean, a23057 : 'Integer, a23056 : 'Integer, a23031 : 'Integer, a23030 : 'Integer, a23029 : 'Integer, a23028 : 'Integer, a23035 : 'Integer, a23034 : 'Integer, a23033 : 'Integer, a23032 : 'Integer, a23039 : 'Boolean, a23038 : 'Integer, a23037 : 'Integer, a23036 : 'Integer, a23043 : 'Boolean, a23042 : 'Boolean, a23041 : 'Boolean, a23040 : 'Boolean, 
tsorted
:
'(label23351
  label23355
  label23360
  label23356
  label23357
  label23358
  label23359
  label23361
  label23362
  label23363
  label23365
  label23364
  label23366
  label23367
  label23369
  label23368
  label23370
  label23371
  label23372
  label23377
  label23373
  label23374
  label23375
  label23376
  label23378
  label23379
  label23347
  label23348
  label23349
  label23350
  label23352
  label23353
  label23354
  label23641
  label23380
  label23381
  label23382
  label23383
  label23391
  label23386
  label23384
  label23385
  label23387
  label23388
  label23389
  label23390
  label23392
  label23393
  label23394
  label23395
  label23397
  label23396
  label23398
  label23399
  label23403
  label23401
  label23400
  label23402
  label23404
  label23405
  label23406
  label23407
  label23408
  label23409
  label23410
  label23411
  label23417
  label23412
  label23413
  label23414
  label23415
  label23416
  label23418
  label23419
  label23420
  label23421
  label23422
  label23423
  label23424
  label23429
  label23425
  label23426
  label23427
  label23428
  label23430
  label23432
  label23431
  label23433
  label23434
  label23435
  label23436
  label23437
  label23443
  label23438
  label23439
  label23440
  label23441
  label23442
  label23445
  label23444
  label23446
  label23447
  label23449
  label23448
  label23450
  label23451
  label23452
  label23453
  label23454
  label23455
  label23456
  label23457
  label23458
  label23459
  label23469
  label23460
  label23461
  label23462
  label23463
  label23464
  label23465
  label23466
  label23467
  label23468
  label23470
  label23471
  label23472
  label23473
  label23474
  label23475
  label23476
  label23481
  label23477
  label23478
  label23479
  label23480
  label23482
  label23483
  label23484
  label23485
  label23495
  label23490
  label23486
  label23488
  label23487
  label23489
  label23491
  label23492
  label23493
  label23494
  label23496
  label23497
  label23498
  label23499
  label23500
  label23501
  label23502
  label23507
  label23503
  label23504
  label23505
  label23506
  label23508
  label23509
  label23510
  label23511
  label23512
  label23513
  label23514
  label23515
  label23521
  label23516
  label23517
  label23519
  label23518
  label23520
  label23523
  label23522
  label23525
  label23524
  label23527
  label23526
  label23528
  label23529
  label23531
  label23530
  label23532
  label23533
  label23534
  label23536
  label23535
  label23537
  label23538
  label23539
  label23540
  label23541
  label23547
  label23542
  label23543
  label23545
  label23544
  label23546
  label23549
  label23548
  label23551
  label23550
  label23553
  label23552
  label23554
  label23559
  label23555
  label23557
  label23556
  label23558
  label23560
  label23561
  label23562
  label23563
  label23573
  label23568
  label23564
  label23565
  label23566
  label23567
  label23569
  label23571
  label23570
  label23572
  label23575
  label23574
  label23577
  label23576
  label23579
  label23578
  label23580
  label23585
  label23581
  label23583
  label23582
  label23584
  label23586
  label23588
  label23587
  label23589
  label23594
  label23590
  label23592
  label23591
  label23593
  label23595
  label23597
  label23596
  label23598
  label23599
  label23601
  label23600
  label23603
  label23602
  label23605
  label23604
  label23606
  label23611
  label23607
  label23609
  label23608
  label23610
  label23612
  label23613
  label23614
  label23615
  label23625
  label23620
  label23616
  label23617
  label23618
  label23619
  label23621
  label23623
  label23622
  label23624
  label23627
  label23626
  label23629
  label23628
  label23631
  label23630
  label23632
  label23637
  label23633
  label23635
  label23634
  label23636
  label23638
  label23640
  label23639
  label23642
  label23643
  label23645
  label23644
  label23646
  label23648
  label23647
  label23649
  label23654
  label23650
  label23652
  label23651
  label23653
  label23655
  label23657
  label23656
  label23658
  label23659
  label23661
  label23660
  label23662
  label23663
  label23664
  label23665
  label23666
  start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23195 a22964)
 (list temp23195 a22963)
 (list temp23193 a22965)
 (list temp23193 a22968)
 (list temp23190 a22957)
 (list temp23190 a22958)
 (list temp23188 a22959)
 (list temp23188 a22962)
 (list temp23199 a22969)
 (list temp23199 a22970)
 (list a23179 temp23344)
 (list a23172 temp23338)
 (list a23184 a23166)
 (list a23183 a23181)
 (list a23182 a23181)
 (list a23181 a23183)
 (list a23181 a23166)
 (list a23181 a23182)
 (list a23180 temp23344)
 (list a22970 temp23199)
 (list temp23227 a23013)
 (list a22971 a22972)
 (list a22971 a22973)
 (list a22968 temp23193)
 (list a22969 temp23199)
 (list a22966 a22965)
 (list temp23223 a23007)
 (list temp23223 a23008)
 (list a22967 a22965)
 (list a22964 temp23195)
 (list a22965 a22966)
 (list a22965 a22967)
 (list a22965 temp23193)
 (list a22978 a22979)
 (list a22978 a22980)
 (list a22978 temp23204)
 (list a22979 a22978)
 (list a22976 temp23206)
 (list a22977 temp23206)
 (list temp23232 a23014)
 (list temp23232 a23015)
 (list a22975 a22990)
 (list a22975 a22993)
 (list temp23230 a23016)
 (list temp23230 a23019)
 (list a22972 a22971)
 (list a22973 a22971)
 (list temp23210 a22988)
 (list temp23210 a22989)
 (list temp23206 a22976)
 (list temp23206 a22977)
 (list temp23204 a22981)
 (list temp23204 a22978)
 (list a22962 temp23188)
 (list temp23219 a22996)
 (list temp23219 a22995)
 (list a22963 temp23195)
 (list a22960 a22959)
 (list temp23217 a22997)
 (list temp23217 a23000)
 (list a22961 a22959)
 (list a22958 temp23190)
 (list a22959 temp23188)
 (list a22959 a22960)
 (list a22959 a22961)
 (list temp23214 a22994)
 (list a22957 temp23190)
 (list a23131 a23130)
 (list a23130 a23131)
 (list a23130 a23132)
 (list a23130 temp23309)
 (list a23129 temp23311)
 (list a23128 temp23311)
 (list a23127 a23142)
 (list a23127 a23145)
 (list a23127 temp23306)
 (list a23126 a23108)
 (list a23125 a23123)
 (list a23124 a23123)
 (list a23133 temp23309)
 (list a23132 a23130)
 (list a23114 temp23296)
 (list a23113 a23111)
 (list a23112 a23111)
 (list a23111 a23112)
 (list a23111 a23113)
 (list a23111 temp23296)
 (list a23110 temp23298)
 (list a23109 temp23298)
 (list a23108 a23126)
 (list a23108 temp23293)
 (list a23108 a23123)
 (list a23123 a23125)
 (list a23123 a23108)
 (list a23123 a23124)
 (list a23122 temp23302)
 (list a23121 temp23302)
 (list a23163 a23162)
 (list a23162 a23164)
 (list a23162 a23147)
 (list a23162 a23163)
 (list a23161 temp23331)
 (list a23160 temp23331)
 (list a23171 a23169)
 (list a23170 a23169)
 (list a23169 temp23338)
 (list a23169 a23170)
 (list a23169 a23171)
 (list a23168 temp23340)
 (list a23167 temp23340)
 (list a23166 temp23335)
 (list a23166 a23181)
 (list a23166 a23184)
 (list a23165 a23147)
 (list a23164 a23162)
 (list a23147 a23165)
 (list a23147 temp23322)
 (list a23147 a23162)
 (list a23146 temp23319)
 (list a23145 a23127)
 (list a23144 a23142)
 (list a23143 a23142)
 (list a23142 a23144)
 (list a23142 a23127)
 (list a23142 a23143)
 (list a23141 temp23315)
 (list a23140 temp23315)
 (list a23153 temp23325)
 (list a23152 a23150)
 (list a23151 a23150)
 (list a23150 temp23325)
 (list a23150 a23151)
 (list a23150 a23152)
 (list a23149 temp23327)
 (list a23148 temp23327)
 (list a23067 a23066)
 (list temp23325 a23150)
 (list temp23325 a23153)
 (list a23066 a23068)
 (list a23066 a23051)
 (list a23066 a23067)
 (list a23065 temp23262)
 (list temp23327 a23148)
 (list temp23327 a23149)
 (list a23064 temp23262)
 (list temp23331 a23160)
 (list temp23331 a23161)
 (list a23075 a23073)
 (list a23074 a23073)
 (list a23073 temp23270)
 (list a23073 a23074)
 (list a23073 a23075)
 (list temp23319 a23146)
 (list a23072 temp23272)
 (list a23071 temp23272)
 (list a23070 a23085)
 (list a23070 a23088)
 (list a23070 temp23267)
 (list temp23322 a23147)
 (list a23069 a23051)
 (list a23068 a23066)
 (list a23051 a23066)
 (list a23051 a23069)
 (list a23050 a23032)
 (list temp23309 a23130)
 (list temp23309 a23133)
 (list a23049 a23047)
 (list a23048 a23047)
 (list temp23311 a23128)
 (list temp23311 a23129)
 (list a23047 a23049)
 (list a23047 a23032)
 (list a23047 a23048)
 (list a23046 temp23249)
 (list a23045 temp23249)
 (list temp23315 a23140)
 (list temp23315 a23141)
 (list a23057 temp23256)
 (list temp23302 a23121)
 (list temp23302 a23122)
 (list a23056 a23054)
 (list a23055 a23054)
 (list a23054 temp23256)
 (list a23054 a23055)
 (list a23054 a23056)
 (list a23053 temp23258)
 (list temp23306 a23127)
 (list a23052 temp23258)
 (list a23095 temp23283)
 (list a23094 a23092)
 (list a23093 a23092)
 (list a23092 a23093)
 (list a23092 a23094)
 (list a23092 temp23283)
 (list a23107 a23089)
 (list a23106 a23104)
 (list a23105 a23104)
 (list a23104 a23106)
 (list a23104 a23089)
 (list a23104 a23105)
 (list a23103 temp23289)
 (list a23102 temp23289)
 (list temp23340 a23167)
 (list temp23340 a23168)
 (list a23083 temp23276)
 (list temp23344 a23179)
 (list temp23344 a23180)
 (list a23076 temp23270)
 (list a23091 temp23285)
 (list a23090 temp23285)
 (list a23089 a23107)
 (list a23089 temp23280)
 (list a23089 a23104)
 (list temp23335 a23166)
 (list a23088 a23070)
 (list a23087 a23085)
 (list a23086 a23085)
 (list temp23338 a23172)
 (list temp23338 a23169)
 (list a23085 a23087)
 (list a23085 a23070)
 (list a23085 a23086)
 (list a23084 temp23276)
 (list temp23262 a23064)
 (list temp23262 a23065)
 (list a23000 temp23217)
 (list a22999 a22997)
 (list a22998 a22997)
 (list a22997 a22998)
 (list a22997 a22999)
 (list a22997 temp23217)
 (list temp23266 temp23253)
 (list a22996 temp23219)
 (list temp23267 a23070)
 (list a23011 a23009)
 (list a23010 a23009)
 (list temp23253 temp23266)
 (list a23009 a23011)
 (list a23009 a22994)
 (list a23009 a23010)
 (list a23008 temp23223)
 (list a23007 temp23223)
 (list temp23256 a23054)
 (list temp23256 a23057)
 (list temp23258 a23052)
 (list temp23258 a23053)
 (list temp23245 a23033)
 (list temp23245 a23034)
 (list temp23249 a23045)
 (list temp23249 a23046)
 (list a22981 temp23204)
 (list a22980 a22978)
 (list a22995 temp23219)
 (list temp23236 a23026)
 (list temp23236 a23027)
 (list a22994 a23012)
 (list a22994 temp23214)
 (list a22994 a23009)
 (list a22993 a22975)
 (list a22992 a22990)
 (list a22991 a22990)
 (list temp23240 a23032)
 (list a22990 a22992)
 (list a22990 a22991)
 (list a22990 a22975)
 (list a22989 temp23210)
 (list a22988 temp23210)
 (list temp23243 a23035)
 (list temp23243 a23038)
 (list a23035 temp23243)
 (list a23035 a23036)
 (list a23035 a23037)
 (list a23034 temp23245)
 (list temp23293 a23108)
 (list a23033 temp23245)
 (list a23032 a23047)
 (list a23032 temp23240)
 (list a23032 a23050)
 (list a23031 a23013)
 (list temp23296 a23111)
 (list temp23296 a23114)
 (list a23030 a23028)
 (list a23029 a23028)
 (list temp23298 a23109)
 (list temp23298 a23110)
 (list a23028 a23030)
 (list a23028 a23013)
 (list a23028 a23029)
 (list temp23285 a23090)
 (list temp23285 a23091)
 (list a23038 temp23243)
 (list temp23289 a23102)
 (list temp23289 a23103)
 (list a23037 a23035)
 (list a23036 a23035)
 (list a23019 temp23230)
 (list temp23276 a23083)
 (list temp23276 a23084)
 (list a23018 a23016)
 (list a23017 a23016)
 (list a23016 a23017)
 (list a23016 a23018)
 (list a23016 temp23230)
 (list a23015 temp23232)
 (list temp23280 a23089)
 (list a23014 temp23232)
 (list a23013 a23028)
 (list a23013 a23031)
 (list a23013 temp23227)
 (list a23012 a22994)
 (list temp23283 a23092)
 (list temp23283 a23095)
 (list a23027 temp23236)
 (list a23026 temp23236)
 (list temp23270 a23076)
 (list temp23270 a23073)
 (list temp23272 a23071)
 (list temp23272 a23072))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %rdx 1)
 (cons %r11 -4)
 (cons a23032 7)
 (cons a23013 8)
 (cons a23108 9)
 (cons a23070 10)
 (cons a23089 11)
 (cons a23127 12)
 (cons a23146 13)
 (cons a23147 14)
 (cons temp23266 15)
 (cons a22975 16)
 (cons a22994 17)
 (cons a23168 0)
 (cons temp23337 1)
 (cons a23169 0)
 (cons a23170 0)
 (cons temp23340 0)
 (cons a23171 0)
 (cons a23167 0)
 (cons temp23338 0)
 (cons a23172 0)
 (cons a23166 0)
 (cons a23184 0)
 (cons a23181 0)
 (cons a23180 0)
 (cons a23178 0)
 (cons a23174 0)
 (cons a23175 0)
 (cons a23173 0)
 (cons temp23344 0)
 (cons a23179 0)
 (cons a23182 0)
 (cons a23183 0)
 (cons a23176 0)
 (cons a23177 0)
 (cons temp23335 0)
 (cons temp23322 1)
 (cons temp23319 0)
 (cons a23152 0)
 (cons temp23324 1)
 (cons a23153 0)
 (cons a23148 0)
 (cons temp23325 0)
 (cons a23149 0)
 (cons a23150 0)
 (cons a23151 0)
 (cons temp23327 0)
 (cons temp23331 0)
 (cons a23154 0)
 (cons a23155 0)
 (cons a23164 0)
 (cons a23165 0)
 (cons a23158 0)
 (cons a23159 0)
 (cons a23162 0)
 (cons a23156 0)
 (cons a23163 0)
 (cons a23157 0)
 (cons a23160 0)
 (cons a23161 0)
 (cons temp23306 1)
 (cons temp23293 0)
 (cons a23144 0)
 (cons a23140 0)
 (cons a23141 0)
 (cons a23128 0)
 (cons temp23308 1)
 (cons a23132 0)
 (cons a23130 0)
 (cons a23131 0)
 (cons a23133 0)
 (cons temp23309 0)
 (cons a23129 0)
 (cons temp23311 0)
 (cons a23142 0)
 (cons a23145 0)
 (cons temp23315 0)
 (cons a23143 0)
 (cons a23136 0)
 (cons a23138 0)
 (cons a23137 0)
 (cons a23139 0)
 (cons a23134 0)
 (cons a23135 0)
 (cons temp23280 1)
 (cons a23126 0)
 (cons a23125 0)
 (cons temp23302 0)
 (cons a23124 0)
 (cons a23122 0)
 (cons a23123 0)
 (cons a23117 0)
 (cons a23116 0)
 (cons a23121 0)
 (cons a23120 0)
 (cons a23119 0)
 (cons a23112 0)
 (cons temp23295 1)
 (cons a23113 0)
 (cons a23109 0)
 (cons a23110 0)
 (cons a23111 0)
 (cons temp23298 0)
 (cons a23114 0)
 (cons temp23296 0)
 (cons a23115 0)
 (cons a23118 0)
 (cons a23105 0)
 (cons a23101 0)
 (cons a23102 0)
 (cons a23100 0)
 (cons a23107 0)
 (cons temp23283 0)
 (cons temp23282 1)
 (cons a23092 0)
 (cons a23094 0)
 (cons a23090 0)
 (cons a23093 0)
 (cons a23095 0)
 (cons a23091 0)
 (cons temp23285 0)
 (cons a23103 0)
 (cons a23096 0)
 (cons a23098 0)
 (cons a23097 0)
 (cons a23104 0)
 (cons temp23289 0)
 (cons a23099 0)
 (cons temp23267 0)
 (cons a23106 0)
 (cons temp23253 1)
 (cons temp23269 0)
 (cons a23072 1)
 (cons a23073 1)
 (cons a23074 1)
 (cons a23075 1)
 (cons temp23272 1)
 (cons a23071 1)
 (cons a23076 1)
 (cons temp23270 1)
 (cons a23087 0)
 (cons temp23276 0)
 (cons a23088 0)
 (cons a23084 0)
 (cons a23081 0)
 (cons a23085 0)
 (cons a23080 0)
 (cons a23086 0)
 (cons a23079 0)
 (cons a23078 0)
 (cons a23077 0)
 (cons a23083 0)
 (cons a23082 0)
 (cons temp23256 0)
 (cons temp23255 1)
 (cons a23056 0)
 (cons a23057 0)
 (cons a23054 0)
 (cons a23052 0)
 (cons a23053 0)
 (cons a23055 0)
 (cons temp23258 0)
 (cons a23067 0)
 (cons a23051 0)
 (cons a23061 0)
 (cons a23069 0)
 (cons temp23240 0)
 (cons a23068 0)
 (cons a23060 0)
 (cons a23063 0)
 (cons a23066 0)
 (cons a23062 0)
 (cons a23065 0)
 (cons a23058 0)
 (cons a23059 0)
 (cons a23064 0)
 (cons temp23262 0)
 (cons temp23227 1)
 (cons temp23214 0)
 (cons a23043 0)
 (cons temp23245 0)
 (cons temp23242 1)
 (cons a23036 0)
 (cons a23037 0)
 (cons a23038 0)
 (cons a23033 0)
 (cons temp23243 0)
 (cons a23034 0)
 (cons a23035 0)
 (cons a23048 0)
 (cons a23042 0)
 (cons a23039 0)
 (cons a23046 0)
 (cons a23049 0)
 (cons a23047 0)
 (cons a23041 0)
 (cons a23050 0)
 (cons temp23249 0)
 (cons a23044 0)
 (cons a23045 0)
 (cons a23040 0)
 (cons a23023 0)
 (cons a23026 0)
 (cons a23027 0)
 (cons a23022 0)
 (cons a23016 0)
 (cons temp23229 1)
 (cons a23017 0)
 (cons a23018 0)
 (cons a23014 0)
 (cons temp23232 0)
 (cons temp23230 0)
 (cons a23019 0)
 (cons a23015 0)
 (cons a23025 0)
 (cons a23028 0)
 (cons a23020 0)
 (cons temp23236 0)
 (cons a23021 0)
 (cons a23024 0)
 (cons a23030 0)
 (cons a23031 0)
 (cons a23029 0)
 (cons a22998 0)
 (cons temp23216 1)
 (cons a23000 0)
 (cons a22996 0)
 (cons a22999 0)
 (cons a22995 0)
 (cons a22997 0)
 (cons temp23219 0)
 (cons temp23217 0)
 (cons a23010 0)
 (cons a23006 0)
 (cons a23012 0)
 (cons a23001 0)
 (cons temp23223 0)
 (cons a23007 0)
 (cons a23003 0)
 (cons a23002 0)
 (cons a23005 0)
 (cons a23004 0)
 (cons a23011 0)
 (cons a23008 0)
 (cons a23009 0)
 (cons a22980 0)
 (cons temp23203 1)
 (cons temp23204 0)
 (cons a22977 0)
 (cons a22978 0)
 (cons a22981 0)
 (cons temp23206 0)
 (cons a22976 0)
 (cons a22979 0)
 (cons temp23190 0)
 (cons a22982 0)
 (cons a22959 0)
 (cons a22970 0)
 (cons temp23210 0)
 (cons a22972 0)
 (cons a22992 0)
 (cons a22983 0)
 (cons temp23188 0)
 (cons temp23193 1)
 (cons temp23195 1)
 (cons a22968 1)
 (cons a22965 1)
 (cons a22964 1)
 (cons a22963 1)
 (cons a22967 1)
 (cons a22966 1)
 (cons a22961 0)
 (cons a22985 0)
 (cons a22988 0)
 (cons a22974 0)
 (cons a22957 0)
 (cons temp23199 0)
 (cons temp23186 0)
 (cons a22971 0)
 (cons a22991 0)
 (cons a22989 0)
 (cons a22962 0)
 (cons a22987 0)
 (cons a22986 0)
 (cons a22990 0)
 (cons a22973 0)
 (cons a22958 0)
 (cons a22969 0)
 (cons x22956 0)
 (cons a22960 0)
 (cons a22993 0)
 (cons a22984 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
7
homes
:
(list
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp)))
label23351:
    movq $2, %rcx
    movq %rcx, %rax
    jmp conclusion
    
label23355:
    movq -72(%rbp), %rdx
    addq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -56(%rbp), %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %rbx, %rcx
    addq %rdx, %rcx
    movq %r12, %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    addq %rdx, %rcx
    movq -88(%rbp), %rax
    addq %rcx, %rax
    jmp conclusion
    
label23360:
    movq $2, %rcx
    jmp label23355
    
label23356:
    jmp label23355
    
label23357:
    movq $1, %rcx
    jmp label23356
    
label23358:
    movq $2, %rcx
    jmp label23356
    
label23359:
    movq $3, %rax
    cmpq $1, %rax
    jg label23357
    jmp label23358
    
label23361:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23359
    jmp label23360
    
label23362:
    movq $1, %rcx
    jmp label23361
    
label23363:
    movq $2, %rcx
    jmp label23361
    
label23365:
    movq $2, %rcx
    jmp label23355
    
label23364:
    movq $3, %rax
    cmpq $1, %rax
    jg label23362
    jmp label23363
    
label23366:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23364
    jmp label23365
    
label23367:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23364
    jmp label23365
    
label23369:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23366
    jmp label23367
    
label23368:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23366
    jmp label23367
    
label23370:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23368
    jmp label23369
    
label23371:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23368
    jmp label23369
    
label23372:
    cmpq %rcx, %rdx
    jg label23370
    jmp label23371
    
label23377:
    movq $2, %rcx
    jmp label23372
    
label23373:
    jmp label23372
    
label23374:
    movq $1, %rcx
    jmp label23373
    
label23375:
    movq $2, %rcx
    jmp label23373
    
label23376:
    movq $3, %rax
    cmpq $1, %rax
    jg label23374
    jmp label23375
    
label23378:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23376
    jmp label23377
    
label23379:
    movq $1, %rcx
    jmp label23378
    
label23347:
    movq %rcx, %rax
    jmp conclusion
    
label23348:
    movq $1, %rcx
    jmp label23347
    
label23349:
    movq $2, %rcx
    jmp label23347
    
label23350:
    movq $3, %rax
    cmpq $1, %rax
    jg label23348
    jmp label23349
    
label23352:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23350
    jmp label23351
    
label23353:
    movq $1, %rcx
    jmp label23352
    
label23354:
    movq $2, %rcx
    jmp label23352
    
label23641:
    movq $3, %rax
    cmpq $1, %rax
    jg label23353
    jmp label23354
    
label23380:
    movq $2, %rcx
    jmp label23378
    
label23381:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23379
    jmp label23380
    
label23382:
    movq %rcx, -72(%rbp)
    jmp label23381
    
label23383:
    movq $1, %rcx
    jmp label23382
    
label23391:
    movq $2, -72(%rbp)
    jmp label23381
    
label23386:
    movq $2, %rcx
    movq %rcx, -72(%rbp)
    jmp label23381
    
label23384:
    movq $2, %rcx
    jmp label23382
    
label23385:
    movq $3, %rax
    cmpq $1, %rax
    jg label23383
    jmp label23384
    
label23387:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23385
    jmp label23386
    
label23388:
    movq $1, %rcx
    jmp label23387
    
label23389:
    movq $2, %rcx
    jmp label23387
    
label23390:
    movq $3, %rax
    cmpq $1, %rax
    jg label23388
    jmp label23389
    
label23392:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23390
    jmp label23391
    
label23393:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23390
    jmp label23391
    
label23394:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23392
    jmp label23393
    
label23395:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23392
    jmp label23393
    
label23397:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23394
    jmp label23395
    
label23396:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23394
    jmp label23395
    
label23398:
    cmpq %rcx, %rdx
    jg label23396
    jmp label23397
    
label23399:
    jmp label23398
    
label23403:
    movq $2, %rcx
    jmp label23398
    
label23401:
    movq $2, %rcx
    jmp label23399
    
label23400:
    movq $1, %rcx
    jmp label23399
    
label23402:
    movq $3, %rax
    cmpq $1, %rax
    jg label23400
    jmp label23401
    
label23404:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23402
    jmp label23403
    
label23405:
    movq $1, %rcx
    jmp label23404
    
label23406:
    movq $2, %rcx
    jmp label23404
    
label23407:
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23405
    jmp label23406
    
label23408:
    movq %rcx, -56(%rbp)
    jmp label23407
    
label23409:
    movq $1, %rcx
    jmp label23408
    
label23410:
    movq $2, %rcx
    jmp label23408
    
label23411:
    movq $3, %rax
    cmpq $1, %rax
    jg label23409
    jmp label23410
    
label23417:
    movq $2, -56(%rbp)
    jmp label23407
    
label23412:
    movq $2, %rcx
    movq %rcx, -56(%rbp)
    jmp label23407
    
label23413:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23411
    jmp label23412
    
label23414:
    movq $1, %rcx
    jmp label23413
    
label23415:
    movq $2, %rcx
    jmp label23413
    
label23416:
    movq $3, %rax
    cmpq $1, %rax
    jg label23414
    jmp label23415
    
label23418:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23416
    jmp label23417
    
label23419:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23416
    jmp label23417
    
label23420:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23418
    jmp label23419
    
label23421:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23418
    jmp label23419
    
label23422:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23420
    jmp label23421
    
label23423:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23420
    jmp label23421
    
label23424:
    cmpq %rcx, %rdx
    jg label23422
    jmp label23423
    
label23429:
    movq $2, %rcx
    jmp label23424
    
label23425:
    jmp label23424
    
label23426:
    movq $1, %rcx
    jmp label23425
    
label23427:
    movq $2, %rcx
    jmp label23425
    
label23428:
    movq $3, %rax
    cmpq $1, %rax
    jg label23426
    jmp label23427
    
label23430:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23428
    jmp label23429
    
label23432:
    movq $2, %rcx
    jmp label23430
    
label23431:
    movq $1, %rcx
    jmp label23430
    
label23433:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23431
    jmp label23432
    
label23434:
    movq %rcx, %r13
    jmp label23433
    
label23435:
    movq $1, %rcx
    jmp label23434
    
label23436:
    movq $2, %rcx
    jmp label23434
    
label23437:
    movq $3, %rax
    cmpq $1, %rax
    jg label23435
    jmp label23436
    
label23443:
    movq $2, %r13
    jmp label23433
    
label23438:
    movq $2, %rcx
    movq %rcx, %r13
    jmp label23433
    
label23439:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23437
    jmp label23438
    
label23440:
    movq $1, %rcx
    jmp label23439
    
label23441:
    movq $2, %rcx
    jmp label23439
    
label23442:
    movq $3, %rax
    cmpq $1, %rax
    jg label23440
    jmp label23441
    
label23445:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23442
    jmp label23443
    
label23444:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23442
    jmp label23443
    
label23446:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23444
    jmp label23445
    
label23447:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23444
    jmp label23445
    
label23449:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23446
    jmp label23447
    
label23448:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23446
    jmp label23447
    
label23450:
    cmpq %rcx, %rdx
    jg label23448
    jmp label23449
    
label23451:
    jmp label23450
    
label23452:
    movq $1, %rcx
    jmp label23451
    
label23453:
    movq $2, %rcx
    jmp label23451
    
label23454:
    movq $3, %rax
    cmpq $1, %rax
    jg label23452
    jmp label23453
    
label23455:
    movq $2, %rcx
    jmp label23450
    
label23456:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23454
    jmp label23455
    
label23457:
    movq $1, %rcx
    jmp label23456
    
label23458:
    movq $2, %rcx
    jmp label23456
    
label23459:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23457
    jmp label23458
    
label23469:
    movq $2, -48(%rbp)
    jmp label23459
    
label23460:
    movq %rcx, -48(%rbp)
    jmp label23459
    
label23461:
    movq $1, %rcx
    jmp label23460
    
label23462:
    movq $2, %rcx
    jmp label23460
    
label23463:
    movq $3, %rax
    cmpq $1, %rax
    jg label23461
    jmp label23462
    
label23464:
    movq $2, %rcx
    movq %rcx, -48(%rbp)
    jmp label23459
    
label23465:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23463
    jmp label23464
    
label23466:
    movq $1, %rcx
    jmp label23465
    
label23467:
    movq $2, %rcx
    jmp label23465
    
label23468:
    movq $3, %rax
    cmpq $1, %rax
    jg label23466
    jmp label23467
    
label23470:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23468
    jmp label23469
    
label23471:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23468
    jmp label23469
    
label23472:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23470
    jmp label23471
    
label23473:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23470
    jmp label23471
    
label23474:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23472
    jmp label23473
    
label23475:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23472
    jmp label23473
    
label23476:
    cmpq %rcx, %rdx
    jg label23474
    jmp label23475
    
label23481:
    movq $2, %rcx
    jmp label23476
    
label23477:
    jmp label23476
    
label23478:
    movq $1, %rcx
    jmp label23477
    
label23479:
    movq $2, %rcx
    jmp label23477
    
label23480:
    movq $3, %rax
    cmpq $1, %rax
    jg label23478
    jmp label23479
    
label23482:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23480
    jmp label23481
    
label23483:
    movq $1, %rcx
    jmp label23482
    
label23484:
    movq $2, %rcx
    jmp label23482
    
label23485:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23483
    jmp label23484
    
label23495:
    movq $2, %r14
    jmp label23485
    
label23490:
    movq $2, %rcx
    movq %rcx, %r14
    jmp label23485
    
label23486:
    movq %rcx, %r14
    jmp label23485
    
label23488:
    movq $2, %rcx
    jmp label23486
    
label23487:
    movq $1, %rcx
    jmp label23486
    
label23489:
    movq $3, %rax
    cmpq $1, %rax
    jg label23487
    jmp label23488
    
label23491:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23489
    jmp label23490
    
label23492:
    movq $1, %rcx
    jmp label23491
    
label23493:
    movq $2, %rcx
    jmp label23491
    
label23494:
    movq $3, %rax
    cmpq $1, %rax
    jg label23492
    jmp label23493
    
label23496:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23494
    jmp label23495
    
label23497:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23494
    jmp label23495
    
label23498:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23496
    jmp label23497
    
label23499:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23496
    jmp label23497
    
label23500:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23498
    jmp label23499
    
label23501:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23498
    jmp label23499
    
label23502:
    cmpq %rdx, %rcx
    jg label23500
    jmp label23501
    
label23507:
    movq $2, %rdx
    jmp label23502
    
label23503:
    jmp label23502
    
label23504:
    movq $1, %rdx
    jmp label23503
    
label23505:
    movq $2, %rdx
    jmp label23503
    
label23506:
    movq $3, %rax
    cmpq $1, %rax
    jg label23504
    jmp label23505
    
label23508:
    movq $3, %rax
    cmpq %rdx, %rax
    jg label23506
    jmp label23507
    
label23509:
    movq $1, %rdx
    jmp label23508
    
label23510:
    movq $2, %rdx
    jmp label23508
    
label23511:
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    movq $3, %rax
    cmpq $1, %rax
    jg label23509
    jmp label23510
    
label23512:
    jmp label23511
    
label23513:
    movq $1, %rcx
    jmp label23512
    
label23514:
    movq $2, %rcx
    jmp label23512
    
label23515:
    movq $3, %rax
    cmpq $1, %rax
    jg label23513
    jmp label23514
    
label23521:
    movq $2, %rcx
    jmp label23511
    
label23516:
    movq $2, %rcx
    jmp label23511
    
label23517:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23515
    jmp label23516
    
label23519:
    movq $2, %rcx
    jmp label23517
    
label23518:
    movq $1, %rcx
    jmp label23517
    
label23520:
    movq $3, %rax
    cmpq $1, %rax
    jg label23518
    jmp label23519
    
label23523:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23520
    jmp label23521
    
label23522:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23520
    jmp label23521
    
label23525:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23522
    jmp label23523
    
label23524:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23522
    jmp label23523
    
label23527:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23524
    jmp label23525
    
label23526:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23524
    jmp label23525
    
label23528:
    cmpq %rcx, %rdx
    jg label23526
    jmp label23527
    
label23529:
    jmp label23528
    
label23531:
    movq $2, %rcx
    jmp label23529
    
label23530:
    movq $1, %rcx
    jmp label23529
    
label23532:
    movq $3, %rax
    cmpq $1, %rax
    jg label23530
    jmp label23531
    
label23533:
    movq $2, %rcx
    jmp label23528
    
label23534:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23532
    jmp label23533
    
label23536:
    movq $2, %rcx
    jmp label23534
    
label23535:
    movq $1, %rcx
    jmp label23534
    
label23537:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23535
    jmp label23536
    
label23538:
    movq %rcx, %rbx
    jmp label23537
    
label23539:
    movq $1, %rcx
    jmp label23538
    
label23540:
    movq $2, %rcx
    jmp label23538
    
label23541:
    movq $3, %rax
    cmpq $1, %rax
    jg label23539
    jmp label23540
    
label23547:
    movq $2, %rbx
    jmp label23537
    
label23542:
    movq $2, %rcx
    movq %rcx, %rbx
    jmp label23537
    
label23543:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23541
    jmp label23542
    
label23545:
    movq $2, %rcx
    jmp label23543
    
label23544:
    movq $1, %rcx
    jmp label23543
    
label23546:
    movq $3, %rax
    cmpq $1, %rax
    jg label23544
    jmp label23545
    
label23549:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23546
    jmp label23547
    
label23548:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23546
    jmp label23547
    
label23551:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23548
    jmp label23549
    
label23550:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23548
    jmp label23549
    
label23553:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23550
    jmp label23551
    
label23552:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23550
    jmp label23551
    
label23554:
    cmpq %rcx, %rdx
    jg label23552
    jmp label23553
    
label23559:
    movq $2, %rcx
    jmp label23554
    
label23555:
    jmp label23554
    
label23557:
    movq $2, %rcx
    jmp label23555
    
label23556:
    movq $1, %rcx
    jmp label23555
    
label23558:
    movq $3, %rax
    cmpq $1, %rax
    jg label23556
    jmp label23557
    
label23560:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23558
    jmp label23559
    
label23561:
    movq $1, %rcx
    jmp label23560
    
label23562:
    movq $2, %rcx
    jmp label23560
    
label23563:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23561
    jmp label23562
    
label23573:
    movq $2, %r12
    jmp label23563
    
label23568:
    movq $2, %rcx
    movq %rcx, %r12
    jmp label23563
    
label23564:
    movq %rcx, %r12
    jmp label23563
    
label23565:
    movq $1, %rcx
    jmp label23564
    
label23566:
    movq $2, %rcx
    jmp label23564
    
label23567:
    movq $3, %rax
    cmpq $1, %rax
    jg label23565
    jmp label23566
    
label23569:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23567
    jmp label23568
    
label23571:
    movq $2, %rcx
    jmp label23569
    
label23570:
    movq $1, %rcx
    jmp label23569
    
label23572:
    movq $3, %rax
    cmpq $1, %rax
    jg label23570
    jmp label23571
    
label23575:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23572
    jmp label23573
    
label23574:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23572
    jmp label23573
    
label23577:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23574
    jmp label23575
    
label23576:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23574
    jmp label23575
    
label23579:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23576
    jmp label23577
    
label23578:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23576
    jmp label23577
    
label23580:
    cmpq %rcx, %rdx
    jg label23578
    jmp label23579
    
label23585:
    movq $2, %rcx
    jmp label23580
    
label23581:
    jmp label23580
    
label23583:
    movq $2, %rcx
    jmp label23581
    
label23582:
    movq $1, %rcx
    jmp label23581
    
label23584:
    movq $3, %rax
    cmpq $1, %rax
    jg label23582
    jmp label23583
    
label23586:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23584
    jmp label23585
    
label23588:
    movq $2, %rcx
    jmp label23586
    
label23587:
    movq $1, %rcx
    jmp label23586
    
label23589:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23587
    jmp label23588
    
label23594:
    movq $2, %rcx
    movq %rcx, -96(%rbp)
    jmp label23589
    
label23590:
    movq %rcx, -96(%rbp)
    jmp label23589
    
label23592:
    movq $2, %rcx
    jmp label23590
    
label23591:
    movq $1, %rcx
    jmp label23590
    
label23593:
    movq $3, %rax
    cmpq $1, %rax
    jg label23591
    jmp label23592
    
label23595:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23593
    jmp label23594
    
label23597:
    movq $2, %rcx
    jmp label23595
    
label23596:
    movq $1, %rcx
    jmp label23595
    
label23598:
    movq $3, %rax
    cmpq $1, %rax
    jg label23596
    jmp label23597
    
label23599:
    movq $2, -96(%rbp)
    jmp label23589
    
label23601:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23598
    jmp label23599
    
label23600:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23598
    jmp label23599
    
label23603:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23600
    jmp label23601
    
label23602:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23600
    jmp label23601
    
label23605:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23602
    jmp label23603
    
label23604:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23602
    jmp label23603
    
label23606:
    cmpq %rcx, %rdx
    jg label23604
    jmp label23605
    
label23611:
    movq $2, %rcx
    jmp label23606
    
label23607:
    jmp label23606
    
label23609:
    movq $2, %rcx
    jmp label23607
    
label23608:
    movq $1, %rcx
    jmp label23607
    
label23610:
    movq $3, %rax
    cmpq $1, %rax
    jg label23608
    jmp label23609
    
label23612:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23610
    jmp label23611
    
label23613:
    movq $1, %rcx
    jmp label23612
    
label23614:
    movq $2, %rcx
    jmp label23612
    
label23615:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23613
    jmp label23614
    
label23625:
    movq $2, -88(%rbp)
    jmp label23615
    
label23620:
    movq $2, %rcx
    movq %rcx, -88(%rbp)
    jmp label23615
    
label23616:
    movq %rcx, -88(%rbp)
    jmp label23615
    
label23617:
    movq $1, %rcx
    jmp label23616
    
label23618:
    movq $2, %rcx
    jmp label23616
    
label23619:
    movq $3, %rax
    cmpq $1, %rax
    jg label23617
    jmp label23618
    
label23621:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23619
    jmp label23620
    
label23623:
    movq $2, %rcx
    jmp label23621
    
label23622:
    movq $1, %rcx
    jmp label23621
    
label23624:
    movq $3, %rax
    cmpq $1, %rax
    jg label23622
    jmp label23623
    
label23627:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23624
    jmp label23625
    
label23626:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23624
    jmp label23625
    
label23629:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23626
    jmp label23627
    
label23628:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23626
    jmp label23627
    
label23631:
    movq $0, %rcx
    cmpq $1, %rcx
    je label23628
    jmp label23629
    
label23630:
    movq $1, %rcx
    cmpq $1, %rcx
    je label23628
    jmp label23629
    
label23632:
    cmpq %rcx, %rdx
    jg label23630
    jmp label23631
    
label23637:
    movq $2, %rcx
    jmp label23632
    
label23633:
    jmp label23632
    
label23635:
    movq $2, %rcx
    jmp label23633
    
label23634:
    movq $1, %rcx
    jmp label23633
    
label23636:
    movq $3, %rax
    cmpq $1, %rax
    jg label23634
    jmp label23635
    
label23638:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23636
    jmp label23637
    
label23640:
    movq $2, %rcx
    jmp label23638
    
label23639:
    movq $1, %rcx
    jmp label23638
    
label23642:
    callq read_int
    movq %rax, %rdx
    movq $3, %rax
    cmpq $1, %rax
    jg label23639
    jmp label23640
    
label23643:
    cmpq $1, %rcx
    je label23641
    jmp label23642
    
label23645:
    movq $0, %rcx
    jmp label23643
    
label23644:
    movq $1, %rcx
    jmp label23643
    
label23646:
    cmpq $8, %rcx
    jg label23644
    jmp label23645
    
label23648:
    movq $9, %rcx
    jmp label23646
    
label23647:
    movq $8, %rcx
    jmp label23646
    
label23649:
    cmpq %rdx, %rcx
    jge label23647
    jmp label23648
    
label23654:
    movq $2, %rdx
    jmp label23649
    
label23650:
    jmp label23649
    
label23652:
    movq $2, %rdx
    jmp label23650
    
label23651:
    movq $1, %rdx
    jmp label23650
    
label23653:
    movq $3, %rax
    cmpq $1, %rax
    jg label23651
    jmp label23652
    
label23655:
    movq $3, %rax
    cmpq %rdx, %rax
    jg label23653
    jmp label23654
    
label23657:
    movq $2, %rdx
    jmp label23655
    
label23656:
    movq $1, %rdx
    jmp label23655
    
label23658:
    movq $3, %rax
    cmpq $1, %rax
    jg label23656
    jmp label23657
    
label23659:
    jmp label23658
    
label23661:
    movq $2, %rcx
    jmp label23659
    
label23660:
    movq $1, %rcx
    jmp label23659
    
label23662:
    movq $3, %rax
    cmpq $1, %rax
    jg label23660
    jmp label23661
    
label23663:
    movq $2, %rcx
    jmp label23658
    
label23664:
    movq $3, %rax
    cmpq %rcx, %rax
    jg label23662
    jmp label23663
    
label23665:
    movq $1, %rcx
    jmp label23664
    
label23666:
    movq $2, %rcx
    jmp label23664
    
start:
    movq $3, %rax
    cmpq $1, %rax
    jg label23665
    jmp label23666
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $56, %rsp
    jmp start
    
conclusion:
    addq $56, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_label23351:
	movq	$2, %rcx
	movq	%rcx, %rax
	jmp _conclusion

	.align 16
_label23355:
	movq	-72(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-64(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-56(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%r13, %rcx
	addq	%rdx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%r14, %rcx
	addq	%rdx, %rcx
	movq	-80(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%rbx, %rcx
	addq	%rdx, %rcx
	movq	%r12, %rdx
	addq	%rcx, %rdx
	movq	-96(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-88(%rbp), %rax
	addq	%rcx, %rax
	jmp _conclusion

	.align 16
_label23360:
	movq	$2, %rcx
	jmp _label23355

	.align 16
_label23356:
	jmp _label23355

	.align 16
_label23357:
	movq	$1, %rcx
	jmp _label23356

	.align 16
_label23358:
	movq	$2, %rcx
	jmp _label23356

	.align 16
_label23359:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23357
	jmp _label23358

	.align 16
_label23361:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23359
	jmp _label23360

	.align 16
_label23362:
	movq	$1, %rcx
	jmp _label23361

	.align 16
_label23363:
	movq	$2, %rcx
	jmp _label23361

	.align 16
_label23365:
	movq	$2, %rcx
	jmp _label23355

	.align 16
_label23364:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23362
	jmp _label23363

	.align 16
_label23366:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23364
	jmp _label23365

	.align 16
_label23367:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23364
	jmp _label23365

	.align 16
_label23369:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23366
	jmp _label23367

	.align 16
_label23368:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23366
	jmp _label23367

	.align 16
_label23370:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23368
	jmp _label23369

	.align 16
_label23371:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23368
	jmp _label23369

	.align 16
_label23372:
	cmpq	%rcx, %rdx
	jg _label23370
	jmp _label23371

	.align 16
_label23377:
	movq	$2, %rcx
	jmp _label23372

	.align 16
_label23373:
	jmp _label23372

	.align 16
_label23374:
	movq	$1, %rcx
	jmp _label23373

	.align 16
_label23375:
	movq	$2, %rcx
	jmp _label23373

	.align 16
_label23376:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23374
	jmp _label23375

	.align 16
_label23378:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23376
	jmp _label23377

	.align 16
_label23379:
	movq	$1, %rcx
	jmp _label23378

	.align 16
_label23347:
	movq	%rcx, %rax
	jmp _conclusion

	.align 16
_label23348:
	movq	$1, %rcx
	jmp _label23347

	.align 16
_label23349:
	movq	$2, %rcx
	jmp _label23347

	.align 16
_label23350:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23348
	jmp _label23349

	.align 16
_label23352:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23350
	jmp _label23351

	.align 16
_label23353:
	movq	$1, %rcx
	jmp _label23352

	.align 16
_label23354:
	movq	$2, %rcx
	jmp _label23352

	.align 16
_label23641:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23353
	jmp _label23354

	.align 16
_label23380:
	movq	$2, %rcx
	jmp _label23378

	.align 16
_label23381:
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23379
	jmp _label23380

	.align 16
_label23382:
	movq	%rcx, -72(%rbp)
	jmp _label23381

	.align 16
_label23383:
	movq	$1, %rcx
	jmp _label23382

	.align 16
_label23391:
	movq	$2, -72(%rbp)
	jmp _label23381

	.align 16
_label23386:
	movq	$2, %rcx
	movq	%rcx, -72(%rbp)
	jmp _label23381

	.align 16
_label23384:
	movq	$2, %rcx
	jmp _label23382

	.align 16
_label23385:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23383
	jmp _label23384

	.align 16
_label23387:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23385
	jmp _label23386

	.align 16
_label23388:
	movq	$1, %rcx
	jmp _label23387

	.align 16
_label23389:
	movq	$2, %rcx
	jmp _label23387

	.align 16
_label23390:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23388
	jmp _label23389

	.align 16
_label23392:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23390
	jmp _label23391

	.align 16
_label23393:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23390
	jmp _label23391

	.align 16
_label23394:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23392
	jmp _label23393

	.align 16
_label23395:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23392
	jmp _label23393

	.align 16
_label23397:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23394
	jmp _label23395

	.align 16
_label23396:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23394
	jmp _label23395

	.align 16
_label23398:
	cmpq	%rcx, %rdx
	jg _label23396
	jmp _label23397

	.align 16
_label23399:
	jmp _label23398

	.align 16
_label23403:
	movq	$2, %rcx
	jmp _label23398

	.align 16
_label23401:
	movq	$2, %rcx
	jmp _label23399

	.align 16
_label23400:
	movq	$1, %rcx
	jmp _label23399

	.align 16
_label23402:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23400
	jmp _label23401

	.align 16
_label23404:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23402
	jmp _label23403

	.align 16
_label23405:
	movq	$1, %rcx
	jmp _label23404

	.align 16
_label23406:
	movq	$2, %rcx
	jmp _label23404

	.align 16
_label23407:
	callq	_read_int
	movq	%rax, -64(%rbp)
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23405
	jmp _label23406

	.align 16
_label23408:
	movq	%rcx, -56(%rbp)
	jmp _label23407

	.align 16
_label23409:
	movq	$1, %rcx
	jmp _label23408

	.align 16
_label23410:
	movq	$2, %rcx
	jmp _label23408

	.align 16
_label23411:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23409
	jmp _label23410

	.align 16
_label23417:
	movq	$2, -56(%rbp)
	jmp _label23407

	.align 16
_label23412:
	movq	$2, %rcx
	movq	%rcx, -56(%rbp)
	jmp _label23407

	.align 16
_label23413:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23411
	jmp _label23412

	.align 16
_label23414:
	movq	$1, %rcx
	jmp _label23413

	.align 16
_label23415:
	movq	$2, %rcx
	jmp _label23413

	.align 16
_label23416:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23414
	jmp _label23415

	.align 16
_label23418:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23416
	jmp _label23417

	.align 16
_label23419:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23416
	jmp _label23417

	.align 16
_label23420:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23418
	jmp _label23419

	.align 16
_label23421:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23418
	jmp _label23419

	.align 16
_label23422:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23420
	jmp _label23421

	.align 16
_label23423:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23420
	jmp _label23421

	.align 16
_label23424:
	cmpq	%rcx, %rdx
	jg _label23422
	jmp _label23423

	.align 16
_label23429:
	movq	$2, %rcx
	jmp _label23424

	.align 16
_label23425:
	jmp _label23424

	.align 16
_label23426:
	movq	$1, %rcx
	jmp _label23425

	.align 16
_label23427:
	movq	$2, %rcx
	jmp _label23425

	.align 16
_label23428:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23426
	jmp _label23427

	.align 16
_label23430:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23428
	jmp _label23429

	.align 16
_label23432:
	movq	$2, %rcx
	jmp _label23430

	.align 16
_label23431:
	movq	$1, %rcx
	jmp _label23430

	.align 16
_label23433:
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23431
	jmp _label23432

	.align 16
_label23434:
	movq	%rcx, %r13
	jmp _label23433

	.align 16
_label23435:
	movq	$1, %rcx
	jmp _label23434

	.align 16
_label23436:
	movq	$2, %rcx
	jmp _label23434

	.align 16
_label23437:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23435
	jmp _label23436

	.align 16
_label23443:
	movq	$2, %r13
	jmp _label23433

	.align 16
_label23438:
	movq	$2, %rcx
	movq	%rcx, %r13
	jmp _label23433

	.align 16
_label23439:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23437
	jmp _label23438

	.align 16
_label23440:
	movq	$1, %rcx
	jmp _label23439

	.align 16
_label23441:
	movq	$2, %rcx
	jmp _label23439

	.align 16
_label23442:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23440
	jmp _label23441

	.align 16
_label23445:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23442
	jmp _label23443

	.align 16
_label23444:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23442
	jmp _label23443

	.align 16
_label23446:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23444
	jmp _label23445

	.align 16
_label23447:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23444
	jmp _label23445

	.align 16
_label23449:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23446
	jmp _label23447

	.align 16
_label23448:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23446
	jmp _label23447

	.align 16
_label23450:
	cmpq	%rcx, %rdx
	jg _label23448
	jmp _label23449

	.align 16
_label23451:
	jmp _label23450

	.align 16
_label23452:
	movq	$1, %rcx
	jmp _label23451

	.align 16
_label23453:
	movq	$2, %rcx
	jmp _label23451

	.align 16
_label23454:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23452
	jmp _label23453

	.align 16
_label23455:
	movq	$2, %rcx
	jmp _label23450

	.align 16
_label23456:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23454
	jmp _label23455

	.align 16
_label23457:
	movq	$1, %rcx
	jmp _label23456

	.align 16
_label23458:
	movq	$2, %rcx
	jmp _label23456

	.align 16
_label23459:
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23457
	jmp _label23458

	.align 16
_label23469:
	movq	$2, -48(%rbp)
	jmp _label23459

	.align 16
_label23460:
	movq	%rcx, -48(%rbp)
	jmp _label23459

	.align 16
_label23461:
	movq	$1, %rcx
	jmp _label23460

	.align 16
_label23462:
	movq	$2, %rcx
	jmp _label23460

	.align 16
_label23463:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23461
	jmp _label23462

	.align 16
_label23464:
	movq	$2, %rcx
	movq	%rcx, -48(%rbp)
	jmp _label23459

	.align 16
_label23465:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23463
	jmp _label23464

	.align 16
_label23466:
	movq	$1, %rcx
	jmp _label23465

	.align 16
_label23467:
	movq	$2, %rcx
	jmp _label23465

	.align 16
_label23468:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23466
	jmp _label23467

	.align 16
_label23470:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23468
	jmp _label23469

	.align 16
_label23471:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23468
	jmp _label23469

	.align 16
_label23472:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23470
	jmp _label23471

	.align 16
_label23473:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23470
	jmp _label23471

	.align 16
_label23474:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23472
	jmp _label23473

	.align 16
_label23475:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23472
	jmp _label23473

	.align 16
_label23476:
	cmpq	%rcx, %rdx
	jg _label23474
	jmp _label23475

	.align 16
_label23481:
	movq	$2, %rcx
	jmp _label23476

	.align 16
_label23477:
	jmp _label23476

	.align 16
_label23478:
	movq	$1, %rcx
	jmp _label23477

	.align 16
_label23479:
	movq	$2, %rcx
	jmp _label23477

	.align 16
_label23480:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23478
	jmp _label23479

	.align 16
_label23482:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23480
	jmp _label23481

	.align 16
_label23483:
	movq	$1, %rcx
	jmp _label23482

	.align 16
_label23484:
	movq	$2, %rcx
	jmp _label23482

	.align 16
_label23485:
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23483
	jmp _label23484

	.align 16
_label23495:
	movq	$2, %r14
	jmp _label23485

	.align 16
_label23490:
	movq	$2, %rcx
	movq	%rcx, %r14
	jmp _label23485

	.align 16
_label23486:
	movq	%rcx, %r14
	jmp _label23485

	.align 16
_label23488:
	movq	$2, %rcx
	jmp _label23486

	.align 16
_label23487:
	movq	$1, %rcx
	jmp _label23486

	.align 16
_label23489:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23487
	jmp _label23488

	.align 16
_label23491:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23489
	jmp _label23490

	.align 16
_label23492:
	movq	$1, %rcx
	jmp _label23491

	.align 16
_label23493:
	movq	$2, %rcx
	jmp _label23491

	.align 16
_label23494:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23492
	jmp _label23493

	.align 16
_label23496:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23494
	jmp _label23495

	.align 16
_label23497:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23494
	jmp _label23495

	.align 16
_label23498:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23496
	jmp _label23497

	.align 16
_label23499:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23496
	jmp _label23497

	.align 16
_label23500:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23498
	jmp _label23499

	.align 16
_label23501:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23498
	jmp _label23499

	.align 16
_label23502:
	cmpq	%rdx, %rcx
	jg _label23500
	jmp _label23501

	.align 16
_label23507:
	movq	$2, %rdx
	jmp _label23502

	.align 16
_label23503:
	jmp _label23502

	.align 16
_label23504:
	movq	$1, %rdx
	jmp _label23503

	.align 16
_label23505:
	movq	$2, %rdx
	jmp _label23503

	.align 16
_label23506:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23504
	jmp _label23505

	.align 16
_label23508:
	movq	$3, %rax
	cmpq	%rdx, %rax
	jg _label23506
	jmp _label23507

	.align 16
_label23509:
	movq	$1, %rdx
	jmp _label23508

	.align 16
_label23510:
	movq	$2, %rdx
	jmp _label23508

	.align 16
_label23511:
	callq	_read_int
	movq	%rax, -80(%rbp)
	callq	_read_int
	movq	%rax, %rcx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23509
	jmp _label23510

	.align 16
_label23512:
	jmp _label23511

	.align 16
_label23513:
	movq	$1, %rcx
	jmp _label23512

	.align 16
_label23514:
	movq	$2, %rcx
	jmp _label23512

	.align 16
_label23515:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23513
	jmp _label23514

	.align 16
_label23521:
	movq	$2, %rcx
	jmp _label23511

	.align 16
_label23516:
	movq	$2, %rcx
	jmp _label23511

	.align 16
_label23517:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23515
	jmp _label23516

	.align 16
_label23519:
	movq	$2, %rcx
	jmp _label23517

	.align 16
_label23518:
	movq	$1, %rcx
	jmp _label23517

	.align 16
_label23520:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23518
	jmp _label23519

	.align 16
_label23523:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23520
	jmp _label23521

	.align 16
_label23522:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23520
	jmp _label23521

	.align 16
_label23525:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23522
	jmp _label23523

	.align 16
_label23524:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23522
	jmp _label23523

	.align 16
_label23527:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23524
	jmp _label23525

	.align 16
_label23526:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23524
	jmp _label23525

	.align 16
_label23528:
	cmpq	%rcx, %rdx
	jg _label23526
	jmp _label23527

	.align 16
_label23529:
	jmp _label23528

	.align 16
_label23531:
	movq	$2, %rcx
	jmp _label23529

	.align 16
_label23530:
	movq	$1, %rcx
	jmp _label23529

	.align 16
_label23532:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23530
	jmp _label23531

	.align 16
_label23533:
	movq	$2, %rcx
	jmp _label23528

	.align 16
_label23534:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23532
	jmp _label23533

	.align 16
_label23536:
	movq	$2, %rcx
	jmp _label23534

	.align 16
_label23535:
	movq	$1, %rcx
	jmp _label23534

	.align 16
_label23537:
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23535
	jmp _label23536

	.align 16
_label23538:
	movq	%rcx, %rbx
	jmp _label23537

	.align 16
_label23539:
	movq	$1, %rcx
	jmp _label23538

	.align 16
_label23540:
	movq	$2, %rcx
	jmp _label23538

	.align 16
_label23541:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23539
	jmp _label23540

	.align 16
_label23547:
	movq	$2, %rbx
	jmp _label23537

	.align 16
_label23542:
	movq	$2, %rcx
	movq	%rcx, %rbx
	jmp _label23537

	.align 16
_label23543:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23541
	jmp _label23542

	.align 16
_label23545:
	movq	$2, %rcx
	jmp _label23543

	.align 16
_label23544:
	movq	$1, %rcx
	jmp _label23543

	.align 16
_label23546:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23544
	jmp _label23545

	.align 16
_label23549:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23546
	jmp _label23547

	.align 16
_label23548:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23546
	jmp _label23547

	.align 16
_label23551:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23548
	jmp _label23549

	.align 16
_label23550:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23548
	jmp _label23549

	.align 16
_label23553:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23550
	jmp _label23551

	.align 16
_label23552:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23550
	jmp _label23551

	.align 16
_label23554:
	cmpq	%rcx, %rdx
	jg _label23552
	jmp _label23553

	.align 16
_label23559:
	movq	$2, %rcx
	jmp _label23554

	.align 16
_label23555:
	jmp _label23554

	.align 16
_label23557:
	movq	$2, %rcx
	jmp _label23555

	.align 16
_label23556:
	movq	$1, %rcx
	jmp _label23555

	.align 16
_label23558:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23556
	jmp _label23557

	.align 16
_label23560:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23558
	jmp _label23559

	.align 16
_label23561:
	movq	$1, %rcx
	jmp _label23560

	.align 16
_label23562:
	movq	$2, %rcx
	jmp _label23560

	.align 16
_label23563:
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23561
	jmp _label23562

	.align 16
_label23573:
	movq	$2, %r12
	jmp _label23563

	.align 16
_label23568:
	movq	$2, %rcx
	movq	%rcx, %r12
	jmp _label23563

	.align 16
_label23564:
	movq	%rcx, %r12
	jmp _label23563

	.align 16
_label23565:
	movq	$1, %rcx
	jmp _label23564

	.align 16
_label23566:
	movq	$2, %rcx
	jmp _label23564

	.align 16
_label23567:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23565
	jmp _label23566

	.align 16
_label23569:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23567
	jmp _label23568

	.align 16
_label23571:
	movq	$2, %rcx
	jmp _label23569

	.align 16
_label23570:
	movq	$1, %rcx
	jmp _label23569

	.align 16
_label23572:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23570
	jmp _label23571

	.align 16
_label23575:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23572
	jmp _label23573

	.align 16
_label23574:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23572
	jmp _label23573

	.align 16
_label23577:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23574
	jmp _label23575

	.align 16
_label23576:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23574
	jmp _label23575

	.align 16
_label23579:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23576
	jmp _label23577

	.align 16
_label23578:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23576
	jmp _label23577

	.align 16
_label23580:
	cmpq	%rcx, %rdx
	jg _label23578
	jmp _label23579

	.align 16
_label23585:
	movq	$2, %rcx
	jmp _label23580

	.align 16
_label23581:
	jmp _label23580

	.align 16
_label23583:
	movq	$2, %rcx
	jmp _label23581

	.align 16
_label23582:
	movq	$1, %rcx
	jmp _label23581

	.align 16
_label23584:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23582
	jmp _label23583

	.align 16
_label23586:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23584
	jmp _label23585

	.align 16
_label23588:
	movq	$2, %rcx
	jmp _label23586

	.align 16
_label23587:
	movq	$1, %rcx
	jmp _label23586

	.align 16
_label23589:
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23587
	jmp _label23588

	.align 16
_label23594:
	movq	$2, %rcx
	movq	%rcx, -96(%rbp)
	jmp _label23589

	.align 16
_label23590:
	movq	%rcx, -96(%rbp)
	jmp _label23589

	.align 16
_label23592:
	movq	$2, %rcx
	jmp _label23590

	.align 16
_label23591:
	movq	$1, %rcx
	jmp _label23590

	.align 16
_label23593:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23591
	jmp _label23592

	.align 16
_label23595:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23593
	jmp _label23594

	.align 16
_label23597:
	movq	$2, %rcx
	jmp _label23595

	.align 16
_label23596:
	movq	$1, %rcx
	jmp _label23595

	.align 16
_label23598:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23596
	jmp _label23597

	.align 16
_label23599:
	movq	$2, -96(%rbp)
	jmp _label23589

	.align 16
_label23601:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23598
	jmp _label23599

	.align 16
_label23600:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23598
	jmp _label23599

	.align 16
_label23603:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23600
	jmp _label23601

	.align 16
_label23602:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23600
	jmp _label23601

	.align 16
_label23605:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23602
	jmp _label23603

	.align 16
_label23604:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23602
	jmp _label23603

	.align 16
_label23606:
	cmpq	%rcx, %rdx
	jg _label23604
	jmp _label23605

	.align 16
_label23611:
	movq	$2, %rcx
	jmp _label23606

	.align 16
_label23607:
	jmp _label23606

	.align 16
_label23609:
	movq	$2, %rcx
	jmp _label23607

	.align 16
_label23608:
	movq	$1, %rcx
	jmp _label23607

	.align 16
_label23610:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23608
	jmp _label23609

	.align 16
_label23612:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23610
	jmp _label23611

	.align 16
_label23613:
	movq	$1, %rcx
	jmp _label23612

	.align 16
_label23614:
	movq	$2, %rcx
	jmp _label23612

	.align 16
_label23615:
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23613
	jmp _label23614

	.align 16
_label23625:
	movq	$2, -88(%rbp)
	jmp _label23615

	.align 16
_label23620:
	movq	$2, %rcx
	movq	%rcx, -88(%rbp)
	jmp _label23615

	.align 16
_label23616:
	movq	%rcx, -88(%rbp)
	jmp _label23615

	.align 16
_label23617:
	movq	$1, %rcx
	jmp _label23616

	.align 16
_label23618:
	movq	$2, %rcx
	jmp _label23616

	.align 16
_label23619:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23617
	jmp _label23618

	.align 16
_label23621:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23619
	jmp _label23620

	.align 16
_label23623:
	movq	$2, %rcx
	jmp _label23621

	.align 16
_label23622:
	movq	$1, %rcx
	jmp _label23621

	.align 16
_label23624:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23622
	jmp _label23623

	.align 16
_label23627:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23624
	jmp _label23625

	.align 16
_label23626:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23624
	jmp _label23625

	.align 16
_label23629:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23626
	jmp _label23627

	.align 16
_label23628:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23626
	jmp _label23627

	.align 16
_label23631:
	movq	$0, %rcx
	cmpq	$1, %rcx
	je _label23628
	jmp _label23629

	.align 16
_label23630:
	movq	$1, %rcx
	cmpq	$1, %rcx
	je _label23628
	jmp _label23629

	.align 16
_label23632:
	cmpq	%rcx, %rdx
	jg _label23630
	jmp _label23631

	.align 16
_label23637:
	movq	$2, %rcx
	jmp _label23632

	.align 16
_label23633:
	jmp _label23632

	.align 16
_label23635:
	movq	$2, %rcx
	jmp _label23633

	.align 16
_label23634:
	movq	$1, %rcx
	jmp _label23633

	.align 16
_label23636:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23634
	jmp _label23635

	.align 16
_label23638:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23636
	jmp _label23637

	.align 16
_label23640:
	movq	$2, %rcx
	jmp _label23638

	.align 16
_label23639:
	movq	$1, %rcx
	jmp _label23638

	.align 16
_label23642:
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23639
	jmp _label23640

	.align 16
_label23643:
	cmpq	$1, %rcx
	je _label23641
	jmp _label23642

	.align 16
_label23645:
	movq	$0, %rcx
	jmp _label23643

	.align 16
_label23644:
	movq	$1, %rcx
	jmp _label23643

	.align 16
_label23646:
	cmpq	$8, %rcx
	jg _label23644
	jmp _label23645

	.align 16
_label23648:
	movq	$9, %rcx
	jmp _label23646

	.align 16
_label23647:
	movq	$8, %rcx
	jmp _label23646

	.align 16
_label23649:
	cmpq	%rdx, %rcx
	jge _label23647
	jmp _label23648

	.align 16
_label23654:
	movq	$2, %rdx
	jmp _label23649

	.align 16
_label23650:
	jmp _label23649

	.align 16
_label23652:
	movq	$2, %rdx
	jmp _label23650

	.align 16
_label23651:
	movq	$1, %rdx
	jmp _label23650

	.align 16
_label23653:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23651
	jmp _label23652

	.align 16
_label23655:
	movq	$3, %rax
	cmpq	%rdx, %rax
	jg _label23653
	jmp _label23654

	.align 16
_label23657:
	movq	$2, %rdx
	jmp _label23655

	.align 16
_label23656:
	movq	$1, %rdx
	jmp _label23655

	.align 16
_label23658:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23656
	jmp _label23657

	.align 16
_label23659:
	jmp _label23658

	.align 16
_label23661:
	movq	$2, %rcx
	jmp _label23659

	.align 16
_label23660:
	movq	$1, %rcx
	jmp _label23659

	.align 16
_label23662:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23660
	jmp _label23661

	.align 16
_label23663:
	movq	$2, %rcx
	jmp _label23658

	.align 16
_label23664:
	movq	$3, %rax
	cmpq	%rcx, %rax
	jg _label23662
	jmp _label23663

	.align 16
_label23665:
	movq	$1, %rcx
	jmp _label23664

	.align 16
_label23666:
	movq	$2, %rcx
	jmp _label23664

	.align 16
_start:
	movq	$3, %rax
	cmpq	$1, %rax
	jg _label23665
	jmp _label23666

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$56, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


23 success(es) 0 failure(s) 0 error(s) 23 test(s) run
0
testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_01.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
42


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
42


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
42


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
42


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    return 42;



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
start:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rax %rsp))
movq $42, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$42, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_02.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ 20 22)


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 20 22)


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 20 22)


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 20 22)


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    return (+ 20 22);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
start:
    movq $20, %rax
    addq $22, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set %rax %rsp) (set %rax %rsp))
movq $20, %rax
addq $22, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $20, %rax
    addq $22, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $20, %rax
    addq $22, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $20, %rax
    addq $22, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
'()
start:
    movq $20, %rax
    addq $22, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$20, %rax
	addq	$22, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_03.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x 41])
   (+ x 1))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x 41])
   (+ x 1))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23668 41])
   (+ x23668 1))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23668 41])
   (+ x23668 1))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x23668 = 41;
    return (+ x23668 1);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23668 : 'Integer, 
start:
    movq $41, x23668
    movq x23668, %rax
    addq $1, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23668 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list (set %rsp) (set x23668 %rsp) (set %rax %rsp) (set %rax %rsp))
movq $41, x23668
movq x23668, %rax
addq $1, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23668 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $41, x23668
    movq x23668, %rax
    addq $1, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23668 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x23668 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $41, %rcx
    movq %rcx, %rax
    addq $1, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23668 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x23668 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $41, %rcx
    movq %rcx, %rax
    addq $1, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23668 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons x23668 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $41, %rcx
    movq %rcx, %rax
    addq $1, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$41, %rcx
	movq	%rcx, %rax
	addq	$1, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_04.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x 41])
   (+ x (let ([x 30])
           x)))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x 41])
   (+ x (let ([x 30])
           x)))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23670 41])
   (+ x23670 (let ([x23671 30])
                x23671)))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23670 41])
   (let ([x23671 30])
      (let ([temp23673 x23671])
         (+ x23670 temp23673))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x23670 = 41;
    x23671 = 30;
    temp23673 = x23671;
    return (+ x23670 temp23673);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23673 : 'Integer, x23671 : 'Integer, x23670 : 'Integer, 
start:
    movq $41, x23670
    movq $30, x23671
    movq x23671, temp23673
    movq x23670, %rax
    addq temp23673, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23673 : 'Integer, x23671 : 'Integer, x23670 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set x23670 %rsp)
 (set x23670 x23671 %rsp)
 (set x23670 temp23673 %rsp)
 (set %rax temp23673 %rsp)
 (set %rax %rsp))
movq $41, x23670
movq $30, x23671
movq x23671, temp23673
movq x23670, %rax
addq temp23673, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23673 : 'Integer, x23671 : 'Integer, x23670 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x23671 temp23673) (list temp23673 x23671))
start:
    movq $41, x23670
    movq $30, x23671
    movq x23671, temp23673
    movq x23670, %rax
    addq temp23673, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23673 : 'Integer, x23671 : 'Integer, x23670 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x23671 temp23673) (list temp23673 x23671))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23673 0)
 (cons x23670 1)
 (cons x23671 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $41, %rdx
    movq $30, %rcx
    movq %rcx, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23673 : 'Integer, x23671 : 'Integer, x23670 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x23671 temp23673) (list temp23673 x23671))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23673 0)
 (cons x23670 1)
 (cons x23671 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $41, %rdx
    movq $30, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23673 : 'Integer, x23671 : 'Integer, x23670 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x23671 temp23673) (list temp23673 x23671))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23673 0)
 (cons x23670 1)
 (cons x23671 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $41, %rdx
    movq $30, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$41, %rdx
	movq	$30, %rcx
	movq	%rdx, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_05.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (let ([x 32])
            (+ x 1))])
   (+ (let ([x 36])
         (+ (let ([x 33])
               x) x)) x))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (let ([x 32])
            (+ x 1))])
   (+ (let ([x 36])
         (+ (let ([x 33])
               x) x)) x))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23674 (let ([x23675 32])
                 (+ x23675 1))])
   (+ (let ([x23676 36])
         (+ (let ([x23677 33])
               x23677) x23676)) x23674))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23674 (let ([x23675 32])
                 (+ x23675 1))])
   (let ([x23676 36])
      (let ([temp23680 (let ([x23677 33])
                          (let ([temp23682 x23677])
                             (+ temp23682 x23676)))])
         (+ temp23680 x23674))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x23675 = 32;
    x23674 = (+ x23675 1);
    x23676 = 36;
    x23677 = 33;
    temp23682 = x23677;
    temp23680 = (+ temp23682 x23676);
    return (+ temp23680 x23674);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23680 : 'Integer, x23675 : 'Integer, temp23682 : 'Integer, x23674 : 'Integer, x23677 : 'Integer, x23676 : 'Integer, 
start:
    movq $32, x23675
    movq x23675, x23674
    addq $1, x23674
    movq $36, x23676
    movq $33, x23677
    movq x23677, temp23682
    movq temp23682, temp23680
    addq x23676, temp23680
    movq temp23680, %rax
    addq x23674, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23680 : 'Integer, x23675 : 'Integer, temp23682 : 'Integer, x23674 : 'Integer, x23677 : 'Integer, x23676 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set x23675 %rsp)
 (set x23674 %rsp)
 (set x23674 %rsp)
 (set x23674 x23676 %rsp)
 (set x23674 x23676 x23677 %rsp)
 (set x23674 x23676 temp23682 %rsp)
 (set x23674 x23676 temp23680 %rsp)
 (set x23674 temp23680 %rsp)
 (set %rax x23674 %rsp)
 (set %rax %rsp))
movq $32, x23675
movq x23675, x23674
addq $1, x23674
movq $36, x23676
movq $33, x23677
movq x23677, temp23682
movq temp23682, temp23680
addq x23676, temp23680
movq temp23680, %rax
addq x23674, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23680 : 'Integer, x23675 : 'Integer, temp23682 : 'Integer, x23674 : 'Integer, x23677 : 'Integer, x23676 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x23677 temp23682)
 (list temp23680 temp23682)
 (list x23675 x23674)
 (list temp23682 x23677)
 (list temp23682 temp23680)
 (list x23674 x23675))
start:
    movq $32, x23675
    movq x23675, x23674
    addq $1, x23674
    movq $36, x23676
    movq $33, x23677
    movq x23677, temp23682
    movq temp23682, temp23680
    addq x23676, temp23680
    movq temp23680, %rax
    addq x23674, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23680 : 'Integer, x23675 : 'Integer, temp23682 : 'Integer, x23674 : 'Integer, x23677 : 'Integer, x23676 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x23677 temp23682)
 (list temp23680 temp23682)
 (list x23675 x23674)
 (list temp23682 x23677)
 (list temp23682 temp23680)
 (list x23674 x23675))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons x23674 0)
 (cons x23676 1)
 (cons x23677 2)
 (cons temp23682 2)
 (cons temp23680 2)
 (cons x23675 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi))
start:
    movq $32, %rcx
    movq %rcx, %rcx
    addq $1, %rcx
    movq $36, %rdx
    movq $33, %rsi
    movq %rsi, %rsi
    movq %rsi, %rsi
    addq %rdx, %rsi
    movq %rsi, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23680 : 'Integer, x23675 : 'Integer, temp23682 : 'Integer, x23674 : 'Integer, x23677 : 'Integer, x23676 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x23677 temp23682)
 (list temp23680 temp23682)
 (list x23675 x23674)
 (list temp23682 x23677)
 (list temp23682 temp23680)
 (list x23674 x23675))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons x23674 0)
 (cons x23676 1)
 (cons x23677 2)
 (cons temp23682 2)
 (cons temp23680 2)
 (cons x23675 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi))
start:
    movq $32, %rcx
    addq $1, %rcx
    movq $36, %rdx
    movq $33, %rsi
    addq %rdx, %rsi
    movq %rsi, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23680 : 'Integer, x23675 : 'Integer, temp23682 : 'Integer, x23674 : 'Integer, x23677 : 'Integer, x23676 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x23677 temp23682)
 (list temp23680 temp23682)
 (list x23675 x23674)
 (list temp23682 x23677)
 (list temp23682 temp23680)
 (list x23674 x23675))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons x23674 0)
 (cons x23676 1)
 (cons x23677 2)
 (cons temp23682 2)
 (cons temp23680 2)
 (cons x23675 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi))
start:
    movq $32, %rcx
    addq $1, %rcx
    movq $36, %rdx
    movq $33, %rsi
    addq %rdx, %rsi
    movq %rsi, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$32, %rcx
	addq	$1, %rcx
	movq	$36, %rdx
	movq	$33, %rsi
	addq	%rdx, %rsi
	movq	%rsi, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_06.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (let ([x 32])
            (+ (- x) 1))])
   (+ (let ([x (+ x 2)])
         (+ (let ([x 33])
               (+ (let ([x 36])
                     (+ (let ([x 33])
                           x) x)) (- x))) x)) (+ 100 x)))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (let ([x 32])
            (+ (- x) 1))])
   (+ (let ([x (+ x 2)])
         (+ (let ([x 33])
               (+ (let ([x 36])
                     (+ (let ([x 33])
                           x) x)) (- x))) x)) (+ 100 x)))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23683 (let ([x23684 32])
                 (+ (- x23684) 1))])
   (+ (let ([x23685 (+ x23683 2)])
         (+ (let ([x23686 33])
               (+ (let ([x23687 36])
                     (+ (let ([x23688 33])
                           x23688) x23687)) (- x23686))) x23685)) (+ 100 x23683)))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23683 (let ([x23684 32])
                 (let ([temp23690 (- x23684)])
                    (+ temp23690 1)))])
   (let ([x23685 (+ x23683 2)])
      (let ([temp23692 (let ([x23686 33])
                          (let ([temp23695 (let ([x23687 36])
                                              (let ([temp23697 (let ([x23688 33])
                                                                  (let ([temp23699 x23688])
                                                                     (+ temp23699 x23687)))])
                                                 (let ([temp23700 (- x23686)])
                                                    (+ temp23697 temp23700))))])
                             (+ temp23695 x23685)))])
         (let ([temp23701 (+ 100 x23683)])
            (+ temp23692 temp23701)))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x23684 = 32;
    temp23690 = (- x23684);
    x23683 = (+ temp23690 1);
    x23685 = (+ x23683 2);
    x23686 = 33;
    x23687 = 36;
    x23688 = 33;
    temp23699 = x23688;
    temp23697 = (+ temp23699 x23687);
    temp23700 = (- x23686);
    temp23695 = (+ temp23697 temp23700);
    temp23692 = (+ temp23695 x23685);
    temp23701 = (+ 100 x23683);
    return (+ temp23692 temp23701);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23688 : 'Integer, temp23690 : 'Integer, temp23701 : 'Integer, x23685 : 'Integer, temp23700 : 'Integer, x23684 : 'Integer, x23687 : 'Integer, x23686 : 'Integer, temp23697 : 'Integer, x23683 : 'Integer, temp23699 : 'Integer, temp23692 : 'Integer, temp23695 : 'Integer, 
start:
    movq $32, x23684
    movq x23684, temp23690
    negq temp23690
    movq temp23690, x23683
    addq $1, x23683
    movq x23683, x23685
    addq $2, x23685
    movq $33, x23686
    movq $36, x23687
    movq $33, x23688
    movq x23688, temp23699
    movq temp23699, temp23697
    addq x23687, temp23697
    movq x23686, temp23700
    negq temp23700
    movq temp23697, temp23695
    addq temp23700, temp23695
    movq temp23695, temp23692
    addq x23685, temp23692
    movq $100, temp23701
    addq x23683, temp23701
    movq temp23692, %rax
    addq temp23701, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23688 : 'Integer, temp23690 : 'Integer, temp23701 : 'Integer, x23685 : 'Integer, temp23700 : 'Integer, x23684 : 'Integer, x23687 : 'Integer, x23686 : 'Integer, temp23697 : 'Integer, x23683 : 'Integer, temp23699 : 'Integer, temp23692 : 'Integer, temp23695 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set x23684 %rsp)
 (set temp23690 %rsp)
 (set temp23690 %rsp)
 (set %rsp x23683)
 (set %rsp x23683)
 (set x23685 %rsp x23683)
 (set x23685 %rsp x23683)
 (set x23685 x23686 %rsp x23683)
 (set x23685 x23686 x23687 %rsp x23683)
 (set x23685 x23686 x23687 x23688 %rsp x23683)
 (set x23685 x23686 x23687 %rsp x23683 temp23699)
 (set x23685 x23686 x23687 temp23697 %rsp x23683)
 (set x23685 x23686 temp23697 %rsp x23683)
 (set temp23700 x23685 temp23697 %rsp x23683)
 (set temp23700 x23685 temp23697 %rsp x23683)
 (set temp23700 x23685 temp23695 %rsp x23683)
 (set x23685 temp23695 %rsp x23683)
 (set x23685 temp23692 %rsp x23683)
 (set temp23692 %rsp x23683)
 (set temp23701 temp23692 %rsp x23683)
 (set temp23701 temp23692 %rsp)
 (set %rax temp23701 %rsp)
 (set %rax %rsp))
movq $32, x23684
movq x23684, temp23690
negq temp23690
movq temp23690, x23683
addq $1, x23683
movq x23683, x23685
addq $2, x23685
movq $33, x23686
movq $36, x23687
movq $33, x23688
movq x23688, temp23699
movq temp23699, temp23697
addq x23687, temp23697
movq x23686, temp23700
negq temp23700
movq temp23697, temp23695
addq temp23700, temp23695
movq temp23695, temp23692
addq x23685, temp23692
movq $100, temp23701
addq x23683, temp23701
movq temp23692, %rax
addq temp23701, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23688 : 'Integer, temp23690 : 'Integer, temp23701 : 'Integer, x23685 : 'Integer, temp23700 : 'Integer, x23684 : 'Integer, x23687 : 'Integer, x23686 : 'Integer, temp23697 : 'Integer, x23683 : 'Integer, temp23699 : 'Integer, temp23692 : 'Integer, temp23695 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23692 temp23695)
 (list temp23695 temp23692)
 (list temp23695 temp23697)
 (list temp23697 temp23695)
 (list temp23697 temp23699)
 (list x23683 x23685)
 (list x23683 temp23690)
 (list temp23699 x23688)
 (list temp23699 temp23697)
 (list x23685 x23683)
 (list x23684 temp23690)
 (list temp23700 x23686)
 (list x23686 temp23700)
 (list x23688 temp23699)
 (list temp23690 x23684)
 (list temp23690 x23683))
start:
    movq $32, x23684
    movq x23684, temp23690
    negq temp23690
    movq temp23690, x23683
    addq $1, x23683
    movq x23683, x23685
    addq $2, x23685
    movq $33, x23686
    movq $36, x23687
    movq $33, x23688
    movq x23688, temp23699
    movq temp23699, temp23697
    addq x23687, temp23697
    movq x23686, temp23700
    negq temp23700
    movq temp23697, temp23695
    addq temp23700, temp23695
    movq temp23695, temp23692
    addq x23685, temp23692
    movq $100, temp23701
    addq x23683, temp23701
    movq temp23692, %rax
    addq temp23701, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23688 : 'Integer, temp23690 : 'Integer, temp23701 : 'Integer, x23685 : 'Integer, temp23700 : 'Integer, x23684 : 'Integer, x23687 : 'Integer, x23686 : 'Integer, temp23697 : 'Integer, x23683 : 'Integer, temp23699 : 'Integer, temp23692 : 'Integer, temp23695 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23692 temp23695)
 (list temp23695 temp23692)
 (list temp23695 temp23697)
 (list temp23697 temp23695)
 (list temp23697 temp23699)
 (list x23683 x23685)
 (list x23683 temp23690)
 (list temp23699 x23688)
 (list temp23699 temp23697)
 (list x23685 x23683)
 (list x23684 temp23690)
 (list temp23700 x23686)
 (list x23686 temp23700)
 (list x23688 temp23699)
 (list temp23690 x23684)
 (list temp23690 x23683))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp23701 0)
 (cons temp23692 1)
 (cons x23683 2)
 (cons x23685 0)
 (cons temp23695 1)
 (cons temp23700 3)
 (cons temp23697 1)
 (cons x23686 3)
 (cons x23687 4)
 (cons temp23699 1)
 (cons x23688 1)
 (cons x23684 0)
 (cons temp23690 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi) (cons 3 %rdi) (cons 4 %r8))
start:
    movq $32, %rcx
    movq %rcx, %rcx
    negq %rcx
    movq %rcx, %rsi
    addq $1, %rsi
    movq %rsi, %rcx
    addq $2, %rcx
    movq $33, %rdi
    movq $36, %r8
    movq $33, %rdx
    movq %rdx, %rdx
    movq %rdx, %rdx
    addq %r8, %rdx
    movq %rdi, %rdi
    negq %rdi
    movq %rdx, %rdx
    addq %rdi, %rdx
    movq %rdx, %rdx
    addq %rcx, %rdx
    movq $100, %rcx
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23688 : 'Integer, temp23690 : 'Integer, temp23701 : 'Integer, x23685 : 'Integer, temp23700 : 'Integer, x23684 : 'Integer, x23687 : 'Integer, x23686 : 'Integer, temp23697 : 'Integer, x23683 : 'Integer, temp23699 : 'Integer, temp23692 : 'Integer, temp23695 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23692 temp23695)
 (list temp23695 temp23692)
 (list temp23695 temp23697)
 (list temp23697 temp23695)
 (list temp23697 temp23699)
 (list x23683 x23685)
 (list x23683 temp23690)
 (list temp23699 x23688)
 (list temp23699 temp23697)
 (list x23685 x23683)
 (list x23684 temp23690)
 (list temp23700 x23686)
 (list x23686 temp23700)
 (list x23688 temp23699)
 (list temp23690 x23684)
 (list temp23690 x23683))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp23701 0)
 (cons temp23692 1)
 (cons x23683 2)
 (cons x23685 0)
 (cons temp23695 1)
 (cons temp23700 3)
 (cons temp23697 1)
 (cons x23686 3)
 (cons x23687 4)
 (cons temp23699 1)
 (cons x23688 1)
 (cons x23684 0)
 (cons temp23690 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi) (cons 3 %rdi) (cons 4 %r8))
start:
    movq $32, %rcx
    negq %rcx
    movq %rcx, %rsi
    addq $1, %rsi
    movq %rsi, %rcx
    addq $2, %rcx
    movq $33, %rdi
    movq $36, %r8
    movq $33, %rdx
    addq %r8, %rdx
    negq %rdi
    addq %rdi, %rdx
    addq %rcx, %rdx
    movq $100, %rcx
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23688 : 'Integer, temp23690 : 'Integer, temp23701 : 'Integer, x23685 : 'Integer, temp23700 : 'Integer, x23684 : 'Integer, x23687 : 'Integer, x23686 : 'Integer, temp23697 : 'Integer, x23683 : 'Integer, temp23699 : 'Integer, temp23692 : 'Integer, temp23695 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23692 temp23695)
 (list temp23695 temp23692)
 (list temp23695 temp23697)
 (list temp23697 temp23695)
 (list temp23697 temp23699)
 (list x23683 x23685)
 (list x23683 temp23690)
 (list temp23699 x23688)
 (list temp23699 temp23697)
 (list x23685 x23683)
 (list x23684 temp23690)
 (list temp23700 x23686)
 (list x23686 temp23700)
 (list x23688 temp23699)
 (list temp23690 x23684)
 (list temp23690 x23683))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp23701 0)
 (cons temp23692 1)
 (cons x23683 2)
 (cons x23685 0)
 (cons temp23695 1)
 (cons temp23700 3)
 (cons temp23697 1)
 (cons x23686 3)
 (cons x23687 4)
 (cons temp23699 1)
 (cons x23688 1)
 (cons x23684 0)
 (cons temp23690 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi) (cons 3 %rdi) (cons 4 %r8))
start:
    movq $32, %rcx
    negq %rcx
    movq %rcx, %rsi
    addq $1, %rsi
    movq %rsi, %rcx
    addq $2, %rcx
    movq $33, %rdi
    movq $36, %r8
    movq $33, %rdx
    addq %r8, %rdx
    negq %rdi
    addq %rdi, %rdx
    addq %rcx, %rdx
    movq $100, %rcx
    addq %rsi, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$32, %rcx
	negq	%rcx
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	%rsi, %rcx
	addq	$2, %rcx
	movq	$33, %rdi
	movq	$36, %r8
	movq	$33, %rdx
	addq	%r8, %rdx
	negq	%rdi
	addq	%rdi, %rdx
	addq	%rcx, %rdx
	movq	$100, %rcx
	addq	%rsi, %rcx
	movq	%rdx, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_07.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ 1 (let ([x 5])
        (let ([x (+ 1 x)])
           x)))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 1 (let ([x 5])
        (let ([x (+ 1 x)])
           x)))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 1 (let ([x23702 5])
        (let ([x23703 (+ 1 x23702)])
           x23703)))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23702 5])
   (let ([temp23705 (let ([x23703 (+ 1 x23702)])
                       x23703)])
      (+ 1 temp23705)))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x23702 = 5;
    x23703 = (+ 1 x23702);
    temp23705 = x23703;
    return (+ 1 temp23705);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23705 : 'Integer, x23703 : 'Integer, x23702 : 'Integer, 
start:
    movq $5, x23702
    movq $1, x23703
    addq x23702, x23703
    movq x23703, temp23705
    movq $1, %rax
    addq temp23705, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23705 : 'Integer, x23703 : 'Integer, x23702 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set x23702 %rsp)
 (set x23702 x23703 %rsp)
 (set x23703 %rsp)
 (set temp23705 %rsp)
 (set %rax temp23705 %rsp)
 (set %rax %rsp))
movq $5, x23702
movq $1, x23703
addq x23702, x23703
movq x23703, temp23705
movq $1, %rax
addq temp23705, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23705 : 'Integer, x23703 : 'Integer, x23702 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x23703 temp23705) (list temp23705 x23703))
start:
    movq $5, x23702
    movq $1, x23703
    addq x23702, x23703
    movq x23703, temp23705
    movq $1, %rax
    addq temp23705, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23705 : 'Integer, x23703 : 'Integer, x23702 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x23703 temp23705) (list temp23705 x23703))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23705 0)
 (cons x23702 0)
 (cons x23703 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $5, %rcx
    movq $1, %rdx
    addq %rcx, %rdx
    movq %rdx, %rcx
    movq $1, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23705 : 'Integer, x23703 : 'Integer, x23702 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x23703 temp23705) (list temp23705 x23703))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23705 0)
 (cons x23702 0)
 (cons x23703 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $5, %rcx
    movq $1, %rdx
    addq %rcx, %rdx
    movq %rdx, %rcx
    movq $1, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23705 : 'Integer, x23703 : 'Integer, x23702 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list x23703 temp23705) (list temp23705 x23703))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23705 0)
 (cons x23702 0)
 (cons x23703 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $5, %rcx
    movq $1, %rdx
    addq %rcx, %rdx
    movq %rdx, %rcx
    movq $1, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$5, %rcx
	movq	$1, %rdx
	addq	%rcx, %rdx
	movq	%rdx, %rcx
	movq	$1, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_08.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (let ([x 10])
            x)])
   (+ x (let ([y 20])
           (+ y 21))))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (let ([x 10])
            x)])
   (+ x (let ([y 20])
           (+ y 21))))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23707 (let ([x23708 10])
                 x23708)])
   (+ x23707 (let ([y23709 20])
                (+ y23709 21))))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23707 (let ([x23708 10])
                 x23708)])
   (let ([y23709 20])
      (let ([temp23711 (+ y23709 21)])
         (+ x23707 temp23711))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x23708 = 10;
    x23707 = x23708;
    y23709 = 20;
    temp23711 = (+ y23709 21);
    return (+ x23707 temp23711);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23707 : 'Integer, y23709 : 'Integer, x23708 : 'Integer, temp23711 : 'Integer, 
start:
    movq $10, x23708
    movq x23708, x23707
    movq $20, y23709
    movq y23709, temp23711
    addq $21, temp23711
    movq x23707, %rax
    addq temp23711, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23707 : 'Integer, y23709 : 'Integer, x23708 : 'Integer, temp23711 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set x23708 %rsp)
 (set x23707 %rsp)
 (set x23707 y23709 %rsp)
 (set x23707 temp23711 %rsp)
 (set x23707 temp23711 %rsp)
 (set %rax temp23711 %rsp)
 (set %rax %rsp))
movq $10, x23708
movq x23708, x23707
movq $20, y23709
movq y23709, temp23711
addq $21, temp23711
movq x23707, %rax
addq temp23711, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23707 : 'Integer, y23709 : 'Integer, x23708 : 'Integer, temp23711 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list y23709 temp23711)
 (list x23708 x23707)
 (list temp23711 y23709)
 (list x23707 x23708))
start:
    movq $10, x23708
    movq x23708, x23707
    movq $20, y23709
    movq y23709, temp23711
    addq $21, temp23711
    movq x23707, %rax
    addq temp23711, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23707 : 'Integer, y23709 : 'Integer, x23708 : 'Integer, temp23711 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list y23709 temp23711)
 (list x23708 x23707)
 (list temp23711 y23709)
 (list x23707 x23708))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23711 0)
 (cons x23707 1)
 (cons y23709 0)
 (cons x23708 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $10, %rcx
    movq %rcx, %rdx
    movq $20, %rcx
    movq %rcx, %rcx
    addq $21, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23707 : 'Integer, y23709 : 'Integer, x23708 : 'Integer, temp23711 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list y23709 temp23711)
 (list x23708 x23707)
 (list temp23711 y23709)
 (list x23707 x23708))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23711 0)
 (cons x23707 1)
 (cons y23709 0)
 (cons x23708 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $10, %rcx
    movq %rcx, %rdx
    movq $20, %rcx
    addq $21, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23707 : 'Integer, y23709 : 'Integer, x23708 : 'Integer, temp23711 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list y23709 temp23711)
 (list x23708 x23707)
 (list temp23711 y23709)
 (list x23707 x23708))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23711 0)
 (cons x23707 1)
 (cons y23709 0)
 (cons x23708 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $10, %rcx
    movq %rcx, %rdx
    movq $20, %rcx
    addq $21, %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$10, %rcx
	movq	%rcx, %rdx
	movq	$20, %rcx
	addq	$21, %rcx
	movq	%rdx, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_09.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ 13 (- (+ 10 2)))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 13 (- (+ 10 2)))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 13 (- (+ 10 2)))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23715 (+ 10 2)])
   (let ([temp23714 (- temp23715)])
      (+ 13 temp23714)))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23715 = (+ 10 2);
    temp23714 = (- temp23715);
    return (+ 13 temp23714);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23715 : 'Integer, temp23714 : 'Integer, 
start:
    movq $10, temp23715
    addq $2, temp23715
    movq temp23715, temp23714
    negq temp23714
    movq $13, %rax
    addq temp23714, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23715 : 'Integer, temp23714 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rsp temp23715)
 (set %rsp temp23715)
 (set temp23714 %rsp)
 (set temp23714 %rsp)
 (set %rax temp23714 %rsp)
 (set %rax %rsp))
movq $10, temp23715
addq $2, temp23715
movq temp23715, temp23714
negq temp23714
movq $13, %rax
addq temp23714, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23715 : 'Integer, temp23714 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23715 temp23714) (list temp23714 temp23715))
start:
    movq $10, temp23715
    addq $2, temp23715
    movq temp23715, temp23714
    negq temp23714
    movq $13, %rax
    addq temp23714, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23715 : 'Integer, temp23714 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23715 temp23714) (list temp23714 temp23715))
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp23714 0) (cons temp23715 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $10, %rcx
    addq $2, %rcx
    movq %rcx, %rcx
    negq %rcx
    movq $13, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23715 : 'Integer, temp23714 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23715 temp23714) (list temp23714 temp23715))
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp23714 0) (cons temp23715 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $10, %rcx
    addq $2, %rcx
    negq %rcx
    movq $13, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23715 : 'Integer, temp23714 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23715 temp23714) (list temp23714 temp23715))
colors
:
(list (cons %rax -1) (cons %rsp -2) (cons temp23714 0) (cons temp23715 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx))
start:
    movq $10, %rcx
    addq $2, %rcx
    negq %rcx
    movq $13, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$10, %rcx
	addq	$2, %rcx
	negq	%rcx
	movq	$13, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_10.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (let ([x 32])
            (+ (- x) 1))])
   (- (let ([x (+ x 2)])
         (+ (let ([x 33])
               (- (let ([x 36])
                     (+ (let ([x 33])
                           x) x)) (- x))) x)) (- 1 x)))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (let ([x 32])
            (+ (- x) 1))])
   (- (let ([x (+ x 2)])
         (+ (let ([x 33])
               (- (let ([x 36])
                     (+ (let ([x 33])
                           x) x)) (- x))) x)) (- 1 x)))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23716 (let ([x23717 32])
                 (+ (- x23717) 1))])
   (- (let ([x23718 (+ x23716 2)])
         (+ (let ([x23719 33])
               (- (let ([x23720 36])
                     (+ (let ([x23721 33])
                           x23721) x23720)) (- x23719))) x23718)) (- 1 x23716)))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23716 (let ([x23717 32])
                 (let ([temp23723 (- x23717)])
                    (+ temp23723 1)))])
   (let ([x23718 (+ x23716 2)])
      (let ([temp23725 (let ([x23719 33])
                          (let ([temp23728 (let ([x23720 36])
                                              (let ([temp23730 (let ([x23721 33])
                                                                  (let ([temp23732 x23721])
                                                                     (+ temp23732 x23720)))])
                                                 (let ([temp23733 (- x23719)])
                                                    (- temp23730 temp23733))))])
                             (+ temp23728 x23718)))])
         (let ([temp23734 (- 1 x23716)])
            (- temp23725 temp23734)))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x23717 = 32;
    temp23723 = (- x23717);
    x23716 = (+ temp23723 1);
    x23718 = (+ x23716 2);
    x23719 = 33;
    x23720 = 36;
    x23721 = 33;
    temp23732 = x23721;
    temp23730 = (+ temp23732 x23720);
    temp23733 = (- x23719);
    temp23728 = (- temp23730 temp23733);
    temp23725 = (+ temp23728 x23718);
    temp23734 = (- 1 x23716);
    return (- temp23725 temp23734);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23721 : 'Integer, x23720 : 'Integer, temp23723 : 'Integer, temp23733 : 'Integer, x23717 : 'Integer, x23716 : 'Integer, temp23732 : 'Integer, x23719 : 'Integer, temp23734 : 'Integer, x23718 : 'Integer, temp23728 : 'Integer, temp23730 : 'Integer, temp23725 : 'Integer, 
start:
    movq $32, x23717
    movq x23717, temp23723
    negq temp23723
    movq temp23723, x23716
    addq $1, x23716
    movq x23716, x23718
    addq $2, x23718
    movq $33, x23719
    movq $36, x23720
    movq $33, x23721
    movq x23721, temp23732
    movq temp23732, temp23730
    addq x23720, temp23730
    movq x23719, temp23733
    negq temp23733
    movq temp23730, temp23728
    subq temp23733, temp23728
    movq temp23728, temp23725
    addq x23718, temp23725
    movq $1, temp23734
    subq x23716, temp23734
    movq temp23725, %rax
    subq temp23734, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23721 : 'Integer, x23720 : 'Integer, temp23723 : 'Integer, temp23733 : 'Integer, x23717 : 'Integer, x23716 : 'Integer, temp23732 : 'Integer, x23719 : 'Integer, temp23734 : 'Integer, x23718 : 'Integer, temp23728 : 'Integer, temp23730 : 'Integer, temp23725 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set x23717 %rsp)
 (set temp23723 %rsp)
 (set temp23723 %rsp)
 (set x23716 %rsp)
 (set x23716 %rsp)
 (set x23716 x23718 %rsp)
 (set x23716 x23718 %rsp)
 (set x23716 x23718 x23719 %rsp)
 (set x23716 x23718 x23719 x23720 %rsp)
 (set x23716 x23718 x23719 x23720 x23721 %rsp)
 (set x23718 x23719 x23720 %rsp x23716 temp23732)
 (set x23716 x23718 x23719 x23720 temp23730 %rsp)
 (set x23716 x23718 x23719 temp23730 %rsp)
 (set x23716 temp23733 x23718 temp23730 %rsp)
 (set x23716 temp23733 x23718 temp23730 %rsp)
 (set x23716 temp23733 x23718 temp23728 %rsp)
 (set x23716 x23718 temp23728 %rsp)
 (set x23716 x23718 temp23725 %rsp)
 (set x23716 temp23725 %rsp)
 (set x23716 temp23734 temp23725 %rsp)
 (set temp23734 temp23725 %rsp)
 (set %rax temp23734 %rsp)
 (set %rax %rsp))
movq $32, x23717
movq x23717, temp23723
negq temp23723
movq temp23723, x23716
addq $1, x23716
movq x23716, x23718
addq $2, x23718
movq $33, x23719
movq $36, x23720
movq $33, x23721
movq x23721, temp23732
movq temp23732, temp23730
addq x23720, temp23730
movq x23719, temp23733
negq temp23733
movq temp23730, temp23728
subq temp23733, temp23728
movq temp23728, temp23725
addq x23718, temp23725
movq $1, temp23734
subq x23716, temp23734
movq temp23725, %rax
subq temp23734, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23721 : 'Integer, x23720 : 'Integer, temp23723 : 'Integer, temp23733 : 'Integer, x23717 : 'Integer, x23716 : 'Integer, temp23732 : 'Integer, x23719 : 'Integer, temp23734 : 'Integer, x23718 : 'Integer, temp23728 : 'Integer, temp23730 : 'Integer, temp23725 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23725 temp23728)
 (list temp23728 temp23725)
 (list temp23728 temp23730)
 (list temp23730 temp23732)
 (list temp23730 temp23728)
 (list x23717 temp23723)
 (list temp23733 x23719)
 (list x23716 x23718)
 (list x23716 temp23723)
 (list temp23732 x23721)
 (list temp23732 temp23730)
 (list x23719 temp23733)
 (list x23718 x23716)
 (list x23721 temp23732)
 (list temp23723 x23716)
 (list temp23723 x23717))
start:
    movq $32, x23717
    movq x23717, temp23723
    negq temp23723
    movq temp23723, x23716
    addq $1, x23716
    movq x23716, x23718
    addq $2, x23718
    movq $33, x23719
    movq $36, x23720
    movq $33, x23721
    movq x23721, temp23732
    movq temp23732, temp23730
    addq x23720, temp23730
    movq x23719, temp23733
    negq temp23733
    movq temp23730, temp23728
    subq temp23733, temp23728
    movq temp23728, temp23725
    addq x23718, temp23725
    movq $1, temp23734
    subq x23716, temp23734
    movq temp23725, %rax
    subq temp23734, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23721 : 'Integer, x23720 : 'Integer, temp23723 : 'Integer, temp23733 : 'Integer, x23717 : 'Integer, x23716 : 'Integer, temp23732 : 'Integer, x23719 : 'Integer, temp23734 : 'Integer, x23718 : 'Integer, temp23728 : 'Integer, temp23730 : 'Integer, temp23725 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23725 temp23728)
 (list temp23728 temp23725)
 (list temp23728 temp23730)
 (list temp23730 temp23732)
 (list temp23730 temp23728)
 (list x23717 temp23723)
 (list temp23733 x23719)
 (list x23716 x23718)
 (list x23716 temp23723)
 (list temp23732 x23721)
 (list temp23732 temp23730)
 (list x23719 temp23733)
 (list x23718 x23716)
 (list x23721 temp23732)
 (list temp23723 x23716)
 (list temp23723 x23717))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp23734 0)
 (cons temp23725 1)
 (cons x23716 2)
 (cons x23718 0)
 (cons temp23730 1)
 (cons x23719 3)
 (cons x23720 4)
 (cons temp23732 1)
 (cons x23721 1)
 (cons temp23733 3)
 (cons temp23728 1)
 (cons temp23723 0)
 (cons x23717 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi) (cons 3 %rdi) (cons 4 %r8))
start:
    movq $32, %rcx
    movq %rcx, %rcx
    negq %rcx
    movq %rcx, %rsi
    addq $1, %rsi
    movq %rsi, %rcx
    addq $2, %rcx
    movq $33, %rdi
    movq $36, %r8
    movq $33, %rdx
    movq %rdx, %rdx
    movq %rdx, %rdx
    addq %r8, %rdx
    movq %rdi, %rdi
    negq %rdi
    movq %rdx, %rdx
    subq %rdi, %rdx
    movq %rdx, %rdx
    addq %rcx, %rdx
    movq $1, %rcx
    subq %rsi, %rcx
    movq %rdx, %rax
    subq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23721 : 'Integer, x23720 : 'Integer, temp23723 : 'Integer, temp23733 : 'Integer, x23717 : 'Integer, x23716 : 'Integer, temp23732 : 'Integer, x23719 : 'Integer, temp23734 : 'Integer, x23718 : 'Integer, temp23728 : 'Integer, temp23730 : 'Integer, temp23725 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23725 temp23728)
 (list temp23728 temp23725)
 (list temp23728 temp23730)
 (list temp23730 temp23732)
 (list temp23730 temp23728)
 (list x23717 temp23723)
 (list temp23733 x23719)
 (list x23716 x23718)
 (list x23716 temp23723)
 (list temp23732 x23721)
 (list temp23732 temp23730)
 (list x23719 temp23733)
 (list x23718 x23716)
 (list x23721 temp23732)
 (list temp23723 x23716)
 (list temp23723 x23717))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp23734 0)
 (cons temp23725 1)
 (cons x23716 2)
 (cons x23718 0)
 (cons temp23730 1)
 (cons x23719 3)
 (cons x23720 4)
 (cons temp23732 1)
 (cons x23721 1)
 (cons temp23733 3)
 (cons temp23728 1)
 (cons temp23723 0)
 (cons x23717 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi) (cons 3 %rdi) (cons 4 %r8))
start:
    movq $32, %rcx
    negq %rcx
    movq %rcx, %rsi
    addq $1, %rsi
    movq %rsi, %rcx
    addq $2, %rcx
    movq $33, %rdi
    movq $36, %r8
    movq $33, %rdx
    addq %r8, %rdx
    negq %rdi
    subq %rdi, %rdx
    addq %rcx, %rdx
    movq $1, %rcx
    subq %rsi, %rcx
    movq %rdx, %rax
    subq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23721 : 'Integer, x23720 : 'Integer, temp23723 : 'Integer, temp23733 : 'Integer, x23717 : 'Integer, x23716 : 'Integer, temp23732 : 'Integer, x23719 : 'Integer, temp23734 : 'Integer, x23718 : 'Integer, temp23728 : 'Integer, temp23730 : 'Integer, temp23725 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23725 temp23728)
 (list temp23728 temp23725)
 (list temp23728 temp23730)
 (list temp23730 temp23732)
 (list temp23730 temp23728)
 (list x23717 temp23723)
 (list temp23733 x23719)
 (list x23716 x23718)
 (list x23716 temp23723)
 (list temp23732 x23721)
 (list temp23732 temp23730)
 (list x23719 temp23733)
 (list x23718 x23716)
 (list x23721 temp23732)
 (list temp23723 x23716)
 (list temp23723 x23717))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons temp23734 0)
 (cons temp23725 1)
 (cons x23716 2)
 (cons x23718 0)
 (cons temp23730 1)
 (cons x23719 3)
 (cons x23720 4)
 (cons temp23732 1)
 (cons x23721 1)
 (cons temp23733 3)
 (cons temp23728 1)
 (cons temp23723 0)
 (cons x23717 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi) (cons 3 %rdi) (cons 4 %r8))
start:
    movq $32, %rcx
    negq %rcx
    movq %rcx, %rsi
    addq $1, %rsi
    movq %rsi, %rcx
    addq $2, %rcx
    movq $33, %rdi
    movq $36, %r8
    movq $33, %rdx
    addq %r8, %rdx
    negq %rdi
    subq %rdi, %rdx
    addq %rcx, %rdx
    movq $1, %rcx
    subq %rsi, %rcx
    movq %rdx, %rax
    subq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$32, %rcx
	negq	%rcx
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	%rsi, %rcx
	addq	$2, %rcx
	movq	$33, %rdi
	movq	$36, %r8
	movq	$33, %rdx
	addq	%r8, %rdx
	negq	%rdi
	subq	%rdi, %rdx
	addq	%rcx, %rdx
	movq	$1, %rcx
	subq	%rsi, %rcx
	movq	%rdx, %rax
	subq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_11.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(- (+ (read) (read)) (let ([x (let ([x 20])
                                 (- x))])
                        (let ([y (- 10)])
                           (+ y (+ x (read))))))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(- (+ (read) (read)) (let ([x (let ([x 20])
                                 (- x))])
                        (let ([y (- 10)])
                           (+ y (+ x (read))))))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(- (+ (read) (read)) (let ([x23735 (let ([x23736 20])
                                      (- x23736))])
                        (let ([y23737 (- 10)])
                           (+ y23737 (+ x23735 (read))))))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23740 (read)])
   (let ([temp23741 (read)])
      (let ([temp23739 (+ temp23740 temp23741)])
         (let ([x23735 (let ([x23736 20])
                          (- x23736))])
            (let ([temp23742 (let ([y23737 (- 10)])
                                (let ([temp23747 (read)])
                                   (let ([temp23746 (+ x23735 temp23747)])
                                      (+ y23737 temp23746))))])
               (- temp23739 temp23742))))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23740 = (read);
    temp23741 = (read);
    temp23739 = (+ temp23740 temp23741);
    x23736 = 20;
    x23735 = (- x23736);
    y23737 = (- 10);
    temp23747 = (read);
    temp23746 = (+ x23735 temp23747);
    temp23742 = (+ y23737 temp23746);
    return (- temp23739 temp23742);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    y23737 : 'Integer, x23736 : 'Integer, temp23739 : 'Integer, x23735 : 'Integer, temp23747 : 'Integer, temp23746 : 'Integer, temp23741 : 'Integer, temp23740 : 'Integer, temp23742 : 'Integer, 
start:
    callq read_int
    movq %rax, temp23740
    callq read_int
    movq %rax, temp23741
    movq temp23740, temp23739
    addq temp23741, temp23739
    movq $20, x23736
    movq x23736, x23735
    negq x23735
    movq $10, y23737
    negq y23737
    callq read_int
    movq %rax, temp23747
    movq x23735, temp23746
    addq temp23747, temp23746
    movq y23737, temp23742
    addq temp23746, temp23742
    movq temp23739, %rax
    subq temp23742, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    y23737 : 'Integer, x23736 : 'Integer, temp23739 : 'Integer, x23735 : 'Integer, temp23747 : 'Integer, temp23746 : 'Integer, temp23741 : 'Integer, temp23740 : 'Integer, temp23742 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp23740 %rsp)
 (set %rax temp23740 %rsp)
 (set temp23740 temp23741 %rsp)
 (set temp23739 temp23741 %rsp)
 (set temp23739 %rsp)
 (set x23736 temp23739 %rsp)
 (set x23735 temp23739 %rsp)
 (set x23735 temp23739 %rsp)
 (set x23735 y23737 temp23739 %rsp)
 (set x23735 y23737 temp23739 %rsp)
 (set %rax x23735 y23737 temp23739 %rsp)
 (set x23735 y23737 temp23739 %rsp temp23747)
 (set y23737 temp23739 temp23746 %rsp temp23747)
 (set y23737 temp23739 temp23746 %rsp)
 (set temp23739 temp23742 temp23746 %rsp)
 (set temp23739 temp23742 %rsp)
 (set %rax temp23742 %rsp)
 (set %rax %rsp))
callq read_int
movq %rax, temp23740
callq read_int
movq %rax, temp23741
movq temp23740, temp23739
addq temp23741, temp23739
movq $20, x23736
movq x23736, x23735
negq x23735
movq $10, y23737
negq y23737
callq read_int
movq %rax, temp23747
movq x23735, temp23746
addq temp23747, temp23746
movq y23737, temp23742
addq temp23746, temp23742
movq temp23739, %rax
subq temp23742, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    y23737 : 'Integer, x23736 : 'Integer, temp23739 : 'Integer, x23735 : 'Integer, temp23747 : 'Integer, temp23746 : 'Integer, temp23741 : 'Integer, temp23740 : 'Integer, temp23742 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23740 temp23739)
 (list x23735 x23736)
 (list x23735 temp23746)
 (list temp23742 y23737)
 (list y23737 temp23742)
 (list x23736 x23735)
 (list temp23739 temp23740)
 (list temp23746 x23735))
start:
    callq read_int
    movq %rax, temp23740
    callq read_int
    movq %rax, temp23741
    movq temp23740, temp23739
    addq temp23741, temp23739
    movq $20, x23736
    movq x23736, x23735
    negq x23735
    movq $10, y23737
    negq y23737
    callq read_int
    movq %rax, temp23747
    movq x23735, temp23746
    addq temp23747, temp23746
    movq y23737, temp23742
    addq temp23746, temp23742
    movq temp23739, %rax
    subq temp23742, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    y23737 : 'Integer, x23736 : 'Integer, temp23739 : 'Integer, x23735 : 'Integer, temp23747 : 'Integer, temp23746 : 'Integer, temp23741 : 'Integer, temp23740 : 'Integer, temp23742 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23740 temp23739)
 (list x23735 x23736)
 (list x23735 temp23746)
 (list temp23742 y23737)
 (list y23737 temp23742)
 (list x23736 x23735)
 (list temp23739 temp23740)
 (list temp23746 x23735))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp23740 7)
 (cons x23735 7)
 (cons temp23739 8)
 (cons y23737 9)
 (cons temp23747 0)
 (cons temp23746 1)
 (cons temp23742 0)
 (cons temp23741 0)
 (cons x23736 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    movq %rbx, %r12
    addq %rcx, %r12
    movq $20, %rcx
    movq %rcx, %rbx
    negq %rbx
    movq $10, %r13
    negq %r13
    callq read_int
    movq %rax, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq %r12, %rax
    subq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    y23737 : 'Integer, x23736 : 'Integer, temp23739 : 'Integer, x23735 : 'Integer, temp23747 : 'Integer, temp23746 : 'Integer, temp23741 : 'Integer, temp23740 : 'Integer, temp23742 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23740 temp23739)
 (list x23735 x23736)
 (list x23735 temp23746)
 (list temp23742 y23737)
 (list y23737 temp23742)
 (list x23736 x23735)
 (list temp23739 temp23740)
 (list temp23746 x23735))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp23740 7)
 (cons x23735 7)
 (cons temp23739 8)
 (cons y23737 9)
 (cons temp23747 0)
 (cons temp23746 1)
 (cons temp23742 0)
 (cons temp23741 0)
 (cons x23736 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    movq %rbx, %r12
    addq %rcx, %r12
    movq $20, %rcx
    movq %rcx, %rbx
    negq %rbx
    movq $10, %r13
    negq %r13
    callq read_int
    movq %rax, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq %r12, %rax
    subq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    y23737 : 'Integer, x23736 : 'Integer, temp23739 : 'Integer, x23735 : 'Integer, temp23747 : 'Integer, temp23746 : 'Integer, temp23741 : 'Integer, temp23740 : 'Integer, temp23742 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23740 temp23739)
 (list x23735 x23736)
 (list x23735 temp23746)
 (list temp23742 y23737)
 (list y23737 temp23742)
 (list x23736 x23735)
 (list temp23739 temp23740)
 (list temp23746 x23735))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r10 6)
 (cons %r9 5)
 (cons %rdi 3)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rdx 1)
 (cons %rcx 0)
 (cons temp23740 7)
 (cons x23735 7)
 (cons temp23739 8)
 (cons y23737 9)
 (cons temp23747 0)
 (cons temp23746 1)
 (cons temp23742 0)
 (cons temp23741 0)
 (cons x23736 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    movq %rbx, %r12
    addq %rcx, %r12
    movq $20, %rcx
    movq %rcx, %rbx
    negq %rbx
    movq $10, %r13
    negq %r13
    callq read_int
    movq %rax, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %r13, %rcx
    addq %rdx, %rcx
    movq %r12, %rax
    subq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %rcx
	movq	%rbx, %r12
	addq	%rcx, %r12
	movq	$20, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	movq	$10, %r13
	negq	%r13
	callq	_read_int
	movq	%rax, %rcx
	movq	%rbx, %rdx
	addq	%rcx, %rdx
	movq	%r13, %rcx
	addq	%rdx, %rcx
	movq	%r12, %rax
	subq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_12.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ (read) (- (+ 5 3)))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ (read) (- (+ 5 3)))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ (read) (- (+ 5 3)))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23749 (read)])
   (let ([temp23751 (+ 5 3)])
      (let ([temp23750 (- temp23751)])
         (+ temp23749 temp23750))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23749 = (read);
    temp23751 = (+ 5 3);
    temp23750 = (- temp23751);
    return (+ temp23749 temp23750);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23749 : 'Integer, temp23751 : 'Integer, temp23750 : 'Integer, 
start:
    callq read_int
    movq %rax, temp23749
    movq $5, temp23751
    addq $3, temp23751
    movq temp23751, temp23750
    negq temp23750
    movq temp23749, %rax
    addq temp23750, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23749 : 'Integer, temp23751 : 'Integer, temp23750 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp23749 %rsp)
 (set temp23749 temp23751 %rsp)
 (set temp23749 temp23751 %rsp)
 (set temp23749 temp23750 %rsp)
 (set temp23749 temp23750 %rsp)
 (set %rax temp23750 %rsp)
 (set %rax %rsp))
callq read_int
movq %rax, temp23749
movq $5, temp23751
addq $3, temp23751
movq temp23751, temp23750
negq temp23750
movq temp23749, %rax
addq temp23750, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23749 : 'Integer, temp23751 : 'Integer, temp23750 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23750 temp23751) (list temp23751 temp23750))
start:
    callq read_int
    movq %rax, temp23749
    movq $5, temp23751
    addq $3, temp23751
    movq temp23751, temp23750
    negq temp23750
    movq temp23749, %rax
    addq temp23750, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23749 : 'Integer, temp23751 : 'Integer, temp23750 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23750 temp23751) (list temp23751 temp23750))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23750 0)
 (cons temp23749 1)
 (cons temp23751 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
start:
    callq read_int
    movq %rax, %rdx
    movq $5, %rcx
    addq $3, %rcx
    movq %rcx, %rcx
    negq %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23749 : 'Integer, temp23751 : 'Integer, temp23750 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23750 temp23751) (list temp23751 temp23750))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23750 0)
 (cons temp23749 1)
 (cons temp23751 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
start:
    callq read_int
    movq %rax, %rdx
    movq $5, %rcx
    addq $3, %rcx
    negq %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23749 : 'Integer, temp23751 : 'Integer, temp23750 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23750 temp23751) (list temp23751 temp23750))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23750 0)
 (cons temp23749 1)
 (cons temp23751 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
start:
    callq read_int
    movq %rax, %rdx
    movq $5, %rcx
    addq $3, %rcx
    negq %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, %rdx
	movq	$5, %rcx
	addq	$3, %rcx
	negq	%rcx
	movq	%rdx, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_13.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ 10 (+ 10 (+ 10 (+ 10 (+ 2 0)))))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 10 (+ 10 (+ 10 (+ 10 (+ 2 0)))))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 10 (+ 10 (+ 10 (+ 10 (+ 2 0)))))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23756 (+ 2 0)])
   (let ([temp23755 (+ 10 temp23756)])
      (let ([temp23754 (+ 10 temp23755)])
         (let ([temp23753 (+ 10 temp23754)])
            (+ 10 temp23753)))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23756 = (+ 2 0);
    temp23755 = (+ 10 temp23756);
    temp23754 = (+ 10 temp23755);
    temp23753 = (+ 10 temp23754);
    return (+ 10 temp23753);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23753 : 'Integer, temp23755 : 'Integer, temp23754 : 'Integer, temp23756 : 'Integer, 
start:
    movq $2, temp23756
    addq $0, temp23756
    movq $10, temp23755
    addq temp23756, temp23755
    movq $10, temp23754
    addq temp23755, temp23754
    movq $10, temp23753
    addq temp23754, temp23753
    movq $10, %rax
    addq temp23753, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23753 : 'Integer, temp23755 : 'Integer, temp23754 : 'Integer, temp23756 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set temp23756 %rsp)
 (set temp23756 %rsp)
 (set temp23755 temp23756 %rsp)
 (set temp23755 %rsp)
 (set temp23754 temp23755 %rsp)
 (set temp23754 %rsp)
 (set temp23753 temp23754 %rsp)
 (set temp23753 %rsp)
 (set %rax temp23753 %rsp)
 (set %rax %rsp))
movq $2, temp23756
addq $0, temp23756
movq $10, temp23755
addq temp23756, temp23755
movq $10, temp23754
addq temp23755, temp23754
movq $10, temp23753
addq temp23754, temp23753
movq $10, %rax
addq temp23753, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23753 : 'Integer, temp23755 : 'Integer, temp23754 : 'Integer, temp23756 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $2, temp23756
    addq $0, temp23756
    movq $10, temp23755
    addq temp23756, temp23755
    movq $10, temp23754
    addq temp23755, temp23754
    movq $10, temp23753
    addq temp23754, temp23753
    movq $10, %rax
    addq temp23753, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23753 : 'Integer, temp23755 : 'Integer, temp23754 : 'Integer, temp23756 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23753 0)
 (cons temp23754 1)
 (cons temp23755 0)
 (cons temp23756 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $2, %rdx
    addq $0, %rdx
    movq $10, %rcx
    addq %rdx, %rcx
    movq $10, %rdx
    addq %rcx, %rdx
    movq $10, %rcx
    addq %rdx, %rcx
    movq $10, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23753 : 'Integer, temp23755 : 'Integer, temp23754 : 'Integer, temp23756 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23753 0)
 (cons temp23754 1)
 (cons temp23755 0)
 (cons temp23756 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $2, %rdx
    addq $0, %rdx
    movq $10, %rcx
    addq %rdx, %rcx
    movq $10, %rdx
    addq %rcx, %rdx
    movq $10, %rcx
    addq %rdx, %rcx
    movq $10, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23753 : 'Integer, temp23755 : 'Integer, temp23754 : 'Integer, temp23756 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23753 0)
 (cons temp23754 1)
 (cons temp23755 0)
 (cons temp23756 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $2, %rdx
    addq $0, %rdx
    movq $10, %rcx
    addq %rdx, %rcx
    movq $10, %rdx
    addq %rcx, %rdx
    movq $10, %rcx
    addq %rdx, %rcx
    movq $10, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$2, %rdx
	addq	$0, %rdx
	movq	$10, %rcx
	addq	%rdx, %rcx
	movq	$10, %rdx
	addq	%rcx, %rdx
	movq	$10, %rcx
	addq	%rdx, %rcx
	movq	$10, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_14.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ 2 (+ (read) (+ 3 (read))))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 2 (+ (read) (+ 3 (read))))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 2 (+ (read) (+ 3 (read))))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23759 (read)])
   (let ([temp23761 (read)])
      (let ([temp23760 (+ 3 temp23761)])
         (let ([temp23758 (+ temp23759 temp23760)])
            (+ 2 temp23758)))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23759 = (read);
    temp23761 = (read);
    temp23760 = (+ 3 temp23761);
    temp23758 = (+ temp23759 temp23760);
    return (+ 2 temp23758);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23761 : 'Integer, temp23760 : 'Integer, temp23759 : 'Integer, temp23758 : 'Integer, 
start:
    callq read_int
    movq %rax, temp23759
    callq read_int
    movq %rax, temp23761
    movq $3, temp23760
    addq temp23761, temp23760
    movq temp23759, temp23758
    addq temp23760, temp23758
    movq $2, %rax
    addq temp23758, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23761 : 'Integer, temp23760 : 'Integer, temp23759 : 'Integer, temp23758 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp23759 %rsp)
 (set %rax temp23759 %rsp)
 (set temp23759 temp23761 %rsp)
 (set temp23759 temp23760 temp23761 %rsp)
 (set temp23759 temp23760 %rsp)
 (set temp23758 temp23760 %rsp)
 (set temp23758 %rsp)
 (set %rax temp23758 %rsp)
 (set %rax %rsp))
callq read_int
movq %rax, temp23759
callq read_int
movq %rax, temp23761
movq $3, temp23760
addq temp23761, temp23760
movq temp23759, temp23758
addq temp23760, temp23758
movq $2, %rax
addq temp23758, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23761 : 'Integer, temp23760 : 'Integer, temp23759 : 'Integer, temp23758 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23758 temp23759) (list temp23759 temp23758))
start:
    callq read_int
    movq %rax, temp23759
    callq read_int
    movq %rax, temp23761
    movq $3, temp23760
    addq temp23761, temp23760
    movq temp23759, temp23758
    addq temp23760, temp23758
    movq $2, %rax
    addq temp23758, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23761 : 'Integer, temp23760 : 'Integer, temp23759 : 'Integer, temp23758 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23758 temp23759) (list temp23759 temp23758))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23759 7)
 (cons temp23760 0)
 (cons temp23758 1)
 (cons temp23761 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rdx
    movq $3, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq $2, %rax
    addq %rdx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23761 : 'Integer, temp23760 : 'Integer, temp23759 : 'Integer, temp23758 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23758 temp23759) (list temp23759 temp23758))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23759 7)
 (cons temp23760 0)
 (cons temp23758 1)
 (cons temp23761 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rdx
    movq $3, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq $2, %rax
    addq %rdx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23761 : 'Integer, temp23760 : 'Integer, temp23759 : 'Integer, temp23758 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23758 temp23759) (list temp23759 temp23758))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23759 7)
 (cons temp23760 0)
 (cons temp23758 1)
 (cons temp23761 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rdx
    movq $3, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq $2, %rax
    addq %rdx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %rdx
	movq	$3, %rcx
	addq	%rdx, %rcx
	movq	%rbx, %rdx
	addq	%rcx, %rdx
	movq	$2, %rax
	addq	%rdx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_15.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ 3 (+ (let ([x (+ 2 (+ (read) 3))])
           x) 2))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 3 (+ (let ([x (+ 2 (+ (read) 3))])
           x) 2))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 3 (+ (let ([x23762 (+ 2 (+ (read) 3))])
           x23762) 2))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23762 (let ([temp23768 (read)])
                 (let ([temp23767 (+ temp23768 3)])
                    (+ 2 temp23767)))])
   (let ([temp23765 x23762])
      (let ([temp23764 (+ temp23765 2)])
         (+ 3 temp23764))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23768 = (read);
    temp23767 = (+ temp23768 3);
    x23762 = (+ 2 temp23767);
    temp23765 = x23762;
    temp23764 = (+ temp23765 2);
    return (+ 3 temp23764);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23768 : 'Integer, x23762 : 'Integer, temp23767 : 'Integer, temp23764 : 'Integer, temp23765 : 'Integer, 
start:
    callq read_int
    movq %rax, temp23768
    movq temp23768, temp23767
    addq $3, temp23767
    movq $2, x23762
    addq temp23767, x23762
    movq x23762, temp23765
    movq temp23765, temp23764
    addq $2, temp23764
    movq $3, %rax
    addq temp23764, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23768 : 'Integer, x23762 : 'Integer, temp23767 : 'Integer, temp23764 : 'Integer, temp23765 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp23768 %rsp)
 (set temp23767 %rsp)
 (set temp23767 %rsp)
 (set temp23767 x23762 %rsp)
 (set x23762 %rsp)
 (set temp23765 %rsp)
 (set temp23764 %rsp)
 (set temp23764 %rsp)
 (set %rsp temp23764 %rax)
 (set %rax %rsp))
callq read_int
movq %rax, temp23768
movq temp23768, temp23767
addq $3, temp23767
movq $2, x23762
addq temp23767, x23762
movq x23762, temp23765
movq temp23765, temp23764
addq $2, temp23764
movq $3, %rax
addq temp23764, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23768 : 'Integer, x23762 : 'Integer, temp23767 : 'Integer, temp23764 : 'Integer, temp23765 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23767 temp23768)
 (list temp23764 temp23765)
 (list temp23765 temp23764)
 (list temp23765 x23762)
 (list x23762 temp23765)
 (list temp23768 temp23767))
start:
    callq read_int
    movq %rax, temp23768
    movq temp23768, temp23767
    addq $3, temp23767
    movq $2, x23762
    addq temp23767, x23762
    movq x23762, temp23765
    movq temp23765, temp23764
    addq $2, temp23764
    movq $3, %rax
    addq temp23764, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23768 : 'Integer, x23762 : 'Integer, temp23767 : 'Integer, temp23764 : 'Integer, temp23765 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23767 temp23768)
 (list temp23764 temp23765)
 (list temp23765 temp23764)
 (list temp23765 x23762)
 (list x23762 temp23765)
 (list temp23768 temp23767))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23764 0)
 (cons temp23768 0)
 (cons temp23767 0)
 (cons x23762 1)
 (cons temp23765 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
start:
    callq read_int
    movq %rax, %rcx
    movq %rcx, %rcx
    addq $3, %rcx
    movq $2, %rdx
    addq %rcx, %rdx
    movq %rdx, %rcx
    movq %rcx, %rcx
    addq $2, %rcx
    movq $3, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23768 : 'Integer, x23762 : 'Integer, temp23767 : 'Integer, temp23764 : 'Integer, temp23765 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23767 temp23768)
 (list temp23764 temp23765)
 (list temp23765 temp23764)
 (list temp23765 x23762)
 (list x23762 temp23765)
 (list temp23768 temp23767))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23764 0)
 (cons temp23768 0)
 (cons temp23767 0)
 (cons x23762 1)
 (cons temp23765 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
start:
    callq read_int
    movq %rax, %rcx
    addq $3, %rcx
    movq $2, %rdx
    addq %rcx, %rdx
    movq %rdx, %rcx
    addq $2, %rcx
    movq $3, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23768 : 'Integer, x23762 : 'Integer, temp23767 : 'Integer, temp23764 : 'Integer, temp23765 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23767 temp23768)
 (list temp23764 temp23765)
 (list temp23765 temp23764)
 (list temp23765 x23762)
 (list x23762 temp23765)
 (list temp23768 temp23767))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23764 0)
 (cons temp23768 0)
 (cons temp23767 0)
 (cons x23762 1)
 (cons temp23765 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10))
start:
    callq read_int
    movq %rax, %rcx
    addq $3, %rcx
    movq $2, %rdx
    addq %rcx, %rdx
    movq %rdx, %rcx
    addq $2, %rcx
    movq $3, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, %rcx
	addq	$3, %rcx
	movq	$2, %rdx
	addq	%rcx, %rdx
	movq	%rdx, %rcx
	addq	$2, %rcx
	movq	$3, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_16.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(- (- (+ (read) (read)) (+ 44 (read))))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(- (- (+ (read) (read)) (+ 44 (read))))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(- (- (+ (read) (read)) (+ 44 (read))))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23772 (read)])
   (let ([temp23773 (read)])
      (let ([temp23771 (+ temp23772 temp23773)])
         (let ([temp23775 (read)])
            (let ([temp23774 (+ 44 temp23775)])
               (let ([temp23770 (- temp23771 temp23774)])
                  (- temp23770)))))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23772 = (read);
    temp23773 = (read);
    temp23771 = (+ temp23772 temp23773);
    temp23775 = (read);
    temp23774 = (+ 44 temp23775);
    temp23770 = (- temp23771 temp23774);
    return (- temp23770);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23770 : 'Integer, temp23771 : 'Integer, temp23774 : 'Integer, temp23775 : 'Integer, temp23772 : 'Integer, temp23773 : 'Integer, 
start:
    callq read_int
    movq %rax, temp23772
    callq read_int
    movq %rax, temp23773
    movq temp23772, temp23771
    addq temp23773, temp23771
    callq read_int
    movq %rax, temp23775
    movq $44, temp23774
    addq temp23775, temp23774
    movq temp23771, temp23770
    subq temp23774, temp23770
    movq temp23770, %rax
    negq %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23770 : 'Integer, temp23771 : 'Integer, temp23774 : 'Integer, temp23775 : 'Integer, temp23772 : 'Integer, temp23773 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp23772 %rsp)
 (set %rax temp23772 %rsp)
 (set temp23772 temp23773 %rsp)
 (set temp23771 temp23773 %rsp)
 (set temp23771 %rsp)
 (set %rax temp23771 %rsp)
 (set temp23771 temp23775 %rsp)
 (set temp23771 temp23774 temp23775 %rsp)
 (set temp23771 temp23774 %rsp)
 (set temp23770 temp23774 %rsp)
 (set temp23770 %rsp)
 (set %rax %rsp)
 (set %rax %rsp))
callq read_int
movq %rax, temp23772
callq read_int
movq %rax, temp23773
movq temp23772, temp23771
addq temp23773, temp23771
callq read_int
movq %rax, temp23775
movq $44, temp23774
addq temp23775, temp23774
movq temp23771, temp23770
subq temp23774, temp23770
movq temp23770, %rax
negq %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23770 : 'Integer, temp23771 : 'Integer, temp23774 : 'Integer, temp23775 : 'Integer, temp23772 : 'Integer, temp23773 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23772 temp23771)
 (list temp23770 temp23771)
 (list temp23771 temp23770)
 (list temp23771 temp23772))
start:
    callq read_int
    movq %rax, temp23772
    callq read_int
    movq %rax, temp23773
    movq temp23772, temp23771
    addq temp23773, temp23771
    callq read_int
    movq %rax, temp23775
    movq $44, temp23774
    addq temp23775, temp23774
    movq temp23771, temp23770
    subq temp23774, temp23770
    movq temp23770, %rax
    negq %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23770 : 'Integer, temp23771 : 'Integer, temp23774 : 'Integer, temp23775 : 'Integer, temp23772 : 'Integer, temp23773 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23772 temp23771)
 (list temp23770 temp23771)
 (list temp23771 temp23770)
 (list temp23771 temp23772))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23772 7)
 (cons temp23771 7)
 (cons temp23773 0)
 (cons temp23774 0)
 (cons temp23775 1)
 (cons temp23770 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    movq %rbx, %rbx
    addq %rcx, %rbx
    callq read_int
    movq %rax, %rdx
    movq $44, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    subq %rcx, %rdx
    movq %rdx, %rax
    negq %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23770 : 'Integer, temp23771 : 'Integer, temp23774 : 'Integer, temp23775 : 'Integer, temp23772 : 'Integer, temp23773 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23772 temp23771)
 (list temp23770 temp23771)
 (list temp23771 temp23770)
 (list temp23771 temp23772))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23772 7)
 (cons temp23771 7)
 (cons temp23773 0)
 (cons temp23774 0)
 (cons temp23775 1)
 (cons temp23770 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    addq %rcx, %rbx
    callq read_int
    movq %rax, %rdx
    movq $44, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    subq %rcx, %rdx
    movq %rdx, %rax
    negq %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23770 : 'Integer, temp23771 : 'Integer, temp23774 : 'Integer, temp23775 : 'Integer, temp23772 : 'Integer, temp23773 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23772 temp23771)
 (list temp23770 temp23771)
 (list temp23771 temp23770)
 (list temp23771 temp23772))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23772 7)
 (cons temp23771 7)
 (cons temp23773 0)
 (cons temp23774 0)
 (cons temp23775 1)
 (cons temp23770 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    addq %rcx, %rbx
    callq read_int
    movq %rax, %rdx
    movq $44, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    subq %rcx, %rdx
    movq %rdx, %rax
    negq %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %rcx
	addq	%rcx, %rbx
	callq	_read_int
	movq	%rax, %rdx
	movq	$44, %rcx
	addq	%rdx, %rcx
	movq	%rbx, %rdx
	subq	%rcx, %rdx
	movq	%rdx, %rax
	negq	%rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_17.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(- (+ (read) 40) (+ 30 (read)))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(- (+ (read) 40) (+ 30 (read)))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(- (+ (read) 40) (+ 30 (read)))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23778 (read)])
   (let ([temp23777 (+ temp23778 40)])
      (let ([temp23780 (read)])
         (let ([temp23779 (+ 30 temp23780)])
            (- temp23777 temp23779)))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23778 = (read);
    temp23777 = (+ temp23778 40);
    temp23780 = (read);
    temp23779 = (+ 30 temp23780);
    return (- temp23777 temp23779);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23778 : 'Integer, temp23779 : 'Integer, temp23777 : 'Integer, temp23780 : 'Integer, 
start:
    callq read_int
    movq %rax, temp23778
    movq temp23778, temp23777
    addq $40, temp23777
    callq read_int
    movq %rax, temp23780
    movq $30, temp23779
    addq temp23780, temp23779
    movq temp23777, %rax
    subq temp23779, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23778 : 'Integer, temp23779 : 'Integer, temp23777 : 'Integer, temp23780 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp23778 %rsp)
 (set temp23777 %rsp)
 (set temp23777 %rsp)
 (set %rax temp23777 %rsp)
 (set temp23780 temp23777 %rsp)
 (set temp23780 temp23777 temp23779 %rsp)
 (set temp23777 temp23779 %rsp)
 (set %rax temp23779 %rsp)
 (set %rax %rsp))
callq read_int
movq %rax, temp23778
movq temp23778, temp23777
addq $40, temp23777
callq read_int
movq %rax, temp23780
movq $30, temp23779
addq temp23780, temp23779
movq temp23777, %rax
subq temp23779, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23778 : 'Integer, temp23779 : 'Integer, temp23777 : 'Integer, temp23780 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23778 temp23777) (list temp23777 temp23778))
start:
    callq read_int
    movq %rax, temp23778
    movq temp23778, temp23777
    addq $40, temp23777
    callq read_int
    movq %rax, temp23780
    movq $30, temp23779
    addq temp23780, temp23779
    movq temp23777, %rax
    subq temp23779, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23778 : 'Integer, temp23779 : 'Integer, temp23777 : 'Integer, temp23780 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23778 temp23777) (list temp23777 temp23778))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23777 7)
 (cons temp23779 0)
 (cons temp23780 1)
 (cons temp23778 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rcx
    movq %rcx, %rbx
    addq $40, %rbx
    callq read_int
    movq %rax, %rdx
    movq $30, %rcx
    addq %rdx, %rcx
    movq %rbx, %rax
    subq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23778 : 'Integer, temp23779 : 'Integer, temp23777 : 'Integer, temp23780 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23778 temp23777) (list temp23777 temp23778))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23777 7)
 (cons temp23779 0)
 (cons temp23780 1)
 (cons temp23778 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rcx
    movq %rcx, %rbx
    addq $40, %rbx
    callq read_int
    movq %rax, %rdx
    movq $30, %rcx
    addq %rdx, %rcx
    movq %rbx, %rax
    subq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23778 : 'Integer, temp23779 : 'Integer, temp23777 : 'Integer, temp23780 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23778 temp23777) (list temp23777 temp23778))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23777 7)
 (cons temp23779 0)
 (cons temp23780 1)
 (cons temp23778 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rcx
    movq %rcx, %rbx
    addq $40, %rbx
    callq read_int
    movq %rax, %rdx
    movq $30, %rcx
    addq %rdx, %rcx
    movq %rbx, %rax
    subq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, %rcx
	movq	%rcx, %rbx
	addq	$40, %rbx
	callq	_read_int
	movq	%rax, %rdx
	movq	$30, %rcx
	addq	%rdx, %rcx
	movq	%rbx, %rax
	subq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_18.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (read)))))))))))))))))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (read)))))))))))))))))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (read)))))))))))))))))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23782 (read)])
   (let ([temp23784 (read)])
      (let ([temp23786 (read)])
         (let ([temp23788 (read)])
            (let ([temp23790 (read)])
               (let ([temp23792 (read)])
                  (let ([temp23794 (read)])
                     (let ([temp23796 (read)])
                        (let ([temp23798 (read)])
                           (let ([temp23800 (read)])
                              (let ([temp23802 (read)])
                                 (let ([temp23804 (read)])
                                    (let ([temp23806 (read)])
                                       (let ([temp23808 (read)])
                                          (let ([temp23810 (read)])
                                             (let ([temp23812 (read)])
                                                (let ([temp23813 (read)])
                                                   (let ([temp23811 (+ temp23812 temp23813)])
                                                      (let ([temp23809 (- temp23810 temp23811)])
                                                         (let ([temp23807 (+ temp23808 temp23809)])
                                                            (let ([temp23805 (+ temp23806 temp23807)])
                                                               (let ([temp23803 (- temp23804 temp23805)])
                                                                  (let ([temp23801 (+ temp23802 temp23803)])
                                                                     (let ([temp23799 (+ temp23800 temp23801)])
                                                                        (let ([temp23797 (+ temp23798 temp23799)])
                                                                           (let ([temp23795 (+ temp23796 temp23797)])
                                                                              (let ([temp23793 (- temp23794 temp23795)])
                                                                                 (let ([temp23791 (+ temp23792 temp23793)])
                                                                                    (let ([temp23789 (+ temp23790 temp23791)])
                                                                                       (let ([temp23787 (- temp23788 temp23789)])
                                                                                          (let ([temp23785 (+ temp23786 temp23787)])
                                                                                             (let ([temp23783 (+ temp23784 temp23785)])
                                                                                                (+ temp23782 temp23783)))))))))))))))))))))))))))))))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23782 = (read);
    temp23784 = (read);
    temp23786 = (read);
    temp23788 = (read);
    temp23790 = (read);
    temp23792 = (read);
    temp23794 = (read);
    temp23796 = (read);
    temp23798 = (read);
    temp23800 = (read);
    temp23802 = (read);
    temp23804 = (read);
    temp23806 = (read);
    temp23808 = (read);
    temp23810 = (read);
    temp23812 = (read);
    temp23813 = (read);
    temp23811 = (+ temp23812 temp23813);
    temp23809 = (- temp23810 temp23811);
    temp23807 = (+ temp23808 temp23809);
    temp23805 = (+ temp23806 temp23807);
    temp23803 = (- temp23804 temp23805);
    temp23801 = (+ temp23802 temp23803);
    temp23799 = (+ temp23800 temp23801);
    temp23797 = (+ temp23798 temp23799);
    temp23795 = (+ temp23796 temp23797);
    temp23793 = (- temp23794 temp23795);
    temp23791 = (+ temp23792 temp23793);
    temp23789 = (+ temp23790 temp23791);
    temp23787 = (- temp23788 temp23789);
    temp23785 = (+ temp23786 temp23787);
    temp23783 = (+ temp23784 temp23785);
    return (+ temp23782 temp23783);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23786 : 'Integer, temp23787 : 'Integer, temp23784 : 'Integer, temp23785 : 'Integer, temp23782 : 'Integer, temp23783 : 'Integer, temp23812 : 'Integer, temp23813 : 'Integer, temp23794 : 'Integer, temp23795 : 'Integer, temp23792 : 'Integer, temp23793 : 'Integer, temp23790 : 'Integer, temp23791 : 'Integer, temp23788 : 'Integer, temp23789 : 'Integer, temp23802 : 'Integer, temp23803 : 'Integer, temp23800 : 'Integer, temp23801 : 'Integer, temp23798 : 'Integer, temp23799 : 'Integer, temp23796 : 'Integer, temp23797 : 'Integer, temp23810 : 'Integer, temp23811 : 'Integer, temp23808 : 'Integer, temp23809 : 'Integer, temp23806 : 'Integer, temp23807 : 'Integer, temp23804 : 'Integer, temp23805 : 'Integer, 
start:
    callq read_int
    movq %rax, temp23782
    callq read_int
    movq %rax, temp23784
    callq read_int
    movq %rax, temp23786
    callq read_int
    movq %rax, temp23788
    callq read_int
    movq %rax, temp23790
    callq read_int
    movq %rax, temp23792
    callq read_int
    movq %rax, temp23794
    callq read_int
    movq %rax, temp23796
    callq read_int
    movq %rax, temp23798
    callq read_int
    movq %rax, temp23800
    callq read_int
    movq %rax, temp23802
    callq read_int
    movq %rax, temp23804
    callq read_int
    movq %rax, temp23806
    callq read_int
    movq %rax, temp23808
    callq read_int
    movq %rax, temp23810
    callq read_int
    movq %rax, temp23812
    callq read_int
    movq %rax, temp23813
    movq temp23812, temp23811
    addq temp23813, temp23811
    movq temp23810, temp23809
    subq temp23811, temp23809
    movq temp23808, temp23807
    addq temp23809, temp23807
    movq temp23806, temp23805
    addq temp23807, temp23805
    movq temp23804, temp23803
    subq temp23805, temp23803
    movq temp23802, temp23801
    addq temp23803, temp23801
    movq temp23800, temp23799
    addq temp23801, temp23799
    movq temp23798, temp23797
    addq temp23799, temp23797
    movq temp23796, temp23795
    addq temp23797, temp23795
    movq temp23794, temp23793
    subq temp23795, temp23793
    movq temp23792, temp23791
    addq temp23793, temp23791
    movq temp23790, temp23789
    addq temp23791, temp23789
    movq temp23788, temp23787
    subq temp23789, temp23787
    movq temp23786, temp23785
    addq temp23787, temp23785
    movq temp23784, temp23783
    addq temp23785, temp23783
    movq temp23782, %rax
    addq temp23783, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23786 : 'Integer, temp23787 : 'Integer, temp23784 : 'Integer, temp23785 : 'Integer, temp23782 : 'Integer, temp23783 : 'Integer, temp23812 : 'Integer, temp23813 : 'Integer, temp23794 : 'Integer, temp23795 : 'Integer, temp23792 : 'Integer, temp23793 : 'Integer, temp23790 : 'Integer, temp23791 : 'Integer, temp23788 : 'Integer, temp23789 : 'Integer, temp23802 : 'Integer, temp23803 : 'Integer, temp23800 : 'Integer, temp23801 : 'Integer, temp23798 : 'Integer, temp23799 : 'Integer, temp23796 : 'Integer, temp23797 : 'Integer, temp23810 : 'Integer, temp23811 : 'Integer, temp23808 : 'Integer, temp23809 : 'Integer, temp23806 : 'Integer, temp23807 : 'Integer, temp23804 : 'Integer, temp23805 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp23782 %rsp)
 (set %rax temp23782 %rsp)
 (set temp23782 temp23784 %rsp)
 (set %rax temp23782 temp23784 %rsp)
 (set temp23782 temp23784 temp23786 %rsp)
 (set %rax temp23782 temp23784 temp23786 %rsp)
 (set temp23782 temp23784 temp23786 temp23788 %rsp)
 (set %rax temp23782 temp23784 temp23786 temp23788 %rsp)
 (set temp23782 temp23784 temp23786 temp23788 temp23790 %rsp)
 (set %rax temp23782 temp23784 temp23786 temp23788 temp23790 %rsp)
 (set temp23782 temp23784 temp23786 temp23788 temp23790 temp23792 %rsp)
 (set %rax temp23782 temp23784 temp23786 temp23788 temp23790 temp23792 %rsp)
 (set
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp)
 (set
  %rax
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp)
 (set
  temp23796
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp)
 (set
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23796
  %rax)
 (set
  temp23796
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798)
 (set
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23796
  %rax
  temp23782
  temp23798)
 (set
  temp23796
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800)
 (set
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23796
  %rax
  temp23782
  temp23798
  temp23784
  temp23800)
 (set
  temp23796
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802)
 (set
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23796
  %rax
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802)
 (set
  temp23796
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804)
 (set
  temp23790
  temp23792
  temp23794
  %rsp
  temp23796
  %rax
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804)
 (set
  temp23796
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806)
 (set
  temp23792
  temp23794
  %rsp
  temp23796
  %rax
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806)
 (set
  temp23796
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808)
 (set
  temp23794
  %rsp
  temp23796
  %rax
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808)
 (set
  temp23796
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808
  temp23794
  temp23810)
 (set
  %rsp
  temp23796
  %rax
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808
  temp23794
  temp23810)
 (set
  %rsp
  temp23796
  temp23812
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808
  temp23794
  temp23810)
 (set
  %rsp
  temp23796
  temp23812
  %rax
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808
  temp23794
  temp23810)
 (set
  temp23813
  %rsp
  temp23796
  temp23812
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808
  temp23794
  temp23810)
 (set
  temp23796
  temp23813
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808
  temp23794
  temp23810
  temp23811
  %rsp)
 (set
  temp23796
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808
  temp23794
  temp23810
  temp23811
  %rsp)
 (set
  temp23796
  temp23809
  temp23794
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808
  temp23811
  %rsp)
 (set
  temp23796
  temp23809
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806
  temp23792
  temp23808)
 (set
  temp23796
  temp23807
  temp23792
  temp23809
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806)
 (set
  temp23796
  temp23807
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804
  temp23790
  temp23806)
 (set
  temp23796
  temp23805
  temp23790
  temp23807
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804)
 (set
  temp23796
  temp23805
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802
  temp23788
  temp23804)
 (set
  temp23796
  temp23803
  temp23788
  temp23805
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802)
 (set
  temp23796
  temp23803
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800
  temp23786
  temp23802)
 (set
  temp23796
  temp23801
  temp23786
  temp23803
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800)
 (set
  temp23796
  temp23801
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798
  temp23784
  temp23800)
 (set
  temp23796
  temp23799
  temp23784
  temp23801
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798)
 (set
  temp23796
  temp23799
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp
  temp23782
  temp23798)
 (set
  temp23796
  temp23797
  temp23782
  temp23799
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp)
 (set
  temp23796
  temp23797
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  %rsp)
 (set
  temp23797
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  temp23795
  %rsp)
 (set
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23794
  temp23795
  %rsp)
 (set
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23793
  temp23795
  %rsp)
 (set
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23792
  temp23793
  %rsp)
 (set
  temp23782
  temp23784
  temp23786
  temp23788
  temp23790
  temp23791
  temp23793
  %rsp)
 (set temp23782 temp23784 temp23786 temp23788 temp23790 temp23791 %rsp)
 (set temp23782 temp23784 temp23786 temp23788 temp23789 temp23791 %rsp)
 (set temp23782 temp23784 temp23786 temp23788 temp23789 %rsp)
 (set temp23782 temp23784 temp23786 temp23787 temp23789 %rsp)
 (set temp23782 temp23784 temp23786 temp23787 %rsp)
 (set temp23782 temp23784 temp23785 temp23787 %rsp)
 (set temp23782 temp23784 temp23785 %rsp)
 (set temp23782 temp23783 temp23785 %rsp)
 (set temp23782 temp23783 %rsp)
 (set %rax temp23783 %rsp)
 (set %rax %rsp))
callq read_int
movq %rax, temp23782
callq read_int
movq %rax, temp23784
callq read_int
movq %rax, temp23786
callq read_int
movq %rax, temp23788
callq read_int
movq %rax, temp23790
callq read_int
movq %rax, temp23792
callq read_int
movq %rax, temp23794
callq read_int
movq %rax, temp23796
callq read_int
movq %rax, temp23798
callq read_int
movq %rax, temp23800
callq read_int
movq %rax, temp23802
callq read_int
movq %rax, temp23804
callq read_int
movq %rax, temp23806
callq read_int
movq %rax, temp23808
callq read_int
movq %rax, temp23810
callq read_int
movq %rax, temp23812
callq read_int
movq %rax, temp23813
movq temp23812, temp23811
addq temp23813, temp23811
movq temp23810, temp23809
subq temp23811, temp23809
movq temp23808, temp23807
addq temp23809, temp23807
movq temp23806, temp23805
addq temp23807, temp23805
movq temp23804, temp23803
subq temp23805, temp23803
movq temp23802, temp23801
addq temp23803, temp23801
movq temp23800, temp23799
addq temp23801, temp23799
movq temp23798, temp23797
addq temp23799, temp23797
movq temp23796, temp23795
addq temp23797, temp23795
movq temp23794, temp23793
subq temp23795, temp23793
movq temp23792, temp23791
addq temp23793, temp23791
movq temp23790, temp23789
addq temp23791, temp23789
movq temp23788, temp23787
subq temp23789, temp23787
movq temp23786, temp23785
addq temp23787, temp23785
movq temp23784, temp23783
addq temp23785, temp23783
movq temp23782, %rax
addq temp23783, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23786 : 'Integer, temp23787 : 'Integer, temp23784 : 'Integer, temp23785 : 'Integer, temp23782 : 'Integer, temp23783 : 'Integer, temp23812 : 'Integer, temp23813 : 'Integer, temp23794 : 'Integer, temp23795 : 'Integer, temp23792 : 'Integer, temp23793 : 'Integer, temp23790 : 'Integer, temp23791 : 'Integer, temp23788 : 'Integer, temp23789 : 'Integer, temp23802 : 'Integer, temp23803 : 'Integer, temp23800 : 'Integer, temp23801 : 'Integer, temp23798 : 'Integer, temp23799 : 'Integer, temp23796 : 'Integer, temp23797 : 'Integer, temp23810 : 'Integer, temp23811 : 'Integer, temp23808 : 'Integer, temp23809 : 'Integer, temp23806 : 'Integer, temp23807 : 'Integer, temp23804 : 'Integer, temp23805 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23806 temp23805)
 (list temp23807 temp23808)
 (list temp23804 temp23803)
 (list temp23805 temp23806)
 (list temp23810 temp23809)
 (list temp23811 temp23812)
 (list temp23808 temp23807)
 (list temp23809 temp23810)
 (list temp23798 temp23797)
 (list temp23799 temp23800)
 (list temp23796 temp23795)
 (list temp23797 temp23798)
 (list temp23802 temp23801)
 (list temp23803 temp23804)
 (list temp23800 temp23799)
 (list temp23801 temp23802)
 (list temp23790 temp23789)
 (list temp23791 temp23792)
 (list temp23788 temp23787)
 (list temp23789 temp23790)
 (list temp23794 temp23793)
 (list temp23795 temp23796)
 (list temp23792 temp23791)
 (list temp23793 temp23794)
 (list temp23783 temp23784)
 (list temp23812 temp23811)
 (list temp23786 temp23785)
 (list temp23787 temp23788)
 (list temp23784 temp23783)
 (list temp23785 temp23786))
start:
    callq read_int
    movq %rax, temp23782
    callq read_int
    movq %rax, temp23784
    callq read_int
    movq %rax, temp23786
    callq read_int
    movq %rax, temp23788
    callq read_int
    movq %rax, temp23790
    callq read_int
    movq %rax, temp23792
    callq read_int
    movq %rax, temp23794
    callq read_int
    movq %rax, temp23796
    callq read_int
    movq %rax, temp23798
    callq read_int
    movq %rax, temp23800
    callq read_int
    movq %rax, temp23802
    callq read_int
    movq %rax, temp23804
    callq read_int
    movq %rax, temp23806
    callq read_int
    movq %rax, temp23808
    callq read_int
    movq %rax, temp23810
    callq read_int
    movq %rax, temp23812
    callq read_int
    movq %rax, temp23813
    movq temp23812, temp23811
    addq temp23813, temp23811
    movq temp23810, temp23809
    subq temp23811, temp23809
    movq temp23808, temp23807
    addq temp23809, temp23807
    movq temp23806, temp23805
    addq temp23807, temp23805
    movq temp23804, temp23803
    subq temp23805, temp23803
    movq temp23802, temp23801
    addq temp23803, temp23801
    movq temp23800, temp23799
    addq temp23801, temp23799
    movq temp23798, temp23797
    addq temp23799, temp23797
    movq temp23796, temp23795
    addq temp23797, temp23795
    movq temp23794, temp23793
    subq temp23795, temp23793
    movq temp23792, temp23791
    addq temp23793, temp23791
    movq temp23790, temp23789
    addq temp23791, temp23789
    movq temp23788, temp23787
    subq temp23789, temp23787
    movq temp23786, temp23785
    addq temp23787, temp23785
    movq temp23784, temp23783
    addq temp23785, temp23783
    movq temp23782, %rax
    addq temp23783, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23786 : 'Integer, temp23787 : 'Integer, temp23784 : 'Integer, temp23785 : 'Integer, temp23782 : 'Integer, temp23783 : 'Integer, temp23812 : 'Integer, temp23813 : 'Integer, temp23794 : 'Integer, temp23795 : 'Integer, temp23792 : 'Integer, temp23793 : 'Integer, temp23790 : 'Integer, temp23791 : 'Integer, temp23788 : 'Integer, temp23789 : 'Integer, temp23802 : 'Integer, temp23803 : 'Integer, temp23800 : 'Integer, temp23801 : 'Integer, temp23798 : 'Integer, temp23799 : 'Integer, temp23796 : 'Integer, temp23797 : 'Integer, temp23810 : 'Integer, temp23811 : 'Integer, temp23808 : 'Integer, temp23809 : 'Integer, temp23806 : 'Integer, temp23807 : 'Integer, temp23804 : 'Integer, temp23805 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23806 temp23805)
 (list temp23807 temp23808)
 (list temp23804 temp23803)
 (list temp23805 temp23806)
 (list temp23810 temp23809)
 (list temp23811 temp23812)
 (list temp23808 temp23807)
 (list temp23809 temp23810)
 (list temp23798 temp23797)
 (list temp23799 temp23800)
 (list temp23796 temp23795)
 (list temp23797 temp23798)
 (list temp23802 temp23801)
 (list temp23803 temp23804)
 (list temp23800 temp23799)
 (list temp23801 temp23802)
 (list temp23790 temp23789)
 (list temp23791 temp23792)
 (list temp23788 temp23787)
 (list temp23789 temp23790)
 (list temp23794 temp23793)
 (list temp23795 temp23796)
 (list temp23792 temp23791)
 (list temp23793 temp23794)
 (list temp23783 temp23784)
 (list temp23812 temp23811)
 (list temp23786 temp23785)
 (list temp23787 temp23788)
 (list temp23784 temp23783)
 (list temp23785 temp23786))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp23804 7)
 (cons temp23806 8)
 (cons temp23808 9)
 (cons temp23810 10)
 (cons temp23796 11)
 (cons temp23798 12)
 (cons temp23800 13)
 (cons temp23802 14)
 (cons temp23788 15)
 (cons temp23790 16)
 (cons temp23792 17)
 (cons temp23794 18)
 (cons temp23812 19)
 (cons temp23782 20)
 (cons temp23784 21)
 (cons temp23786 22)
 (cons temp23813 0)
 (cons temp23811 1)
 (cons temp23809 0)
 (cons temp23807 1)
 (cons temp23805 0)
 (cons temp23803 1)
 (cons temp23801 0)
 (cons temp23799 1)
 (cons temp23797 0)
 (cons temp23795 1)
 (cons temp23793 0)
 (cons temp23791 1)
 (cons temp23789 0)
 (cons temp23787 1)
 (cons temp23785 0)
 (cons temp23783 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
12
homes
:
(list
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp))
 (cons 2 %rsi)
 (cons 18 -104(%rbp))
 (cons 3 %rdi)
 (cons 19 -112(%rbp))
 (cons 4 %r8)
 (cons 20 -120(%rbp))
 (cons 5 %r9)
 (cons 21 -128(%rbp))
 (cons 6 %r10)
 (cons 22 -136(%rbp)))
start:
    callq read_int
    movq %rax, -120(%rbp)
    callq read_int
    movq %rax, -128(%rbp)
    callq read_int
    movq %rax, -136(%rbp)
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, -88(%rbp)
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, -104(%rbp)
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, -56(%rbp)
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %r13
    callq read_int
    movq %rax, %r14
    callq read_int
    movq %rax, -112(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -112(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    subq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    subq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -104(%rbp), %rcx
    subq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    subq %rcx, %rdx
    movq -136(%rbp), %rcx
    addq %rdx, %rcx
    movq -128(%rbp), %rdx
    addq %rcx, %rdx
    movq -120(%rbp), %rax
    addq %rdx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23786 : 'Integer, temp23787 : 'Integer, temp23784 : 'Integer, temp23785 : 'Integer, temp23782 : 'Integer, temp23783 : 'Integer, temp23812 : 'Integer, temp23813 : 'Integer, temp23794 : 'Integer, temp23795 : 'Integer, temp23792 : 'Integer, temp23793 : 'Integer, temp23790 : 'Integer, temp23791 : 'Integer, temp23788 : 'Integer, temp23789 : 'Integer, temp23802 : 'Integer, temp23803 : 'Integer, temp23800 : 'Integer, temp23801 : 'Integer, temp23798 : 'Integer, temp23799 : 'Integer, temp23796 : 'Integer, temp23797 : 'Integer, temp23810 : 'Integer, temp23811 : 'Integer, temp23808 : 'Integer, temp23809 : 'Integer, temp23806 : 'Integer, temp23807 : 'Integer, temp23804 : 'Integer, temp23805 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23806 temp23805)
 (list temp23807 temp23808)
 (list temp23804 temp23803)
 (list temp23805 temp23806)
 (list temp23810 temp23809)
 (list temp23811 temp23812)
 (list temp23808 temp23807)
 (list temp23809 temp23810)
 (list temp23798 temp23797)
 (list temp23799 temp23800)
 (list temp23796 temp23795)
 (list temp23797 temp23798)
 (list temp23802 temp23801)
 (list temp23803 temp23804)
 (list temp23800 temp23799)
 (list temp23801 temp23802)
 (list temp23790 temp23789)
 (list temp23791 temp23792)
 (list temp23788 temp23787)
 (list temp23789 temp23790)
 (list temp23794 temp23793)
 (list temp23795 temp23796)
 (list temp23792 temp23791)
 (list temp23793 temp23794)
 (list temp23783 temp23784)
 (list temp23812 temp23811)
 (list temp23786 temp23785)
 (list temp23787 temp23788)
 (list temp23784 temp23783)
 (list temp23785 temp23786))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp23804 7)
 (cons temp23806 8)
 (cons temp23808 9)
 (cons temp23810 10)
 (cons temp23796 11)
 (cons temp23798 12)
 (cons temp23800 13)
 (cons temp23802 14)
 (cons temp23788 15)
 (cons temp23790 16)
 (cons temp23792 17)
 (cons temp23794 18)
 (cons temp23812 19)
 (cons temp23782 20)
 (cons temp23784 21)
 (cons temp23786 22)
 (cons temp23813 0)
 (cons temp23811 1)
 (cons temp23809 0)
 (cons temp23807 1)
 (cons temp23805 0)
 (cons temp23803 1)
 (cons temp23801 0)
 (cons temp23799 1)
 (cons temp23797 0)
 (cons temp23795 1)
 (cons temp23793 0)
 (cons temp23791 1)
 (cons temp23789 0)
 (cons temp23787 1)
 (cons temp23785 0)
 (cons temp23783 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
12
homes
:
(list
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp))
 (cons 2 %rsi)
 (cons 18 -104(%rbp))
 (cons 3 %rdi)
 (cons 19 -112(%rbp))
 (cons 4 %r8)
 (cons 20 -120(%rbp))
 (cons 5 %r9)
 (cons 21 -128(%rbp))
 (cons 6 %r10)
 (cons 22 -136(%rbp)))
start:
    callq read_int
    movq %rax, -120(%rbp)
    callq read_int
    movq %rax, -128(%rbp)
    callq read_int
    movq %rax, -136(%rbp)
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, -88(%rbp)
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, -104(%rbp)
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, -56(%rbp)
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %r13
    callq read_int
    movq %rax, %r14
    callq read_int
    movq %rax, -112(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -112(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    subq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    subq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -104(%rbp), %rcx
    subq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    subq %rcx, %rdx
    movq -136(%rbp), %rcx
    addq %rdx, %rcx
    movq -128(%rbp), %rdx
    addq %rcx, %rdx
    movq -120(%rbp), %rax
    addq %rdx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23786 : 'Integer, temp23787 : 'Integer, temp23784 : 'Integer, temp23785 : 'Integer, temp23782 : 'Integer, temp23783 : 'Integer, temp23812 : 'Integer, temp23813 : 'Integer, temp23794 : 'Integer, temp23795 : 'Integer, temp23792 : 'Integer, temp23793 : 'Integer, temp23790 : 'Integer, temp23791 : 'Integer, temp23788 : 'Integer, temp23789 : 'Integer, temp23802 : 'Integer, temp23803 : 'Integer, temp23800 : 'Integer, temp23801 : 'Integer, temp23798 : 'Integer, temp23799 : 'Integer, temp23796 : 'Integer, temp23797 : 'Integer, temp23810 : 'Integer, temp23811 : 'Integer, temp23808 : 'Integer, temp23809 : 'Integer, temp23806 : 'Integer, temp23807 : 'Integer, temp23804 : 'Integer, temp23805 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23806 temp23805)
 (list temp23807 temp23808)
 (list temp23804 temp23803)
 (list temp23805 temp23806)
 (list temp23810 temp23809)
 (list temp23811 temp23812)
 (list temp23808 temp23807)
 (list temp23809 temp23810)
 (list temp23798 temp23797)
 (list temp23799 temp23800)
 (list temp23796 temp23795)
 (list temp23797 temp23798)
 (list temp23802 temp23801)
 (list temp23803 temp23804)
 (list temp23800 temp23799)
 (list temp23801 temp23802)
 (list temp23790 temp23789)
 (list temp23791 temp23792)
 (list temp23788 temp23787)
 (list temp23789 temp23790)
 (list temp23794 temp23793)
 (list temp23795 temp23796)
 (list temp23792 temp23791)
 (list temp23793 temp23794)
 (list temp23783 temp23784)
 (list temp23812 temp23811)
 (list temp23786 temp23785)
 (list temp23787 temp23788)
 (list temp23784 temp23783)
 (list temp23785 temp23786))
colors
:
(list
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %rsp -2)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp23804 7)
 (cons temp23806 8)
 (cons temp23808 9)
 (cons temp23810 10)
 (cons temp23796 11)
 (cons temp23798 12)
 (cons temp23800 13)
 (cons temp23802 14)
 (cons temp23788 15)
 (cons temp23790 16)
 (cons temp23792 17)
 (cons temp23794 18)
 (cons temp23812 19)
 (cons temp23782 20)
 (cons temp23784 21)
 (cons temp23786 22)
 (cons temp23813 0)
 (cons temp23811 1)
 (cons temp23809 0)
 (cons temp23807 1)
 (cons temp23805 0)
 (cons temp23803 1)
 (cons temp23801 0)
 (cons temp23799 1)
 (cons temp23797 0)
 (cons temp23795 1)
 (cons temp23793 0)
 (cons temp23791 1)
 (cons temp23789 0)
 (cons temp23787 1)
 (cons temp23785 0)
 (cons temp23783 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
12
homes
:
(list
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp))
 (cons 2 %rsi)
 (cons 18 -104(%rbp))
 (cons 3 %rdi)
 (cons 19 -112(%rbp))
 (cons 4 %r8)
 (cons 20 -120(%rbp))
 (cons 5 %r9)
 (cons 21 -128(%rbp))
 (cons 6 %r10)
 (cons 22 -136(%rbp)))
start:
    callq read_int
    movq %rax, -120(%rbp)
    callq read_int
    movq %rax, -128(%rbp)
    callq read_int
    movq %rax, -136(%rbp)
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, -88(%rbp)
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, -104(%rbp)
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, -56(%rbp)
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %r13
    callq read_int
    movq %rax, %r14
    callq read_int
    movq %rax, -112(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -112(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    subq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    subq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -104(%rbp), %rcx
    subq %rdx, %rcx
    movq -96(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rcx
    addq %rdx, %rcx
    movq -80(%rbp), %rdx
    subq %rcx, %rdx
    movq -136(%rbp), %rcx
    addq %rdx, %rcx
    movq -128(%rbp), %rdx
    addq %rcx, %rdx
    movq -120(%rbp), %rax
    addq %rdx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $104, %rsp
    jmp start
    
conclusion:
    addq $104, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, -120(%rbp)
	callq	_read_int
	movq	%rax, -128(%rbp)
	callq	_read_int
	movq	%rax, -136(%rbp)
	callq	_read_int
	movq	%rax, -80(%rbp)
	callq	_read_int
	movq	%rax, -88(%rbp)
	callq	_read_int
	movq	%rax, -96(%rbp)
	callq	_read_int
	movq	%rax, -104(%rbp)
	callq	_read_int
	movq	%rax, -48(%rbp)
	callq	_read_int
	movq	%rax, -56(%rbp)
	callq	_read_int
	movq	%rax, -64(%rbp)
	callq	_read_int
	movq	%rax, -72(%rbp)
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %r12
	callq	_read_int
	movq	%rax, %r13
	callq	_read_int
	movq	%rax, %r14
	callq	_read_int
	movq	%rax, -112(%rbp)
	callq	_read_int
	movq	%rax, %rcx
	movq	-112(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%r14, %rcx
	subq	%rdx, %rcx
	movq	%r13, %rdx
	addq	%rcx, %rdx
	movq	%r12, %rcx
	addq	%rdx, %rcx
	movq	%rbx, %rdx
	subq	%rcx, %rdx
	movq	-72(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-64(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-56(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-104(%rbp), %rcx
	subq	%rdx, %rcx
	movq	-96(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-88(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-80(%rbp), %rdx
	subq	%rcx, %rdx
	movq	-136(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-128(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$104, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_19.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (read))))))))))))))))) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (read)))))))))))))))))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (read))))))))))))))))) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (read)))))))))))))))))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (read))))))))))))))))) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (+ (read) (+ (read) (- (read) (+ (read) (+ (read) (- (read) (+ (read) (read)))))))))))))))))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23816 (read)])
   (let ([temp23818 (read)])
      (let ([temp23820 (read)])
         (let ([temp23822 (read)])
            (let ([temp23824 (read)])
               (let ([temp23826 (read)])
                  (let ([temp23828 (read)])
                     (let ([temp23830 (read)])
                        (let ([temp23832 (read)])
                           (let ([temp23834 (read)])
                              (let ([temp23836 (read)])
                                 (let ([temp23838 (read)])
                                    (let ([temp23840 (read)])
                                       (let ([temp23842 (read)])
                                          (let ([temp23844 (read)])
                                             (let ([temp23846 (read)])
                                                (let ([temp23847 (read)])
                                                   (let ([temp23845 (+ temp23846 temp23847)])
                                                      (let ([temp23843 (- temp23844 temp23845)])
                                                         (let ([temp23841 (+ temp23842 temp23843)])
                                                            (let ([temp23839 (+ temp23840 temp23841)])
                                                               (let ([temp23837 (- temp23838 temp23839)])
                                                                  (let ([temp23835 (+ temp23836 temp23837)])
                                                                     (let ([temp23833 (+ temp23834 temp23835)])
                                                                        (let ([temp23831 (+ temp23832 temp23833)])
                                                                           (let ([temp23829 (+ temp23830 temp23831)])
                                                                              (let ([temp23827 (- temp23828 temp23829)])
                                                                                 (let ([temp23825 (+ temp23826 temp23827)])
                                                                                    (let ([temp23823 (+ temp23824 temp23825)])
                                                                                       (let ([temp23821 (- temp23822 temp23823)])
                                                                                          (let ([temp23819 (+ temp23820 temp23821)])
                                                                                             (let ([temp23817 (+ temp23818 temp23819)])
                                                                                                (let ([temp23815 (+ temp23816 temp23817)])
                                                                                                   (let ([temp23849 (read)])
                                                                                                      (let ([temp23851 (read)])
                                                                                                         (let ([temp23853 (read)])
                                                                                                            (let ([temp23855 (read)])
                                                                                                               (let ([temp23857 (read)])
                                                                                                                  (let ([temp23859 (read)])
                                                                                                                     (let ([temp23861 (read)])
                                                                                                                        (let ([temp23863 (read)])
                                                                                                                           (let ([temp23865 (read)])
                                                                                                                              (let ([temp23867 (read)])
                                                                                                                                 (let ([temp23869 (read)])
                                                                                                                                    (let ([temp23871 (read)])
                                                                                                                                       (let ([temp23873 (read)])
                                                                                                                                          (let ([temp23875 (read)])
                                                                                                                                             (let ([temp23877 (read)])
                                                                                                                                                (let ([temp23878 (read)])
                                                                                                                                                   (let ([temp23876 (+ temp23877 temp23878)])
                                                                                                                                                      (let ([temp23874 (- temp23875 temp23876)])
                                                                                                                                                         (let ([temp23872 (+ temp23873 temp23874)])
                                                                                                                                                            (let ([temp23870 (+ temp23871 temp23872)])
                                                                                                                                                               (let ([temp23868 (- temp23869 temp23870)])
                                                                                                                                                                  (let ([temp23866 (+ temp23867 temp23868)])
                                                                                                                                                                     (let ([temp23864 (+ temp23865 temp23866)])
                                                                                                                                                                        (let ([temp23862 (+ temp23863 temp23864)])
                                                                                                                                                                           (let ([temp23860 (+ temp23861 temp23862)])
                                                                                                                                                                              (let ([temp23858 (- temp23859 temp23860)])
                                                                                                                                                                                 (let ([temp23856 (+ temp23857 temp23858)])
                                                                                                                                                                                    (let ([temp23854 (+ temp23855 temp23856)])
                                                                                                                                                                                       (let ([temp23852 (- temp23853 temp23854)])
                                                                                                                                                                                          (let ([temp23850 (+ temp23851 temp23852)])
                                                                                                                                                                                             (let ([temp23848 (+ temp23849 temp23850)])
                                                                                                                                                                                                (+ temp23815 temp23848)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23816 = (read);
    temp23818 = (read);
    temp23820 = (read);
    temp23822 = (read);
    temp23824 = (read);
    temp23826 = (read);
    temp23828 = (read);
    temp23830 = (read);
    temp23832 = (read);
    temp23834 = (read);
    temp23836 = (read);
    temp23838 = (read);
    temp23840 = (read);
    temp23842 = (read);
    temp23844 = (read);
    temp23846 = (read);
    temp23847 = (read);
    temp23845 = (+ temp23846 temp23847);
    temp23843 = (- temp23844 temp23845);
    temp23841 = (+ temp23842 temp23843);
    temp23839 = (+ temp23840 temp23841);
    temp23837 = (- temp23838 temp23839);
    temp23835 = (+ temp23836 temp23837);
    temp23833 = (+ temp23834 temp23835);
    temp23831 = (+ temp23832 temp23833);
    temp23829 = (+ temp23830 temp23831);
    temp23827 = (- temp23828 temp23829);
    temp23825 = (+ temp23826 temp23827);
    temp23823 = (+ temp23824 temp23825);
    temp23821 = (- temp23822 temp23823);
    temp23819 = (+ temp23820 temp23821);
    temp23817 = (+ temp23818 temp23819);
    temp23815 = (+ temp23816 temp23817);
    temp23849 = (read);
    temp23851 = (read);
    temp23853 = (read);
    temp23855 = (read);
    temp23857 = (read);
    temp23859 = (read);
    temp23861 = (read);
    temp23863 = (read);
    temp23865 = (read);
    temp23867 = (read);
    temp23869 = (read);
    temp23871 = (read);
    temp23873 = (read);
    temp23875 = (read);
    temp23877 = (read);
    temp23878 = (read);
    temp23876 = (+ temp23877 temp23878);
    temp23874 = (- temp23875 temp23876);
    temp23872 = (+ temp23873 temp23874);
    temp23870 = (+ temp23871 temp23872);
    temp23868 = (- temp23869 temp23870);
    temp23866 = (+ temp23867 temp23868);
    temp23864 = (+ temp23865 temp23866);
    temp23862 = (+ temp23863 temp23864);
    temp23860 = (+ temp23861 temp23862);
    temp23858 = (- temp23859 temp23860);
    temp23856 = (+ temp23857 temp23858);
    temp23854 = (+ temp23855 temp23856);
    temp23852 = (- temp23853 temp23854);
    temp23850 = (+ temp23851 temp23852);
    temp23848 = (+ temp23849 temp23850);
    return (+ temp23815 temp23848);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23850 : 'Integer, temp23851 : 'Integer, temp23848 : 'Integer, temp23849 : 'Integer, temp23846 : 'Integer, temp23847 : 'Integer, temp23844 : 'Integer, temp23845 : 'Integer, temp23858 : 'Integer, temp23859 : 'Integer, temp23856 : 'Integer, temp23857 : 'Integer, temp23854 : 'Integer, temp23855 : 'Integer, temp23852 : 'Integer, temp23853 : 'Integer, temp23834 : 'Integer, temp23835 : 'Integer, temp23832 : 'Integer, temp23833 : 'Integer, temp23830 : 'Integer, temp23831 : 'Integer, temp23828 : 'Integer, temp23829 : 'Integer, temp23842 : 'Integer, temp23843 : 'Integer, temp23840 : 'Integer, temp23841 : 'Integer, temp23838 : 'Integer, temp23839 : 'Integer, temp23836 : 'Integer, temp23837 : 'Integer, temp23818 : 'Integer, temp23819 : 'Integer, temp23816 : 'Integer, temp23817 : 'Integer, temp23878 : 'Integer, temp23815 : 'Integer, temp23876 : 'Integer, temp23877 : 'Integer, temp23826 : 'Integer, temp23827 : 'Integer, temp23824 : 'Integer, temp23825 : 'Integer, temp23822 : 'Integer, temp23823 : 'Integer, temp23820 : 'Integer, temp23821 : 'Integer, temp23866 : 'Integer, temp23867 : 'Integer, temp23864 : 'Integer, temp23865 : 'Integer, temp23862 : 'Integer, temp23863 : 'Integer, temp23860 : 'Integer, temp23861 : 'Integer, temp23874 : 'Integer, temp23875 : 'Integer, temp23872 : 'Integer, temp23873 : 'Integer, temp23870 : 'Integer, temp23871 : 'Integer, temp23868 : 'Integer, temp23869 : 'Integer, 
start:
    callq read_int
    movq %rax, temp23816
    callq read_int
    movq %rax, temp23818
    callq read_int
    movq %rax, temp23820
    callq read_int
    movq %rax, temp23822
    callq read_int
    movq %rax, temp23824
    callq read_int
    movq %rax, temp23826
    callq read_int
    movq %rax, temp23828
    callq read_int
    movq %rax, temp23830
    callq read_int
    movq %rax, temp23832
    callq read_int
    movq %rax, temp23834
    callq read_int
    movq %rax, temp23836
    callq read_int
    movq %rax, temp23838
    callq read_int
    movq %rax, temp23840
    callq read_int
    movq %rax, temp23842
    callq read_int
    movq %rax, temp23844
    callq read_int
    movq %rax, temp23846
    callq read_int
    movq %rax, temp23847
    movq temp23846, temp23845
    addq temp23847, temp23845
    movq temp23844, temp23843
    subq temp23845, temp23843
    movq temp23842, temp23841
    addq temp23843, temp23841
    movq temp23840, temp23839
    addq temp23841, temp23839
    movq temp23838, temp23837
    subq temp23839, temp23837
    movq temp23836, temp23835
    addq temp23837, temp23835
    movq temp23834, temp23833
    addq temp23835, temp23833
    movq temp23832, temp23831
    addq temp23833, temp23831
    movq temp23830, temp23829
    addq temp23831, temp23829
    movq temp23828, temp23827
    subq temp23829, temp23827
    movq temp23826, temp23825
    addq temp23827, temp23825
    movq temp23824, temp23823
    addq temp23825, temp23823
    movq temp23822, temp23821
    subq temp23823, temp23821
    movq temp23820, temp23819
    addq temp23821, temp23819
    movq temp23818, temp23817
    addq temp23819, temp23817
    movq temp23816, temp23815
    addq temp23817, temp23815
    callq read_int
    movq %rax, temp23849
    callq read_int
    movq %rax, temp23851
    callq read_int
    movq %rax, temp23853
    callq read_int
    movq %rax, temp23855
    callq read_int
    movq %rax, temp23857
    callq read_int
    movq %rax, temp23859
    callq read_int
    movq %rax, temp23861
    callq read_int
    movq %rax, temp23863
    callq read_int
    movq %rax, temp23865
    callq read_int
    movq %rax, temp23867
    callq read_int
    movq %rax, temp23869
    callq read_int
    movq %rax, temp23871
    callq read_int
    movq %rax, temp23873
    callq read_int
    movq %rax, temp23875
    callq read_int
    movq %rax, temp23877
    callq read_int
    movq %rax, temp23878
    movq temp23877, temp23876
    addq temp23878, temp23876
    movq temp23875, temp23874
    subq temp23876, temp23874
    movq temp23873, temp23872
    addq temp23874, temp23872
    movq temp23871, temp23870
    addq temp23872, temp23870
    movq temp23869, temp23868
    subq temp23870, temp23868
    movq temp23867, temp23866
    addq temp23868, temp23866
    movq temp23865, temp23864
    addq temp23866, temp23864
    movq temp23863, temp23862
    addq temp23864, temp23862
    movq temp23861, temp23860
    addq temp23862, temp23860
    movq temp23859, temp23858
    subq temp23860, temp23858
    movq temp23857, temp23856
    addq temp23858, temp23856
    movq temp23855, temp23854
    addq temp23856, temp23854
    movq temp23853, temp23852
    subq temp23854, temp23852
    movq temp23851, temp23850
    addq temp23852, temp23850
    movq temp23849, temp23848
    addq temp23850, temp23848
    movq temp23815, %rax
    addq temp23848, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23850 : 'Integer, temp23851 : 'Integer, temp23848 : 'Integer, temp23849 : 'Integer, temp23846 : 'Integer, temp23847 : 'Integer, temp23844 : 'Integer, temp23845 : 'Integer, temp23858 : 'Integer, temp23859 : 'Integer, temp23856 : 'Integer, temp23857 : 'Integer, temp23854 : 'Integer, temp23855 : 'Integer, temp23852 : 'Integer, temp23853 : 'Integer, temp23834 : 'Integer, temp23835 : 'Integer, temp23832 : 'Integer, temp23833 : 'Integer, temp23830 : 'Integer, temp23831 : 'Integer, temp23828 : 'Integer, temp23829 : 'Integer, temp23842 : 'Integer, temp23843 : 'Integer, temp23840 : 'Integer, temp23841 : 'Integer, temp23838 : 'Integer, temp23839 : 'Integer, temp23836 : 'Integer, temp23837 : 'Integer, temp23818 : 'Integer, temp23819 : 'Integer, temp23816 : 'Integer, temp23817 : 'Integer, temp23878 : 'Integer, temp23815 : 'Integer, temp23876 : 'Integer, temp23877 : 'Integer, temp23826 : 'Integer, temp23827 : 'Integer, temp23824 : 'Integer, temp23825 : 'Integer, temp23822 : 'Integer, temp23823 : 'Integer, temp23820 : 'Integer, temp23821 : 'Integer, temp23866 : 'Integer, temp23867 : 'Integer, temp23864 : 'Integer, temp23865 : 'Integer, temp23862 : 'Integer, temp23863 : 'Integer, temp23860 : 'Integer, temp23861 : 'Integer, temp23874 : 'Integer, temp23875 : 'Integer, temp23872 : 'Integer, temp23873 : 'Integer, temp23870 : 'Integer, temp23871 : 'Integer, temp23868 : 'Integer, temp23869 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set temp23816 %rsp)
 (set %rax temp23816 %rsp)
 (set temp23816 temp23818 %rsp)
 (set %rax temp23816 temp23818 %rsp)
 (set temp23816 temp23818 temp23820 %rsp)
 (set %rax temp23816 temp23818 temp23820 %rsp)
 (set temp23816 temp23818 temp23820 temp23822 %rsp)
 (set %rax temp23816 temp23818 temp23820 temp23822 %rsp)
 (set temp23816 temp23818 temp23820 temp23822 temp23824 %rsp)
 (set %rax temp23816 temp23818 temp23820 temp23822 temp23824 %rsp)
 (set temp23816 temp23818 temp23820 temp23822 temp23824 temp23826 %rsp)
 (set %rax temp23816 temp23818 temp23820 temp23822 temp23824 temp23826 %rsp)
 (set
  temp23828
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp)
 (set
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp
  temp23828
  %rax)
 (set
  temp23828
  temp23830
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp)
 (set
  temp23830
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp
  temp23828
  %rax)
 (set
  temp23828
  temp23830
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832)
 (set
  temp23830
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp
  temp23828
  %rax
  temp23816
  temp23832)
 (set
  temp23828
  temp23830
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834)
 (set
  temp23830
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp
  temp23828
  %rax
  temp23816
  temp23832
  temp23818
  temp23834)
 (set
  temp23828
  temp23830
  temp23822
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836)
 (set
  temp23830
  temp23822
  temp23824
  temp23826
  %rsp
  temp23828
  %rax
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836)
 (set
  temp23828
  temp23830
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838)
 (set
  temp23830
  temp23824
  temp23826
  %rsp
  temp23828
  %rax
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838)
 (set
  temp23828
  temp23830
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840)
 (set
  temp23830
  temp23826
  %rsp
  temp23828
  %rax
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840)
 (set
  temp23828
  temp23830
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842)
 (set
  temp23830
  %rsp
  temp23828
  %rax
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842)
 (set
  temp23830
  %rsp
  temp23828
  temp23844
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842)
 (set
  temp23830
  %rsp
  temp23828
  temp23844
  %rax
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842)
 (set
  %rsp
  temp23828
  temp23844
  temp23830
  temp23846
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842)
 (set
  %rsp
  temp23828
  temp23844
  %rax
  temp23830
  temp23846
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842)
 (set
  temp23847
  %rsp
  temp23828
  temp23844
  temp23830
  temp23846
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842)
 (set
  temp23845
  temp23830
  temp23847
  %rsp
  temp23828
  temp23844
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842)
 (set
  temp23845
  temp23830
  %rsp
  temp23828
  temp23844
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842)
 (set
  temp23828
  temp23845
  temp23830
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842
  temp23843
  %rsp)
 (set
  temp23828
  temp23830
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23826
  temp23842
  temp23843
  %rsp)
 (set
  temp23828
  temp23830
  temp23841
  temp23826
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840
  temp23843
  %rsp)
 (set
  temp23828
  temp23830
  temp23841
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838
  temp23824
  temp23840)
 (set
  temp23828
  temp23830
  temp23839
  temp23824
  temp23841
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838)
 (set
  temp23828
  temp23830
  temp23839
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836
  temp23822
  temp23838)
 (set
  temp23828
  temp23830
  temp23837
  temp23822
  temp23839
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836)
 (set
  temp23828
  temp23830
  temp23837
  temp23822
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834
  temp23820
  temp23836)
 (set
  temp23828
  temp23830
  temp23835
  temp23820
  temp23837
  temp23822
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834)
 (set
  temp23828
  temp23830
  temp23835
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832
  temp23818
  temp23834)
 (set
  temp23828
  temp23830
  temp23833
  temp23818
  temp23835
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832)
 (set
  temp23828
  temp23830
  temp23833
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp
  temp23816
  temp23832)
 (set
  temp23828
  temp23830
  temp23831
  temp23816
  temp23833
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp)
 (set
  temp23828
  temp23830
  temp23831
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp)
 (set
  temp23828
  temp23829
  temp23831
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp)
 (set
  temp23828
  temp23829
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  %rsp)
 (set
  temp23829
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  temp23827
  %rsp)
 (set
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23826
  temp23827
  %rsp)
 (set
  temp23816
  temp23818
  temp23820
  temp23822
  temp23824
  temp23825
  temp23827
  %rsp)
 (set temp23816 temp23818 temp23820 temp23822 temp23824 temp23825 %rsp)
 (set temp23816 temp23818 temp23820 temp23822 temp23823 temp23825 %rsp)
 (set temp23816 temp23818 temp23820 temp23822 temp23823 %rsp)
 (set temp23816 temp23818 temp23820 temp23821 temp23823 %rsp)
 (set temp23816 temp23818 temp23820 temp23821 %rsp)
 (set temp23816 temp23818 temp23819 temp23821 %rsp)
 (set temp23816 temp23818 temp23819 %rsp)
 (set temp23816 temp23817 temp23819 %rsp)
 (set temp23816 temp23817 %rsp)
 (set temp23815 temp23817 %rsp)
 (set temp23815 %rsp)
 (set %rax temp23815 %rsp)
 (set temp23815 temp23849 %rsp)
 (set %rax temp23815 temp23849 %rsp)
 (set temp23815 temp23849 temp23851 %rsp)
 (set %rax temp23815 temp23849 temp23851 %rsp)
 (set temp23815 temp23849 temp23851 temp23853 %rsp)
 (set %rax temp23815 temp23849 temp23851 temp23853 %rsp)
 (set temp23815 temp23849 temp23851 temp23853 temp23855 %rsp)
 (set %rax temp23815 temp23849 temp23851 temp23853 temp23855 %rsp)
 (set temp23815 temp23849 temp23851 temp23853 temp23855 temp23857 %rsp)
 (set %rax temp23815 temp23849 temp23851 temp23853 temp23855 temp23857 %rsp)
 (set
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23859
  %rsp)
 (set
  %rax
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23859
  %rsp)
 (set
  temp23861
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23859
  %rsp)
 (set
  %rax
  temp23861
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23859
  %rsp)
 (set
  temp23861
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23859
  %rsp)
 (set
  %rax
  temp23861
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23859
  %rsp)
 (set
  temp23861
  temp23851
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23859
  %rsp)
 (set
  %rax
  temp23861
  temp23851
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23859
  %rsp)
 (set
  temp23861
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23859
  %rsp)
 (set
  %rax
  temp23861
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23859
  %rsp)
 (set
  temp23861
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23859
  %rsp)
 (set
  %rax
  temp23861
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23859
  %rsp)
 (set
  temp23861
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23859
  %rsp)
 (set
  %rax
  temp23861
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23859
  %rsp)
 (set
  temp23861
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  %rsp)
 (set
  %rax
  temp23861
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  %rsp)
 (set
  temp23861
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  temp23875
  %rsp)
 (set
  %rax
  temp23861
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  temp23875
  %rsp)
 (set
  temp23861
  temp23877
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  temp23875
  %rsp)
 (set
  %rax
  temp23861
  temp23877
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  temp23875
  %rsp)
 (set
  temp23878
  temp23861
  temp23877
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  temp23875
  %rsp)
 (set
  temp23876
  temp23861
  temp23878
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  temp23875
  %rsp)
 (set
  temp23876
  temp23861
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  temp23875
  %rsp)
 (set
  temp23876
  temp23861
  temp23874
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  %rsp)
 (set
  temp23861
  temp23874
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23857
  temp23873
  temp23859
  %rsp)
 (set
  temp23861
  temp23872
  temp23857
  temp23874
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23859
  %rsp)
 (set
  temp23861
  temp23872
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23855
  temp23871
  temp23859
  %rsp)
 (set
  temp23861
  temp23870
  temp23855
  temp23872
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23859
  %rsp)
 (set
  temp23861
  temp23870
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23853
  temp23869
  temp23859
  %rsp)
 (set
  temp23861
  temp23868
  temp23853
  temp23870
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23859
  %rsp)
 (set
  temp23861
  temp23868
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23851
  temp23867
  temp23859
  %rsp)
 (set
  temp23861
  temp23866
  temp23851
  temp23868
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23859
  %rsp)
 (set
  temp23861
  temp23866
  temp23851
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23849
  temp23865
  temp23859
  %rsp)
 (set
  temp23861
  temp23864
  temp23849
  temp23866
  temp23851
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23859
  %rsp)
 (set
  temp23861
  temp23864
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23815
  temp23863
  temp23859
  %rsp)
 (set
  temp23861
  temp23862
  temp23815
  temp23864
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23859
  %rsp)
 (set
  temp23861
  temp23862
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23859
  %rsp)
 (set
  temp23860
  temp23862
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23859
  %rsp)
 (set
  temp23860
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23859
  %rsp)
 (set
  temp23860
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23858
  %rsp)
 (set
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23857
  temp23858
  %rsp)
 (set
  temp23815
  temp23849
  temp23851
  temp23853
  temp23855
  temp23856
  temp23858
  %rsp)
 (set temp23815 temp23849 temp23851 temp23853 temp23855 temp23856 %rsp)
 (set temp23815 temp23849 temp23851 temp23853 temp23854 temp23856 %rsp)
 (set temp23815 temp23849 temp23851 temp23853 temp23854 %rsp)
 (set temp23815 temp23849 temp23851 temp23852 temp23854 %rsp)
 (set temp23815 temp23849 temp23851 temp23852 %rsp)
 (set temp23815 temp23849 temp23850 temp23852 %rsp)
 (set temp23815 temp23849 temp23850 %rsp)
 (set temp23815 temp23848 temp23850 %rsp)
 (set temp23815 temp23848 %rsp)
 (set %rax temp23848 %rsp)
 (set %rax %rsp))
callq read_int
movq %rax, temp23816
callq read_int
movq %rax, temp23818
callq read_int
movq %rax, temp23820
callq read_int
movq %rax, temp23822
callq read_int
movq %rax, temp23824
callq read_int
movq %rax, temp23826
callq read_int
movq %rax, temp23828
callq read_int
movq %rax, temp23830
callq read_int
movq %rax, temp23832
callq read_int
movq %rax, temp23834
callq read_int
movq %rax, temp23836
callq read_int
movq %rax, temp23838
callq read_int
movq %rax, temp23840
callq read_int
movq %rax, temp23842
callq read_int
movq %rax, temp23844
callq read_int
movq %rax, temp23846
callq read_int
movq %rax, temp23847
movq temp23846, temp23845
addq temp23847, temp23845
movq temp23844, temp23843
subq temp23845, temp23843
movq temp23842, temp23841
addq temp23843, temp23841
movq temp23840, temp23839
addq temp23841, temp23839
movq temp23838, temp23837
subq temp23839, temp23837
movq temp23836, temp23835
addq temp23837, temp23835
movq temp23834, temp23833
addq temp23835, temp23833
movq temp23832, temp23831
addq temp23833, temp23831
movq temp23830, temp23829
addq temp23831, temp23829
movq temp23828, temp23827
subq temp23829, temp23827
movq temp23826, temp23825
addq temp23827, temp23825
movq temp23824, temp23823
addq temp23825, temp23823
movq temp23822, temp23821
subq temp23823, temp23821
movq temp23820, temp23819
addq temp23821, temp23819
movq temp23818, temp23817
addq temp23819, temp23817
movq temp23816, temp23815
addq temp23817, temp23815
callq read_int
movq %rax, temp23849
callq read_int
movq %rax, temp23851
callq read_int
movq %rax, temp23853
callq read_int
movq %rax, temp23855
callq read_int
movq %rax, temp23857
callq read_int
movq %rax, temp23859
callq read_int
movq %rax, temp23861
callq read_int
movq %rax, temp23863
callq read_int
movq %rax, temp23865
callq read_int
movq %rax, temp23867
callq read_int
movq %rax, temp23869
callq read_int
movq %rax, temp23871
callq read_int
movq %rax, temp23873
callq read_int
movq %rax, temp23875
callq read_int
movq %rax, temp23877
callq read_int
movq %rax, temp23878
movq temp23877, temp23876
addq temp23878, temp23876
movq temp23875, temp23874
subq temp23876, temp23874
movq temp23873, temp23872
addq temp23874, temp23872
movq temp23871, temp23870
addq temp23872, temp23870
movq temp23869, temp23868
subq temp23870, temp23868
movq temp23867, temp23866
addq temp23868, temp23866
movq temp23865, temp23864
addq temp23866, temp23864
movq temp23863, temp23862
addq temp23864, temp23862
movq temp23861, temp23860
addq temp23862, temp23860
movq temp23859, temp23858
subq temp23860, temp23858
movq temp23857, temp23856
addq temp23858, temp23856
movq temp23855, temp23854
addq temp23856, temp23854
movq temp23853, temp23852
subq temp23854, temp23852
movq temp23851, temp23850
addq temp23852, temp23850
movq temp23849, temp23848
addq temp23850, temp23848
movq temp23815, %rax
addq temp23848, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23850 : 'Integer, temp23851 : 'Integer, temp23848 : 'Integer, temp23849 : 'Integer, temp23846 : 'Integer, temp23847 : 'Integer, temp23844 : 'Integer, temp23845 : 'Integer, temp23858 : 'Integer, temp23859 : 'Integer, temp23856 : 'Integer, temp23857 : 'Integer, temp23854 : 'Integer, temp23855 : 'Integer, temp23852 : 'Integer, temp23853 : 'Integer, temp23834 : 'Integer, temp23835 : 'Integer, temp23832 : 'Integer, temp23833 : 'Integer, temp23830 : 'Integer, temp23831 : 'Integer, temp23828 : 'Integer, temp23829 : 'Integer, temp23842 : 'Integer, temp23843 : 'Integer, temp23840 : 'Integer, temp23841 : 'Integer, temp23838 : 'Integer, temp23839 : 'Integer, temp23836 : 'Integer, temp23837 : 'Integer, temp23818 : 'Integer, temp23819 : 'Integer, temp23816 : 'Integer, temp23817 : 'Integer, temp23878 : 'Integer, temp23815 : 'Integer, temp23876 : 'Integer, temp23877 : 'Integer, temp23826 : 'Integer, temp23827 : 'Integer, temp23824 : 'Integer, temp23825 : 'Integer, temp23822 : 'Integer, temp23823 : 'Integer, temp23820 : 'Integer, temp23821 : 'Integer, temp23866 : 'Integer, temp23867 : 'Integer, temp23864 : 'Integer, temp23865 : 'Integer, temp23862 : 'Integer, temp23863 : 'Integer, temp23860 : 'Integer, temp23861 : 'Integer, temp23874 : 'Integer, temp23875 : 'Integer, temp23872 : 'Integer, temp23873 : 'Integer, temp23870 : 'Integer, temp23871 : 'Integer, temp23868 : 'Integer, temp23869 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23838 temp23837)
 (list temp23839 temp23840)
 (list temp23836 temp23835)
 (list temp23837 temp23838)
 (list temp23842 temp23841)
 (list temp23843 temp23844)
 (list temp23840 temp23839)
 (list temp23841 temp23842)
 (list temp23830 temp23829)
 (list temp23831 temp23832)
 (list temp23828 temp23827)
 (list temp23829 temp23830)
 (list temp23834 temp23833)
 (list temp23835 temp23836)
 (list temp23832 temp23831)
 (list temp23833 temp23834)
 (list temp23822 temp23821)
 (list temp23823 temp23824)
 (list temp23820 temp23819)
 (list temp23821 temp23822)
 (list temp23826 temp23825)
 (list temp23827 temp23828)
 (list temp23824 temp23823)
 (list temp23825 temp23826)
 (list temp23815 temp23816)
 (list temp23876 temp23877)
 (list temp23877 temp23876)
 (list temp23818 temp23817)
 (list temp23819 temp23820)
 (list temp23816 temp23815)
 (list temp23817 temp23818)
 (list temp23870 temp23871)
 (list temp23871 temp23870)
 (list temp23868 temp23869)
 (list temp23869 temp23868)
 (list temp23874 temp23875)
 (list temp23875 temp23874)
 (list temp23872 temp23873)
 (list temp23873 temp23872)
 (list temp23862 temp23863)
 (list temp23863 temp23862)
 (list temp23860 temp23861)
 (list temp23861 temp23860)
 (list temp23866 temp23867)
 (list temp23867 temp23866)
 (list temp23864 temp23865)
 (list temp23865 temp23864)
 (list temp23854 temp23855)
 (list temp23855 temp23854)
 (list temp23852 temp23853)
 (list temp23853 temp23852)
 (list temp23858 temp23859)
 (list temp23859 temp23858)
 (list temp23856 temp23857)
 (list temp23857 temp23856)
 (list temp23846 temp23845)
 (list temp23844 temp23843)
 (list temp23845 temp23846)
 (list temp23850 temp23851)
 (list temp23851 temp23850)
 (list temp23848 temp23849)
 (list temp23849 temp23848))
start:
    callq read_int
    movq %rax, temp23816
    callq read_int
    movq %rax, temp23818
    callq read_int
    movq %rax, temp23820
    callq read_int
    movq %rax, temp23822
    callq read_int
    movq %rax, temp23824
    callq read_int
    movq %rax, temp23826
    callq read_int
    movq %rax, temp23828
    callq read_int
    movq %rax, temp23830
    callq read_int
    movq %rax, temp23832
    callq read_int
    movq %rax, temp23834
    callq read_int
    movq %rax, temp23836
    callq read_int
    movq %rax, temp23838
    callq read_int
    movq %rax, temp23840
    callq read_int
    movq %rax, temp23842
    callq read_int
    movq %rax, temp23844
    callq read_int
    movq %rax, temp23846
    callq read_int
    movq %rax, temp23847
    movq temp23846, temp23845
    addq temp23847, temp23845
    movq temp23844, temp23843
    subq temp23845, temp23843
    movq temp23842, temp23841
    addq temp23843, temp23841
    movq temp23840, temp23839
    addq temp23841, temp23839
    movq temp23838, temp23837
    subq temp23839, temp23837
    movq temp23836, temp23835
    addq temp23837, temp23835
    movq temp23834, temp23833
    addq temp23835, temp23833
    movq temp23832, temp23831
    addq temp23833, temp23831
    movq temp23830, temp23829
    addq temp23831, temp23829
    movq temp23828, temp23827
    subq temp23829, temp23827
    movq temp23826, temp23825
    addq temp23827, temp23825
    movq temp23824, temp23823
    addq temp23825, temp23823
    movq temp23822, temp23821
    subq temp23823, temp23821
    movq temp23820, temp23819
    addq temp23821, temp23819
    movq temp23818, temp23817
    addq temp23819, temp23817
    movq temp23816, temp23815
    addq temp23817, temp23815
    callq read_int
    movq %rax, temp23849
    callq read_int
    movq %rax, temp23851
    callq read_int
    movq %rax, temp23853
    callq read_int
    movq %rax, temp23855
    callq read_int
    movq %rax, temp23857
    callq read_int
    movq %rax, temp23859
    callq read_int
    movq %rax, temp23861
    callq read_int
    movq %rax, temp23863
    callq read_int
    movq %rax, temp23865
    callq read_int
    movq %rax, temp23867
    callq read_int
    movq %rax, temp23869
    callq read_int
    movq %rax, temp23871
    callq read_int
    movq %rax, temp23873
    callq read_int
    movq %rax, temp23875
    callq read_int
    movq %rax, temp23877
    callq read_int
    movq %rax, temp23878
    movq temp23877, temp23876
    addq temp23878, temp23876
    movq temp23875, temp23874
    subq temp23876, temp23874
    movq temp23873, temp23872
    addq temp23874, temp23872
    movq temp23871, temp23870
    addq temp23872, temp23870
    movq temp23869, temp23868
    subq temp23870, temp23868
    movq temp23867, temp23866
    addq temp23868, temp23866
    movq temp23865, temp23864
    addq temp23866, temp23864
    movq temp23863, temp23862
    addq temp23864, temp23862
    movq temp23861, temp23860
    addq temp23862, temp23860
    movq temp23859, temp23858
    subq temp23860, temp23858
    movq temp23857, temp23856
    addq temp23858, temp23856
    movq temp23855, temp23854
    addq temp23856, temp23854
    movq temp23853, temp23852
    subq temp23854, temp23852
    movq temp23851, temp23850
    addq temp23852, temp23850
    movq temp23849, temp23848
    addq temp23850, temp23848
    movq temp23815, %rax
    addq temp23848, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23850 : 'Integer, temp23851 : 'Integer, temp23848 : 'Integer, temp23849 : 'Integer, temp23846 : 'Integer, temp23847 : 'Integer, temp23844 : 'Integer, temp23845 : 'Integer, temp23858 : 'Integer, temp23859 : 'Integer, temp23856 : 'Integer, temp23857 : 'Integer, temp23854 : 'Integer, temp23855 : 'Integer, temp23852 : 'Integer, temp23853 : 'Integer, temp23834 : 'Integer, temp23835 : 'Integer, temp23832 : 'Integer, temp23833 : 'Integer, temp23830 : 'Integer, temp23831 : 'Integer, temp23828 : 'Integer, temp23829 : 'Integer, temp23842 : 'Integer, temp23843 : 'Integer, temp23840 : 'Integer, temp23841 : 'Integer, temp23838 : 'Integer, temp23839 : 'Integer, temp23836 : 'Integer, temp23837 : 'Integer, temp23818 : 'Integer, temp23819 : 'Integer, temp23816 : 'Integer, temp23817 : 'Integer, temp23878 : 'Integer, temp23815 : 'Integer, temp23876 : 'Integer, temp23877 : 'Integer, temp23826 : 'Integer, temp23827 : 'Integer, temp23824 : 'Integer, temp23825 : 'Integer, temp23822 : 'Integer, temp23823 : 'Integer, temp23820 : 'Integer, temp23821 : 'Integer, temp23866 : 'Integer, temp23867 : 'Integer, temp23864 : 'Integer, temp23865 : 'Integer, temp23862 : 'Integer, temp23863 : 'Integer, temp23860 : 'Integer, temp23861 : 'Integer, temp23874 : 'Integer, temp23875 : 'Integer, temp23872 : 'Integer, temp23873 : 'Integer, temp23870 : 'Integer, temp23871 : 'Integer, temp23868 : 'Integer, temp23869 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23838 temp23837)
 (list temp23839 temp23840)
 (list temp23836 temp23835)
 (list temp23837 temp23838)
 (list temp23842 temp23841)
 (list temp23843 temp23844)
 (list temp23840 temp23839)
 (list temp23841 temp23842)
 (list temp23830 temp23829)
 (list temp23831 temp23832)
 (list temp23828 temp23827)
 (list temp23829 temp23830)
 (list temp23834 temp23833)
 (list temp23835 temp23836)
 (list temp23832 temp23831)
 (list temp23833 temp23834)
 (list temp23822 temp23821)
 (list temp23823 temp23824)
 (list temp23820 temp23819)
 (list temp23821 temp23822)
 (list temp23826 temp23825)
 (list temp23827 temp23828)
 (list temp23824 temp23823)
 (list temp23825 temp23826)
 (list temp23815 temp23816)
 (list temp23876 temp23877)
 (list temp23877 temp23876)
 (list temp23818 temp23817)
 (list temp23819 temp23820)
 (list temp23816 temp23815)
 (list temp23817 temp23818)
 (list temp23870 temp23871)
 (list temp23871 temp23870)
 (list temp23868 temp23869)
 (list temp23869 temp23868)
 (list temp23874 temp23875)
 (list temp23875 temp23874)
 (list temp23872 temp23873)
 (list temp23873 temp23872)
 (list temp23862 temp23863)
 (list temp23863 temp23862)
 (list temp23860 temp23861)
 (list temp23861 temp23860)
 (list temp23866 temp23867)
 (list temp23867 temp23866)
 (list temp23864 temp23865)
 (list temp23865 temp23864)
 (list temp23854 temp23855)
 (list temp23855 temp23854)
 (list temp23852 temp23853)
 (list temp23853 temp23852)
 (list temp23858 temp23859)
 (list temp23859 temp23858)
 (list temp23856 temp23857)
 (list temp23857 temp23856)
 (list temp23846 temp23845)
 (list temp23844 temp23843)
 (list temp23845 temp23846)
 (list temp23850 temp23851)
 (list temp23851 temp23850)
 (list temp23848 temp23849)
 (list temp23849 temp23848))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp23869 7)
 (cons temp23871 8)
 (cons temp23873 9)
 (cons temp23875 10)
 (cons temp23861 11)
 (cons temp23863 12)
 (cons temp23865 13)
 (cons temp23867 14)
 (cons temp23877 15)
 (cons temp23815 16)
 (cons temp23853 17)
 (cons temp23855 18)
 (cons temp23857 19)
 (cons temp23859 20)
 (cons temp23849 21)
 (cons temp23851 22)
 (cons temp23878 0)
 (cons temp23876 1)
 (cons temp23874 0)
 (cons temp23872 1)
 (cons temp23870 0)
 (cons temp23868 1)
 (cons temp23866 0)
 (cons temp23864 1)
 (cons temp23862 0)
 (cons temp23818 7)
 (cons temp23820 8)
 (cons temp23822 9)
 (cons temp23824 10)
 (cons temp23826 11)
 (cons temp23816 12)
 (cons temp23836 13)
 (cons temp23838 14)
 (cons temp23840 15)
 (cons temp23842 16)
 (cons temp23828 17)
 (cons temp23830 18)
 (cons temp23832 19)
 (cons temp23834 20)
 (cons temp23844 21)
 (cons temp23846 22)
 (cons temp23847 0)
 (cons temp23845 1)
 (cons temp23843 0)
 (cons temp23841 1)
 (cons temp23839 0)
 (cons temp23837 1)
 (cons temp23835 0)
 (cons temp23833 1)
 (cons temp23831 0)
 (cons temp23829 1)
 (cons temp23860 1)
 (cons temp23858 0)
 (cons temp23827 0)
 (cons temp23825 1)
 (cons temp23856 1)
 (cons temp23854 0)
 (cons temp23823 0)
 (cons temp23821 1)
 (cons temp23852 1)
 (cons temp23850 0)
 (cons temp23848 1)
 (cons temp23819 0)
 (cons temp23817 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
12
homes
:
(list
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp))
 (cons 2 %rsi)
 (cons 18 -104(%rbp))
 (cons 3 %rdi)
 (cons 19 -112(%rbp))
 (cons 4 %r8)
 (cons 20 -120(%rbp))
 (cons 5 %r9)
 (cons 21 -128(%rbp))
 (cons 6 %r10)
 (cons 22 -136(%rbp)))
start:
    callq read_int
    movq %rax, -56(%rbp)
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %r13
    callq read_int
    movq %rax, %r14
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, -104(%rbp)
    callq read_int
    movq %rax, -112(%rbp)
    callq read_int
    movq %rax, -120(%rbp)
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, -88(%rbp)
    callq read_int
    movq %rax, -128(%rbp)
    callq read_int
    movq %rax, -136(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -136(%rbp), %rdx
    addq %rcx, %rdx
    movq -128(%rbp), %rcx
    subq %rdx, %rcx
    movq -88(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -72(%rbp), %rdx
    subq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -120(%rbp), %rdx
    addq %rcx, %rdx
    movq -112(%rbp), %rcx
    addq %rdx, %rcx
    movq -104(%rbp), %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    subq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    subq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -56(%rbp), -88(%rbp)
    addq %rdx, -88(%rbp)
    callq read_int
    movq %rax, -128(%rbp)
    callq read_int
    movq %rax, -136(%rbp)
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, -104(%rbp)
    callq read_int
    movq %rax, -112(%rbp)
    callq read_int
    movq %rax, -120(%rbp)
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, -56(%rbp)
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %r13
    callq read_int
    movq %rax, %r14
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    subq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    subq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -120(%rbp), %rcx
    subq %rdx, %rcx
    movq -112(%rbp), %rdx
    addq %rcx, %rdx
    movq -104(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    subq %rcx, %rdx
    movq -136(%rbp), %rcx
    addq %rdx, %rcx
    movq -128(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rax
    addq %rdx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23850 : 'Integer, temp23851 : 'Integer, temp23848 : 'Integer, temp23849 : 'Integer, temp23846 : 'Integer, temp23847 : 'Integer, temp23844 : 'Integer, temp23845 : 'Integer, temp23858 : 'Integer, temp23859 : 'Integer, temp23856 : 'Integer, temp23857 : 'Integer, temp23854 : 'Integer, temp23855 : 'Integer, temp23852 : 'Integer, temp23853 : 'Integer, temp23834 : 'Integer, temp23835 : 'Integer, temp23832 : 'Integer, temp23833 : 'Integer, temp23830 : 'Integer, temp23831 : 'Integer, temp23828 : 'Integer, temp23829 : 'Integer, temp23842 : 'Integer, temp23843 : 'Integer, temp23840 : 'Integer, temp23841 : 'Integer, temp23838 : 'Integer, temp23839 : 'Integer, temp23836 : 'Integer, temp23837 : 'Integer, temp23818 : 'Integer, temp23819 : 'Integer, temp23816 : 'Integer, temp23817 : 'Integer, temp23878 : 'Integer, temp23815 : 'Integer, temp23876 : 'Integer, temp23877 : 'Integer, temp23826 : 'Integer, temp23827 : 'Integer, temp23824 : 'Integer, temp23825 : 'Integer, temp23822 : 'Integer, temp23823 : 'Integer, temp23820 : 'Integer, temp23821 : 'Integer, temp23866 : 'Integer, temp23867 : 'Integer, temp23864 : 'Integer, temp23865 : 'Integer, temp23862 : 'Integer, temp23863 : 'Integer, temp23860 : 'Integer, temp23861 : 'Integer, temp23874 : 'Integer, temp23875 : 'Integer, temp23872 : 'Integer, temp23873 : 'Integer, temp23870 : 'Integer, temp23871 : 'Integer, temp23868 : 'Integer, temp23869 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23838 temp23837)
 (list temp23839 temp23840)
 (list temp23836 temp23835)
 (list temp23837 temp23838)
 (list temp23842 temp23841)
 (list temp23843 temp23844)
 (list temp23840 temp23839)
 (list temp23841 temp23842)
 (list temp23830 temp23829)
 (list temp23831 temp23832)
 (list temp23828 temp23827)
 (list temp23829 temp23830)
 (list temp23834 temp23833)
 (list temp23835 temp23836)
 (list temp23832 temp23831)
 (list temp23833 temp23834)
 (list temp23822 temp23821)
 (list temp23823 temp23824)
 (list temp23820 temp23819)
 (list temp23821 temp23822)
 (list temp23826 temp23825)
 (list temp23827 temp23828)
 (list temp23824 temp23823)
 (list temp23825 temp23826)
 (list temp23815 temp23816)
 (list temp23876 temp23877)
 (list temp23877 temp23876)
 (list temp23818 temp23817)
 (list temp23819 temp23820)
 (list temp23816 temp23815)
 (list temp23817 temp23818)
 (list temp23870 temp23871)
 (list temp23871 temp23870)
 (list temp23868 temp23869)
 (list temp23869 temp23868)
 (list temp23874 temp23875)
 (list temp23875 temp23874)
 (list temp23872 temp23873)
 (list temp23873 temp23872)
 (list temp23862 temp23863)
 (list temp23863 temp23862)
 (list temp23860 temp23861)
 (list temp23861 temp23860)
 (list temp23866 temp23867)
 (list temp23867 temp23866)
 (list temp23864 temp23865)
 (list temp23865 temp23864)
 (list temp23854 temp23855)
 (list temp23855 temp23854)
 (list temp23852 temp23853)
 (list temp23853 temp23852)
 (list temp23858 temp23859)
 (list temp23859 temp23858)
 (list temp23856 temp23857)
 (list temp23857 temp23856)
 (list temp23846 temp23845)
 (list temp23844 temp23843)
 (list temp23845 temp23846)
 (list temp23850 temp23851)
 (list temp23851 temp23850)
 (list temp23848 temp23849)
 (list temp23849 temp23848))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp23869 7)
 (cons temp23871 8)
 (cons temp23873 9)
 (cons temp23875 10)
 (cons temp23861 11)
 (cons temp23863 12)
 (cons temp23865 13)
 (cons temp23867 14)
 (cons temp23877 15)
 (cons temp23815 16)
 (cons temp23853 17)
 (cons temp23855 18)
 (cons temp23857 19)
 (cons temp23859 20)
 (cons temp23849 21)
 (cons temp23851 22)
 (cons temp23878 0)
 (cons temp23876 1)
 (cons temp23874 0)
 (cons temp23872 1)
 (cons temp23870 0)
 (cons temp23868 1)
 (cons temp23866 0)
 (cons temp23864 1)
 (cons temp23862 0)
 (cons temp23818 7)
 (cons temp23820 8)
 (cons temp23822 9)
 (cons temp23824 10)
 (cons temp23826 11)
 (cons temp23816 12)
 (cons temp23836 13)
 (cons temp23838 14)
 (cons temp23840 15)
 (cons temp23842 16)
 (cons temp23828 17)
 (cons temp23830 18)
 (cons temp23832 19)
 (cons temp23834 20)
 (cons temp23844 21)
 (cons temp23846 22)
 (cons temp23847 0)
 (cons temp23845 1)
 (cons temp23843 0)
 (cons temp23841 1)
 (cons temp23839 0)
 (cons temp23837 1)
 (cons temp23835 0)
 (cons temp23833 1)
 (cons temp23831 0)
 (cons temp23829 1)
 (cons temp23860 1)
 (cons temp23858 0)
 (cons temp23827 0)
 (cons temp23825 1)
 (cons temp23856 1)
 (cons temp23854 0)
 (cons temp23823 0)
 (cons temp23821 1)
 (cons temp23852 1)
 (cons temp23850 0)
 (cons temp23848 1)
 (cons temp23819 0)
 (cons temp23817 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
12
homes
:
(list
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp))
 (cons 2 %rsi)
 (cons 18 -104(%rbp))
 (cons 3 %rdi)
 (cons 19 -112(%rbp))
 (cons 4 %r8)
 (cons 20 -120(%rbp))
 (cons 5 %r9)
 (cons 21 -128(%rbp))
 (cons 6 %r10)
 (cons 22 -136(%rbp)))
start:
    callq read_int
    movq %rax, -56(%rbp)
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %r13
    callq read_int
    movq %rax, %r14
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, -104(%rbp)
    callq read_int
    movq %rax, -112(%rbp)
    callq read_int
    movq %rax, -120(%rbp)
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, -88(%rbp)
    callq read_int
    movq %rax, -128(%rbp)
    callq read_int
    movq %rax, -136(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -136(%rbp), %rdx
    addq %rcx, %rdx
    movq -128(%rbp), %rcx
    subq %rdx, %rcx
    movq -88(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -72(%rbp), %rdx
    subq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -120(%rbp), %rdx
    addq %rcx, %rdx
    movq -112(%rbp), %rcx
    addq %rdx, %rcx
    movq -104(%rbp), %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    subq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    subq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rax
    movq %rax, -88(%rbp)
    addq %rdx, -88(%rbp)
    callq read_int
    movq %rax, -128(%rbp)
    callq read_int
    movq %rax, -136(%rbp)
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, -104(%rbp)
    callq read_int
    movq %rax, -112(%rbp)
    callq read_int
    movq %rax, -120(%rbp)
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, -56(%rbp)
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %r13
    callq read_int
    movq %rax, %r14
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    subq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    subq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -120(%rbp), %rcx
    subq %rdx, %rcx
    movq -112(%rbp), %rdx
    addq %rcx, %rdx
    movq -104(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    subq %rcx, %rdx
    movq -136(%rbp), %rcx
    addq %rdx, %rcx
    movq -128(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rax
    addq %rdx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23850 : 'Integer, temp23851 : 'Integer, temp23848 : 'Integer, temp23849 : 'Integer, temp23846 : 'Integer, temp23847 : 'Integer, temp23844 : 'Integer, temp23845 : 'Integer, temp23858 : 'Integer, temp23859 : 'Integer, temp23856 : 'Integer, temp23857 : 'Integer, temp23854 : 'Integer, temp23855 : 'Integer, temp23852 : 'Integer, temp23853 : 'Integer, temp23834 : 'Integer, temp23835 : 'Integer, temp23832 : 'Integer, temp23833 : 'Integer, temp23830 : 'Integer, temp23831 : 'Integer, temp23828 : 'Integer, temp23829 : 'Integer, temp23842 : 'Integer, temp23843 : 'Integer, temp23840 : 'Integer, temp23841 : 'Integer, temp23838 : 'Integer, temp23839 : 'Integer, temp23836 : 'Integer, temp23837 : 'Integer, temp23818 : 'Integer, temp23819 : 'Integer, temp23816 : 'Integer, temp23817 : 'Integer, temp23878 : 'Integer, temp23815 : 'Integer, temp23876 : 'Integer, temp23877 : 'Integer, temp23826 : 'Integer, temp23827 : 'Integer, temp23824 : 'Integer, temp23825 : 'Integer, temp23822 : 'Integer, temp23823 : 'Integer, temp23820 : 'Integer, temp23821 : 'Integer, temp23866 : 'Integer, temp23867 : 'Integer, temp23864 : 'Integer, temp23865 : 'Integer, temp23862 : 'Integer, temp23863 : 'Integer, temp23860 : 'Integer, temp23861 : 'Integer, temp23874 : 'Integer, temp23875 : 'Integer, temp23872 : 'Integer, temp23873 : 'Integer, temp23870 : 'Integer, temp23871 : 'Integer, temp23868 : 'Integer, temp23869 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list temp23838 temp23837)
 (list temp23839 temp23840)
 (list temp23836 temp23835)
 (list temp23837 temp23838)
 (list temp23842 temp23841)
 (list temp23843 temp23844)
 (list temp23840 temp23839)
 (list temp23841 temp23842)
 (list temp23830 temp23829)
 (list temp23831 temp23832)
 (list temp23828 temp23827)
 (list temp23829 temp23830)
 (list temp23834 temp23833)
 (list temp23835 temp23836)
 (list temp23832 temp23831)
 (list temp23833 temp23834)
 (list temp23822 temp23821)
 (list temp23823 temp23824)
 (list temp23820 temp23819)
 (list temp23821 temp23822)
 (list temp23826 temp23825)
 (list temp23827 temp23828)
 (list temp23824 temp23823)
 (list temp23825 temp23826)
 (list temp23815 temp23816)
 (list temp23876 temp23877)
 (list temp23877 temp23876)
 (list temp23818 temp23817)
 (list temp23819 temp23820)
 (list temp23816 temp23815)
 (list temp23817 temp23818)
 (list temp23870 temp23871)
 (list temp23871 temp23870)
 (list temp23868 temp23869)
 (list temp23869 temp23868)
 (list temp23874 temp23875)
 (list temp23875 temp23874)
 (list temp23872 temp23873)
 (list temp23873 temp23872)
 (list temp23862 temp23863)
 (list temp23863 temp23862)
 (list temp23860 temp23861)
 (list temp23861 temp23860)
 (list temp23866 temp23867)
 (list temp23867 temp23866)
 (list temp23864 temp23865)
 (list temp23865 temp23864)
 (list temp23854 temp23855)
 (list temp23855 temp23854)
 (list temp23852 temp23853)
 (list temp23853 temp23852)
 (list temp23858 temp23859)
 (list temp23859 temp23858)
 (list temp23856 temp23857)
 (list temp23857 temp23856)
 (list temp23846 temp23845)
 (list temp23844 temp23843)
 (list temp23845 temp23846)
 (list temp23850 temp23851)
 (list temp23851 temp23850)
 (list temp23848 temp23849)
 (list temp23849 temp23848))
colors
:
(list
 (cons %rsp -2)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r9 5)
 (cons %rax -1)
 (cons %r8 4)
 (cons %rcx 0)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %rdx 1)
 (cons temp23869 7)
 (cons temp23871 8)
 (cons temp23873 9)
 (cons temp23875 10)
 (cons temp23861 11)
 (cons temp23863 12)
 (cons temp23865 13)
 (cons temp23867 14)
 (cons temp23877 15)
 (cons temp23815 16)
 (cons temp23853 17)
 (cons temp23855 18)
 (cons temp23857 19)
 (cons temp23859 20)
 (cons temp23849 21)
 (cons temp23851 22)
 (cons temp23878 0)
 (cons temp23876 1)
 (cons temp23874 0)
 (cons temp23872 1)
 (cons temp23870 0)
 (cons temp23868 1)
 (cons temp23866 0)
 (cons temp23864 1)
 (cons temp23862 0)
 (cons temp23818 7)
 (cons temp23820 8)
 (cons temp23822 9)
 (cons temp23824 10)
 (cons temp23826 11)
 (cons temp23816 12)
 (cons temp23836 13)
 (cons temp23838 14)
 (cons temp23840 15)
 (cons temp23842 16)
 (cons temp23828 17)
 (cons temp23830 18)
 (cons temp23832 19)
 (cons temp23834 20)
 (cons temp23844 21)
 (cons temp23846 22)
 (cons temp23847 0)
 (cons temp23845 1)
 (cons temp23843 0)
 (cons temp23841 1)
 (cons temp23839 0)
 (cons temp23837 1)
 (cons temp23835 0)
 (cons temp23833 1)
 (cons temp23831 0)
 (cons temp23829 1)
 (cons temp23860 1)
 (cons temp23858 0)
 (cons temp23827 0)
 (cons temp23825 1)
 (cons temp23856 1)
 (cons temp23854 0)
 (cons temp23823 0)
 (cons temp23821 1)
 (cons temp23852 1)
 (cons temp23850 0)
 (cons temp23848 1)
 (cons temp23819 0)
 (cons temp23817 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
12
homes
:
(list
 (cons 7 %rbx)
 (cons 8 %r12)
 (cons 9 %r13)
 (cons 10 %r14)
 (cons 11 -48(%rbp))
 (cons 12 -56(%rbp))
 (cons 13 -64(%rbp))
 (cons 14 -72(%rbp))
 (cons 15 -80(%rbp))
 (cons 0 %rcx)
 (cons 16 -88(%rbp))
 (cons 1 %rdx)
 (cons 17 -96(%rbp))
 (cons 2 %rsi)
 (cons 18 -104(%rbp))
 (cons 3 %rdi)
 (cons 19 -112(%rbp))
 (cons 4 %r8)
 (cons 20 -120(%rbp))
 (cons 5 %r9)
 (cons 21 -128(%rbp))
 (cons 6 %r10)
 (cons 22 -136(%rbp)))
start:
    callq read_int
    movq %rax, -56(%rbp)
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %r13
    callq read_int
    movq %rax, %r14
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, -104(%rbp)
    callq read_int
    movq %rax, -112(%rbp)
    callq read_int
    movq %rax, -120(%rbp)
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, -88(%rbp)
    callq read_int
    movq %rax, -128(%rbp)
    callq read_int
    movq %rax, -136(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -136(%rbp), %rdx
    addq %rcx, %rdx
    movq -128(%rbp), %rcx
    subq %rdx, %rcx
    movq -88(%rbp), %rdx
    addq %rcx, %rdx
    movq -80(%rbp), %rcx
    addq %rdx, %rcx
    movq -72(%rbp), %rdx
    subq %rcx, %rdx
    movq -64(%rbp), %rcx
    addq %rdx, %rcx
    movq -120(%rbp), %rdx
    addq %rcx, %rdx
    movq -112(%rbp), %rcx
    addq %rdx, %rcx
    movq -104(%rbp), %rdx
    addq %rcx, %rdx
    movq -96(%rbp), %rcx
    subq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    addq %rdx, %rcx
    movq %r13, %rdx
    subq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rax
    movq %rax, -88(%rbp)
    addq %rdx, -88(%rbp)
    callq read_int
    movq %rax, -128(%rbp)
    callq read_int
    movq %rax, -136(%rbp)
    callq read_int
    movq %rax, -96(%rbp)
    callq read_int
    movq %rax, -104(%rbp)
    callq read_int
    movq %rax, -112(%rbp)
    callq read_int
    movq %rax, -120(%rbp)
    callq read_int
    movq %rax, -48(%rbp)
    callq read_int
    movq %rax, -56(%rbp)
    callq read_int
    movq %rax, -64(%rbp)
    callq read_int
    movq %rax, -72(%rbp)
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %r12
    callq read_int
    movq %rax, %r13
    callq read_int
    movq %rax, %r14
    callq read_int
    movq %rax, -80(%rbp)
    callq read_int
    movq %rax, %rcx
    movq -80(%rbp), %rdx
    addq %rcx, %rdx
    movq %r14, %rcx
    subq %rdx, %rcx
    movq %r13, %rdx
    addq %rcx, %rdx
    movq %r12, %rcx
    addq %rdx, %rcx
    movq %rbx, %rdx
    subq %rcx, %rdx
    movq -72(%rbp), %rcx
    addq %rdx, %rcx
    movq -64(%rbp), %rdx
    addq %rcx, %rdx
    movq -56(%rbp), %rcx
    addq %rdx, %rcx
    movq -48(%rbp), %rdx
    addq %rcx, %rdx
    movq -120(%rbp), %rcx
    subq %rdx, %rcx
    movq -112(%rbp), %rdx
    addq %rcx, %rdx
    movq -104(%rbp), %rcx
    addq %rdx, %rcx
    movq -96(%rbp), %rdx
    subq %rcx, %rdx
    movq -136(%rbp), %rcx
    addq %rdx, %rcx
    movq -128(%rbp), %rdx
    addq %rcx, %rdx
    movq -88(%rbp), %rax
    addq %rdx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $104, %rsp
    jmp start
    
conclusion:
    addq $104, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, -56(%rbp)
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %r12
	callq	_read_int
	movq	%rax, %r13
	callq	_read_int
	movq	%rax, %r14
	callq	_read_int
	movq	%rax, -48(%rbp)
	callq	_read_int
	movq	%rax, -96(%rbp)
	callq	_read_int
	movq	%rax, -104(%rbp)
	callq	_read_int
	movq	%rax, -112(%rbp)
	callq	_read_int
	movq	%rax, -120(%rbp)
	callq	_read_int
	movq	%rax, -64(%rbp)
	callq	_read_int
	movq	%rax, -72(%rbp)
	callq	_read_int
	movq	%rax, -80(%rbp)
	callq	_read_int
	movq	%rax, -88(%rbp)
	callq	_read_int
	movq	%rax, -128(%rbp)
	callq	_read_int
	movq	%rax, -136(%rbp)
	callq	_read_int
	movq	%rax, %rcx
	movq	-136(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-128(%rbp), %rcx
	subq	%rdx, %rcx
	movq	-88(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-80(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-72(%rbp), %rdx
	subq	%rcx, %rdx
	movq	-64(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-120(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-112(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-104(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-96(%rbp), %rcx
	subq	%rdx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%r14, %rcx
	addq	%rdx, %rcx
	movq	%r13, %rdx
	subq	%rcx, %rdx
	movq	%r12, %rcx
	addq	%rdx, %rcx
	movq	%rbx, %rdx
	addq	%rcx, %rdx
	movq	-56(%rbp), %rax
	movq	%rax, -88(%rbp)
	addq	%rdx, -88(%rbp)
	callq	_read_int
	movq	%rax, -128(%rbp)
	callq	_read_int
	movq	%rax, -136(%rbp)
	callq	_read_int
	movq	%rax, -96(%rbp)
	callq	_read_int
	movq	%rax, -104(%rbp)
	callq	_read_int
	movq	%rax, -112(%rbp)
	callq	_read_int
	movq	%rax, -120(%rbp)
	callq	_read_int
	movq	%rax, -48(%rbp)
	callq	_read_int
	movq	%rax, -56(%rbp)
	callq	_read_int
	movq	%rax, -64(%rbp)
	callq	_read_int
	movq	%rax, -72(%rbp)
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %r12
	callq	_read_int
	movq	%rax, %r13
	callq	_read_int
	movq	%rax, %r14
	callq	_read_int
	movq	%rax, -80(%rbp)
	callq	_read_int
	movq	%rax, %rcx
	movq	-80(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%r14, %rcx
	subq	%rdx, %rcx
	movq	%r13, %rdx
	addq	%rcx, %rdx
	movq	%r12, %rcx
	addq	%rdx, %rcx
	movq	%rbx, %rdx
	subq	%rcx, %rdx
	movq	-72(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-64(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-56(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-120(%rbp), %rcx
	subq	%rdx, %rcx
	movq	-112(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-104(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-96(%rbp), %rdx
	subq	%rcx, %rdx
	movq	-136(%rbp), %rcx
	addq	%rdx, %rcx
	movq	-128(%rbp), %rdx
	addq	%rcx, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$104, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_20.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (let ([x (read)])
            (- x))])
   (- (let ([y (read)])
         (+ x y)) (+ (read) 5)))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (let ([x (read)])
            (- x))])
   (- (let ([y (read)])
         (+ x y)) (+ (read) 5)))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23879 (let ([x23880 (read)])
                 (- x23880))])
   (- (let ([y23881 (read)])
         (+ x23879 y23881)) (+ (read) 5)))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23879 (let ([x23880 (read)])
                 (- x23880))])
   (let ([y23881 (read)])
      (let ([temp23885 (+ x23879 y23881)])
         (let ([temp23889 (read)])
            (let ([temp23888 (+ temp23889 5)])
               (- temp23885 temp23888))))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x23880 = (read);
    x23879 = (- x23880);
    y23881 = (read);
    temp23885 = (+ x23879 y23881);
    temp23889 = (read);
    temp23888 = (+ temp23889 5);
    return (- temp23885 temp23888);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23888 : 'Integer, x23880 : 'Integer, temp23889 : 'Integer, y23881 : 'Integer, x23879 : 'Integer, temp23885 : 'Integer, 
start:
    callq read_int
    movq %rax, x23880
    movq x23880, x23879
    negq x23879
    callq read_int
    movq %rax, y23881
    movq x23879, temp23885
    addq y23881, temp23885
    callq read_int
    movq %rax, temp23889
    movq temp23889, temp23888
    addq $5, temp23888
    movq temp23885, %rax
    subq temp23888, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23888 : 'Integer, x23880 : 'Integer, temp23889 : 'Integer, y23881 : 'Integer, x23879 : 'Integer, temp23885 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set x23880 %rsp)
 (set x23879 %rsp)
 (set x23879 %rsp)
 (set %rax x23879 %rsp)
 (set x23879 y23881 %rsp)
 (set y23881 temp23885 %rsp)
 (set temp23885 %rsp)
 (set %rax temp23885 %rsp)
 (set temp23885 temp23889 %rsp)
 (set temp23885 temp23888 %rsp)
 (set temp23885 temp23888 %rsp)
 (set %rax temp23888 %rsp)
 (set %rax %rsp))
callq read_int
movq %rax, x23880
movq x23880, x23879
negq x23879
callq read_int
movq %rax, y23881
movq x23879, temp23885
addq y23881, temp23885
callq read_int
movq %rax, temp23889
movq temp23889, temp23888
addq $5, temp23888
movq temp23885, %rax
subq temp23888, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23888 : 'Integer, x23880 : 'Integer, temp23889 : 'Integer, y23881 : 'Integer, x23879 : 'Integer, temp23885 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x23879 x23880)
 (list x23879 temp23885)
 (list temp23885 x23879)
 (list temp23888 temp23889)
 (list x23880 x23879)
 (list temp23889 temp23888))
start:
    callq read_int
    movq %rax, x23880
    movq x23880, x23879
    negq x23879
    callq read_int
    movq %rax, y23881
    movq x23879, temp23885
    addq y23881, temp23885
    callq read_int
    movq %rax, temp23889
    movq temp23889, temp23888
    addq $5, temp23888
    movq temp23885, %rax
    subq temp23888, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23888 : 'Integer, x23880 : 'Integer, temp23889 : 'Integer, y23881 : 'Integer, x23879 : 'Integer, temp23885 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x23879 x23880)
 (list x23879 temp23885)
 (list temp23885 x23879)
 (list temp23888 temp23889)
 (list x23880 x23879)
 (list temp23889 temp23888))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23885 7)
 (cons x23879 7)
 (cons temp23888 0)
 (cons y23881 0)
 (cons temp23889 0)
 (cons x23880 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rcx
    movq %rcx, %rbx
    negq %rbx
    callq read_int
    movq %rax, %rcx
    movq %rbx, %rbx
    addq %rcx, %rbx
    callq read_int
    movq %rax, %rcx
    movq %rcx, %rcx
    addq $5, %rcx
    movq %rbx, %rax
    subq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23888 : 'Integer, x23880 : 'Integer, temp23889 : 'Integer, y23881 : 'Integer, x23879 : 'Integer, temp23885 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x23879 x23880)
 (list x23879 temp23885)
 (list temp23885 x23879)
 (list temp23888 temp23889)
 (list x23880 x23879)
 (list temp23889 temp23888))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23885 7)
 (cons x23879 7)
 (cons temp23888 0)
 (cons y23881 0)
 (cons temp23889 0)
 (cons x23880 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rcx
    movq %rcx, %rbx
    negq %rbx
    callq read_int
    movq %rax, %rcx
    addq %rcx, %rbx
    callq read_int
    movq %rax, %rcx
    addq $5, %rcx
    movq %rbx, %rax
    subq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23888 : 'Integer, x23880 : 'Integer, temp23889 : 'Integer, y23881 : 'Integer, x23879 : 'Integer, temp23885 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list x23879 x23880)
 (list x23879 temp23885)
 (list temp23885 x23879)
 (list temp23888 temp23889)
 (list x23880 x23879)
 (list temp23889 temp23888))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons temp23885 7)
 (cons x23879 7)
 (cons temp23888 0)
 (cons y23881 0)
 (cons temp23889 0)
 (cons x23880 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rcx
    movq %rcx, %rbx
    negq %rbx
    callq read_int
    movq %rax, %rcx
    addq %rcx, %rbx
    callq read_int
    movq %rax, %rcx
    addq $5, %rcx
    movq %rbx, %rax
    subq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	callq	_read_int
	movq	%rax, %rcx
	addq	%rcx, %rbx
	callq	_read_int
	movq	%rax, %rcx
	addq	$5, %rcx
	movq	%rbx, %rax
	subq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_21.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([x (read)])
   (let ([y (read)])
      (+ (+ x y) 42)))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x (read)])
   (let ([y (read)])
      (+ (+ x y) 42)))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23890 (read)])
   (let ([y23891 (read)])
      (+ (+ x23890 y23891) 42)))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([x23890 (read)])
   (let ([y23891 (read)])
      (let ([temp23895 (+ x23890 y23891)])
         (+ temp23895 42))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    x23890 = (read);
    y23891 = (read);
    temp23895 = (+ x23890 y23891);
    return (+ temp23895 42);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23890 : 'Integer, y23891 : 'Integer, temp23895 : 'Integer, 
start:
    callq read_int
    movq %rax, x23890
    callq read_int
    movq %rax, y23891
    movq x23890, temp23895
    addq y23891, temp23895
    movq temp23895, %rax
    addq $42, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23890 : 'Integer, y23891 : 'Integer, temp23895 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set %rax %rsp)
 (set x23890 %rsp)
 (set %rax x23890 %rsp)
 (set x23890 y23891 %rsp)
 (set temp23895 y23891 %rsp)
 (set temp23895 %rsp)
 (set %rax %rsp)
 (set %rax %rsp))
callq read_int
movq %rax, x23890
callq read_int
movq %rax, y23891
movq x23890, temp23895
addq y23891, temp23895
movq temp23895, %rax
addq $42, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23890 : 'Integer, y23891 : 'Integer, temp23895 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23895 x23890) (list x23890 temp23895))
start:
    callq read_int
    movq %rax, x23890
    callq read_int
    movq %rax, y23891
    movq x23890, temp23895
    addq y23891, temp23895
    movq temp23895, %rax
    addq $42, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23890 : 'Integer, y23891 : 'Integer, temp23895 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23895 x23890) (list x23890 temp23895))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x23890 7)
 (cons y23891 0)
 (cons temp23895 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %rdx, %rax
    addq $42, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23890 : 'Integer, y23891 : 'Integer, temp23895 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23895 x23890) (list x23890 temp23895))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x23890 7)
 (cons y23891 0)
 (cons temp23895 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %rdx, %rax
    addq $42, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23890 : 'Integer, y23891 : 'Integer, temp23895 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list (list temp23895 x23890) (list x23890 temp23895))
colors
:
(list
 (cons %rsp -2)
 (cons %rax -1)
 (cons %r11 -4)
 (cons %rsi 2)
 (cons %r8 4)
 (cons %r10 6)
 (cons %rdi 3)
 (cons %r9 5)
 (cons %rcx 0)
 (cons %rdx 1)
 (cons x23890 7)
 (cons y23891 0)
 (cons temp23895 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list
 (cons 0 %rcx)
 (cons 1 %rdx)
 (cons 2 %rsi)
 (cons 3 %rdi)
 (cons 4 %r8)
 (cons 5 %r9)
 (cons 6 %r10)
 (cons 7 %rbx))
start:
    callq read_int
    movq %rax, %rbx
    callq read_int
    movq %rax, %rcx
    movq %rbx, %rdx
    addq %rcx, %rdx
    movq %rdx, %rax
    addq $42, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	callq	_read_int
	movq	%rax, %rbx
	callq	_read_int
	movq	%rax, %rcx
	movq	%rbx, %rdx
	addq	%rcx, %rdx
	movq	%rdx, %rax
	addq	$42, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_22.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(let ([v 1])
   (let ([w 42])
      (let ([x (+ v 7)])
         (let ([y x])
            (let ([z (+ x w)])
               (+ z (- y)))))))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([v 1])
   (let ([w 42])
      (let ([x (+ v 7)])
         (let ([y x])
            (let ([z (+ x w)])
               (+ z (- y)))))))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([v23896 1])
   (let ([w23897 42])
      (let ([x23898 (+ v23896 7)])
         (let ([y23899 x23898])
            (let ([z23900 (+ x23898 w23897)])
               (+ z23900 (- y23899)))))))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([v23896 1])
   (let ([w23897 42])
      (let ([x23898 (+ v23896 7)])
         (let ([y23899 x23898])
            (let ([z23900 (+ x23898 w23897)])
               (let ([temp23904 (- y23899)])
                  (+ z23900 temp23904)))))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    v23896 = 1;
    w23897 = 42;
    x23898 = (+ v23896 7);
    y23899 = x23898;
    z23900 = (+ x23898 w23897);
    temp23904 = (- y23899);
    return (+ z23900 temp23904);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23898 : 'Integer, y23899 : 'Integer, temp23904 : 'Integer, v23896 : 'Integer, w23897 : 'Integer, z23900 : 'Integer, 
start:
    movq $1, v23896
    movq $42, w23897
    movq v23896, x23898
    addq $7, x23898
    movq x23898, y23899
    movq x23898, z23900
    addq w23897, z23900
    movq y23899, temp23904
    negq temp23904
    movq z23900, %rax
    addq temp23904, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23898 : 'Integer, y23899 : 'Integer, temp23904 : 'Integer, v23896 : 'Integer, w23897 : 'Integer, z23900 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set v23896 %rsp)
 (set v23896 w23897 %rsp)
 (set w23897 x23898 %rsp)
 (set w23897 x23898 %rsp)
 (set w23897 x23898 y23899 %rsp)
 (set w23897 y23899 z23900 %rsp)
 (set y23899 z23900 %rsp)
 (set z23900 temp23904 %rsp)
 (set z23900 temp23904 %rsp)
 (set %rax temp23904 %rsp)
 (set %rax %rsp))
movq $1, v23896
movq $42, w23897
movq v23896, x23898
addq $7, x23898
movq x23898, y23899
movq x23898, z23900
addq w23897, z23900
movq y23899, temp23904
negq temp23904
movq z23900, %rax
addq temp23904, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23898 : 'Integer, y23899 : 'Integer, temp23904 : 'Integer, v23896 : 'Integer, w23897 : 'Integer, z23900 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list z23900 x23898)
 (list x23898 v23896)
 (list x23898 y23899)
 (list x23898 z23900)
 (list y23899 x23898)
 (list y23899 temp23904)
 (list temp23904 y23899)
 (list v23896 x23898))
start:
    movq $1, v23896
    movq $42, w23897
    movq v23896, x23898
    addq $7, x23898
    movq x23898, y23899
    movq x23898, z23900
    addq w23897, z23900
    movq y23899, temp23904
    negq temp23904
    movq z23900, %rax
    addq temp23904, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23898 : 'Integer, y23899 : 'Integer, temp23904 : 'Integer, v23896 : 'Integer, w23897 : 'Integer, z23900 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list z23900 x23898)
 (list x23898 v23896)
 (list x23898 y23899)
 (list x23898 z23900)
 (list y23899 x23898)
 (list y23899 temp23904)
 (list temp23904 y23899)
 (list v23896 x23898))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23904 0)
 (cons z23900 1)
 (cons w23897 0)
 (cons y23899 2)
 (cons v23896 1)
 (cons x23898 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi))
start:
    movq $1, %rdx
    movq $42, %rcx
    movq %rdx, %rdx
    addq $7, %rdx
    movq %rdx, %rsi
    movq %rdx, %rdx
    addq %rcx, %rdx
    movq %rsi, %rcx
    negq %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23898 : 'Integer, y23899 : 'Integer, temp23904 : 'Integer, v23896 : 'Integer, w23897 : 'Integer, z23900 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list z23900 x23898)
 (list x23898 v23896)
 (list x23898 y23899)
 (list x23898 z23900)
 (list y23899 x23898)
 (list y23899 temp23904)
 (list temp23904 y23899)
 (list v23896 x23898))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23904 0)
 (cons z23900 1)
 (cons w23897 0)
 (cons y23899 2)
 (cons v23896 1)
 (cons x23898 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi))
start:
    movq $1, %rdx
    movq $42, %rcx
    addq $7, %rdx
    movq %rdx, %rsi
    addq %rcx, %rdx
    movq %rsi, %rcx
    negq %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    x23898 : 'Integer, y23899 : 'Integer, temp23904 : 'Integer, v23896 : 'Integer, w23897 : 'Integer, z23900 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
(list
 (list z23900 x23898)
 (list x23898 v23896)
 (list x23898 y23899)
 (list x23898 z23900)
 (list y23899 x23898)
 (list y23899 temp23904)
 (list temp23904 y23899)
 (list v23896 x23898))
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23904 0)
 (cons z23900 1)
 (cons w23897 0)
 (cons y23899 2)
 (cons v23896 1)
 (cons x23898 1))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx) (cons 2 %rsi))
start:
    movq $1, %rdx
    movq $42, %rcx
    addq $7, %rdx
    movq %rdx, %rsi
    addq %rcx, %rdx
    movq %rsi, %rcx
    negq %rcx
    movq %rdx, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$1, %rdx
	movq	$42, %rcx
	addq	$7, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rdx
	movq	%rsi, %rcx
	negq	%rcx
	movq	%rdx, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


testing @ utilities.rkt:2099
prog-file-name:
"./tests/var_test_23.rkt"


compile-file: output of type check @ utilities.rkt:2106
tsexp:
program:
(+ 6 (- 5 (+ 5 (- 5 0))))


compiling, running pass: shrink @ utilities.rkt:2119

shrink output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 6 (- 5 (+ 5 (- 5 0))))


type checking... @ utilities.rkt:2125

compiling, running pass: uniquify @ utilities.rkt:2119

uniquify output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(+ 6 (- 5 (+ 5 (- 5 0))))


type checking... @ utilities.rkt:2125

compiling, running pass: remove complex opera* @ utilities.rkt:2119

remove complex opera* output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
(let ([temp23908 (- 5 0)])
   (let ([temp23907 (+ 5 temp23908)])
      (let ([temp23906 (- 5 temp23907)])
         (+ 6 temp23906))))


type checking... @ utilities.rkt:2125

compiling, running pass: explicate control @ utilities.rkt:2119

explicate control output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
start:
    temp23908 = (- 5 0);
    temp23907 = (+ 5 temp23908);
    temp23906 = (- 5 temp23907);
    return (+ 6 temp23906);



type checking... @ utilities.rkt:2125

compiling, running pass: instruction selection @ utilities.rkt:2119

instruction selection output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23906 : 'Integer, temp23907 : 'Integer, temp23908 : 'Integer, 
start:
    movq $5, temp23908
    subq $0, temp23908
    movq $5, temp23907
    addq temp23908, temp23907
    movq $5, temp23906
    subq temp23907, temp23906
    movq $6, %rax
    addq temp23906, %rax
    jmp conclusion
    



compiling, running pass: liveness analysis @ utilities.rkt:2119

liveness analysis output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23906 : 'Integer, temp23907 : 'Integer, temp23908 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
start:
    liveness
:
(list
 (set %rsp)
 (set temp23908 %rsp)
 (set temp23908 %rsp)
 (set temp23908 temp23907 %rsp)
 (set temp23907 %rsp)
 (set temp23906 temp23907 %rsp)
 (set temp23906 %rsp)
 (set %rax temp23906 %rsp)
 (set %rax %rsp))
movq $5, temp23908
subq $0, temp23908
movq $5, temp23907
addq temp23908, temp23907
movq $5, temp23906
subq temp23907, temp23906
movq $6, %rax
addq temp23906, %rax
jmp conclusion




compiling, running pass: build interference @ utilities.rkt:2119

build interference output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23906 : 'Integer, temp23907 : 'Integer, temp23908 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
start:
    movq $5, temp23908
    subq $0, temp23908
    movq $5, temp23907
    addq temp23908, temp23907
    movq $5, temp23906
    subq temp23907, temp23906
    movq $6, %rax
    addq temp23906, %rax
    jmp conclusion
    



compiling, running pass: allocate registers @ utilities.rkt:2119

allocate registers output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23906 : 'Integer, temp23907 : 'Integer, temp23908 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23906 0)
 (cons temp23907 1)
 (cons temp23908 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $5, %rcx
    subq $0, %rcx
    movq $5, %rdx
    addq %rcx, %rdx
    movq $5, %rcx
    subq %rdx, %rcx
    movq $6, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: patch instructions @ utilities.rkt:2119

patch instructions output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23906 : 'Integer, temp23907 : 'Integer, temp23908 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23906 0)
 (cons temp23907 1)
 (cons temp23908 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $5, %rcx
    subq $0, %rcx
    movq $5, %rdx
    addq %rcx, %rdx
    movq $5, %rcx
    subq %rdx, %rcx
    movq $6, %rax
    addq %rcx, %rax
    jmp conclusion
    



compiling, running pass: prelude-and-conclusion @ utilities.rkt:2119

prelude-and-conclusion output:  @ utilities.rkt:2123
(strip-has-type new-p^):
program:
locals-types:
    temp23906 : 'Integer, temp23907 : 'Integer, temp23908 : 'Integer, 
tsorted
:
'(start)
CFG
:
#<multigraph>
conflicts
:
#<unweighted-graph>
move-graph
:
#<unweighted-graph>
mg-edges
:
'()
colors
:
(list
 (cons %rax -1)
 (cons %rsp -2)
 (cons temp23906 0)
 (cons temp23907 1)
 (cons temp23908 0))
used_callee
:
(list %rbx %r12 %r13 %r14 %r15)
num_spilled
:
0
homes
:
(list (cons 0 %rcx) (cons 1 %rdx))
start:
    movq $5, %rcx
    subq $0, %rcx
    movq $5, %rdx
    addq %rcx, %rdx
    movq $5, %rcx
    subq %rdx, %rcx
    movq $6, %rax
    addq %rcx, %rax
    jmp conclusion
    
main:
    pushq %rbp
    movq %rsp, %rbp
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    subq $8, %rsp
    jmp start
    
conclusion:
    addq $8, %rsp
    popq %rbx
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rbp
    retq
    



x86 output:
	.align 16
_start:
	movq	$5, %rcx
	subq	$0, %rcx
	movq	$5, %rdx
	addq	%rcx, %rdx
	movq	$5, %rcx
	subq	%rdx, %rcx
	movq	$6, %rax
	addq	%rcx, %rax
	jmp _conclusion

	.globl _main
	.align 16
_main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	subq	$8, %rsp
	jmp _start

	.align 16
_conclusion:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq


23 success(es) 0 failure(s) 0 error(s) 23 test(s) run
0
